// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: serializable_data.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace jtshared {

  /// <summary>Holder for reflection information generated from serializable_data.proto</summary>
  public static partial class SerializableDataReflection {

    #region Descriptor
    /// <summary>File descriptor for serializable_data.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static SerializableDataReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChdzZXJpYWxpemFibGVfZGF0YS5wcm90bxIIanRzaGFyZWQibgoTQXV0aFRv",
            "a2VuVW5kZXJseWluZxIRCglwbGF5ZXJfaWQYASABKAkSFwoPZnJvbV9hdXRo",
            "c3J2X2lkGAIgASgNEhcKD3RvX2JhdHRsZXNydl9pZBgDIAEoDRISCgpleHBp",
            "cmVzX2F0GAQgASgDIvkBCgpBdXRoUmVzdWx0EhAKCHJldF9jb2RlGAEgASgF",
            "Eg0KBXVuYW1lGAIgASgJEg8KB2NhcHRjaGEYAyABKAkSEgoKZXhwaXJlc19h",
            "dBgEIAEoAxIRCglwbGF5ZXJfaWQYBSABKAkSFgoObmV3X2F1dGhfdG9rZW4Y",
            "BiABKAkSGgoSbmV3X2F1dGhfdG9rZW5fc2lnGAcgASgJEiEKGWNhcHRjaGFf",
            "c3VibWl0X2F1dGhzcnZfaWQYCCABKA0SHwoXYmF0dGxlc3J2X2hvc3RuYW1l",
            "X29ubHkYCSABKAkSGgoSYmF0dGxlc3J2X2VuZHBvaW50GAogASgJIo0BCihT",
            "dGVhbUF1dGhlbnRpY2F0ZVVzZXJUaWNrZXRQYXlsb2FkUGFyYW1zEg4KBnJl",
            "c3VsdBgBIAEoCRIPCgdzdGVhbWlkGAIgASgJEhQKDG93bmVyc3RlYW1pZBgD",
            "IAEoCRIRCgl2YWNiYW5uZWQYBCABKAgSFwoPcHVibGlzaGVyYmFubmVkGAUg",
            "ASgIImwKJlN0ZWFtQXV0aGVudGljYXRlVXNlclRpY2tldFBheWxvYWRSZXNw",
            "EkIKBnBhcmFtcxgBIAEoCzIyLmp0c2hhcmVkLlN0ZWFtQXV0aGVudGljYXRl",
            "VXNlclRpY2tldFBheWxvYWRQYXJhbXMiZwohU3RlYW1BdXRoZW50aWNhdGVV",
            "c2VyVGlja2V0UmVzdWx0EkIKCHJlc3BvbnNlGAEgASgLMjAuanRzaGFyZWQu",
            "U3RlYW1BdXRoZW50aWNhdGVVc2VyVGlja2V0UGF5bG9hZFJlc3AigAEKEEJh",
            "dHRsZUludml0YXRpb24SFgoOZnJvbV9wbGF5ZXJfaWQYASABKAkSFwoPdG9f",
            "YmF0dGxlc3J2X2lkGAIgASgNEhUKDWJvdW5kX3Jvb21faWQYAyABKAUSEgoK",
            "ZXhwaXJlc19hdBgEIAEoAxIQCghwYXNzY29kZRgFIAEoCSLMHAoPQ2hhcmFj",
            "dGVyQ29uZmlnEhIKCnNwZWNpZXNfaWQYASABKA0SFAoMc3BlY2llc19uYW1l",
            "GAIgASgJEgoKAmhwGAMgASgFEgoKAm1wGAQgASgFEhcKD2xheV9kb3duX2Zy",
            "YW1lcxgFIAEoBRIiChpsYXlfZG93bl9mcmFtZXNfdG9fcmVjb3ZlchgGIAEo",
            "BRIgChhnZXRfdXBfaW52aW5zaWJsZV9mcmFtZXMYByABKAUSIAoYZ2V0X3Vw",
            "X2ZyYW1lc190b19yZWNvdmVyGAggASgFEg0KBXNwZWVkGAkgASgCEh0KFW1w",
            "X3JlZ2VuX3Blcl9pbnRlcnZhbBgKIAEoBRIZChFtcF9yZWdlbl9pbnRlcnZh",
            "bBgLIAEoBRIaChJqdW1waW5nX2luaXRfdmVsX3kYDCABKAISIQoZaW5lcnRp",
            "YV9mcmFtZXNfdG9fcmVjb3ZlchgNIAEoBRIXCg9kYXNoaW5nX2VuYWJsZWQY",
            "DiABKAgSFwoPc2xpZGluZ19lbmFibGVkGA8gASgIEhcKD29uX3dhbGxfZW5h",
            "YmxlZBgQIAEoCBIZChFjcm91Y2hpbmdfZW5hYmxlZBgRIAEoCBIdChVjcm91",
            "Y2hpbmdfYXRrX2VuYWJsZWQYEiABKAgSJgoed2FsbF9qdW1waW5nX2ZyYW1l",
            "c190b19yZWNvdmVyGBMgASgFEh8KF3dhbGxfanVtcGluZ19pbml0X3ZlbF94",
            "GBQgASgCEh8KF3dhbGxfanVtcGluZ19pbml0X3ZlbF95GBUgASgCEhoKEndh",
            "bGxfc2xpZGluZ192ZWxfeRgWIAEoAhIZChFtaW5fZmFsbGluZ192ZWxfeRgX",
            "IAEoAhIbChNtYXhfYXNjZW5kaW5nX3ZlbF95GBggASgCEhoKEmF0azFfdXNl",
            "c19tYWdhemluZRgZIAEoCBI3Ci9ncm91bmRfZG9kZ2VfZW5hYmxlZF9ieV9p",
            "dl9zbG90X2NfaW5fYmxvY2tfc3R1bhgaIAEoCBI2Ci5ncm91bmRfZG9kZ2Vf",
            "ZW5hYmxlZF9ieV9yZGZfY250X2Zyb21fYmVnaW5uaW5nGBsgASgFEicKH2dy",
            "b3VuZF9kb2RnZWRfZnJhbWVzX3RvX3JlY292ZXIYHCABKAUSJwofZ3JvdW5k",
            "X2RvZGdlZF9mcmFtZXNfaW52aW5zaWJsZRgdIAEoBRIbChNncm91bmRfZG9k",
            "Z2VkX3NwZWVkGB4gASgCEhcKD3Zpc2lvbl9vZmZzZXRfeBgfIAEoAhIXCg92",
            "aXNpb25fb2Zmc2V0X3kYICABKAISFQoNdmlzaW9uX3NpemVfeBghIAEoAhIV",
            "Cg12aXNpb25fc2l6ZV95GCIgASgCEhYKDmNhcHN1bGVfcmFkaXVzGCMgASgC",
            "EhsKE2NhcHN1bGVfaGFsZl9oZWlnaHQYJCABKAISHwoXc2hyaW5rZWRfY2Fw",
            "c3VsZV9yYWRpdXMYJSABKAISJAocc2hyaW5rZWRfY2Fwc3VsZV9oYWxmX2hl",
            "aWdodBgmIAEoAhIfChdsYXlfZG93bl9jYXBzdWxlX3JhZGl1cxgnIAEoAhIk",
            "ChxsYXlfZG93bl9jYXBzdWxlX2hhbGZfaGVpZ2h0GCggASgCEhwKFGR5aW5n",
            "X2NhcHN1bGVfcmFkaXVzGCkgASgCEiEKGWR5aW5nX2NhcHN1bGVfaGFsZl9o",
            "ZWlnaHQYKiABKAISHQoVZGltbWVkX2NhcHN1bGVfcmFkaXVzGCsgASgCEiIK",
            "GmRpbW1lZF9jYXBzdWxlX2hhbGZfaGVpZ2h0GCwgASgCEh4KFmFudGlfZ3Jh",
            "dml0eV93aGVuX2lkbGUYLSABKAgSJQodYW50aV9ncmF2aXR5X2ZyYW1lc19s",
            "aW5nZXJpbmcYLiABKAUSFAoMb21pdF9ncmF2aXR5GC8gASgIEhoKEm9taXRf",
            "c29mdF9wdXNoYmFjaxgwIAEoCBIbChNyZXBlbF9zb2Z0X3B1c2hiYWNrGDEg",
            "ASgIEhsKE2NvbGxpc2lvbl90eXBlX21hc2sYMiABKAQSHAoUaGFzX3R1cm5f",
            "YXJvdW5kX2FuaW0YMyABKAgSFwoPaGFzX2RpbW1lZF9hbmltGDQgASgIEhgK",
            "EGhhc19hd2FraW5nX2FuaW0YNSABKAgSHgoWaGFzX3dhbGtfc3RvcHBpbmdf",
            "YW5pbRg2IAEoCBIlCh1oYXNfaW5fYWlyX3dhbGtfc3RvcHBpbmdfYW5pbRg3",
            "IAEoCBInCh9sYXlfZG93bl90b19yZWNvdmVyX2Zyb21fZGltbWVkGDggASgI",
            "EhAKCGhhcmRuZXNzGDkgASgFEiUKHXByb2FjdGl2ZV9qdW1wX3N0YXJ0dXBf",
            "ZnJhbWVzGDogASgFEh4KFmRlZmF1bHRfYWlyX2p1bXBfcXVvdGEYOyABKA0S",
            "HgoWZGVmYXVsdF9haXJfZGFzaF9xdW90YRg8IAEoDRIaChJkZWZhdWx0X2Rl",
            "ZjFfcXVvdGEYPSABKA0SKAogaXNvbGF0ZWRfYWlyX2p1bXBfYW5kX2Rhc2hf",
            "cXVvdGEYPiABKAgSHwoXYWlyX2p1bXBfdmZ4X3NwZWNpZXNfaWQYPyABKAUS",
            "Kwojc2xpcF9qdW1wX3RocmVzX2hvbGRfYmVsb3dfdG9wX2ZhY2UYQCABKAIS",
            "Igoac2xpcF9qdW1wX2NoYXJhY3Rlcl9kcm9wX3kYQSABKAISLAokdHJhbnNm",
            "b3JtX2ludG9fc3BlY2llc19pZF91cG9uX2RlYXRoGEIgASgNEhsKE2p1bXBf",
            "aG9sZGluZ190b19mbHkYQyABKAgSEAoIaGFzX2RlZjEYRCABKAgSHAoUaGFz",
            "X2RlZjFfYXRrZWQxX2FuaW0YRSABKAgSLQolZGVmYXVsdF9kZWYxX2Jyb2tl",
            "bl9mcmFtZXNfdG9fcmVjb3ZlchhGIAEoBRIiChpkZWYxX2FjdGl2ZV92Znhf",
            "c3BlY2llc19pZBhHIAEoBRIhChlkZWYxX2F0a2VkX3ZmeF9zcGVjaWVzX2lk",
            "GEggASgFEiIKGmRlZjFfYnJva2VuX3ZmeF9zcGVjaWVzX2lkGEkgASgFEhsK",
            "E2RlZjFfc3RhcnR1cF9mcmFtZXMYSiABKAUSGQoRZGVmMV9kYW1hZ2VfeWll",
            "bGQYSyABKAISLAokZGVmMV9kZWZpZXNfZWxlX3dlYWtuZXNzX3BlbmV0cmF0",
            "aW9uGEwgASgIEhoKEmRlZjFfZGVmaWVzX2RlYnVmZhhNIAEoCBIcChRmbHlp",
            "bmdfcXVvdGFfcmRmX2NudBhOIAEoBRIZChF3YWxraW5nX2F1dG9fZGVmMRhP",
            "IAEoCBIfCgNJZmMYUCABKA4yEi5qdHNoYXJlZC5JZmFjZUNhdBIUCgxlbGVf",
            "d2Vha25lc3MYUSABKA0SFgoOZWxlX3Jlc2lzdGFuY2UYUiABKA0SGgoSaGFz",
            "X2J0bl9iX2NoYXJnaW5nGFMgASgIEiQKHGJ0bl9iX2NoYXJnZWRfdmZ4X3Nw",
            "ZWNpZXNfaWQYVCABKAUSEQoJaXNfa2V5X2NoGFUgASgIEiYKHmFsbG93c19z",
            "YW1lX3RlYW1fc29mdF9wdXNoYmFjaxhWIAEoCBIdChVnYXVnZV9pbmNfd2hl",
            "bl9raWxsZWQYVyABKAUSIgoaanVtcGluZ19pbnN0ZWFkX29mX3dhbGtpbmcY",
            "WCABKAgSKgoidmlzaW9uX3NlYXJjaF9pbnRlcnZhbF9wb3cyTWludXMxVRhZ",
            "IAEoDRIpCiF2aXNpb25fc2VhcmNoX2ludGVydmFsX3BvdzJNaW51czEYWiAB",
            "KAUSIgoabnBjX25vX2RlZmF1bHRfYWlyX3dhbGtpbmcYWyABKAgSJgoebnBj",
            "X3ByaW9yaXRpemVfYnVsbGV0X2hhbmRsaW5nGFwgASgIEiMKG25wY19wcmlv",
            "cml0aXplX2FsbHlfaGVhbGluZxhdIAEoCBImCh5ucGNfbm90X2h1bnRpbmdf",
            "aW5fYWlyX29wcG9fY2gYXiABKAgSKAogdHJhbnNmb3JtX2ludG9fZnJhbWVz",
            "X3RvX3JlY292ZXIYXyABKAUSKAogdHJhbnNmb3JtX2ludG9fZnJhbWVzX2lu",
            "dmluc2libGUYYCABKAUSIQoZYXdha2luZ19mcmFtZXNfdG9fcmVjb3Zlchhh",
            "IAEoBRIhChlhd2FraW5nX2ZyYW1lc19pbnZpbnNpYmxlGGIgASgFEiAKGHVz",
            "ZV9pZGxlMV9hc19mbHlpbmdfaWRsZRhjIAEoCBIPCgdub19mbGVlGGQgASgI",
            "EjQKDWF0azFfbWFnYXppbmUYZSABKAsyHS5qdHNoYXJlZC5JbnZlbnRvcnlT",
            "bG90Q29uZmlnEjYKD3N1cGVyX2F0a19ndWFnZRhmIAEoCzIdLmp0c2hhcmVk",
            "LkludmVudG9yeVNsb3RDb25maWcSOwoUaW5pdF9pbnZlbnRvcnlfc2xvdHMY",
            "ZyADKAsyHS5qdHNoYXJlZC5JbnZlbnRvcnlTbG90Q29uZmlnEloKG2J0bl9i",
            "X2F1dG9fdW5ob2xkX2NoX3N0YXRlcxhoIAMoCzI1Lmp0c2hhcmVkLkNoYXJh",
            "Y3RlckNvbmZpZy5CdG5CQXV0b1VuaG9sZENoU3RhdGVzRW50cnkSSQoRbG9v",
            "cGluZ19jaF9zdGF0ZXMYaSADKAsyLi5qdHNoYXJlZC5DaGFyYWN0ZXJDb25m",
            "aWcuTG9vcGluZ0NoU3RhdGVzRW50cnkaPQobQnRuQkF1dG9VbmhvbGRDaFN0",
            "YXRlc0VudHJ5EgsKA2tleRgBIAEoBRINCgV2YWx1ZRgCIAEoBToCOAEaNgoU",
            "TG9vcGluZ0NoU3RhdGVzRW50cnkSCwoDa2V5GAEgASgFEg0KBXZhbHVlGAIg",
            "ASgFOgI4ASKLDAoRQ2hhcmFjdGVyRG93bnN5bmMSCQoBeBgCIAEoAhIJCgF5",
            "GAMgASgCEg0KBWRpcl94GAQgASgFEg0KBWRpcl95GAUgASgFEg0KBXZlbF94",
            "GAYgASgCEg0KBXZlbF95GAcgASgCEg0KBXNwZWVkGAggASgCEhIKCnNwZWNp",
            "ZXNfaWQYCSABKA0SGQoRZnJhbWVzX3RvX3JlY292ZXIYCiABKAUSIgoaZnJh",
            "bWVzX2NhcHR1cmVkX2J5X2luZXJ0aWEYCyABKAUSCgoCaHAYDCABKAUSCgoC",
            "bXAYDSABKAUSHAoUY2hfY29sbGlzaW9uX3RlYW1faWQYDiABKAUSKgoIY2hf",
            "c3RhdGUYDyABKA4yGC5qdHNoYXJlZC5DaGFyYWN0ZXJTdGF0ZRIaChJmcmFt",
            "ZXNfaW5fY2hfc3RhdGUYECABKAUSFgoOanVtcF90cmlnZ2VyZWQYEiABKAgS",
            "FAoMb21pdF9ncmF2aXR5GBYgASgIEhgKEGZvcmNlZF9jcm91Y2hpbmcYFyAB",
            "KAgSGwoTc2xpcF9qdW1wX3RyaWdnZXJlZBgYIAEoCBIsCiRwcmltYXJpbHlf",
            "b25fc2xpcHBhYmxlX2hhcmRfcHVzaGJhY2sYGSABKAgSGgoScHJldl93YXNf",
            "Y3JvdWNoaW5nGBogASgIEh8KF25ld19iaXJ0aF9yZGZfY291bnRkb3duGBsg",
            "ASgFEhkKEWZyYW1lc19pbnZpbnNpYmxlGBwgASgFEhQKDGp1bXBfc3RhcnRl",
            "ZBgdIAEoCBIcChRmcmFtZXNfdG9fc3RhcnRfanVtcBgeIAEoBRIWCg5idWxs",
            "ZXRfdGVhbV9pZBgfIAEoBRIgChhyZW1haW5pbmdfYWlyX2p1bXBfcXVvdGEY",
            "ICABKA0SIAoYcmVtYWluaW5nX2Fpcl9kYXNoX3F1b3RhGCEgASgNEiIKGmRh",
            "bWFnZWRfaGludF9yZGZfY291bnRkb3duGCIgASgFEh8KF2RhbWFnZWRfZWxl",
            "bWVudGFsX2F0dHJzGCMgASgNEhwKFHJlbWFpbmluZ19kZWYxX3F1b3RhGCQg",
            "ASgNEhUKDWNvbWJvX2hpdF9jbnQYJSABKA0SHQoVY29tYm9fZnJhbWVzX3Jl",
            "bWFpbmVkGCYgASgFEhoKEmxhc3RfZGFtYWdlZF9ieV91ZBgnIAEoBBImCh5s",
            "YXN0X2RhbWFnZWRfYnlfYnVsbGV0X3RlYW1faWQYKCABKAUSFwoPYWN0aXZl",
            "X3NraWxsX2lkGCkgASgNEhgKEGFjdGl2ZV9za2lsbF9oaXQYKiABKAUSHQoV",
            "YnRuX2FfaG9sZGluZ19yZGZfY250GCsgASgFEh0KFWJ0bl9iX2hvbGRpbmdf",
            "cmRmX2NudBgsIAEoBRIdChVidG5fY19ob2xkaW5nX3JkZl9jbnQYLSABKAUS",
            "HQoVYnRuX2RfSG9sZGluZ19yZGZfY250GC4gASgFEh0KFWJ0bl9lX2hvbGRp",
            "bmdfcmRmX2NudBgvIAEoBRIfChdwYXJyeV9wcmVwX3JkZl9jbnRfZG93bhgw",
            "IAEoBRIeChZtcF9yZWdlbl9yZGZfY291bnRkb3duGDEgASgFEhwKFGZseWlu",
            "Z19yZGZfY291bnRkb3duGDIgASgFEhUKDWxvY2tpbmdfb25fdWQYMyABKA0S",
            "IQoJYnVmZl9saXN0GDQgAygLMg4uanRzaGFyZWQuQnVmZhIlCgtkZWJ1ZmZf",
            "bGlzdBg1IAMoCzIQLmp0c2hhcmVkLkRlYnVmZhIuCg1hdGsxX21hZ2F6aW5l",
            "GDYgASgLMhcuanRzaGFyZWQuSW52ZW50b3J5U2xvdBIwCg9zdXBlcl9hdGtf",
            "Z2F1Z2UYNyABKAsyFy5qdHNoYXJlZC5JbnZlbnRvcnlTbG90EiYKCWludmVu",
            "dG9yeRg4IAEoCzITLmp0c2hhcmVkLkludmVudG9yeRI7ChVidWxsZXRfaW1t",
            "dW5lX3JlY29yZHMYOSADKAsyHC5qdHNoYXJlZC5CdWxsZXRJbW11bmVSZWNv",
            "cmQSFwoPa2luZW1hdGljX2tub2JzGDogAygCIvwBChdQbGF5ZXJDaGFyYWN0",
            "ZXJEb3duc3luYxIoCgNjaGQYASABKAsyGy5qdHNoYXJlZC5DaGFyYWN0ZXJE",
            "b3duc3luYxISCgpqb2luX2luZGV4GAIgASgNEhEKCWJlYXRzX2NudBgDIAEo",
            "DRISCgpiZWF0ZW5fY250GAQgASgNEhEKCXJldml2YWxfeBgFIAEoAhIRCgly",
            "ZXZpdmFsX3kYBiABKAISFQoNcmV2aXZhbF9kaXJfeBgHIAEoBRIVCg1yZXZp",
            "dmFsX2Rpcl95GAggASgFEigKIG5vdF9lbm91Z2hfbXBfaGludF9yZGZfY291",
            "bnRkb3duGAkgASgFIvoDChROcGNDaGFyYWN0ZXJEb3duc3luYxIoCgNjaGQY",
            "ASABKAsyGy5qdHNoYXJlZC5DaGFyYWN0ZXJEb3duc3luYxIKCgJpZBgCIAEo",
            "DRIYChBhY3RpdmF0ZWRfcmRmX2lkGAMgASgFEhYKDmNhY2hlZF9jdWVfY21k",
            "GAQgASgEEh0KFXdhaXZpbmdfcGF0cm9sX2N1ZV9pZBgFIAEoBRImCgtnb2Fs",
            "X2FzX25wYxgGIAEoDjIRLmp0c2hhcmVkLk5wY0dvYWwSJwofcHVibGlzaGlu",
            "Z19ldnRfbWFza191cG9uX2tpbGxlZBgHIAEoBBIsCiRwdWJsaXNoaW5nX3Rv",
            "X3RyaWdnZXJfaWRfdXBvbl9raWxsZWQYCCABKA0SIAoYc3Vic2NyaWJlc190",
            "b190cmlnZ2VyX2lkGAkgASgNEh4KFmNhcHR1cmVkX2J5X3BhdHJvbF9jdWUY",
            "CiABKAgSHAoUZnJhbWVzX2luX3BhdHJvbF9jdWUYCyABKAUSLAoka2lsbGVk",
            "X3RvX2Ryb3BfY29uc3VtYWJsZV9zcGVjaWVzX2lkGAwgASgNEiYKHmtpbGxl",
            "ZF90b19kcm9wX2J1ZmZfc3BlY2llc19pZBgNIAEoDRImCh5raWxsZWRfdG9f",
            "ZHJvcF9waWNrdXBfc2tpbGxfaWQYDiABKA0ilAEKEUlucHV0RnJhbWVEZWNv",
            "ZGVkEgoKAmR4GAEgASgFEgoKAmR5GAIgASgFEhMKC2J0bl9hX2xldmVsGAMg",
            "ASgFEhMKC2J0bl9iX2xldmVsGAQgASgFEhMKC2J0bl9jX2xldmVsGAUgASgF",
            "EhMKC2J0bl9kX2xldmVsGAYgASgFEhMKC2J0bl9lX2xldmVsGAcgASgFIk8K",
            "EElucHV0RnJhbWVVcHN5bmMSFgoOaW5wdXRfZnJhbWVfaWQYASABKAUSDwoH",
            "ZW5jb2RlZBgCIAEoBBISCgpqb2luX2luZGV4GAMgASgNInQKEklucHV0RnJh",
            "bWVEb3duc3luYxIWCg5pbnB1dF9mcmFtZV9pZBgBIAEoBRISCgppbnB1dF9s",
            "aXN0GAIgAygEEhYKDmNvbmZpcm1lZF9saXN0GAMgASgEEhoKEnVkcF9jb25m",
            "aXJtZWRfbGlzdBgEIAEoBCKEBwoFV3NSZXESEQoJcGxheWVyX2lkGAEgASgJ",
            "EgsKA2FjdBgCIAEoBRISCgpqb2luX2luZGV4GAMgASgNEhcKD2Fja2luZ19m",
            "cmFtZV9pZBgEIAEoBRIdChVhY2tpbmdfaW5wdXRfZnJhbWVfaWQYBSABKAUS",
            "EAoIYXV0aF9rZXkYBiABKAUSPAoYaW5wdXRfZnJhbWVfdXBzeW5jX2JhdGNo",
            "GAcgAygLMhouanRzaGFyZWQuSW5wdXRGcmFtZVVwc3luYxIuCg9zZWxmX3Bh",
            "cnNlZF9yZGYYCCABKAsyFS5qdHNoYXJlZC5SZW5kZXJGcmFtZRIiChpjb2xs",
            "aXNpb25fc3BhY2VfaGFsZl93aWR0aBgJIAEoBRIjChtjb2xsaXNpb25fc3Bh",
            "Y2VfaGFsZl9oZWlnaHQYCiABKAUSHwoXYmF0dGxlX2R1cmF0aW9uX3NlY29u",
            "ZHMYCyABKAUSSAobc2VyaWFsaXplZF9iYXJyaWVyX3BvbHlnb25zGAwgAygL",
            "MiMuanRzaGFyZWQuU2VyaWFsaXphYmxlQ29udmV4UG9seWdvbhJcCh1zZXJp",
            "YWxpemVkX3N0YXRpY19wYXRyb2xfY3VlcxgNIAMoCzI1Lmp0c2hhcmVkLlNl",
            "cmlhbGl6ZWRDb21wbGV0ZWx5U3RhdGljUGF0cm9sQ3VlQ29sbGlkZXISXAoi",
            "c2VyaWFsaXplZF9jb21wbGV0ZWx5X3N0YXRpY190cmFwcxgOIAMoCzIwLmp0",
            "c2hhcmVkLlNlcmlhbGl6ZWRDb21wbGV0ZWx5U3RhdGljVHJhcENvbGxpZGVy",
            "ElcKGnNlcmlhbGl6ZWRfc3RhdGljX3RyaWdnZXJzGA8gAygLMjMuanRzaGFy",
            "ZWQuU2VyaWFsaXplZENvbXBsZXRlbHlTdGF0aWNUcmlnZ2VyQ29sbGlkZXIS",
            "XAokc2VyaWFsaXplZF90cmFwX2lkX3RvX2NvbGxpZGVyX2F0dHJzGBAgASgL",
            "Mi4uanRzaGFyZWQuU2VyaWFsaXplZFRyYXBMb2NhbElkVG9Db2xsaWRlckF0",
            "dHJzElgKInNlcmlhbGl6ZWRfdHJpZ2dlcl9lZGl0b3JfaWRfdG9faWQYEiAB",
            "KAsyLC5qdHNoYXJlZC5TZXJpYWxpemVkVHJpZ2dlckVkaXRvcklkVG9Mb2Nh",
            "bElkEg4KBnNlcV9ubxgTIAEoDSLHAQoTSW5wdXRCdWZmZXJTbmFwc2hvdBIb",
            "ChNyZWZfcmVuZGVyX2ZyYW1lX2lkGAEgASgFEhgKEHVuY29uZmlybWVkX21h",
            "c2sYAiABKAQSQwoddG9fc2VuZF9pbnB1dF9mcmFtZV9kb3duc3luY3MYAyAD",
            "KAsyHC5qdHNoYXJlZC5JbnB1dEZyYW1lRG93bnN5bmMSGwoTc2hvdWxkX2Zv",
            "cmNlX3Jlc3luYxgEIAEoCBIXCg9wZWVyX2pvaW5faW5kZXgYBSABKA0i4QEK",
            "CVBhdHJvbEN1ZRIKCgJpZBgBIAEoBRIOCgZmbF9hY3QYAiABKAQSDgoGZnJf",
            "YWN0GAMgASgEEhkKEWZsX2NhcHR1cmVfZnJhbWVzGAQgASgFEhkKEWZyX2Nh",
            "cHR1cmVfZnJhbWVzGAUgASgFEg4KBmZkX2FjdBgGIAEoBBIOCgZmdV9hY3QY",
            "ByABKAQSGQoRZmRfY2FwdHVyZV9mcmFtZXMYCCABKAUSGQoRZnVfY2FwdHVy",
            "ZV9mcmFtZXMYCSABKAUSHAoTY29sbGlzaW9uX3R5cGVfbWFzaxiFCCABKAQi",
            "4wEKCVZmeENvbmZpZxISCgpzcGVjaWVzX2lkGAEgASgFEiwKC21vdGlvbl90",
            "eXBlGAIgASgOMhcuanRzaGFyZWQuVmZ4TW90aW9uVHlwZRIwCg1kdXJhdGlv",
            "bl90eXBlGAMgASgOMhkuanRzaGFyZWQuVmZ4RHVyYXRpb25UeXBlEhQKDG9u",
            "X2NoYXJhY3RlchgEIAEoCBIRCglvbl9idWxsZXQYBSABKAgSDwoHb25fdHJh",
            "cBgGIAEoCBIZChF1c2VfcGl4ZWxhdGVkX3ZlchgHIAEoCBINCgRuYW1lGIAI",
            "IAEoCSLaGgoMQnVsbGV0Q29uZmlnEhYKDnN0YXJ0dXBfZnJhbWVzGAEgASgF",
            "EhwKFGNhbmNlbGxhYmxlX3N0X2ZyYW1lGAIgASgFEhwKFGNhbmNlbGxhYmxl",
            "X2VkX2ZyYW1lGAMgASgFEhUKDWFjdGl2ZV9mcmFtZXMYBCABKAUSFwoPaGl0",
            "X3N0dW5fZnJhbWVzGAUgASgFEhkKEWJsb2NrX3N0dW5fZnJhbWVzGAYgASgF",
            "EhYKDnB1c2hiYWNrX3ZlbF94GAcgASgCEhYKDnB1c2hiYWNrX3ZlbF95GAgg",
            "ASgCEg4KBmRhbWFnZRgJIAEoBRIXCg9zZWxmX2xvY2tfdmVsX3gYCiABKAIS",
            "FwoPc2VsZl9sb2NrX3ZlbF95GAsgASgCEhcKD2hpdGJveF9vZmZzZXRfeBgM",
            "IAEoAhIXCg9oaXRib3hfb2Zmc2V0X3kYDSABKAISFQoNaGl0Ym94X3NpemVf",
            "eBgOIAEoAhIVCg1oaXRib3hfc2l6ZV95GA8gASgCEg8KB2Jsb3dfdXAYECAB",
            "KAgSEgoKc3BlY2llc19pZBgRIAEoBRIYChBleHBsb3Npb25fZnJhbWVzGBIg",
            "ASgFEiQKBmJfdHlwZRgTIAEoDjIULmp0c2hhcmVkLkJ1bGxldFR5cGUSJwoH",
            "bWhfdHlwZRgUIAEoDjIWLmp0c2hhcmVkLk11bHRpSGl0VHlwZRIiChpzaW11",
            "bHRhbmVvdXNfbXVsdGlfaGl0X2NudBgVIAEoDRINCgVzcGVlZBgWIAEoAhIN",
            "CgVkaXJfeBgXIAEoBRINCgVkaXJfeRgYIAEoBRJBCg5jYW5jZWxfdHJhbnNp",
            "dBgZIAMoCzIpLmp0c2hhcmVkLkJ1bGxldENvbmZpZy5DYW5jZWxUcmFuc2l0",
            "RW50cnkSFAoMcmVwZWF0X3F1b3RhGBogASgFEh0KFWFjdGl2ZV92Znhfc3Bl",
            "Y2llc19pZBgbIAEoBRIgChhleHBsb3Npb25fdmZ4X3NwZWNpZXNfaWQYHCAB",
            "KAUSFgoOYWxsb3dzX3dhbGtpbmcYHSABKAgSGAoQYWxsb3dzX2Nyb3VjaGlu",
            "ZxgeIAEoCBIQCghoYXJkbmVzcxgfIAEoBRIhChlzdGFydHVwX2ludmluc2li",
            "bGVfZnJhbWVzGCAgASgFEh0KFWhpdF9pbnZpbnNpYmxlX2ZyYW1lcxghIAEo",
            "BRIcChRleHBsb3Npb25fc3BlY2llc19pZBgiIAEoBRIUCgxwZXJwX2FjY19t",
            "YWcYIyABKAUSIAoYZGVsYXlfc2VsZl92ZWxfdG9fYWN0aXZlGCQgASgIEhgK",
            "EHNwZWVkX2lmX25vdF9oaXQYJSABKAISGgoSb21pdF9zb2Z0X3B1c2hiYWNr",
            "GCYgASgIEhkKEWhpdGJveF9zaXplX2luY194GCcgASgCEhkKEWhpdGJveF9z",
            "aXplX2luY195GCggASgCEhgKEHJlbWFpbnNfdXBvbl9oaXQYKSABKAgSHgoW",
            "cm90YXRlc19hbG9uZ192ZWxvY2l0eRgqIAEoCBIqCiJkZWZhdWx0X2hhcmRf",
            "cHVzaGJhY2tfYm91bmNlX3F1b3RhGCsgASgFEigKIGhhcmRfcHVzaGJhY2tf",
            "Ym91bmNlX25vcm1fZmFjdG9yGCwgASgCEikKIWhhcmRfcHVzaGJhY2tfYm91",
            "bmNlX3NoZWVyX2ZhY3RvchgtIAEoAhIfChdpc19waXhlbGF0ZWRfYWN0aXZl",
            "X3ZmeBguIAEoCBIjChtpc19waXhlbGF0ZWRfZXhwbG9zdGlvbl92ZngYLyAB",
            "KAgSHgoWbWhfdmFuaXNoX29uX21lbGVlX2hpdBgwIAEoCBIfChdkb3duX3Ns",
            "b3BlX3ByaW1lcl92ZWxfeRgxIAEoAhIdChVtaF91cGRhdGVzX29yaWdpbl9w",
            "b3MYMiABKAgSFgoOYmVhbV9jb2xsaXNpb24YMyABKAgSHQoVYW5ndWxhcl9m",
            "cmFtZV92ZWxfY29zGDQgASgCEh0KFWFuZ3VsYXJfZnJhbWVfdmVsX3Npbhg1",
            "IAEoAhIXCg92aXNpb25fb2Zmc2V0X3gYNiABKAISFwoPdmlzaW9uX29mZnNl",
            "dF95GDcgASgCEhUKDXZpc2lvbl9zaXplX3gYOCABKAISFQoNdmlzaW9uX3Np",
            "emVfeRg5IAEoAhIiChpzZWxmX2xvY2tfdmVsX3lXaGVuX2ZseWluZxg6IAEo",
            "BRIXCg9lbGVtZW50YWxfYXR0cnMYOyABKA0SJwofY2FuY2VsbGFibGVfYnlf",
            "aW52ZW50b3J5X3Nsb3RfYxg8IAEoCBInCh9jYW5jZWxsYWJsZV9ieV9pbnZl",
            "bnRvcnlfc2xvdF9kGD0gASgIEhUKDXNwaW5fYW5jaG9yX3gYPiABKAISFQoN",
            "c3Bpbl9hbmNob3JfeRg/IAEoAhIaChJiZWFtX3Zpc3VhbF9zaXplX3kYQCAB",
            "KAISJgoedG91Y2hfZXhwbG9zaW9uX2JvbWJfY29sbGlzaW9uGEEgASgIEh4K",
            "FmFpcl9yaWRpbmdfZ3JvdW5kX3dhdmUYQiABKAgSJQodZ3JvdW5kX2ltcGFj",
            "dF9tZWxlZV9jb2xsaXNpb24YQyABKAgSIwobd2FsbF9pbXBhY3RfbWVsZWVf",
            "Y29sbGlzaW9uGEQgASgIEhgKEG1oX2luaGVyaXRzX3NwaW4YRSABKAgSFQoN",
            "aW5pdF9zcGluX2NvcxhGIAEoAhIVCg1pbml0X3NwaW5fc2luGEcgASgCEhgK",
            "EGZpbmlzaGluZ19mcmFtZXMYSCABKAUSJQodbm9fZXhwbG9zaW9uX29uX2hh",
            "cmRfcHVzaGJhY2sYSSABKAgSHgoWc3RhcnR1cF92Znhfc3BlY2llc19pZBhK",
            "IAEoBRIfCgNpZmMYSyABKA4yEi5qdHNoYXJlZC5JZmFjZUNhdBInCh9yZWZs",
            "ZWN0X2ZpcmViYWxsX3hJZl9ub3RfaGFyZGVyGEwgASgIEi4KJnJlamVjdHNf",
            "cmVmbGVjdGlvbl9mcm9tX2Fub3RoZXJfYnVsbGV0GE0gASgIEh8KF3Byb3Zp",
            "ZGVzX3hIYXJkX3B1c2hiYWNrGE4gASgIEiMKG3Byb3ZpZGVzX3lIYXJkX3B1",
            "c2hiYWNrX3RvcBhPIAEoCBImCh5wcm92aWRlc195SGFyZF9wdXNoYmFja19i",
            "b3R0b20YUCABKAgSIQoZaWdub3JlX3Nsb3BlX2RlY2VsZXJhdGlvbhhRIAEo",
            "CBIhChlyb3RhdGVfb2ZmZW5kZXJfd2l0aF9zcGluGFIgASgIEiAKGG1oX25v",
            "dF90cmlnZ2VyX29uX2NoX2hpdBhTIAEoCBIrCiNtaF9ub3RfdHJpZ2dlcl9v",
            "bl9oYXJkZXJfYnVsbGV0X2hpdBhUIAEoCBIrCiNtaF9ub3RfdHJpZ2dlcl9v",
            "bl9oYXJkX3B1c2hiYWNrX2hpdBhVIAEoCBIWCg5ob3BwZXJfbWlzc2lsZRhW",
            "IAEoCBIWCg5iZWFtX3JlbmRlcmluZxhXIAEoCBIqCiJtaXNzaWxlX3NlYXJj",
            "aF9pbnRlcnZhbF9wb3cyTWludXMxGFggASgNEi8KJ3VzZV9jaF9vZmZzZXRf",
            "cmVnYXJkbGVzc19vZl9lbWlzc2lvbl9taBhZIAEoCBIrCiNpbnBsYWNlX3Zh",
            "bmlzaF9leHBsb3Npb25fc3BlY2llc19pZBhaIAEoBRIfChdhbmltX2xvb3Bp",
            "bmdfcmRmX29mZnNldBhbIAEoBRIpCiFleHBsb3Npb25fYW5pbV9sb29waW5n",
            "X3JkZl9vZmZzZXQYXCABKAUSIQoZZ2F1Z2VfaW5jX3JlZHVjdGlvbl9yYXRp",
            "bxhdIAEoAhImCh5taF9pbmhlcml0c19mcmFtZXNfaW5fYmxfc3RhdGUYXiAB",
            "KAgSIwobZ3VhcmRfYnJlYWtlcl9leHRyYV9oaXRfY250GF8gASgNEiMKG3Rh",
            "a2VzX2RlZjFfYXNfaGFyZF9wdXNoYmFjaxhgIAEoCBIcChNjb2xsaXNpb25f",
            "dHlwZV9tYXNrGIUIIAEoBBIWCg10YWtlc19ncmF2aXR5GIYIIAEoCBIqCgti",
            "dWZmX2NvbmZpZxiHCCABKAsyFC5qdHNoYXJlZC5CdWZmQ29uZmlnEiAKF2No",
            "YXJhY3Rlcl9lbWl0X3NmeF9uYW1lGIAQIAEoCRIfChZmaXJlYmFsbF9lbWl0",
            "X3NmeF9uYW1lGIEQIAEoCRIbChJleHBsb3Npb25fc2Z4X25hbWUYghAgASgJ",
            "EhgKD2FjdGl2ZV9zZnhfbmFtZRiDECABKAkSJAobZXhwbG9zaW9uX29uX2Zs",
            "ZXNoX3NmeF9uYW1lGIQQIAEoCRIjChpleHBsb3Npb25fb25fcm9ja19zZnhf",
            "bmFtZRiFECABKAkSJAobZXhwbG9zaW9uX29uX21ldGFsX3NmeF9uYW1lGIYQ",
            "IAEoCRIjChpleHBsb3Npb25fb25fd29vZF9zZnhfbmFtZRiHECABKAkaNAoS",
            "Q2FuY2VsVHJhbnNpdEVudHJ5EgsKA2tleRgBIAEoBRINCgV2YWx1ZRgCIAEo",
            "DToCOAEikQQKBkJ1bGxldBInCghibF9zdGF0ZRgBIAEoDjIVLmp0c2hhcmVk",
            "LkJ1bGxldFN0YXRlEhoKEmZyYW1lc19pbl9ibF9zdGF0ZRgCIAEoBRIKCgJp",
            "ZBgZIAEoDRIiChpvcmlnaW5hdGVkX3JlbmRlcl9mcmFtZV9pZBgEIAEoBRIT",
            "CgtvZmZlbmRlcl91ZBgFIAEoBBIPCgd0ZWFtX2lkGAcgASgFEgkKAXgYCCAB",
            "KAISCQoBeRgJIAEoAhINCgVkaXJfeBgKIAEoAhINCgVkaXJfeRgLIAEoAhIN",
            "CgV2ZWxfeBgMIAEoAhINCgV2ZWxfeRgNIAEoAhIUCgxvcmlnaW5hdGVkX3gY",
            "DiABKAISFAoMb3JpZ2luYXRlZF95GA8gASgCEhkKEXJlcGVhdF9xdW90YV9s",
            "ZWZ0GBAgASgFEiwKJHJlbWFpbmluZ19oYXJkX3B1c2hiYWNrX2JvdW5jZV9x",
            "dW90YRgRIAEoBRIRCgl0YXJnZXRfdWQYEiABKAQSFQoNZGFtYWdlX2RlYWxl",
            "ZBgTIAEoBRIrCg9leHBsb2RlZF9vbl9pZmMYFCABKA4yEi5qdHNoYXJlZC5J",
            "ZmFjZUNhdBIQCghzcGluX2NvcxgVIAEoAhIQCghzcGluX3NpbhgWIAEoAhIY",
            "ChBhY3RpdmVfc2tpbGxfaGl0GBcgASgFEhAKCHNraWxsX2lkGBggASgNItQF",
            "CgpUcmFwQ29uZmlnEhIKCnNwZWNpZXNfaWQYASABKAUSHAoUZXhwbG9zaW9u",
            "X3NwZWNpZXNfaWQYAiABKAUSGAoQZXhwbG9zaW9uX2ZyYW1lcxgDIAEoBRIP",
            "CgdibG93X3VwGAQgASgIEg4KBmRhbWFnZRgFIAEoBRIXCg9oaXRfc3R1bl9m",
            "cmFtZXMYBiABKAUSHQoVaGl0X2ludmluc2libGVfZnJhbWVzGAcgASgFEhUK",
            "DWRlYWN0aXZhdGFibGUYCCABKAgSEAoIaGFyZG5lc3MYCSABKAUSIQoZZGVh",
            "Y3RpdmF0ZV91cG9uX3RyaWdnZXJlZBgKIAEoCBIgChhjb25zdF9mcmljdGlv",
            "bl92ZWxfeF90b3AYCyABKAISIwobY29uc3RfZnJpY3Rpb25fdmVsX3hfYm90",
            "dG9tGAwgASgCEiEKGWNvbnN0X2ZyaWN0aW9uX3ZlbF95X2xlZnQYDSABKAIS",
            "IgoaY29uc3RfZnJpY3Rpb25fdmVsX3lfcmlnaHQYDiABKAISKAogcGF0cm9s",
            "X2N1ZV9yZXF1aXJlc19mdWxsX2NvbnRhaW4YDyABKAgSFQoNc3Bpbl9hbmNo",
            "b3JfeBgQIAEoAhIVCg1zcGluX2FuY2hvcl95GBEgASgCEh0KFWFuZ3VsYXJf",
            "ZnJhbWVfdmVsX2NvcxgSIAEoAhIdChVhbmd1bGFyX2ZyYW1lX3ZlbF9zaW4Y",
            "EyABKAISGgoSaW50cmluc2ljX3NwaW5fY29zGBQgASgCEhoKEmludHJpbnNp",
            "Y19zcGluX3NpbhgVIAEoAhIbChNhdGsxX3Vwb25fdHJpZ2dlcmVkGBYgASgI",
            "EhUKDWF0azFfc2tpbGxfaWQYFyABKA0SEQoJaXNfcm90YXJ5GBggASgIEhsK",
            "E25vX3hfZmxpcF9yZW5kZXJpbmcYGSABKAgSFQoMc3BlY2llc19uYW1lGIAI",
            "IAEoCSKHAgoTVHJhcENvbmZpZ0Zyb21UaWxlZBISCgpzcGVjaWVzX2lkGAEg",
            "ASgFEg0KBXF1b3RhGAIgASgFEg0KBXNwZWVkGAMgASgCEg0KBWRpcl94GAQg",
            "ASgFEg0KBWRpcl95GAUgASgFEhgKEHN1YnNjcmliZXNfdG9faWQYByABKAUS",
            "Kwojc3Vic2NyaWJlc190b19pZF9hZnRlcl9pbml0aWFsX2ZpcmUYCCABKAUS",
            "HAoUc3Vic2NyaWJlc190b19pZF9hbHQYCSABKAUSDgoGYm94X2N3GAogASgC",
            "Eg4KBmJveF9jaBgLIAEoAhIbChNpbml0X25vX2FuZ3VsYXJfdmVsGAwgASgC",
            "ItsDChBUcmFwQ29sbGlkZXJBdHRyEhcKD2hpdGJveF9vZmZzZXRfeBgBIAEo",
            "BRIXCg9oaXRib3hfb2Zmc2V0X3kYAiABKAUSFQoNaGl0Ym94X3NpemVfeBgD",
            "IAEoBRIVCg1oaXRib3hfc2l6ZV95GAQgASgFEh4KFnByb3ZpZGVzX2hhcmRf",
            "cHVzaGJhY2sYBSABKAgSFwoPcHJvdmlkZXNfZGFtYWdlGAYgASgIEhcKD3By",
            "b3ZpZGVzX2VzY2FwZRgHIAEoCBIaChJwcm92aWRlc19zbGlwX2p1bXAYCCAB",
            "KAgSHwoXcHJvaGliaXRzX3dhbGxfZ3JhYmJpbmcYCSABKAgSGAoQZm9yY2Vz",
            "X2Nyb3VjaGluZxgKIAEoCBISCgpzcGVjaWVzX2lkGAsgASgFEiEKGW9ubHlf",
            "YWxsb3dzX2FsaWduZWRfdmVsX3gYDCABKAUSIQoZb25seV9hbGxvd3NfYWxp",
            "Z25lZF92ZWxfeRgNIAEoBRIVCg1hc19wYXRyb2xfY3VlGA4gASgIEiIKBXRj",
            "X3BjGA8gASgLMhMuanRzaGFyZWQuUGF0cm9sQ3VlEgsKAmlkGIAIIAEoDRIc",
            "ChNjb2xsaXNpb25fdHlwZV9tYXNrGIUIIAEoBCLYBAoEVHJhcBIKCgJpZBgB",
            "IAEoDRIoCiBwYXRyb2xfY3VlX2FuZ3VsYXJfdmVsX2ZsaXBfbWFyaxgCIAEo",
            "BRI4ChFjb25maWdfZnJvbV90aWxlZBgDIAEoCzIdLmp0c2hhcmVkLlRyYXBD",
            "b25maWdGcm9tVGlsZWQSJwoKdHJhcF9zdGF0ZRgEIAEoDjITLmp0c2hhcmVk",
            "LlRyYXBTdGF0ZRIcChRmcmFtZXNfaW5fdHJhcF9zdGF0ZRgFIAEoBRIcChRp",
            "c19jb21wbGV0ZWx5X3N0YXRpYxgGIAEoCBIeChZjYXB0dXJlZF9ieV9wYXRy",
            "b2xfY3VlGAcgASgIEhwKFGZyYW1lc19pbl9wYXRyb2xfY3VlGAggASgFEh0K",
            "FXdhaXZpbmdfcGF0cm9sX2N1ZV9pZBgJIAEoBRIiChp3YWl2aW5nX3Nwb250",
            "YW5lb3VzX3BhdHJvbBgKIAEoCBIgChhzdWJzY3JpYmVzX3RvX3RyaWdnZXJf",
            "aWQYCyABKA0SJAocc3Vic2NyaWJlc190b190cmlnZ2VyX2lkX2FsdBgMIAEo",
            "DRIQCghzcGluX2NvcxgNIAEoAhIQCghzcGluX3NpbhgOIAEoAhIdChVhbmd1",
            "bGFyX2ZyYW1lX3ZlbF9jb3MYDyABKAISHQoVYW5ndWxhcl9mcmFtZV92ZWxf",
            "c2luGBAgASgCEgkKAXgYESABKAISCQoBeRgSIAEoAhINCgVkaXJfeBgTIAEo",
            "BRINCgVkaXJfeRgUIAEoBRINCgV2ZWxfeBgVIAEoAhINCgV2ZWxfeRgWIAEo",
            "AiKDAQoNVHJpZ2dlckNvbmZpZxISCgpzcGVjaWVzX2lkGAEgASgFEhQKDHNw",
            "ZWNpZXNfbmFtZRgCIAEoCRIrCgx0cmlnZ2VyX3R5cGUYAyABKA4yFS5qdHNo",
            "YXJlZC5UcmlnZ2VyVHlwZRIbChNjb2xsaXNpb25fdHlwZV9tYXNrGAQgASgE",
            "IkkKC1BlZXJVZHBBZGRyEgoKAmlwGAEgASgJEgwKBHBvcnQYAiABKAUSEAoI",
            "YXV0aF9rZXkYAyABKAUSDgoGc2VxX25vGAQgASgNIukDChJCYXR0bGVDb2xs",
            "aWRlckluZm8SEgoKc3RhZ2VfbmFtZRgBIAEoCRIVCg1ib3VuZF9yb29tX2lk",
            "GAIgASgFEh4KFmJhdHRsZV9kdXJhdGlvbl9mcmFtZXMYAyABKAMSKgoiaW5w",
            "dXRfZnJhbWVfdXBzeW5jX2RlbGF5X3RvbGVyYW5jZRgEIAEoBRIsCiRtYXhf",
            "Y2hhc2luZ19yZW5kZXJfZnJhbWVzX3Blcl91cGRhdGUYBSABKAUSJAoccm9s",
            "bGJhY2tfZXN0aW1hdGVkX2R0X21pbGxpcxgGIAEoARIjChtyb2xsYmFja19l",
            "c3RpbWF0ZWRfZHRfbmFub3MYByABKAMSGgoScmVuZGVyX2J1ZmZlcl9zaXpl",
            "GAggASgFEhoKEmNvbGxpc2lvbl9taW5fc3RlcBgJIAEoBRIbChNib3VuZF9y",
            "b29tX2NhcGFjaXR5GAogASgFEh0KFXByZWFsbG9jX25wY19jYXBhY2l0eRgL",
            "IAEoBRIgChhwcmVhbGxvY19idWxsZXRfY2FwYWNpdHkYDCABKAUSMQoRYmF0",
            "dGxlX3VkcF90dW5uZWwYgAggASgLMhUuanRzaGFyZWQuUGVlclVkcEFkZHIS",
            "GgoRZnJhbWVfbG9nX2VuYWJsZWQYgQggASgIIpIECgtSZW5kZXJGcmFtZRIK",
            "CgJpZBgBIAEoBRI2CgtwbGF5ZXJzX2FychgCIAMoCzIhLmp0c2hhcmVkLlBs",
            "YXllckNoYXJhY3RlckRvd25zeW5jEhcKD2NvdW50ZG93bl9uYW5vcxgDIAEo",
            "AxIhCgdidWxsZXRzGAQgAygLMhAuanRzaGFyZWQuQnVsbGV0EjAKCG5wY3Nf",
            "YXJyGAUgAygLMh4uanRzaGFyZWQuTnBjQ2hhcmFjdGVyRG93bnN5bmMSIQoJ",
            "dHJhcHNfYXJyGAYgAygLMg4uanRzaGFyZWQuVHJhcBInCgx0cmlnZ2Vyc19h",
            "cnIYByADKAsyES5qdHNoYXJlZC5UcmlnZ2VyEiUKCXBpY2thYmxlcxgIIAMo",
            "CzISLmp0c2hhcmVkLlBpY2thYmxlEhkKEWJ1bGxldF9pZF9jb3VudGVyGAkg",
            "ASgNEhYKDm5wY19pZF9jb3VudGVyGAogASgNEhcKD3RyYXBfaWRfY291bnRl",
            "chgLIAEoDRIbChNwaWNrYWJsZV9pZF9jb3VudGVyGAwgASgNEhcKD3NwZWNp",
            "ZXNfaWRfbGlzdBgNIAMoDRIbChNzaG91bGRfZm9yY2VfcmVzeW5jGA4gASgI",
            "EiAKGGJhY2tlbmRfdW5jb25maXJtZWRfbWFzaxgPIAEoBBIdChVwYXJ0aWNp",
            "cGFudF9jaGFuZ2VfaWQYECABKAUilwIKBldzUmVzcBILCgNyZXQYASABKAUS",
            "CwoDYWN0GAIgASgFEiIKA3JkZhgDIAEoCzIVLmp0c2hhcmVkLlJlbmRlckZy",
            "YW1lEkAKGmlucHV0X2ZyYW1lX2Rvd25zeW5jX2JhdGNoGAQgAygLMhwuanRz",
            "aGFyZWQuSW5wdXRGcmFtZURvd25zeW5jEi8KCWJjaV9mcmFtZRgFIAEoCzIc",
            "Lmp0c2hhcmVkLkJhdHRsZUNvbGxpZGVySW5mbxIXCg9wZWVyX2pvaW5faW5k",
            "ZXgYBiABKA0SMQoScGVlcl91ZHBfYWRkcl9saXN0GAcgAygLMhUuanRzaGFy",
            "ZWQuUGVlclVkcEFkZHISEAoHZXJyX21zZxiAECABKAki+AIKBVNraWxsEhcK",
            "D3JlY292ZXJ5X2ZyYW1lcxgCIAEoBRIgChhyZWNvdmVyeV9mcmFtZXNfb25f",
            "YmxvY2sYAyABKAUSHgoWcmVjb3ZlcnlfZnJhbWVzX29uX2hpdBgEIAEoBRIw",
            "Cgx0cmlnZ2VyX3R5cGUYBSABKA4yGi5qdHNoYXJlZC5Ta2lsbFRyaWdnZXJU",
            "eXBlEjAKDmJvdW5kX2NoX3N0YXRlGAYgASgOMhguanRzaGFyZWQuQ2hhcmFj",
            "dGVyU3RhdGUSNwoVYm91bmRfY2hfc3RhdGVfb25faGl0GAcgASgOMhguanRz",
            "aGFyZWQuQ2hhcmFjdGVyU3RhdGUSEAoIbXBfZGVsdGEYCCABKAUSCgoCaWQY",
            "CSABKA0SJQoEaGl0cxiACCADKAsyFi5qdHNoYXJlZC5CdWxsZXRDb25maWcS",
            "MgoTc2VsZl9ub25fc3RvY2tfYnVmZhiBCCABKAsyFC5qdHNoYXJlZC5CdWZm",
            "Q29uZmlnImcKCEZyYW1lTG9nEiIKA3JkZhgBIAEoCzIVLmp0c2hhcmVkLlJl",
            "bmRlckZyYW1lEjcKEWFjdHVhbGx5X3VzZWRfaWRmGAIgASgLMhwuanRzaGFy",
            "ZWQuSW5wdXRGcmFtZURvd25zeW5jIkgKDEJhdHRsZVJlc3VsdBIZChF3aW5u",
            "ZXJfam9pbl9pbmRleBgBIAEoDRIdChV3aW5uZXJfYnVsbGV0X3RlYW1faWQY",
            "AiABKAUiqQIKDERlYnVmZkNvbmZpZxISCgpzcGVjaWVzX2lkGAEgASgNEisK",
            "CnN0b2NrX3R5cGUYAiABKA4yFy5qdHNoYXJlZC5CdWZmU3RvY2tUeXBlEg0K",
            "BXN0b2NrGAMgASgFEiIKBHR5cGUYBCABKA4yFC5qdHNoYXJlZC5EZWJ1ZmZU",
            "eXBlEg8KB2Fycl9pZHgYBSABKAUSGwoTaW1wYWN0X3Blcl9pbnRlcnZhbBgG",
            "IAEoBRIXCg9pbXBhY3RfaW50ZXJ2YWwYByABKAUSFgoOZnJpY3Rpb25fdmVs",
            "X3gYCCABKAUSFgoOZnJpY3Rpb25fdmVsX3kYCSABKAUSFgoOZnJpY3Rpb25f",
            "YWNjX3gYCiABKAUSFgoOZnJpY3Rpb25fYWNjX3kYCyABKAUiogQKCkJ1ZmZD",
            "b25maWcSEgoKc3BlY2llc19pZBgBIAEoDRIrCgpzdG9ja190eXBlGAIgASgO",
            "MhcuanRzaGFyZWQuQnVmZlN0b2NrVHlwZRINCgVzdG9jaxgDIAEoBRITCgtz",
            "cGVlZF9kZWx0YRgEIAEoAhIbChNoaXRib3hfc2l6ZV94X2RlbHRhGAUgASgC",
            "EhsKE2hpdGJveF9zaXplX3lfZGVsdGEYBiABKAISFAoMZGFtYWdlX2RlbHRh",
            "GAcgASgFEiIKGmRhbWFnZV9kZWx0YV9ieV9wZXJjZW50YWdlGAggASgFEiAK",
            "GGNoYXJhY3Rlcl9oYXJkbmVzc19kZWx0YRgJIAEoBRIcChRtZWxlZV9oYXJk",
            "bmVzc19kZWx0YRgKIAEoBRIfChdmaXJlYmFsbF9oYXJkbmVzc19kZWx0YRgL",
            "IAEoBRISCgppbnZpbnNpYmxlGAwgASgIEhsKE3hmb3JtX2NoX3NwZWNpZXNf",
            "aWQYDSABKA0SGwoTcmVwZWxfc29mdF9wdXNoYmFjaxgOIAEoCBIUCgxvbWl0",
            "X2dyYXZpdHkYDyABKAgSEQoJYXV0b19kZWYxGBAgASgIEhoKEmFzc29jaWF0",
            "ZWRfZGVidWZmcxgRIAMoDRIgChhjaGFyYWN0ZXJfdmZ4X3NwZWNpZXNfaWQY",
            "EiABKAUSJQodaXNfcGl4ZWxhdGVkX3ZmeF9vbl9jaGFyYWN0ZXIYEyABKAgi",
            "pgEKBEJ1ZmYSEgoKc3BlY2llc19pZBgBIAEoDRINCgVzdG9jaxgCIAEoBRIi",
            "ChpvcmlnaW5hdGVkX3JlbmRlcl9mcmFtZV9pZBgDIAEoBRIaChJvcmlnX2No",
            "X3NwZWNpZXNfaWQYBCABKA0SIAoYb3JpZ19yZXBlbF9zb2Z0X3B1c2hiYWNr",
            "GAUgASgIEhkKEW9yaWdfb21pdF9ncmF2aXR5GAYgASgIIisKBkRlYnVmZhIS",
            "CgpzcGVjaWVzX2lkGAEgASgNEg0KBXN0b2NrGAIgASgFIk0KEkJ1bGxldElt",
            "bXVuZVJlY29yZBIRCglidWxsZXRfaWQYASABKA0SJAoccmVtYWluaW5nX2xp",
            "ZmV0aW1lX3JkZl9jb3VudBgCIAEoBSJ6ChBDb25zdW1hYmxlQ29uZmlnEhIK",
            "CnNwZWNpZXNfaWQYASABKA0SFAoMcmVmaWxsX2RlbHRhGAIgASgFEhgKEHZm",
            "eF9pZF9vbl9waWNrZXIYAyABKAUSIgoaaXNfcGl4ZWxhdGVkX3ZmeF9vbl9w",
            "aWNrZXIYBCABKAgiZQoTUGlja2FibGVTa2lsbENvbmZpZxIQCghza2lsbF9p",
            "ZBgBIAEoDRIYChB2ZnhfaWRfb25fcGlja2VyGAIgASgFEiIKGmlzX3BpeGVs",
            "YXRlZF92Znhfb25fcGlja2VyGAMgASgIIpECChNJbnZlbnRvcnlTbG90Q29u",
            "ZmlnEjQKCnN0b2NrX3R5cGUYASABKA4yIC5qdHNoYXJlZC5JbnZlbnRvcnlT",
            "bG90U3RvY2tUeXBlEg0KBXF1b3RhGAIgASgNEhkKEWZyYW1lc190b19yZWNv",
            "dmVyGAMgASgFEhcKD2J1ZmZfc3BlY2llc19pZBgEIAEoDRIQCghza2lsbF9p",
            "ZBgFIAEoDRIUCgxza2lsbF9pZF9haXIYBiABKA0SFgoOZ2F1Z2VfcmVxdWly",
            "ZWQYByABKAUSIwobZnVsbF9jaGFyZ2VfYnVmZl9zcGVjaWVzX2lkGAggASgN",
            "EhwKFGZ1bGxfY2hhcmdlX3NraWxsX2lkGAkgASgNIoYBCg1JbnZlbnRvcnlT",
            "bG90EjQKCnN0b2NrX3R5cGUYASABKA4yIC5qdHNoYXJlZC5JbnZlbnRvcnlT",
            "bG90U3RvY2tUeXBlEg0KBXF1b3RhGAIgASgNEhkKEWZyYW1lc190b19yZWNv",
            "dmVyGAMgASgFEhUKDWdhdWdlX2NoYXJnZWQYBCABKAUiMwoJSW52ZW50b3J5",
            "EiYKBXNsb3RzGAEgAygLMhcuanRzaGFyZWQuSW52ZW50b3J5U2xvdCIlCg9C",
            "YXR0bGVFcXVpcG1lbnQSEgoKc3BlY2llc19pZBgBIAEoDSImCg5QbGF5ZXJT",
            "ZXR0aW5ncxIUCgxzb3VuZF92b2x1bWUYASABKAUi9AIKFFBsYXllclJlZ2lv",
            "blByb2dyZXNzEhEKCXJlZ2lvbl9pZBgBIAEoBRIdChVjb21wbGV0ZWRfbGV2",
            "ZWxfY291bnQYAiABKAUSWQoWcmVtYWluaW5nX2RlcGVuZGVuY2llcxgDIAMo",
            "CzI5Lmp0c2hhcmVkLlBsYXllclJlZ2lvblByb2dyZXNzLlJlbWFpbmluZ0Rl",
            "cGVuZGVuY2llc0VudHJ5ElUKFHJlbW92ZWRfZGVwZW5kZW5jaWVzGAQgAygL",
            "MjcuanRzaGFyZWQuUGxheWVyUmVnaW9uUHJvZ3Jlc3MuUmVtb3ZlZERlcGVu",
            "ZGVuY2llc0VudHJ5GjwKGlJlbWFpbmluZ0RlcGVuZGVuY2llc0VudHJ5EgsK",
            "A2tleRgBIAEoBRINCgV2YWx1ZRgCIAEoCDoCOAEaOgoYUmVtb3ZlZERlcGVu",
            "ZGVuY2llc0VudHJ5EgsKA2tleRgBIAEoBRINCgV2YWx1ZRgCIAEoCDoCOAEi",
            "1AQKE1BsYXllckxldmVsUHJvZ3Jlc3MSEQoJcmVnaW9uX2lkGAEgASgFEhAK",
            "CGxldmVsX2lkGAIgASgFEhUKDWhpZ2hlc3Rfc2NvcmUYAyABKAUSLQolc2hv",
            "cnRlc3RfZmluaXNoX3RpbWVfYXRfaGlnaGVzdF9zY29yZRgEIAEoBRItCiVj",
            "aGFyYWN0ZXJfc3BlY2llc19pZF9hdF9oaWdoZXN0X3Njb3JlGAUgASgNEhwK",
            "FHNob3J0ZXN0X2ZpbmlzaF90aW1lGAYgASgFEiUKHXNjb3JlX2F0X3Nob3J0",
            "ZXN0X2ZpbmlzaF90aW1lGAcgASgFEjQKLGNoYXJhY3Rlcl9zcGVjaWVzX2lk",
            "X2F0X3Nob3J0ZXN0X2ZpbmlzaF90aW1lGAggASgNElgKFnJlbWFpbmluZ19k",
            "ZXBlbmRlbmNpZXMYCSADKAsyOC5qdHNoYXJlZC5QbGF5ZXJMZXZlbFByb2dy",
            "ZXNzLlJlbWFpbmluZ0RlcGVuZGVuY2llc0VudHJ5ElQKFHJlbW92ZWRfZGVw",
            "ZW5kZW5jaWVzGAogAygLMjYuanRzaGFyZWQuUGxheWVyTGV2ZWxQcm9ncmVz",
            "cy5SZW1vdmVkRGVwZW5kZW5jaWVzRW50cnkaPAoaUmVtYWluaW5nRGVwZW5k",
            "ZW5jaWVzRW50cnkSCwoDa2V5GAEgASgFEg0KBXZhbHVlGAIgASgIOgI4ARo6",
            "ChhSZW1vdmVkRGVwZW5kZW5jaWVzRW50cnkSCwoDa2V5GAEgASgFEg0KBXZh",
            "bHVlGAIgASgIOgI4ASLcAgoWUGxheWVyQ2hVbmxvY2tQcm9ncmVzcxISCgpz",
            "cGVjaWVzX2lkGAEgASgNElsKFnJlbWFpbmluZ19kZXBlbmRlbmNpZXMYAiAD",
            "KAsyOy5qdHNoYXJlZC5QbGF5ZXJDaFVubG9ja1Byb2dyZXNzLlJlbWFpbmlu",
            "Z0RlcGVuZGVuY2llc0VudHJ5ElcKFHJlbW92ZWRfZGVwZW5kZW5jaWVzGAMg",
            "AygLMjkuanRzaGFyZWQuUGxheWVyQ2hVbmxvY2tQcm9ncmVzcy5SZW1vdmVk",
            "RGVwZW5kZW5jaWVzRW50cnkaPAoaUmVtYWluaW5nRGVwZW5kZW5jaWVzRW50",
            "cnkSCwoDa2V5GAEgASgFEg0KBXZhbHVlGAIgASgIOgI4ARo6ChhSZW1vdmVk",
            "RGVwZW5kZW5jaWVzRW50cnkSCwoDa2V5GAEgASgFEg0KBXZhbHVlGAIgASgI",
            "OgI4ASKtBQoTUGxheWVyU3RvcnlQcm9ncmVzcxJTChRyZWdpb25fcHJvZ3Jl",
            "c3NfZGljdBgBIAMoCzI1Lmp0c2hhcmVkLlBsYXllclN0b3J5UHJvZ3Jlc3Mu",
            "UmVnaW9uUHJvZ3Jlc3NEaWN0RW50cnkSUQoTbGV2ZWxfcHJvZ3Jlc3NfZGlj",
            "dBgCIAMoCzI0Lmp0c2hhcmVkLlBsYXllclN0b3J5UHJvZ3Jlc3MuTGV2ZWxQ",
            "cm9ncmVzc0RpY3RFbnRyeRIYChBjdXJzb3JfcmVnaW9uX2lkGAMgASgFEhcK",
            "D2N1cnNvcl9sZXZlbF9pZBgEIAEoBRIxCgR2aWV3GAUgASgOMiMuanRzaGFy",
            "ZWQuUGxheWVyU3RvcnlNb2RlU2VsZWN0VmlldxIbChNzYXZlZF9hdF9nbXRf",
            "bWlsbGlzGAYgASgEElgKF2NoX3VubG9ja19wcm9ncmVzc19kaWN0GAcgAygL",
            "MjcuanRzaGFyZWQuUGxheWVyU3RvcnlQcm9ncmVzcy5DaFVubG9ja1Byb2dy",
            "ZXNzRGljdEVudHJ5GlkKF1JlZ2lvblByb2dyZXNzRGljdEVudHJ5EgsKA2tl",
            "eRgBIAEoBRItCgV2YWx1ZRgCIAEoCzIeLmp0c2hhcmVkLlBsYXllclJlZ2lv",
            "blByb2dyZXNzOgI4ARpXChZMZXZlbFByb2dyZXNzRGljdEVudHJ5EgsKA2tl",
            "eRgBIAEoBRIsCgV2YWx1ZRgCIAEoCzIdLmp0c2hhcmVkLlBsYXllckxldmVs",
            "UHJvZ3Jlc3M6AjgBGl0KGUNoVW5sb2NrUHJvZ3Jlc3NEaWN0RW50cnkSCwoD",
            "a2V5GAEgASgNEi8KBXZhbHVlGAIgASgLMiAuanRzaGFyZWQuUGxheWVyQ2hV",
            "bmxvY2tQcm9ncmVzczoCOAEiigIKGVBsYXllck9ubGluZUFyZW5hUHJvZ3Jl",
            "c3MSGwoTc2F2ZWRfYXRfZ210X21pbGxpcxgBIAEoBBIRCglwbGF5ZXJfaWQY",
            "AiABKAkSXgoXY2hfdW5sb2NrX3Byb2dyZXNzX2RpY3QYAyADKAsyPS5qdHNo",
            "YXJlZC5QbGF5ZXJPbmxpbmVBcmVuYVByb2dyZXNzLkNoVW5sb2NrUHJvZ3Jl",
            "c3NEaWN0RW50cnkaXQoZQ2hVbmxvY2tQcm9ncmVzc0RpY3RFbnRyeRILCgNr",
            "ZXkYASABKA0SLwoFdmFsdWUYAiABKAsyIC5qdHNoYXJlZC5QbGF5ZXJDaFVu",
            "bG9ja1Byb2dyZXNzOgI4ASJuChRTdG9yeVBvaW50RGlhbG9nTGluZRITCgtu",
            "YXJyYXRvcl91ZBgBIAEoBBIbChNuYXJyYXRvcl9zcGVjaWVzX2lkGAIgASgN",
            "Eg8KB2NvbnRlbnQYAyABKAkSEwoLZG93bl9vcl9ub3QYBCABKAgiYAoOU3Rv",
            "cnlQb2ludFN0ZXASLQoFbGluZXMYASADKAsyHi5qdHNoYXJlZC5TdG9yeVBv",
            "aW50RGlhbG9nTGluZRIfChdub25jdHJsX2FsaXZlX3JkZl9jb3VudBgCIAEo",
            "BSJdCgpTdG9yeVBvaW50EicKBXN0ZXBzGAEgAygLMhguanRzaGFyZWQuU3Rv",
            "cnlQb2ludFN0ZXASDwoHbm9uY3RybBgCIAEoCBIVCg1jdXRzY2VuZV9uYW1l",
            "GAMgASgJIoMBCgpMZXZlbFN0b3J5EjAKBnBvaW50cxgBIAMoCzIgLmp0c2hh",
            "cmVkLkxldmVsU3RvcnkuUG9pbnRzRW50cnkaQwoLUG9pbnRzRW50cnkSCwoD",
            "a2V5GAEgASgFEiMKBXZhbHVlGAIgASgLMhQuanRzaGFyZWQuU3RvcnlQb2lu",
            "dDoCOAEiTwoZU2VyaWFsaXphYmxlQ29udmV4UG9seWdvbhIQCghhbmNob3Jf",
            "eBgBIAEoAhIQCghhbmNob3JfeRgCIAEoAhIOCgZwb2ludHMYAyADKAIihgEK",
            "K1NlcmlhbGl6ZWRDb21wbGV0ZWx5U3RhdGljUGF0cm9sQ3VlQ29sbGlkZXIS",
            "IQoEYXR0chgBIAEoCzITLmp0c2hhcmVkLlBhdHJvbEN1ZRI0Cgdwb2x5Z29u",
            "GAIgASgLMiMuanRzaGFyZWQuU2VyaWFsaXphYmxlQ29udmV4UG9seWdvbiKI",
            "AQomU2VyaWFsaXplZENvbXBsZXRlbHlTdGF0aWNUcmFwQ29sbGlkZXISKAoE",
            "YXR0chgBIAEoCzIaLmp0c2hhcmVkLlRyYXBDb2xsaWRlckF0dHISNAoHcG9s",
            "eWdvbhgCIAEoCzIjLmp0c2hhcmVkLlNlcmlhbGl6YWJsZUNvbnZleFBvbHln",
            "b24ijgEKKVNlcmlhbGl6ZWRDb21wbGV0ZWx5U3RhdGljVHJpZ2dlckNvbGxp",
            "ZGVyEisKBGF0dHIYASABKAsyHS5qdHNoYXJlZC5UcmlnZ2VyQ29sbGlkZXJB",
            "dHRyEjQKB3BvbHlnb24YAiABKAsyIy5qdHNoYXJlZC5TZXJpYWxpemFibGVD",
            "b252ZXhQb2x5Z29uIkEKFVRyYXBDb2xsaWRlckF0dHJBcnJheRIoCgRsaXN0",
            "GAEgAygLMhouanRzaGFyZWQuVHJhcENvbGxpZGVyQXR0ciK8AQokU2VyaWFs",
            "aXplZFRyYXBMb2NhbElkVG9Db2xsaWRlckF0dHJzEkYKBGRpY3QYASADKAsy",
            "OC5qdHNoYXJlZC5TZXJpYWxpemVkVHJhcExvY2FsSWRUb0NvbGxpZGVyQXR0",
            "cnMuRGljdEVudHJ5GkwKCURpY3RFbnRyeRILCgNrZXkYASABKAUSLgoFdmFs",
            "dWUYAiABKAsyHy5qdHNoYXJlZC5UcmFwQ29sbGlkZXJBdHRyQXJyYXk6AjgB",
            "Iq8CCiJTZXJpYWxpemVkVHJpZ2dlckVkaXRvcklkVG9Mb2NhbElkEkQKBGRp",
            "Y3QYASADKAsyNi5qdHNoYXJlZC5TZXJpYWxpemVkVHJpZ2dlckVkaXRvcklk",
            "VG9Mb2NhbElkLkRpY3RFbnRyeRJGCgVkaWN0MhgCIAMoCzI3Lmp0c2hhcmVk",
            "LlNlcmlhbGl6ZWRUcmlnZ2VyRWRpdG9ySWRUb0xvY2FsSWQuRGljdDJFbnRy",
            "eRorCglEaWN0RW50cnkSCwoDa2V5GAEgASgFEg0KBXZhbHVlGAIgASgFOgI4",
            "ARpOCgpEaWN0MkVudHJ5EgsKA2tleRgBIAEoBRIvCgV2YWx1ZRgCIAEoCzIg",
            "Lmp0c2hhcmVkLlRyaWdnZXJDb25maWdGcm9tVGlsZWQ6AjgBIrQDChdQaWNr",
            "YWJsZUNvbmZpZ0Zyb21UaWxlZBIbChNpbml0X3ZpcnR1YWxfZ3JpZF94GAEg",
            "ASgFEhsKE2luaXRfdmlydHVhbF9ncmlkX3kYAiABKAUSFQoNdGFrZXNfZ3Jh",
            "dml0eRgDIAEoCBIZChFmaXJzdF9zaG93X3JkZl9pZBgEIAEoBRITCgtyZWN1",
            "cl9xdW90YRgFIAEoBRIgChhyZWN1cl9pbnRlcnZhbF9yZGZfY291bnQYBiAB",
            "KA0SKQohbGlmZXRpbWVfcmRmX2NvdW50X3Blcl9vY2N1cnJlbmNlGAcgASgN",
            "EikKC3BpY2t1cF90eXBlGAggASgOMhQuanRzaGFyZWQuUGlja3VwVHlwZRIi",
            "ChpzdG9ja19xdW90YV9wZXJfb2NjdXJyZW5jZRgJIAEoDRIXCg9zdWJzY3Jp",
            "cHRpb25faWQYCiABKAUSFgoOdmZ4X3NwZWNpZXNfaWQYCyABKAUSHgoVY29u",
            "c3VtYWJsZV9zcGVjaWVzX2lkGIAIIAEoDRIYCg9idWZmX3NwZWNpZXNfaWQY",
            "gQggASgNEhEKCHNraWxsX2lkGIIIIAEoDSKnAgoIUGlja2FibGUSCgoCaWQY",
            "ASABKA0SCQoBeBgCIAEoAhIJCgF5GAMgASgCEjwKEWNvbmZpZ19mcm9tX3Rp",
            "bGVkGAQgASgLMiEuanRzaGFyZWQuUGlja2FibGVDb25maWdGcm9tVGlsZWQS",
            "JAoccmVtYWluaW5nX2xpZmV0aW1lX3JkZl9jb3VudBgFIAEoBRIdChVyZW1h",
            "aW5pbmdfcmVjdXJfcXVvdGEYBiABKAUSDQoFdmVsX3gYByABKAISDQoFdmVs",
            "X3kYCCABKAISKQoIcGtfc3RhdGUYCSABKA4yFy5qdHNoYXJlZC5QaWNrYWJs",
            "ZVN0YXRlEhoKEmZyYW1lc19pbl9wa19zdGF0ZRgKIAEoBRIRCglwaWNrZXJf",
            "dWQYCyABKAQiNgoRSW5qZWN0ZWRDbWRDb25maWcSFQoNY3V0b2ZmX3JkZl9p",
            "ZBgBIAEoBRIKCgJvcBgCIAEoBCJeChZDaGFyYWN0ZXJTcGF3bmVyQ29uZmln",
            "EhUKDWN1dG9mZl9yZGZfaWQYASABKAUSFwoPc3BlY2llc19pZF9saXN0GAIg",
            "AygNEhQKDGluaXRfb3BfbGlzdBgDIAMoBCKNAQoVUGlja2FibGVTcGF3bmVy",
            "Q29uZmlnEhUKDWN1dG9mZl9yZGZfaWQYASABKAUSFwoPc3BlY2llc19pZF9s",
            "aXN0GAIgAygNEhQKDGluaXRfb3BfbGlzdBgDIAMoBBIuChBwaWNrdXBfdHlw",
            "ZV9saXN0GAQgAygOMhQuanRzaGFyZWQuUGlja3VwVHlwZSI1ChNUcmlnZ2Vy",
            "Q29sbGlkZXJBdHRyEgoKAmlkGAEgASgFEhIKCnNwZWNpZXNfaWQYAiABKAUi",
            "1QYKFlRyaWdnZXJDb25maWdGcm9tVGlsZWQSEQoJZWRpdG9yX2lkGAEgASgF",
            "EhIKCnNwZWNpZXNfaWQYAiABKAUSFgoOZGVsYXllZF9mcmFtZXMYAyABKAUS",
            "FwoPcmVjb3ZlcnlfZnJhbWVzGAQgASgFEhYKDmJ1bGxldF90ZWFtX2lkGAUg",
            "ASgFEiAKGHN1Yl9jeWNsZV90cmlnZ2VyX2ZyYW1lcxgGIAEoBRIXCg9zdWJf",
            "Y3ljbGVfcXVvdGEYByABKAUSEQoJcXVvdGFfY2FwGAggASgFEh0KFXN1YnNj",
            "cmliZXNfdG9faWRfbGlzdBgJIAMoBRInCh9zdWJzY3JpYmVzX3RvX2V4aGF1",
            "c3RlZF9pZF9saXN0GAogAygFEhUKDW5ld19yZXZpdmFsX3gYCyABKAISFQoN",
            "bmV3X3Jldml2YWxfeRgMIAEoAhISCgppbml0X2Rpcl94GA0gASgFEhIKCmlu",
            "aXRfZGlyX3kYDiABKAUSKgoicHVibGlzaGluZ19ldnRfbWFza191cG9uX2V4",
            "aGF1c3RlZBgPIAEoBBJEChpjaGFyYWN0ZXJfc3Bhd25lcl90aW1lX3NlcRgQ",
            "IAMoCzIgLmp0c2hhcmVkLkNoYXJhY3RlclNwYXduZXJDb25maWcSQgoZcGlj",
            "a2FibGVfc3Bhd25lcl90aW1lX3NlcRgRIAMoCzIfLmp0c2hhcmVkLlBpY2th",
            "YmxlU3Bhd25lckNvbmZpZxIcChRmb3JjZV9jdHJsX3JkZl9jb3VudBgSIAEo",
            "BRIWCg5mb3JjZV9jdHJsX2NtZBgTIAEoBBIlCh1yZWxvYWRfY29sbGlkZXJz",
            "X2luX25ld19waGFzZRgUIAEoCBIXCg5zdG9yeV9wb2ludF9pZBiACCABKAUS",
            "DwoGYmdtX2lkGIEIIAEoBRJPChBib3NzX3NwZWNpZXNfc2V0GIIIIAMoCzI0",
            "Lmp0c2hhcmVkLlRyaWdnZXJDb25maWdGcm9tVGlsZWQuQm9zc1NwZWNpZXNT",
            "ZXRFbnRyeRIaChFpc19ib3NzX3NhdmVwb2ludBiDCCABKAgaNQoTQm9zc1Nw",
            "ZWNpZXNTZXRFbnRyeRILCgNrZXkYASABKA0SDQoFdmFsdWUYAiABKAg6AjgB",
            "It4DCgdUcmlnZ2VyEhEKCWVkaXRvcl9pZBgBIAEoBRIKCgJpZBgCIAEoBRIW",
            "Cg5mcmFtZXNfdG9fZmlyZRgDIAEoBRIZChFmcmFtZXNfdG9fcmVjb3ZlchgE",
            "IAEoBRINCgVxdW90YRgFIAEoBRIWCg5idWxsZXRfdGVhbV9pZBgGIAEoBRIN",
            "CgVkaXJfeBgHIAEoBRIcChRzdWJfY3ljbGVfcXVvdGFfbGVmdBgJIAEoBRIl",
            "CgVzdGF0ZRgKIAEoDjIWLmp0c2hhcmVkLlRyaWdnZXJTdGF0ZRIXCg9mcmFt",
            "ZXNfaW5fc3RhdGUYCyABKAUSCQoBeBgMIAEoAhIJCgF5GA0gASgCEhkKEWRl",
            "bWFuZGVkX2V2dF9tYXNrGA4gASgEEhoKEmZ1bGZpbGxlZF9ldnRfbWFzaxgP",
            "IAEoBBIoCiB3YXZlX25wY19raWxsZWRfZXZ0X21hc2tfY291bnRlchgQIAEo",
            "BBIbChNzdWJzY3JpYmVyX2lkc19tYXNrGBEgASgEEiMKG2V4aGF1c3Rfc3Vi",
            "c2NyaWJlcl9pZHNfbWFzaxgSIAEoBBITCgtvZmZlbmRlcl91ZBgTIAEoBBIf",
            "ChdvZmZlbmRlcl9idWxsZXRfdGVhbV9pZBgUIAEoBSJ0Cg5QbGF5ZXJNZXRh",
            "SW5mbxIRCglwbGF5ZXJfaWQYASABKAkSEgoKam9pbl9pbmRleBgCIAEoDRIW",
            "Cg5idWxsZXRfdGVhbV9pZBgDIAEoBRISCgpzcGVjaWVzX2lkGAQgASgNEg8K",
            "B3Jvb21faWQYBSABKAUicwoRUnBjRW5kcG9pbnRIb2xkZXISCgoCaWQYASAB",
            "KA0SGgoSZXh0ZXJuYWxfYWRkcl9ob3N0GAIgASgJEhoKEmV4dGVybmFsX2Fk",
            "ZHJfcG9ydBgDIAEoDRIaChJpbnRlcm5hbF9hZGRyX2hvc3QYBCABKAki7SoK",
            "D1ByaW1pdGl2ZUNvbnN0cxIbChNiYXR0bGVfZHluYW1pY3NfZnBzGAEgASgF",
            "EjIKKmRlZmF1bHRfdGltZW91dF9mb3JfbGFzdF9hbGxfY29uZmlybWVkX2lm",
            "ZBgCIAEoBRIUCgxyb29tX2lkX25vbmUYAyABKAUSHQoVcm9vbV9zdGF0ZV9p",
            "bXBvc3NpYmxlGAQgASgFEhcKD3Jvb21fc3RhdGVfaWRsZRgFIAEoBRIaChJy",
            "b29tX3N0YXRlX3dhaXRpbmcYBiABKAUSGgoScm9vbV9zdGF0ZV9wcmVwYXJl",
            "GAcgASgFEhwKFHJvb21fc3RhdGVfaW5fYmF0dGxlGAggASgFEiAKGHJvb21f",
            "c3RhdGVfaW5fc2V0dGxlbWVudBgJIAEoBRIaChJyb29tX3N0YXRlX3N0b3Bw",
            "ZWQYCiABKAUSMAoocm9vbV9zdGF0ZV9mcm9udGVuZF9hd2FpdGluZ19hdXRv",
            "X3Jlam9pbhgLIAEoBRIyCipyb29tX3N0YXRlX2Zyb250ZW5kX2F3YWl0aW5n",
            "X21hbnVhbF9yZWpvaW4YDCABKAUSJQodcm9vbV9zdGF0ZV9mcm9udGVuZF9y",
            "ZWpvaW5pbmcYDSABKAUSJgoecGxheWVyX2JhdHRsZV9zdGF0ZV9pbXBvc3Np",
            "YmxlGA4gASgFEj0KNXBsYXllcl9iYXR0bGVfc3RhdGVfYWRkZWRfcGVuZGlu",
            "Z19iYXR0bGVfY29sbGlkZXJfYWNrGA8gASgFEjgKMHBsYXllcl9iYXR0bGVf",
            "c3RhdGVfcmVhZGRlZF9wZW5kaW5nX2ZvcmNlX3Jlc3luYxgQIAEoBRIiChpw",
            "bGF5ZXJfYmF0dGxlX3N0YXRlX2FjdGl2ZRgRIAEoBRIoCiBwbGF5ZXJfYmF0",
            "dGxlX3N0YXRlX2Rpc2Nvbm5lY3RlZBgSIAEoBRIgChhwbGF5ZXJfYmF0dGxl",
            "X3N0YXRlX2xvc3QYEyABKAUSMAoocGxheWVyX2JhdHRsZV9zdGF0ZV9leHBl",
            "bGxlZF9kdXJpbmdfZ2FtZRgUIAEoBRIxCilwbGF5ZXJfYmF0dGxlX3N0YXRl",
            "X2V4cGVsbGVkX2luX2Rpc21pc3NhbBgVIAEoBRIqCiJ1cHN5bmNfbXNnX2Fj",
            "dF9wbGF5ZXJfY29sbGlkZXJfYWNrGBYgASgFEiEKGXVwc3luY19tc2dfYWN0",
            "X3BsYXllcl9jbWQYFyABKAUSMwordXBzeW5jX21zZ19hY3RfaG9sZXB1bmNo",
            "X2JhY2tlbmRfdWRwX3R1bm5lbBgYIAEoBRIuCiZ1cHN5bmNfbXNnX2FjdF9o",
            "b2xlcHVuY2hfcGVlcl91ZHBfYWRkchgZIAEoBRItCiVkb3duc3luY19tc2df",
            "YWN0X2JhdHRsZV9jb2xsaWRlcl9pbmZvGBogASgFEiQKHGRvd25zeW5jX21z",
            "Z19hY3RfaW5wdXRfYmF0Y2gYGyABKAUSJwofZG93bnN5bmNfbXNnX2FjdF9i",
            "YXR0bGVfc3RvcHBlZBgcIAEoBRImCh5kb3duc3luY19tc2dfYWN0X2ZvcmNl",
            "ZF9yZXN5bmMYHSABKAUSKQohZG93bnN5bmNfbXNnX2FjdF9wZWVyX2lucHV0",
            "X2JhdGNoGB4gASgFEiYKHmRvd25zeW5jX21zZ19hY3RfcGVlcl91ZHBfYWRk",
            "chgfIAEoBRIuCiZkb3duc3luY19tc2dfYWN0X2JhdHRsZV9yZWFkeV90b19z",
            "dGFydBggIAEoBRIlCh1kb3duc3luY19tc2dfYWN0X2JhdHRsZV9zdGFydBgh",
            "IAEoBRIsCiRkb3duc3luY19tc2dfYWN0X3BsYXllcl9kaXNjb25uZWN0ZWQY",
            "IiABKAUSMQopZG93bnN5bmNfbXNnX2FjdF9wbGF5ZXJfcmVhZGRlZF9hbmRf",
            "YWNrZWQYIyABKAUSLwonZG93bnN5bmNfbXNnX2FjdF9wbGF5ZXJfYWRkZWRf",
            "YW5kX2Fja2VkGCQgASgFEh4KFmRvd25zeW5jX21zZ193c19jbG9zZWQYJSAB",
            "KAUSHAoUZG93bnN5bmNfbXNnX3dzX29wZW4YJiABKAUSIAoYbWFnaWNfam9p",
            "bl9pbmRleF9pbnZhbGlkGCcgASgNEicKH21hZ2ljX2pvaW5faW5kZXhfc3J2",
            "X3VkcF90dW5uZWwYKCABKA0SHAoUbWFnaWNfcXVvdGFfaW5maW5pdGUYKSAB",
            "KAUSJQodbnBjX2ZsZWVfZ3JhY2VfcGVyaW9kX3JkZl9jbnQYKiABKAUSMwor",
            "bWFnaWNfbGFzdF9zZW50X2lucHV0X2ZyYW1lX2lkX25vcm1hbF9hZGRlZBgr",
            "IAEoBRIuCiZtYWdpY19sYXN0X3NlbnRfaW5wdXRfZnJhbWVfaWRfcmVhZGRl",
            "ZBgsIAEoBRIVCg1iZ21fbm9fY2hhbmdlGC0gASgFEiEKGWludmFsaWRfZGVm",
            "YXVsdF9wbGF5ZXJfaWQYLiABKAUSIQoZZXN0aW1hdGVkX3NlY29uZHNfcGVy",
            "X3JkZhgvIAEoAhIfChdtYXhfYnRuX2hvbGRpbmdfcmRmX2NudBgwIAEoBRIa",
            "ChJtYXhfZmx5aW5nX3JkZl9jbnQYMSABKAUSLgombWF4X3JldmVyc2VfcHVz",
            "aGJhY2tfZnJhbWVzX3RvX3JlY292ZXIYMiABKAUSHQoVdGVybWluYXRpbmdf",
            "ZXZ0c3ViX2lkGDMgASgFEh0KFW1hZ2ljX2V2dHN1Yl9pZF9kdW1teRg0IAEo",
            "BRIjChtzcGVlZF9ub3RfaGl0X25vdF9zcGVjaWZpZWQYNSABKAUSJQodZGVm",
            "YXVsdF9wcmVhbGxvY19ucGNfY2FwYWNpdHkYNiABKAUSKAogZGVmYXVsdF9w",
            "cmVhbGxvY19idWxsZXRfY2FwYWNpdHkYNyABKAUSJgoeZGVmYXVsdF9wcmVh",
            "bGxvY190cmFwX2NhcGFjaXR5GDggASgFEikKIWRlZmF1bHRfcHJlYWxsb2Nf",
            "dHJpZ2dlcl9jYXBhY2l0eRg5IAEoBRIqCiJkZWZhdWx0X3ByZWFsbG9jX3Bp",
            "Y2thYmxlX2NhcGFjaXR5GDogASgFEisKI2RlZmF1bHRfcGVyX2NoYXJhY3Rl",
            "cl9idWZmX2NhcGFjaXR5GDsgASgFEi0KJWRlZmF1bHRfcGVyX2NoYXJhY3Rl",
            "cl9kZWJ1ZmZfY2FwYWNpdHkYPCABKAUSMAooZGVmYXVsdF9wZXJfY2hhcmFj",
            "dGVyX2ludmVudG9yeV9jYXBhY2l0eRg9IAEoBRI7CjNkZWZhdWx0X3Blcl9j",
            "aGFyYWN0ZXJfaW1tdW5lX2J1bGxldF9yZWNvcmRfY2FwYWNpdHkYPiABKAUS",
            "EQoJZ3Jhdml0eV95GD8gASgCEh4KFmdyYXZpdHlfeV9qdW1wX2hvbGRpbmcY",
            "QCABKAISKQohZGVmYXVsdF9wYXRyb2xfY3VlX3dhaXZpbmdfZnJhbWVzGEEg",
            "ASgFEhgKEG5vX3BhdHJvbF9jdWVfaWQYQiABKAUSEQoJbm9fdmZ4X2lkGEMg",
            "ASgFEiYKHmRlZmF1bHRfcGlja2FibGVfaGl0Ym94X3NpemVfeBhEIAEoAhIm",
            "Ch5kZWZhdWx0X3BpY2thYmxlX2hpdGJveF9zaXplX3kYRSABKAISMQopZGVm",
            "YXVsdF9waWNrYWJsZV9kaXNhcHBlYXJpbmdfYW5pbV9mcmFtZXMYRiABKAUS",
            "LQolZGVmYXVsdF9waWNrYWJsZV9jb25zdW1lZF9hbmltX2ZyYW1lcxhHIAEo",
            "BRIlCh1kZWZhdWx0X3BpY2thYmxlX3Jpc2luZ192ZWxfeRhIIAEoAhIzCitk",
            "ZWZhdWx0X3BpY2thYmxlX25vbnBpY2thYmxlX3N0YXJ0dXBfZnJhbWVzGEkg",
            "ASgFEiYKHmRlZmF1bHRfZnJhbWVzX3RvX3Nob3dfZGFtYWdlZBhKIAEoBRIo",
            "CiBkZWZhdWx0X2ZyYW1lc190b19jb250aW51ZV9jb21ibxhLIAEoBRIhChlk",
            "ZWZhdWx0X2Jsb2NrX3N0dW5fZnJhbWVzGEwgASgFEikKIWRlZmF1bHRfYmxv",
            "d251cF9mcmFtZXNfZm9yX2ZseWluZxhNIAEoBRIgChhkZWZhdWx0X2dhdWdl",
            "X2luY19ieV9oaXQYTiABKAUSMAooZGVmYXVsdF9mcmFtZXNfZGVsYXllZF9v",
            "Zl9ib3NzX3NhdmVwb2ludBhPIAEoBRIaChJpbnB1dF9zY2FsZV9mcmFtZXMY",
            "UCABKAUSEwoLaW5wdXRfc2NhbGUYUSABKAUSGgoSaW5wdXRfZGVsYXlfZnJh",
            "bWVzGFIgASgFEikKIWRlZmF1bHRfYmFja2VuZF9pbnB1dF9idWZmZXJfc2l6",
            "ZRhTIAEoBRIiChptYWdpY19mcmFtZXNfdG9fYmVfb25fd2FsbBhWIAEoBRIf",
            "ChdkeWluZ19mcmFtZXNfdG9fcmVjb3ZlchhXIAEoBRIhChlwYXJyaWVkX2Zy",
            "YW1lc190b19yZWNvdmVyGFggASgFEisKI3BhcnJpZWRfZnJhbWVzX3RvX3N0",
            "YXJ0X2NhbmNlbGxhYmxlGFkgASgFEhAKCG5vX3NraWxsGFogASgNEhQKDG5v",
            "X3NraWxsX2hpdBhbIAEoBRITCgtub19sb2NrX3ZlbBheIAEoAhIgChhkZWJ1",
            "ZmZfYXJyX2lkeF9lbGVtZW50YWwYXyABKAUSIwobdGVybWluYXRpbmdfcmVu",
            "ZGVyX2ZyYW1lX2lkGGAgASgFEiIKGnRlcm1pbmF0aW5nX2lucHV0X2ZyYW1l",
            "X2lkGGEgASgFEiAKGHRlcm1pbmF0aW5nX2NoYXJhY3Rlcl9pZBhiIAEoDRIb",
            "ChN0ZXJtaW5hdGluZ190cmFwX2lkGGMgASgNEh4KFnRlcm1pbmF0aW5nX3Ry",
            "aWdnZXJfaWQYZCABKA0SHwoXdGVybWluYXRpbmdfcGlja2FibGVfaWQYZSAB",
            "KA0SHQoVdGVybWluYXRpbmdfYnVsbGV0X2lkGGYgASgNEiIKGnRlcm1pbmF0",
            "aW5nX2J1bGxldF90ZWFtX2lkGGcgASgFEiMKG3Rlcm1pbmF0aW5nX2J1ZmZf",
            "c3BlY2llc19pZBhoIAEoDRIlCh10ZXJtaW5hdGluZ19kZWJ1ZmZfc3BlY2ll",
            "c19pZBhpIAEoDRIpCiF0ZXJtaW5hdGluZ19jb25zdW1hYmxlX3NwZWNpZXNf",
            "aWQYaiABKA0SIwobZnJvbnRlbmRfd3NfcmVjdl9ieXRlbGVuZ3RoGGsgASgF",
            "EiIKGmJhY2tlbmRfd3NfcmVjdl9ieXRlbGVuZ3RoGGwgASgFEiIKGmphbW1l",
            "ZF9idG5faG9sZGluZ19yZGZfY250GG0gASgFEikKIWJ0bl9iX2hvbGRpbmdf",
            "cmRmX2NudF90aHJlc2hvbGRfMhhuIAEoBRIpCiFidG5fYl9ob2xkaW5nX3Jk",
            "Zl9jbnRfdGhyZXNob2xkXzEYbyABKAUSKAoganVtcF9ob2xkaW5nX3JkZl9j",
            "bnRfdGhyZXNob2xkXzEYcCABKAUSKAoganVtcF9ob2xkaW5nX2lmZF9jbnRf",
            "dGhyZXNob2xkXzEYcSABKAUSKAoganVtcF9ob2xkaW5nX3JkZl9jbnRfdGhy",
            "ZXNob2xkXzIYciABKAUSKAoganVtcF9ob2xkaW5nX2lmZF9jbnRfdGhyZXNo",
            "b2xkXzIYcyABKAUSKAogaW5fYWlyX2Rhc2hfZ3JhY2VfcGVyaW9kX3JkZl9j",
            "bnQYdCABKAUSKAogaW5fYWlyX2p1bXBfZ3JhY2VfcGVyaW9kX3JkZl9jbnQY",
            "dSABKAUSKQohYnRuX2VfaG9sZGluZ19yZGZfY250X3RocmVzaG9sZF8xGHYg",
            "ASgFEikKIWJ0bl9lX2hvbGRpbmdfaWZkX2NudF90aHJlc2hvbGRfMRh3IAEo",
            "BRIcChRzcF9hdGtfbG9va3VwX2ZyYW1lcxh4IAEoBRIfChdwYXR0ZXJuX2lk",
            "X3VuYWJsZV90b19vcBh5IAEoBRIYChBwYXR0ZXJuX2lkX25vX29wGHogASgF",
            "EhEKCXBhdHRlcm5fYhh7IAEoBRIUCgxwYXR0ZXJuX3VwX2IYfCABKAUSFgoO",
            "cGF0dGVybl9kb3duX2IYfSABKAUSFgoOcGF0dGVybl9ob2xkX2IYfiABKAUS",
            "FgoOcGF0dGVybl9kb3duX2EYfyABKAUSGwoScGF0dGVybl9yZWxlYXNlZF9i",
            "GIABIAEoBRISCglwYXR0ZXJuX2UYgQEgASgFEhgKD3BhdHRlcm5fZnJvbnRf",
            "ZRiCASABKAUSFwoOcGF0dGVybl9iYWNrX2UYgwEgASgFEhUKDHBhdHRlcm5f",
            "dXBfZRiEASABKAUSFwoOcGF0dGVybl9kb3duX2UYhQEgASgFEhcKDnBhdHRl",
            "cm5faG9sZF9lGIYBIAEoBRIZChBwYXR0ZXJuX2VfaG9sZF9iGIcBIAEoBRIf",
            "ChZwYXR0ZXJuX2Zyb250X2VfaG9sZF9iGIgBIAEoBRIeChVwYXR0ZXJuX2Jh",
            "Y2tfZV9ob2xkX2IYiQEgASgFEhwKE3BhdHRlcm5fdXBfZV9ob2xkX2IYigEg",
            "ASgFEh4KFXBhdHRlcm5fZG93bl9lX2hvbGRfYhiLASABKAUSHgoVcGF0dGVy",
            "bl9ob2xkX2VfaG9sZF9iGIwBIAEoBRIhChhwYXR0ZXJuX2ludmVudG9yeV9z",
            "bG90X2MYjQEgASgFEiEKGHBhdHRlcm5faW52ZW50b3J5X3Nsb3RfZBiOASAB",
            "KAUSIgoZcGF0dGVybl9pbnZlbnRvcnlfc2xvdF9iYxiPASABKAUSJgodcGF0",
            "dGVybl9ob2xkX2ludmVudG9yeV9zbG90X2MYkAEgASgFEiYKHXBhdHRlcm5f",
            "aG9sZF9pbnZlbnRvcnlfc2xvdF9kGJEBIAEoBRIRCghlbGVfbm9uZRiSASAB",
            "KA0SEQoIZWxlX2ZpcmUYkwEgASgNEhIKCWVsZV93YXRlchiUASABKA0SFAoL",
            "ZWxlX3RodW5kZXIYlQEgASgNEhEKCGVsZV9yb2NrGJYBIAEoDRIRCghlbGVf",
            "d2luZBiXASABKA0SEAoHZWxlX2ljZRiYASABKA0SIwoaZWxlX3dlYWtuZXNz",
            "X2RlZmF1bHRfeWllbGQYmQEgASgCEiUKHGVsZV9yZXNpc3RhbmNlX2RlZmF1",
            "bHRfeWllbGQYmgEgASgCEiEKGHN0YXJ0aW5nX3JlbmRlcl9mcmFtZV9pZBib",
            "ASABKAUSIAoXc3RhcnRpbmdfaW5wdXRfZnJhbWVfaWQYnAEgASgFIsMDCgxD",
            "b25maWdDb25zdHMSRwoRY2hhcmFjdGVyX2NvbmZpZ3MYASADKAsyLC5qdHNo",
            "YXJlZC5Db25maWdDb25zdHMuQ2hhcmFjdGVyQ29uZmlnc0VudHJ5Ej8KDXNr",
            "aWxsX2NvbmZpZ3MYAiADKAsyKC5qdHNoYXJlZC5Db25maWdDb25zdHMuU2tp",
            "bGxDb25maWdzRW50cnkSQQoOZGVidWZmX2NvbmZpZ3MYAyADKAsyKS5qdHNo",
            "YXJlZC5Db25maWdDb25zdHMuRGVidWZmQ29uZmlnc0VudHJ5GlIKFUNoYXJh",
            "Y3RlckNvbmZpZ3NFbnRyeRILCgNrZXkYASABKA0SKAoFdmFsdWUYAiABKAsy",
            "GS5qdHNoYXJlZC5DaGFyYWN0ZXJDb25maWc6AjgBGkQKEVNraWxsQ29uZmln",
            "c0VudHJ5EgsKA2tleRgBIAEoDRIeCgV2YWx1ZRgCIAEoCzIPLmp0c2hhcmVk",
            "LlNraWxsOgI4ARpMChJEZWJ1ZmZDb25maWdzRW50cnkSCwoDa2V5GAEgASgN",
            "EiUKBXZhbHVlGAIgASgLMhYuanRzaGFyZWQuRGVidWZmQ29uZmlnOgI4ASo0",
            "ChRCb3hJbnRlcnBvbGF0aW9uVHlwZRILCgdVc2VQcmV2EAASDwoLSW50ZXJw",
            "b2xhdGUQASpVCghJZmFjZUNhdBIJCgVFTVBUWRAAEgkKBUZMRVNIEAESCQoF",
            "TUVUQUwQAhIJCgVGTFVJRBADEggKBFJPQ0sQBBIJCgVHUkFTUxAFEggKBFdP",
            "T0QQBipECgtCdWxsZXRTdGF0ZRILCgdTdGFydFVwEAASCgoGQWN0aXZlEAES",
            "DQoJRXhwbG9kaW5nEAISDQoJVmFuaXNoaW5nEAMqzAcKDkNoYXJhY3RlclN0",
            "YXRlEhIKDkludmFsaWRDaFN0YXRlEAASCQoFSWRsZTEQARILCgdXYWxraW5n",
            "EAISDgoKVHVybkFyb3VuZBADEgoKBkF0a2VkMRAEEhQKEEluQWlySWRsZTFO",
            "b0p1bXAQBRIUChBJbkFpcklkbGUxQnlKdW1wEAYSFAoQSW5BaXJJZGxlMkJ5",
            "SnVtcBAHEhgKFEluQWlySWRsZTFCeVdhbGxKdW1wEAgSDwoLSW5BaXJBdGtl",
            "ZDEQCRIMCghCbG93blVwMRAKEgwKCExheURvd24xEAsSCgoGR2V0VXAxEAwS",
            "CQoFRHlpbmcQDRILCgdEYXNoaW5nEA4SCwoHU2xpZGluZxAPEgoKBkRpbW1l",
            "ZBAQEhQKEFRyYW5zZm9ybWluZ0ludG8QERIPCgtCYWNrRGFzaGluZxASEhAK",
            "DEluQWlyV2Fsa2luZxATEh0KGVRyYW5zZm9ybWluZ0ludG9Gcm9tRGVhdGgQ",
            "FBIQCgxXYWxrU3RvcHBpbmcQFRIVChFJbkFpcldhbGtTdG9wcGluZxAWEgsK",
            "B1BhcnJpZWQQFxILCgdBd2FraW5nEBgSEAoMR3JvdW5kRG9kZ2VkEBkSDwoL",
            "QmFja1dhbGtpbmcQGhIQCgtPbldhbGxJZGxlMRCAARIQCgtDcm91Y2hJZGxl",
            "MRCAAhIPCgpDcm91Y2hBdGsxEIECEhIKDUNyb3VjaFdhbGtpbmcQggISEQoM",
            "Q3JvdWNoQXRrZWQxEIMCEgkKBERlZjEQhAISDwoKRGVmMUF0a2VkMRCFAhIP",
            "CgpEZWYxQnJva2VuEIYCEgkKBEF0azEQgAgSCQoEQXRrMhCBCBIJCgRBdGsz",
            "EIIIEgkKBEF0azQQgwgSCQoEQXRrNRCECBIJCgRBdGs2EIUIEgkKBEF0azcQ",
            "hggSEgoNQXRrN19DaGFyZ2luZxCHCBIXChJBdGs3X0NoYXJnZVJlbGVhc2UQ",
            "iAgSCQoEQXRrOBCJCBIOCglJbkFpckF0azEQgBASDgoJSW5BaXJBdGsyEIEQ",
            "EhAKC1dhbGtpbmdBdGsxEIIQEhAKC1dhbGtpbmdBdGs0EIMQEg4KCUluQWly",
            "QXRrNhCEEBIPCgpPbldhbGxBdGsxEIAYEhMKDklkbGUxX0NoYXJnaW5nEIEY",
            "EhkKFFdhbGtpbmdBdGsxX0NoYXJnaW5nEIIYEhcKEkluQWlyQXRrMV9DaGFy",
            "Z2luZxCDGBIYChNPbldhbGxBdGsxX0NoYXJnaW5nEIQYEhgKE0Nyb3VjaEF0",
            "azFfQ2hhcmdpbmcQhRgqkwEKB05wY0dvYWwSCQoFTklkbGUQABIPCgtORm9s",
            "bG93QWxseRABEgsKB05QYXRyb2wQAhIRCg1OSHVudFRoZW5JZGxlEAMSEwoP",
            "Tkh1bnRUaGVuUGF0cm9sEAQSFwoTTkh1bnRUaGVuRm9sbG93QWxseRAFEh4K",
            "Gk5JZGxlSWZHb0h1bnRpbmdUaGVuUGF0cm9sEAYqTgoJVHJhcFN0YXRlEgkK",
            "BVRJZGxlEAASDAoIVFdhbGtpbmcQARIJCgVUQXRrMRACEgsKB1RBdGtlZDEQ",
            "AxIQCgxURGVhY3RpdmF0ZWQQBCosCgxUcmlnZ2VyU3RhdGUSCgoGVFJlYWR5",
            "EAASEAoMVENvb2xpbmdEb3duEAEqPAoNUGlja2FibGVTdGF0ZRIJCgVQSWRs",
            "ZRAAEhEKDVBEaXNhcHBlYXJpbmcQARINCglQQ29uc3VtZWQQAip2CgpCdWxs",
            "ZXRUeXBlEhAKDFVuZGV0ZXJtaW5lZBAAEgkKBU1lbGVlEAESDAoIRmlyZWJh",
            "bGwQAhIOCgpHcm91bmRXYXZlEAMSEQoNTWlzc2lsZUxpbmVhchAEEhoKFk1p",
            "c3NpbGVRdWFkcmF0aWNCZXppZXIQBSrmAQoMTXVsdGlIaXRUeXBlEggKBE5v",
            "bmUQABIQCgxGcm9tRW1pc3Npb24QARIWChJGcm9tRmlyc3RIaXRBY3R1YWwQ",
            "AhIWChJGcm9tRmlyc3RIaXRBbnl3YXkQAxIVChFGcm9tUHJldkhpdEFjdHVh",
            "bBAEEhUKEUZyb21QcmV2SGl0QW55d2F5EAUSGwoXRnJvbVZpc2lvblNlZWtP",
            "ckRlZmF1bHQQBhIjCh9Gcm9tUHJldkhpdEFjdHVhbE9yQWN0aXZlVGltZVVw",
            "EAcSGgoWRnJvbUVtaXNzaW9uSnVzdEFjdGl2ZRAIKjMKEFNraWxsVHJpZ2dl",
            "clR5cGUSDgoKUmlzaW5nRWRnZRAAEg8KC0ZhbGxpbmdFZGdlEAEqLAoPVmZ4",
            "RHVyYXRpb25UeXBlEgoKBk9uZU9mZhAAEg0KCVJlcGVhdGluZxABKjcKDVZm",
            "eE1vdGlvblR5cGUSDAoITm9Nb3Rpb24QABILCgdEcm9wcGVkEAESCwoHVHJh",
            "Y2luZxACKnkKC1RyaWdnZXJUeXBlEgoKBlR0Tm9uZRAAEg0KCVR0VHJpdmlh",
            "bBABEhEKDVR0Q3ljbGljVGltZWQQAhIOCgpUdEluZGlXYXZlEAMSDgoKVHRT",
            "eW5jV2F2ZRAEEg4KClR0TW92ZW1lbnQQBRIMCghUdEF0dGFjaxAGKjEKDUJ1",
            "ZmZTdG9ja1R5cGUSCgoGTm9uZUJmEAASCQoFVGltZWQQARIJCgVRdW90YRAC",
            "KnEKCkRlYnVmZlR5cGUSCwoHTm9uZURiZhAAEhEKDVNwZWVkRG93bk9ubHkQ",
            "ARIRCg1Db2xkU3BlZWREb3duEAISFgoSUG9zaXRpb25Mb2NrZWRPbmx5EAMS",
            "GAoURnJvemVuUG9zaXRpb25Mb2NrZWQQBCo2Cg5Db25zdW1hYmxlVHlwZRIM",
            "CghOb25lQ3NtYhAAEgoKBlJlZmlsbBABEgoKBkRiZlJjdhACKp8BChZJbnZl",
            "bnRvcnlTbG90U3RvY2tUeXBlEgoKBk5vbmVJdhAAEgsKB0R1bW15SXYQARIM",
            "CghQb2NrZXRJdhACEgsKB1RpbWVkSXYQAxILCgdRdW90YUl2EAQSEwoPVGlt",
            "ZWRNYWdhemluZUl2EAUSFAoQR2F1Z2VkTWFnYXppbmVJdhAGEhkKFUdhdWdl",
            "ZFRpbWVkTWFnYXppbmVJdhAHKjwKGVBsYXllclN0b3J5TW9kZVNlbGVjdFZp",
            "ZXcSCAoETk9ORRAAEgoKBlJFR0lPThABEgkKBUxFVkVMEAIqNQoQRmluaXNo",
            "ZWRMdk9wdGlvbhINCglCT1NTX09OTFkQABISCg5TVE9SWV9BTkRfQk9TUxAB",
            "KjEKClBpY2t1cFR5cGUSDQoJSW1tZWRpYXRlEAASFAoQUHV0SW50b0ludmVu",
            "dG9yeRABQguqAghqdHNoYXJlZGIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::jtshared.BoxInterpolationType), typeof(global::jtshared.IfaceCat), typeof(global::jtshared.BulletState), typeof(global::jtshared.CharacterState), typeof(global::jtshared.NpcGoal), typeof(global::jtshared.TrapState), typeof(global::jtshared.TriggerState), typeof(global::jtshared.PickableState), typeof(global::jtshared.BulletType), typeof(global::jtshared.MultiHitType), typeof(global::jtshared.SkillTriggerType), typeof(global::jtshared.VfxDurationType), typeof(global::jtshared.VfxMotionType), typeof(global::jtshared.TriggerType), typeof(global::jtshared.BuffStockType), typeof(global::jtshared.DebuffType), typeof(global::jtshared.ConsumableType), typeof(global::jtshared.InventorySlotStockType), typeof(global::jtshared.PlayerStoryModeSelectView), typeof(global::jtshared.FinishedLvOption), typeof(global::jtshared.PickupType), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::jtshared.AuthTokenUnderlying), global::jtshared.AuthTokenUnderlying.Parser, new[]{ "PlayerId", "FromAuthsrvId", "ToBattlesrvId", "ExpiresAt" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::jtshared.AuthResult), global::jtshared.AuthResult.Parser, new[]{ "RetCode", "Uname", "Captcha", "ExpiresAt", "PlayerId", "NewAuthToken", "NewAuthTokenSig", "CaptchaSubmitAuthsrvId", "BattlesrvHostnameOnly", "BattlesrvEndpoint" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::jtshared.SteamAuthenticateUserTicketPayloadParams), global::jtshared.SteamAuthenticateUserTicketPayloadParams.Parser, new[]{ "Result", "Steamid", "Ownersteamid", "Vacbanned", "Publisherbanned" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::jtshared.SteamAuthenticateUserTicketPayloadResp), global::jtshared.SteamAuthenticateUserTicketPayloadResp.Parser, new[]{ "Params" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::jtshared.SteamAuthenticateUserTicketResult), global::jtshared.SteamAuthenticateUserTicketResult.Parser, new[]{ "Response" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::jtshared.BattleInvitation), global::jtshared.BattleInvitation.Parser, new[]{ "FromPlayerId", "ToBattlesrvId", "BoundRoomId", "ExpiresAt", "Passcode" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::jtshared.CharacterConfig), global::jtshared.CharacterConfig.Parser, new[]{ "SpeciesId", "SpeciesName", "Hp", "Mp", "LayDownFrames", "LayDownFramesToRecover", "GetUpInvinsibleFrames", "GetUpFramesToRecover", "Speed", "MpRegenPerInterval", "MpRegenInterval", "JumpingInitVelY", "InertiaFramesToRecover", "DashingEnabled", "SlidingEnabled", "OnWallEnabled", "CrouchingEnabled", "CrouchingAtkEnabled", "WallJumpingFramesToRecover", "WallJumpingInitVelX", "WallJumpingInitVelY", "WallSlidingVelY", "MinFallingVelY", "MaxAscendingVelY", "Atk1UsesMagazine", "GroundDodgeEnabledByIvSlotCInBlockStun", "GroundDodgeEnabledByRdfCntFromBeginning", "GroundDodgedFramesToRecover", "GroundDodgedFramesInvinsible", "GroundDodgedSpeed", "VisionOffsetX", "VisionOffsetY", "VisionSizeX", "VisionSizeY", "CapsuleRadius", "CapsuleHalfHeight", "ShrinkedCapsuleRadius", "ShrinkedCapsuleHalfHeight", "LayDownCapsuleRadius", "LayDownCapsuleHalfHeight", "DyingCapsuleRadius", "DyingCapsuleHalfHeight", "DimmedCapsuleRadius", "DimmedCapsuleHalfHeight", "AntiGravityWhenIdle", "AntiGravityFramesLingering", "OmitGravity", "OmitSoftPushback", "RepelSoftPushback", "CollisionTypeMask", "HasTurnAroundAnim", "HasDimmedAnim", "HasAwakingAnim", "HasWalkStoppingAnim", "HasInAirWalkStoppingAnim", "LayDownToRecoverFromDimmed", "Hardness", "ProactiveJumpStartupFrames", "DefaultAirJumpQuota", "DefaultAirDashQuota", "DefaultDef1Quota", "IsolatedAirJumpAndDashQuota", "AirJumpVfxSpeciesId", "SlipJumpThresHoldBelowTopFace", "SlipJumpCharacterDropY", "TransformIntoSpeciesIdUponDeath", "JumpHoldingToFly", "HasDef1", "HasDef1Atked1Anim", "DefaultDef1BrokenFramesToRecover", "Def1ActiveVfxSpeciesId", "Def1AtkedVfxSpeciesId", "Def1BrokenVfxSpeciesId", "Def1StartupFrames", "Def1DamageYield", "Def1DefiesEleWeaknessPenetration", "Def1DefiesDebuff", "FlyingQuotaRdfCnt", "WalkingAutoDef1", "Ifc", "EleWeakness", "EleResistance", "HasBtnBCharging", "BtnBChargedVfxSpeciesId", "IsKeyCh", "AllowsSameTeamSoftPushback", "GaugeIncWhenKilled", "JumpingInsteadOfWalking", "VisionSearchIntervalPow2Minus1U", "VisionSearchIntervalPow2Minus1", "NpcNoDefaultAirWalking", "NpcPrioritizeBulletHandling", "NpcPrioritizeAllyHealing", "NpcNotHuntingInAirOppoCh", "TransformIntoFramesToRecover", "TransformIntoFramesInvinsible", "AwakingFramesToRecover", "AwakingFramesInvinsible", "UseIdle1AsFlyingIdle", "NoFlee", "Atk1Magazine", "SuperAtkGuage", "InitInventorySlots", "BtnBAutoUnholdChStates", "LoopingChStates" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::jtshared.CharacterDownsync), global::jtshared.CharacterDownsync.Parser, new[]{ "X", "Y", "DirX", "DirY", "VelX", "VelY", "Speed", "SpeciesId", "FramesToRecover", "FramesCapturedByInertia", "Hp", "Mp", "ChCollisionTeamId", "ChState", "FramesInChState", "JumpTriggered", "OmitGravity", "ForcedCrouching", "SlipJumpTriggered", "PrimarilyOnSlippableHardPushback", "PrevWasCrouching", "NewBirthRdfCountdown", "FramesInvinsible", "JumpStarted", "FramesToStartJump", "BulletTeamId", "RemainingAirJumpQuota", "RemainingAirDashQuota", "DamagedHintRdfCountdown", "DamagedElementalAttrs", "RemainingDef1Quota", "ComboHitCnt", "ComboFramesRemained", "LastDamagedByUd", "LastDamagedByBulletTeamId", "ActiveSkillId", "ActiveSkillHit", "BtnAHoldingRdfCnt", "BtnBHoldingRdfCnt", "BtnCHoldingRdfCnt", "BtnDHoldingRdfCnt", "BtnEHoldingRdfCnt", "ParryPrepRdfCntDown", "MpRegenRdfCountdown", "FlyingRdfCountdown", "LockingOnUd", "BuffList", "DebuffList", "Atk1Magazine", "SuperAtkGauge", "Inventory", "BulletImmuneRecords", "KinematicKnobs" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::jtshared.PlayerCharacterDownsync), global::jtshared.PlayerCharacterDownsync.Parser, new[]{ "Chd", "JoinIndex", "BeatsCnt", "BeatenCnt", "RevivalX", "RevivalY", "RevivalDirX", "RevivalDirY", "NotEnoughMpHintRdfCountdown" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::jtshared.NpcCharacterDownsync), global::jtshared.NpcCharacterDownsync.Parser, new[]{ "Chd", "Id", "ActivatedRdfId", "CachedCueCmd", "WaivingPatrolCueId", "GoalAsNpc", "PublishingEvtMaskUponKilled", "PublishingToTriggerIdUponKilled", "SubscribesToTriggerId", "CapturedByPatrolCue", "FramesInPatrolCue", "KilledToDropConsumableSpeciesId", "KilledToDropBuffSpeciesId", "KilledToDropPickupSkillId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::jtshared.InputFrameDecoded), global::jtshared.InputFrameDecoded.Parser, new[]{ "Dx", "Dy", "BtnALevel", "BtnBLevel", "BtnCLevel", "BtnDLevel", "BtnELevel" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::jtshared.InputFrameUpsync), global::jtshared.InputFrameUpsync.Parser, new[]{ "InputFrameId", "Encoded", "JoinIndex" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::jtshared.InputFrameDownsync), global::jtshared.InputFrameDownsync.Parser, new[]{ "InputFrameId", "InputList", "ConfirmedList", "UdpConfirmedList" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::jtshared.WsReq), global::jtshared.WsReq.Parser, new[]{ "PlayerId", "Act", "JoinIndex", "AckingFrameId", "AckingInputFrameId", "AuthKey", "InputFrameUpsyncBatch", "SelfParsedRdf", "CollisionSpaceHalfWidth", "CollisionSpaceHalfHeight", "BattleDurationSeconds", "SerializedBarrierPolygons", "SerializedStaticPatrolCues", "SerializedCompletelyStaticTraps", "SerializedStaticTriggers", "SerializedTrapIdToColliderAttrs", "SerializedTriggerEditorIdToId", "SeqNo" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::jtshared.InputBufferSnapshot), global::jtshared.InputBufferSnapshot.Parser, new[]{ "RefRenderFrameId", "UnconfirmedMask", "ToSendInputFrameDownsyncs", "ShouldForceResync", "PeerJoinIndex" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::jtshared.PatrolCue), global::jtshared.PatrolCue.Parser, new[]{ "Id", "FlAct", "FrAct", "FlCaptureFrames", "FrCaptureFrames", "FdAct", "FuAct", "FdCaptureFrames", "FuCaptureFrames", "CollisionTypeMask" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::jtshared.VfxConfig), global::jtshared.VfxConfig.Parser, new[]{ "SpeciesId", "MotionType", "DurationType", "OnCharacter", "OnBullet", "OnTrap", "UsePixelatedVer", "Name" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::jtshared.BulletConfig), global::jtshared.BulletConfig.Parser, new[]{ "StartupFrames", "CancellableStFrame", "CancellableEdFrame", "ActiveFrames", "HitStunFrames", "BlockStunFrames", "PushbackVelX", "PushbackVelY", "Damage", "SelfLockVelX", "SelfLockVelY", "HitboxOffsetX", "HitboxOffsetY", "HitboxSizeX", "HitboxSizeY", "BlowUp", "SpeciesId", "ExplosionFrames", "BType", "MhType", "SimultaneousMultiHitCnt", "Speed", "DirX", "DirY", "CancelTransit", "RepeatQuota", "ActiveVfxSpeciesId", "ExplosionVfxSpeciesId", "AllowsWalking", "AllowsCrouching", "Hardness", "StartupInvinsibleFrames", "HitInvinsibleFrames", "ExplosionSpeciesId", "PerpAccMag", "DelaySelfVelToActive", "SpeedIfNotHit", "OmitSoftPushback", "HitboxSizeIncX", "HitboxSizeIncY", "RemainsUponHit", "RotatesAlongVelocity", "DefaultHardPushbackBounceQuota", "HardPushbackBounceNormFactor", "HardPushbackBounceSheerFactor", "IsPixelatedActiveVfx", "IsPixelatedExplostionVfx", "MhVanishOnMeleeHit", "DownSlopePrimerVelY", "MhUpdatesOriginPos", "BeamCollision", "AngularFrameVelCos", "AngularFrameVelSin", "VisionOffsetX", "VisionOffsetY", "VisionSizeX", "VisionSizeY", "SelfLockVelYWhenFlying", "ElementalAttrs", "CancellableByInventorySlotC", "CancellableByInventorySlotD", "SpinAnchorX", "SpinAnchorY", "BeamVisualSizeY", "TouchExplosionBombCollision", "AirRidingGroundWave", "GroundImpactMeleeCollision", "WallImpactMeleeCollision", "MhInheritsSpin", "InitSpinCos", "InitSpinSin", "FinishingFrames", "NoExplosionOnHardPushback", "StartupVfxSpeciesId", "Ifc", "ReflectFireballXIfNotHarder", "RejectsReflectionFromAnotherBullet", "ProvidesXHardPushback", "ProvidesYHardPushbackTop", "ProvidesYHardPushbackBottom", "IgnoreSlopeDeceleration", "RotateOffenderWithSpin", "MhNotTriggerOnChHit", "MhNotTriggerOnHarderBulletHit", "MhNotTriggerOnHardPushbackHit", "HopperMissile", "BeamRendering", "MissileSearchIntervalPow2Minus1", "UseChOffsetRegardlessOfEmissionMh", "InplaceVanishExplosionSpeciesId", "AnimLoopingRdfOffset", "ExplosionAnimLoopingRdfOffset", "GaugeIncReductionRatio", "MhInheritsFramesInBlState", "GuardBreakerExtraHitCnt", "TakesDef1AsHardPushback", "CollisionTypeMask", "TakesGravity", "BuffConfig", "CharacterEmitSfxName", "FireballEmitSfxName", "ExplosionSfxName", "ActiveSfxName", "ExplosionOnFleshSfxName", "ExplosionOnRockSfxName", "ExplosionOnMetalSfxName", "ExplosionOnWoodSfxName" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::jtshared.Bullet), global::jtshared.Bullet.Parser, new[]{ "BlState", "FramesInBlState", "Id", "OriginatedRenderFrameId", "OffenderUd", "TeamId", "X", "Y", "DirX", "DirY", "VelX", "VelY", "OriginatedX", "OriginatedY", "RepeatQuotaLeft", "RemainingHardPushbackBounceQuota", "TargetUd", "DamageDealed", "ExplodedOnIfc", "SpinCos", "SpinSin", "ActiveSkillHit", "SkillId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::jtshared.TrapConfig), global::jtshared.TrapConfig.Parser, new[]{ "SpeciesId", "ExplosionSpeciesId", "ExplosionFrames", "BlowUp", "Damage", "HitStunFrames", "HitInvinsibleFrames", "Deactivatable", "Hardness", "DeactivateUponTriggered", "ConstFrictionVelXTop", "ConstFrictionVelXBottom", "ConstFrictionVelYLeft", "ConstFrictionVelYRight", "PatrolCueRequiresFullContain", "SpinAnchorX", "SpinAnchorY", "AngularFrameVelCos", "AngularFrameVelSin", "IntrinsicSpinCos", "IntrinsicSpinSin", "Atk1UponTriggered", "Atk1SkillId", "IsRotary", "NoXFlipRendering", "SpeciesName" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::jtshared.TrapConfigFromTiled), global::jtshared.TrapConfigFromTiled.Parser, new[]{ "SpeciesId", "Quota", "Speed", "DirX", "DirY", "SubscribesToId", "SubscribesToIdAfterInitialFire", "SubscribesToIdAlt", "BoxCw", "BoxCh", "InitNoAngularVel" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::jtshared.TrapColliderAttr), global::jtshared.TrapColliderAttr.Parser, new[]{ "HitboxOffsetX", "HitboxOffsetY", "HitboxSizeX", "HitboxSizeY", "ProvidesHardPushback", "ProvidesDamage", "ProvidesEscape", "ProvidesSlipJump", "ProhibitsWallGrabbing", "ForcesCrouching", "SpeciesId", "OnlyAllowsAlignedVelX", "OnlyAllowsAlignedVelY", "AsPatrolCue", "TcPc", "Id", "CollisionTypeMask" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::jtshared.Trap), global::jtshared.Trap.Parser, new[]{ "Id", "PatrolCueAngularVelFlipMark", "ConfigFromTiled", "TrapState", "FramesInTrapState", "IsCompletelyStatic", "CapturedByPatrolCue", "FramesInPatrolCue", "WaivingPatrolCueId", "WaivingSpontaneousPatrol", "SubscribesToTriggerId", "SubscribesToTriggerIdAlt", "SpinCos", "SpinSin", "AngularFrameVelCos", "AngularFrameVelSin", "X", "Y", "DirX", "DirY", "VelX", "VelY" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::jtshared.TriggerConfig), global::jtshared.TriggerConfig.Parser, new[]{ "SpeciesId", "SpeciesName", "TriggerType", "CollisionTypeMask" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::jtshared.PeerUdpAddr), global::jtshared.PeerUdpAddr.Parser, new[]{ "Ip", "Port", "AuthKey", "SeqNo" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::jtshared.BattleColliderInfo), global::jtshared.BattleColliderInfo.Parser, new[]{ "StageName", "BoundRoomId", "BattleDurationFrames", "InputFrameUpsyncDelayTolerance", "MaxChasingRenderFramesPerUpdate", "RollbackEstimatedDtMillis", "RollbackEstimatedDtNanos", "RenderBufferSize", "CollisionMinStep", "BoundRoomCapacity", "PreallocNpcCapacity", "PreallocBulletCapacity", "BattleUdpTunnel", "FrameLogEnabled" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::jtshared.RenderFrame), global::jtshared.RenderFrame.Parser, new[]{ "Id", "PlayersArr", "CountdownNanos", "Bullets", "NpcsArr", "TrapsArr", "TriggersArr", "Pickables", "BulletIdCounter", "NpcIdCounter", "TrapIdCounter", "PickableIdCounter", "SpeciesIdList", "ShouldForceResync", "BackendUnconfirmedMask", "ParticipantChangeId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::jtshared.WsResp), global::jtshared.WsResp.Parser, new[]{ "Ret", "Act", "Rdf", "InputFrameDownsyncBatch", "BciFrame", "PeerJoinIndex", "PeerUdpAddrList", "ErrMsg" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::jtshared.Skill), global::jtshared.Skill.Parser, new[]{ "RecoveryFrames", "RecoveryFramesOnBlock", "RecoveryFramesOnHit", "TriggerType", "BoundChState", "BoundChStateOnHit", "MpDelta", "Id", "Hits", "SelfNonStockBuff" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::jtshared.FrameLog), global::jtshared.FrameLog.Parser, new[]{ "Rdf", "ActuallyUsedIdf" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::jtshared.BattleResult), global::jtshared.BattleResult.Parser, new[]{ "WinnerJoinIndex", "WinnerBulletTeamId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::jtshared.DebuffConfig), global::jtshared.DebuffConfig.Parser, new[]{ "SpeciesId", "StockType", "Stock", "Type", "ArrIdx", "ImpactPerInterval", "ImpactInterval", "FrictionVelX", "FrictionVelY", "FrictionAccX", "FrictionAccY" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::jtshared.BuffConfig), global::jtshared.BuffConfig.Parser, new[]{ "SpeciesId", "StockType", "Stock", "SpeedDelta", "HitboxSizeXDelta", "HitboxSizeYDelta", "DamageDelta", "DamageDeltaByPercentage", "CharacterHardnessDelta", "MeleeHardnessDelta", "FireballHardnessDelta", "Invinsible", "XformChSpeciesId", "RepelSoftPushback", "OmitGravity", "AutoDef1", "AssociatedDebuffs", "CharacterVfxSpeciesId", "IsPixelatedVfxOnCharacter" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::jtshared.Buff), global::jtshared.Buff.Parser, new[]{ "SpeciesId", "Stock", "OriginatedRenderFrameId", "OrigChSpeciesId", "OrigRepelSoftPushback", "OrigOmitGravity" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::jtshared.Debuff), global::jtshared.Debuff.Parser, new[]{ "SpeciesId", "Stock" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::jtshared.BulletImmuneRecord), global::jtshared.BulletImmuneRecord.Parser, new[]{ "BulletId", "RemainingLifetimeRdfCount" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::jtshared.ConsumableConfig), global::jtshared.ConsumableConfig.Parser, new[]{ "SpeciesId", "RefillDelta", "VfxIdOnPicker", "IsPixelatedVfxOnPicker" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::jtshared.PickableSkillConfig), global::jtshared.PickableSkillConfig.Parser, new[]{ "SkillId", "VfxIdOnPicker", "IsPixelatedVfxOnPicker" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::jtshared.InventorySlotConfig), global::jtshared.InventorySlotConfig.Parser, new[]{ "StockType", "Quota", "FramesToRecover", "BuffSpeciesId", "SkillId", "SkillIdAir", "GaugeRequired", "FullChargeBuffSpeciesId", "FullChargeSkillId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::jtshared.InventorySlot), global::jtshared.InventorySlot.Parser, new[]{ "StockType", "Quota", "FramesToRecover", "GaugeCharged" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::jtshared.Inventory), global::jtshared.Inventory.Parser, new[]{ "Slots" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::jtshared.BattleEquipment), global::jtshared.BattleEquipment.Parser, new[]{ "SpeciesId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::jtshared.PlayerSettings), global::jtshared.PlayerSettings.Parser, new[]{ "SoundVolume" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::jtshared.PlayerRegionProgress), global::jtshared.PlayerRegionProgress.Parser, new[]{ "RegionId", "CompletedLevelCount", "RemainingDependencies", "RemovedDependencies" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::jtshared.PlayerLevelProgress), global::jtshared.PlayerLevelProgress.Parser, new[]{ "RegionId", "LevelId", "HighestScore", "ShortestFinishTimeAtHighestScore", "CharacterSpeciesIdAtHighestScore", "ShortestFinishTime", "ScoreAtShortestFinishTime", "CharacterSpeciesIdAtShortestFinishTime", "RemainingDependencies", "RemovedDependencies" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::jtshared.PlayerChUnlockProgress), global::jtshared.PlayerChUnlockProgress.Parser, new[]{ "SpeciesId", "RemainingDependencies", "RemovedDependencies" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::jtshared.PlayerStoryProgress), global::jtshared.PlayerStoryProgress.Parser, new[]{ "RegionProgressDict", "LevelProgressDict", "CursorRegionId", "CursorLevelId", "View", "SavedAtGmtMillis", "ChUnlockProgressDict" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, null, null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::jtshared.PlayerOnlineArenaProgress), global::jtshared.PlayerOnlineArenaProgress.Parser, new[]{ "SavedAtGmtMillis", "PlayerId", "ChUnlockProgressDict" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::jtshared.StoryPointDialogLine), global::jtshared.StoryPointDialogLine.Parser, new[]{ "NarratorUd", "NarratorSpeciesId", "Content", "DownOrNot" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::jtshared.StoryPointStep), global::jtshared.StoryPointStep.Parser, new[]{ "Lines", "NonctrlAliveRdfCount" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::jtshared.StoryPoint), global::jtshared.StoryPoint.Parser, new[]{ "Steps", "Nonctrl", "CutsceneName" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::jtshared.LevelStory), global::jtshared.LevelStory.Parser, new[]{ "Points" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::jtshared.SerializableConvexPolygon), global::jtshared.SerializableConvexPolygon.Parser, new[]{ "AnchorX", "AnchorY", "Points" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::jtshared.SerializedCompletelyStaticPatrolCueCollider), global::jtshared.SerializedCompletelyStaticPatrolCueCollider.Parser, new[]{ "Attr", "Polygon" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::jtshared.SerializedCompletelyStaticTrapCollider), global::jtshared.SerializedCompletelyStaticTrapCollider.Parser, new[]{ "Attr", "Polygon" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::jtshared.SerializedCompletelyStaticTriggerCollider), global::jtshared.SerializedCompletelyStaticTriggerCollider.Parser, new[]{ "Attr", "Polygon" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::jtshared.TrapColliderAttrArray), global::jtshared.TrapColliderAttrArray.Parser, new[]{ "List" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::jtshared.SerializedTrapLocalIdToColliderAttrs), global::jtshared.SerializedTrapLocalIdToColliderAttrs.Parser, new[]{ "Dict" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::jtshared.SerializedTriggerEditorIdToLocalId), global::jtshared.SerializedTriggerEditorIdToLocalId.Parser, new[]{ "Dict", "Dict2" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::jtshared.PickableConfigFromTiled), global::jtshared.PickableConfigFromTiled.Parser, new[]{ "InitVirtualGridX", "InitVirtualGridY", "TakesGravity", "FirstShowRdfId", "RecurQuota", "RecurIntervalRdfCount", "LifetimeRdfCountPerOccurrence", "PickupType", "StockQuotaPerOccurrence", "SubscriptionId", "VfxSpeciesId", "ConsumableSpeciesId", "BuffSpeciesId", "SkillId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::jtshared.Pickable), global::jtshared.Pickable.Parser, new[]{ "Id", "X", "Y", "ConfigFromTiled", "RemainingLifetimeRdfCount", "RemainingRecurQuota", "VelX", "VelY", "PkState", "FramesInPkState", "PickerUd" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::jtshared.InjectedCmdConfig), global::jtshared.InjectedCmdConfig.Parser, new[]{ "CutoffRdfId", "Op" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::jtshared.CharacterSpawnerConfig), global::jtshared.CharacterSpawnerConfig.Parser, new[]{ "CutoffRdfId", "SpeciesIdList", "InitOpList" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::jtshared.PickableSpawnerConfig), global::jtshared.PickableSpawnerConfig.Parser, new[]{ "CutoffRdfId", "SpeciesIdList", "InitOpList", "PickupTypeList" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::jtshared.TriggerColliderAttr), global::jtshared.TriggerColliderAttr.Parser, new[]{ "Id", "SpeciesId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::jtshared.TriggerConfigFromTiled), global::jtshared.TriggerConfigFromTiled.Parser, new[]{ "EditorId", "SpeciesId", "DelayedFrames", "RecoveryFrames", "BulletTeamId", "SubCycleTriggerFrames", "SubCycleQuota", "QuotaCap", "SubscribesToIdList", "SubscribesToExhaustedIdList", "NewRevivalX", "NewRevivalY", "InitDirX", "InitDirY", "PublishingEvtMaskUponExhausted", "CharacterSpawnerTimeSeq", "PickableSpawnerTimeSeq", "ForceCtrlRdfCount", "ForceCtrlCmd", "ReloadCollidersInNewPhase", "StoryPointId", "BgmId", "BossSpeciesSet", "IsBossSavepoint" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::jtshared.Trigger), global::jtshared.Trigger.Parser, new[]{ "EditorId", "Id", "FramesToFire", "FramesToRecover", "Quota", "BulletTeamId", "DirX", "SubCycleQuotaLeft", "State", "FramesInState", "X", "Y", "DemandedEvtMask", "FulfilledEvtMask", "WaveNpcKilledEvtMaskCounter", "SubscriberIdsMask", "ExhaustSubscriberIdsMask", "OffenderUd", "OffenderBulletTeamId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::jtshared.PlayerMetaInfo), global::jtshared.PlayerMetaInfo.Parser, new[]{ "PlayerId", "JoinIndex", "BulletTeamId", "SpeciesId", "RoomId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::jtshared.RpcEndpointHolder), global::jtshared.RpcEndpointHolder.Parser, new[]{ "Id", "ExternalAddrHost", "ExternalAddrPort", "InternalAddrHost" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::jtshared.PrimitiveConsts), global::jtshared.PrimitiveConsts.Parser, new[]{ "BattleDynamicsFps", "DefaultTimeoutForLastAllConfirmedIfd", "RoomIdNone", "RoomStateImpossible", "RoomStateIdle", "RoomStateWaiting", "RoomStatePrepare", "RoomStateInBattle", "RoomStateInSettlement", "RoomStateStopped", "RoomStateFrontendAwaitingAutoRejoin", "RoomStateFrontendAwaitingManualRejoin", "RoomStateFrontendRejoining", "PlayerBattleStateImpossible", "PlayerBattleStateAddedPendingBattleColliderAck", "PlayerBattleStateReaddedPendingForceResync", "PlayerBattleStateActive", "PlayerBattleStateDisconnected", "PlayerBattleStateLost", "PlayerBattleStateExpelledDuringGame", "PlayerBattleStateExpelledInDismissal", "UpsyncMsgActPlayerColliderAck", "UpsyncMsgActPlayerCmd", "UpsyncMsgActHolepunchBackendUdpTunnel", "UpsyncMsgActHolepunchPeerUdpAddr", "DownsyncMsgActBattleColliderInfo", "DownsyncMsgActInputBatch", "DownsyncMsgActBattleStopped", "DownsyncMsgActForcedResync", "DownsyncMsgActPeerInputBatch", "DownsyncMsgActPeerUdpAddr", "DownsyncMsgActBattleReadyToStart", "DownsyncMsgActBattleStart", "DownsyncMsgActPlayerDisconnected", "DownsyncMsgActPlayerReaddedAndAcked", "DownsyncMsgActPlayerAddedAndAcked", "DownsyncMsgWsClosed", "DownsyncMsgWsOpen", "MagicJoinIndexInvalid", "MagicJoinIndexSrvUdpTunnel", "MagicQuotaInfinite", "NpcFleeGracePeriodRdfCnt", "MagicLastSentInputFrameIdNormalAdded", "MagicLastSentInputFrameIdReadded", "BgmNoChange", "InvalidDefaultPlayerId", "EstimatedSecondsPerRdf", "MaxBtnHoldingRdfCnt", "MaxFlyingRdfCnt", "MaxReversePushbackFramesToRecover", "TerminatingEvtsubId", "MagicEvtsubIdDummy", "SpeedNotHitNotSpecified", "DefaultPreallocNpcCapacity", "DefaultPreallocBulletCapacity", "DefaultPreallocTrapCapacity", "DefaultPreallocTriggerCapacity", "DefaultPreallocPickableCapacity", "DefaultPerCharacterBuffCapacity", "DefaultPerCharacterDebuffCapacity", "DefaultPerCharacterInventoryCapacity", "DefaultPerCharacterImmuneBulletRecordCapacity", "GravityY", "GravityYJumpHolding", "DefaultPatrolCueWaivingFrames", "NoPatrolCueId", "NoVfxId", "DefaultPickableHitboxSizeX", "DefaultPickableHitboxSizeY", "DefaultPickableDisappearingAnimFrames", "DefaultPickableConsumedAnimFrames", "DefaultPickableRisingVelY", "DefaultPickableNonpickableStartupFrames", "DefaultFramesToShowDamaged", "DefaultFramesToContinueCombo", "DefaultBlockStunFrames", "DefaultBlownupFramesForFlying", "DefaultGaugeIncByHit", "DefaultFramesDelayedOfBossSavepoint", "InputScaleFrames", "InputScale", "InputDelayFrames", "DefaultBackendInputBufferSize", "MagicFramesToBeOnWall", "DyingFramesToRecover", "ParriedFramesToRecover", "ParriedFramesToStartCancellable", "NoSkill", "NoSkillHit", "NoLockVel", "DebuffArrIdxElemental", "TerminatingRenderFrameId", "TerminatingInputFrameId", "TerminatingCharacterId", "TerminatingTrapId", "TerminatingTriggerId", "TerminatingPickableId", "TerminatingBulletId", "TerminatingBulletTeamId", "TerminatingBuffSpeciesId", "TerminatingDebuffSpeciesId", "TerminatingConsumableSpeciesId", "FrontendWsRecvBytelength", "BackendWsRecvBytelength", "JammedBtnHoldingRdfCnt", "BtnBHoldingRdfCntThreshold2", "BtnBHoldingRdfCntThreshold1", "JumpHoldingRdfCntThreshold1", "JumpHoldingIfdCntThreshold1", "JumpHoldingRdfCntThreshold2", "JumpHoldingIfdCntThreshold2", "InAirDashGracePeriodRdfCnt", "InAirJumpGracePeriodRdfCnt", "BtnEHoldingRdfCntThreshold1", "BtnEHoldingIfdCntThreshold1", "SpAtkLookupFrames", "PatternIdUnableToOp", "PatternIdNoOp", "PatternB", "PatternUpB", "PatternDownB", "PatternHoldB", "PatternDownA", "PatternReleasedB", "PatternE", "PatternFrontE", "PatternBackE", "PatternUpE", "PatternDownE", "PatternHoldE", "PatternEHoldB", "PatternFrontEHoldB", "PatternBackEHoldB", "PatternUpEHoldB", "PatternDownEHoldB", "PatternHoldEHoldB", "PatternInventorySlotC", "PatternInventorySlotD", "PatternInventorySlotBc", "PatternHoldInventorySlotC", "PatternHoldInventorySlotD", "EleNone", "EleFire", "EleWater", "EleThunder", "EleRock", "EleWind", "EleIce", "EleWeaknessDefaultYield", "EleResistanceDefaultYield", "StartingRenderFrameId", "StartingInputFrameId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::jtshared.ConfigConsts), global::jtshared.ConfigConsts.Parser, new[]{ "CharacterConfigs", "SkillConfigs", "DebuffConfigs" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, null, null, })
          }));
    }
    #endregion

  }
  #region Enums
  public enum BoxInterpolationType {
    [pbr::OriginalName("UsePrev")] UsePrev = 0,
    [pbr::OriginalName("Interpolate")] Interpolate = 1,
  }

  /// <summary>
  ///
  ///[WARNING] On the use of unsigned int.
  ///
  ///RdfId (as well as all configured "frames"), xxxLocalId, skillHit offset and join_index will be used as array index which doesn't support "uint", just use 0 as their TERMINATING value to save bandwidth.
  ///
  ///We should reduce runtime typecasting as much as possible!
  /// </summary>
  public enum IfaceCat {
    /// <summary>
    /// Sound effect basis
    /// </summary>
    [pbr::OriginalName("EMPTY")] Empty = 0,
    [pbr::OriginalName("FLESH")] Flesh = 1,
    [pbr::OriginalName("METAL")] Metal = 2,
    [pbr::OriginalName("FLUID")] Fluid = 3,
    [pbr::OriginalName("ROCK")] Rock = 4,
    [pbr::OriginalName("GRASS")] Grass = 5,
    [pbr::OriginalName("WOOD")] Wood = 6,
  }

  public enum BulletState {
    [pbr::OriginalName("StartUp")] StartUp = 0,
    [pbr::OriginalName("Active")] Active = 1,
    [pbr::OriginalName("Exploding")] Exploding = 2,
    [pbr::OriginalName("Vanishing")] Vanishing = 3,
  }

  public enum CharacterState {
    [pbr::OriginalName("InvalidChState")] InvalidChState = 0,
    [pbr::OriginalName("Idle1")] Idle1 = 1,
    [pbr::OriginalName("Walking")] Walking = 2,
    [pbr::OriginalName("TurnAround")] TurnAround = 3,
    [pbr::OriginalName("Atked1")] Atked1 = 4,
    [pbr::OriginalName("InAirIdle1NoJump")] InAirIdle1NoJump = 5,
    [pbr::OriginalName("InAirIdle1ByJump")] InAirIdle1ByJump = 6,
    [pbr::OriginalName("InAirIdle2ByJump")] InAirIdle2ByJump = 7,
    [pbr::OriginalName("InAirIdle1ByWallJump")] InAirIdle1ByWallJump = 8,
    [pbr::OriginalName("InAirAtked1")] InAirAtked1 = 9,
    [pbr::OriginalName("BlownUp1")] BlownUp1 = 10,
    [pbr::OriginalName("LayDown1")] LayDown1 = 11,
    [pbr::OriginalName("GetUp1")] GetUp1 = 12,
    [pbr::OriginalName("Dying")] Dying = 13,
    [pbr::OriginalName("Dashing")] Dashing = 14,
    [pbr::OriginalName("Sliding")] Sliding = 15,
    /// <summary>
    /// Pre-activated state for evtsub-based NPC 
    /// </summary>
    [pbr::OriginalName("Dimmed")] Dimmed = 16,
    /// <summary>
    /// When at this state, the character has already completed transform, i.e. in new species_id
    /// </summary>
    [pbr::OriginalName("TransformingInto")] TransformingInto = 17,
    [pbr::OriginalName("BackDashing")] BackDashing = 18,
    [pbr::OriginalName("InAirWalking")] InAirWalking = 19,
    /// <summary>
    /// When at this state, the character has already completed transform, i.e. in new species_id
    /// </summary>
    [pbr::OriginalName("TransformingIntoFromDeath")] TransformingIntoFromDeath = 20,
    [pbr::OriginalName("WalkStopping")] WalkStopping = 21,
    [pbr::OriginalName("InAirWalkStopping")] InAirWalkStopping = 22,
    [pbr::OriginalName("Parried")] Parried = 23,
    [pbr::OriginalName("Awaking")] Awaking = 24,
    [pbr::OriginalName("GroundDodged")] GroundDodged = 25,
    [pbr::OriginalName("BackWalking")] BackWalking = 26,
    [pbr::OriginalName("OnWallIdle1")] OnWallIdle1 = 128,
    [pbr::OriginalName("CrouchIdle1")] CrouchIdle1 = 256,
    [pbr::OriginalName("CrouchAtk1")] CrouchAtk1 = 257,
    [pbr::OriginalName("CrouchWalking")] CrouchWalking = 258,
    [pbr::OriginalName("CrouchAtked1")] CrouchAtked1 = 259,
    [pbr::OriginalName("Def1")] Def1 = 260,
    [pbr::OriginalName("Def1Atked1")] Def1Atked1 = 261,
    [pbr::OriginalName("Def1Broken")] Def1Broken = 262,
    [pbr::OriginalName("Atk1")] Atk1 = 1024,
    [pbr::OriginalName("Atk2")] Atk2 = 1025,
    [pbr::OriginalName("Atk3")] Atk3 = 1026,
    [pbr::OriginalName("Atk4")] Atk4 = 1027,
    [pbr::OriginalName("Atk5")] Atk5 = 1028,
    [pbr::OriginalName("Atk6")] Atk6 = 1029,
    [pbr::OriginalName("Atk7")] Atk7 = 1030,
    [pbr::OriginalName("Atk7_Charging")] Atk7Charging = 1031,
    [pbr::OriginalName("Atk7_ChargeRelease")] Atk7ChargeRelease = 1032,
    [pbr::OriginalName("Atk8")] Atk8 = 1033,
    [pbr::OriginalName("InAirAtk1")] InAirAtk1 = 2048,
    [pbr::OriginalName("InAirAtk2")] InAirAtk2 = 2049,
    [pbr::OriginalName("WalkingAtk1")] WalkingAtk1 = 2050,
    [pbr::OriginalName("WalkingAtk4")] WalkingAtk4 = 2051,
    [pbr::OriginalName("InAirAtk6")] InAirAtk6 = 2052,
    [pbr::OriginalName("OnWallAtk1")] OnWallAtk1 = 3072,
    [pbr::OriginalName("Idle1_Charging")] Idle1Charging = 3073,
    [pbr::OriginalName("WalkingAtk1_Charging")] WalkingAtk1Charging = 3074,
    [pbr::OriginalName("InAirAtk1_Charging")] InAirAtk1Charging = 3075,
    [pbr::OriginalName("OnWallAtk1_Charging")] OnWallAtk1Charging = 3076,
    [pbr::OriginalName("CrouchAtk1_Charging")] CrouchAtk1Charging = 3077,
  }

  public enum NpcGoal {
    [pbr::OriginalName("NIdle")] Nidle = 0,
    [pbr::OriginalName("NFollowAlly")] NfollowAlly = 1,
    [pbr::OriginalName("NPatrol")] Npatrol = 2,
    [pbr::OriginalName("NHuntThenIdle")] NhuntThenIdle = 3,
    [pbr::OriginalName("NHuntThenPatrol")] NhuntThenPatrol = 4,
    [pbr::OriginalName("NHuntThenFollowAlly")] NhuntThenFollowAlly = 5,
    [pbr::OriginalName("NIdleIfGoHuntingThenPatrol")] NidleIfGoHuntingThenPatrol = 6,
  }

  public enum TrapState {
    [pbr::OriginalName("TIdle")] Tidle = 0,
    [pbr::OriginalName("TWalking")] Twalking = 1,
    [pbr::OriginalName("TAtk1")] Tatk1 = 2,
    [pbr::OriginalName("TAtked1")] Tatked1 = 3,
    [pbr::OriginalName("TDeactivated")] Tdeactivated = 4,
  }

  public enum TriggerState {
    [pbr::OriginalName("TReady")] Tready = 0,
    [pbr::OriginalName("TCoolingDown")] TcoolingDown = 1,
  }

  public enum PickableState {
    [pbr::OriginalName("PIdle")] Pidle = 0,
    [pbr::OriginalName("PDisappearing")] Pdisappearing = 1,
    [pbr::OriginalName("PConsumed")] Pconsumed = 2,
  }

  public enum BulletType {
    [pbr::OriginalName("Undetermined")] Undetermined = 0,
    [pbr::OriginalName("Melee")] Melee = 1,
    [pbr::OriginalName("Fireball")] Fireball = 2,
    [pbr::OriginalName("GroundWave")] GroundWave = 3,
    [pbr::OriginalName("MissileLinear")] MissileLinear = 4,
    /// <summary>
    /// by default using "(ed-st)" rotated around "z-axis at st" toward upper y-axis and length 0.25*|ed-st| as an intermediate relay 
    /// </summary>
    [pbr::OriginalName("MissileQuadraticBezier")] MissileQuadraticBezier = 5,
  }

  public enum MultiHitType {
    /// <summary>
    ///*
    ///[WARN] Multihit of a fireball (determined in turn by the "BulletType b_type" field) is more difficult to handle than that of melee, because we have to count from the fireball's first hit; the situation becomes even more complicated when a multihit fireball is in a crowd -- remains to be designed
    ///
    ///Types of fireball multihit-singlebullet
    ///a. References the emission frame
    ///b. References the first hit only when actually hit
    ///c. References the first hit even if blocked
    ///d. References the prev hit only when actually hit
    ///e. References the prev hit even if blocked
    /// </summary>
    [pbr::OriginalName("None")] None = 0,
    [pbr::OriginalName("FromEmission")] FromEmission = 1,
    [pbr::OriginalName("FromFirstHitActual")] FromFirstHitActual = 2,
    [pbr::OriginalName("FromFirstHitAnyway")] FromFirstHitAnyway = 3,
    [pbr::OriginalName("FromPrevHitActual")] FromPrevHitActual = 4,
    [pbr::OriginalName("FromPrevHitAnyway")] FromPrevHitAnyway = 5,
    [pbr::OriginalName("FromVisionSeekOrDefault")] FromVisionSeekOrDefault = 6,
    [pbr::OriginalName("FromPrevHitActualOrActiveTimeUp")] FromPrevHitActualOrActiveTimeUp = 7,
    [pbr::OriginalName("FromEmissionJustActive")] FromEmissionJustActive = 8,
  }

  public enum SkillTriggerType {
    [pbr::OriginalName("RisingEdge")] RisingEdge = 0,
    [pbr::OriginalName("FallingEdge")] FallingEdge = 1,
  }

  public enum VfxDurationType {
    [pbr::OriginalName("OneOff")] OneOff = 0,
    [pbr::OriginalName("Repeating")] Repeating = 1,
  }

  public enum VfxMotionType {
    [pbr::OriginalName("NoMotion")] NoMotion = 0,
    [pbr::OriginalName("Dropped")] Dropped = 1,
    [pbr::OriginalName("Tracing")] Tracing = 2,
  }

  public enum TriggerType {
    [pbr::OriginalName("TtNone")] TtNone = 0,
    /// <summary>
    /// Just by "demandedEvtMask == fulfilledEvtMask" without any other timer or collision requirement 
    /// </summary>
    [pbr::OriginalName("TtTrivial")] TtTrivial = 1,
    [pbr::OriginalName("TtCyclicTimed")] TtCyclicTimed = 2,
    [pbr::OriginalName("TtIndiWave")] TtIndiWave = 3,
    [pbr::OriginalName("TtSyncWave")] TtSyncWave = 4,
    [pbr::OriginalName("TtMovement")] TtMovement = 5,
    [pbr::OriginalName("TtAttack")] TtAttack = 6,
  }

  public enum BuffStockType {
    [pbr::OriginalName("NoneBf")] NoneBf = 0,
    /// <summary>
    /// Would be calculated in number of renderFrames, not actual time in seconds or milliseconds
    /// </summary>
    [pbr::OriginalName("Timed")] Timed = 1,
    [pbr::OriginalName("Quota")] Quota = 2,
  }

  public enum DebuffType {
    [pbr::OriginalName("NoneDbf")] NoneDbf = 0,
    [pbr::OriginalName("SpeedDownOnly")] SpeedDownOnly = 1,
    [pbr::OriginalName("ColdSpeedDown")] ColdSpeedDown = 2,
    [pbr::OriginalName("PositionLockedOnly")] PositionLockedOnly = 3,
    [pbr::OriginalName("FrozenPositionLocked")] FrozenPositionLocked = 4,
  }

  public enum ConsumableType {
    [pbr::OriginalName("NoneCsmb")] NoneCsmb = 0,
    [pbr::OriginalName("Refill")] Refill = 1,
    /// <summary>
    /// Debuff recovery
    /// </summary>
    [pbr::OriginalName("DbfRcv")] DbfRcv = 2,
  }

  public enum InventorySlotStockType {
    [pbr::OriginalName("NoneIv")] NoneIv = 0,
    /// <summary>
    /// For "slot D", just skip everything for this type
    /// </summary>
    [pbr::OriginalName("DummyIv")] DummyIv = 1,
    /// <summary>
    /// For "slot D", reserved for pickables
    /// </summary>
    [pbr::OriginalName("PocketIv")] PocketIv = 2,
    /// <summary>
    /// Reusable after cooldown
    /// </summary>
    [pbr::OriginalName("TimedIv")] TimedIv = 3,
    [pbr::OriginalName("QuotaIv")] QuotaIv = 4,
    /// <summary>
    /// Has certain quotas before required to cooldown
    /// </summary>
    [pbr::OriginalName("TimedMagazineIv")] TimedMagazineIv = 5,
    [pbr::OriginalName("GaugedMagazineIv")] GaugedMagazineIv = 6,
    /// <summary>
    /// NOT IMPLEMENTED!  
    /// </summary>
    [pbr::OriginalName("GaugedTimedMagazineIv")] GaugedTimedMagazineIv = 7,
  }

  public enum PlayerStoryModeSelectView {
    [pbr::OriginalName("NONE")] None = 0,
    [pbr::OriginalName("REGION")] Region = 1,
    [pbr::OriginalName("LEVEL")] Level = 2,
  }

  public enum FinishedLvOption {
    [pbr::OriginalName("BOSS_ONLY")] BossOnly = 0,
    [pbr::OriginalName("STORY_AND_BOSS")] StoryAndBoss = 1,
  }

  public enum PickupType {
    [pbr::OriginalName("Immediate")] Immediate = 0,
    [pbr::OriginalName("PutIntoInventory")] PutIntoInventory = 1,
  }

  #endregion

  #region Messages
  public sealed partial class AuthTokenUnderlying : pb::IMessage<AuthTokenUnderlying> {
    private static readonly pb::MessageParser<AuthTokenUnderlying> _parser = new pb::MessageParser<AuthTokenUnderlying>(() => new AuthTokenUnderlying());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AuthTokenUnderlying> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::jtshared.SerializableDataReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AuthTokenUnderlying() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AuthTokenUnderlying(AuthTokenUnderlying other) : this() {
      playerId_ = other.playerId_;
      fromAuthsrvId_ = other.fromAuthsrvId_;
      toBattlesrvId_ = other.toBattlesrvId_;
      expiresAt_ = other.expiresAt_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AuthTokenUnderlying Clone() {
      return new AuthTokenUnderlying(this);
    }

    /// <summary>Field number for the "player_id" field.</summary>
    public const int PlayerIdFieldNumber = 1;
    private string playerId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PlayerId {
      get { return playerId_; }
      set {
        playerId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "from_authsrv_id" field.</summary>
    public const int FromAuthsrvIdFieldNumber = 2;
    private uint fromAuthsrvId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint FromAuthsrvId {
      get { return fromAuthsrvId_; }
      set {
        fromAuthsrvId_ = value;
      }
    }

    /// <summary>Field number for the "to_battlesrv_id" field.</summary>
    public const int ToBattlesrvIdFieldNumber = 3;
    private uint toBattlesrvId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ToBattlesrvId {
      get { return toBattlesrvId_; }
      set {
        toBattlesrvId_ = value;
      }
    }

    /// <summary>Field number for the "expires_at" field.</summary>
    public const int ExpiresAtFieldNumber = 4;
    private long expiresAt_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ExpiresAt {
      get { return expiresAt_; }
      set {
        expiresAt_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AuthTokenUnderlying);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AuthTokenUnderlying other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlayerId != other.PlayerId) return false;
      if (FromAuthsrvId != other.FromAuthsrvId) return false;
      if (ToBattlesrvId != other.ToBattlesrvId) return false;
      if (ExpiresAt != other.ExpiresAt) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PlayerId.Length != 0) hash ^= PlayerId.GetHashCode();
      if (FromAuthsrvId != 0) hash ^= FromAuthsrvId.GetHashCode();
      if (ToBattlesrvId != 0) hash ^= ToBattlesrvId.GetHashCode();
      if (ExpiresAt != 0L) hash ^= ExpiresAt.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PlayerId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(PlayerId);
      }
      if (FromAuthsrvId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(FromAuthsrvId);
      }
      if (ToBattlesrvId != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(ToBattlesrvId);
      }
      if (ExpiresAt != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(ExpiresAt);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlayerId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PlayerId);
      }
      if (FromAuthsrvId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(FromAuthsrvId);
      }
      if (ToBattlesrvId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ToBattlesrvId);
      }
      if (ExpiresAt != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ExpiresAt);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AuthTokenUnderlying other) {
      if (other == null) {
        return;
      }
      if (other.PlayerId.Length != 0) {
        PlayerId = other.PlayerId;
      }
      if (other.FromAuthsrvId != 0) {
        FromAuthsrvId = other.FromAuthsrvId;
      }
      if (other.ToBattlesrvId != 0) {
        ToBattlesrvId = other.ToBattlesrvId;
      }
      if (other.ExpiresAt != 0L) {
        ExpiresAt = other.ExpiresAt;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            PlayerId = input.ReadString();
            break;
          }
          case 16: {
            FromAuthsrvId = input.ReadUInt32();
            break;
          }
          case 24: {
            ToBattlesrvId = input.ReadUInt32();
            break;
          }
          case 32: {
            ExpiresAt = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class AuthResult : pb::IMessage<AuthResult> {
    private static readonly pb::MessageParser<AuthResult> _parser = new pb::MessageParser<AuthResult>(() => new AuthResult());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AuthResult> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::jtshared.SerializableDataReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AuthResult() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AuthResult(AuthResult other) : this() {
      retCode_ = other.retCode_;
      uname_ = other.uname_;
      captcha_ = other.captcha_;
      expiresAt_ = other.expiresAt_;
      playerId_ = other.playerId_;
      newAuthToken_ = other.newAuthToken_;
      newAuthTokenSig_ = other.newAuthTokenSig_;
      captchaSubmitAuthsrvId_ = other.captchaSubmitAuthsrvId_;
      battlesrvHostnameOnly_ = other.battlesrvHostnameOnly_;
      battlesrvEndpoint_ = other.battlesrvEndpoint_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AuthResult Clone() {
      return new AuthResult(this);
    }

    /// <summary>Field number for the "ret_code" field.</summary>
    public const int RetCodeFieldNumber = 1;
    private int retCode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RetCode {
      get { return retCode_; }
      set {
        retCode_ = value;
      }
    }

    /// <summary>Field number for the "uname" field.</summary>
    public const int UnameFieldNumber = 2;
    private string uname_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Uname {
      get { return uname_; }
      set {
        uname_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "captcha" field.</summary>
    public const int CaptchaFieldNumber = 3;
    private string captcha_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Captcha {
      get { return captcha_; }
      set {
        captcha_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "expires_at" field.</summary>
    public const int ExpiresAtFieldNumber = 4;
    private long expiresAt_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ExpiresAt {
      get { return expiresAt_; }
      set {
        expiresAt_ = value;
      }
    }

    /// <summary>Field number for the "player_id" field.</summary>
    public const int PlayerIdFieldNumber = 5;
    private string playerId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PlayerId {
      get { return playerId_; }
      set {
        playerId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "new_auth_token" field.</summary>
    public const int NewAuthTokenFieldNumber = 6;
    private string newAuthToken_ = "";
    /// <summary>
    /// b64Encode(battleSrvPubkeyRsaEncrypt({...}))
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NewAuthToken {
      get { return newAuthToken_; }
      set {
        newAuthToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "new_auth_token_sig" field.</summary>
    public const int NewAuthTokenSigFieldNumber = 7;
    private string newAuthTokenSig_ = "";
    /// <summary>
    /// b64Encode(authSrvPrikeyRsaSign(newAuthToken))
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NewAuthTokenSig {
      get { return newAuthTokenSig_; }
      set {
        newAuthTokenSig_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "captcha_submit_authsrv_id" field.</summary>
    public const int CaptchaSubmitAuthsrvIdFieldNumber = 8;
    private uint captchaSubmitAuthsrvId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CaptchaSubmitAuthsrvId {
      get { return captchaSubmitAuthsrvId_; }
      set {
        captchaSubmitAuthsrvId_ = value;
      }
    }

    /// <summary>Field number for the "battlesrv_hostname_only" field.</summary>
    public const int BattlesrvHostnameOnlyFieldNumber = 9;
    private string battlesrvHostnameOnly_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BattlesrvHostnameOnly {
      get { return battlesrvHostnameOnly_; }
      set {
        battlesrvHostnameOnly_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "battlesrv_endpoint" field.</summary>
    public const int BattlesrvEndpointFieldNumber = 10;
    private string battlesrvEndpoint_ = "";
    /// <summary>
    /// e.g. "ws://&lt;battlesrvHostnameOnly>:ip/path/to/connect"
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BattlesrvEndpoint {
      get { return battlesrvEndpoint_; }
      set {
        battlesrvEndpoint_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AuthResult);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AuthResult other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RetCode != other.RetCode) return false;
      if (Uname != other.Uname) return false;
      if (Captcha != other.Captcha) return false;
      if (ExpiresAt != other.ExpiresAt) return false;
      if (PlayerId != other.PlayerId) return false;
      if (NewAuthToken != other.NewAuthToken) return false;
      if (NewAuthTokenSig != other.NewAuthTokenSig) return false;
      if (CaptchaSubmitAuthsrvId != other.CaptchaSubmitAuthsrvId) return false;
      if (BattlesrvHostnameOnly != other.BattlesrvHostnameOnly) return false;
      if (BattlesrvEndpoint != other.BattlesrvEndpoint) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RetCode != 0) hash ^= RetCode.GetHashCode();
      if (Uname.Length != 0) hash ^= Uname.GetHashCode();
      if (Captcha.Length != 0) hash ^= Captcha.GetHashCode();
      if (ExpiresAt != 0L) hash ^= ExpiresAt.GetHashCode();
      if (PlayerId.Length != 0) hash ^= PlayerId.GetHashCode();
      if (NewAuthToken.Length != 0) hash ^= NewAuthToken.GetHashCode();
      if (NewAuthTokenSig.Length != 0) hash ^= NewAuthTokenSig.GetHashCode();
      if (CaptchaSubmitAuthsrvId != 0) hash ^= CaptchaSubmitAuthsrvId.GetHashCode();
      if (BattlesrvHostnameOnly.Length != 0) hash ^= BattlesrvHostnameOnly.GetHashCode();
      if (BattlesrvEndpoint.Length != 0) hash ^= BattlesrvEndpoint.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RetCode != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(RetCode);
      }
      if (Uname.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Uname);
      }
      if (Captcha.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Captcha);
      }
      if (ExpiresAt != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(ExpiresAt);
      }
      if (PlayerId.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(PlayerId);
      }
      if (NewAuthToken.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(NewAuthToken);
      }
      if (NewAuthTokenSig.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(NewAuthTokenSig);
      }
      if (CaptchaSubmitAuthsrvId != 0) {
        output.WriteRawTag(64);
        output.WriteUInt32(CaptchaSubmitAuthsrvId);
      }
      if (BattlesrvHostnameOnly.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(BattlesrvHostnameOnly);
      }
      if (BattlesrvEndpoint.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(BattlesrvEndpoint);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RetCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RetCode);
      }
      if (Uname.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Uname);
      }
      if (Captcha.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Captcha);
      }
      if (ExpiresAt != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ExpiresAt);
      }
      if (PlayerId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PlayerId);
      }
      if (NewAuthToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NewAuthToken);
      }
      if (NewAuthTokenSig.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NewAuthTokenSig);
      }
      if (CaptchaSubmitAuthsrvId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CaptchaSubmitAuthsrvId);
      }
      if (BattlesrvHostnameOnly.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BattlesrvHostnameOnly);
      }
      if (BattlesrvEndpoint.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BattlesrvEndpoint);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AuthResult other) {
      if (other == null) {
        return;
      }
      if (other.RetCode != 0) {
        RetCode = other.RetCode;
      }
      if (other.Uname.Length != 0) {
        Uname = other.Uname;
      }
      if (other.Captcha.Length != 0) {
        Captcha = other.Captcha;
      }
      if (other.ExpiresAt != 0L) {
        ExpiresAt = other.ExpiresAt;
      }
      if (other.PlayerId.Length != 0) {
        PlayerId = other.PlayerId;
      }
      if (other.NewAuthToken.Length != 0) {
        NewAuthToken = other.NewAuthToken;
      }
      if (other.NewAuthTokenSig.Length != 0) {
        NewAuthTokenSig = other.NewAuthTokenSig;
      }
      if (other.CaptchaSubmitAuthsrvId != 0) {
        CaptchaSubmitAuthsrvId = other.CaptchaSubmitAuthsrvId;
      }
      if (other.BattlesrvHostnameOnly.Length != 0) {
        BattlesrvHostnameOnly = other.BattlesrvHostnameOnly;
      }
      if (other.BattlesrvEndpoint.Length != 0) {
        BattlesrvEndpoint = other.BattlesrvEndpoint;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            RetCode = input.ReadInt32();
            break;
          }
          case 18: {
            Uname = input.ReadString();
            break;
          }
          case 26: {
            Captcha = input.ReadString();
            break;
          }
          case 32: {
            ExpiresAt = input.ReadInt64();
            break;
          }
          case 42: {
            PlayerId = input.ReadString();
            break;
          }
          case 50: {
            NewAuthToken = input.ReadString();
            break;
          }
          case 58: {
            NewAuthTokenSig = input.ReadString();
            break;
          }
          case 64: {
            CaptchaSubmitAuthsrvId = input.ReadUInt32();
            break;
          }
          case 74: {
            BattlesrvHostnameOnly = input.ReadString();
            break;
          }
          case 82: {
            BattlesrvEndpoint = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SteamAuthenticateUserTicketPayloadParams : pb::IMessage<SteamAuthenticateUserTicketPayloadParams> {
    private static readonly pb::MessageParser<SteamAuthenticateUserTicketPayloadParams> _parser = new pb::MessageParser<SteamAuthenticateUserTicketPayloadParams>(() => new SteamAuthenticateUserTicketPayloadParams());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SteamAuthenticateUserTicketPayloadParams> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::jtshared.SerializableDataReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SteamAuthenticateUserTicketPayloadParams() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SteamAuthenticateUserTicketPayloadParams(SteamAuthenticateUserTicketPayloadParams other) : this() {
      result_ = other.result_;
      steamid_ = other.steamid_;
      ownersteamid_ = other.ownersteamid_;
      vacbanned_ = other.vacbanned_;
      publisherbanned_ = other.publisherbanned_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SteamAuthenticateUserTicketPayloadParams Clone() {
      return new SteamAuthenticateUserTicketPayloadParams(this);
    }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 1;
    private string result_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Result {
      get { return result_; }
      set {
        result_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "steamid" field.</summary>
    public const int SteamidFieldNumber = 2;
    private string steamid_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Steamid {
      get { return steamid_; }
      set {
        steamid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ownersteamid" field.</summary>
    public const int OwnersteamidFieldNumber = 3;
    private string ownersteamid_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Ownersteamid {
      get { return ownersteamid_; }
      set {
        ownersteamid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "vacbanned" field.</summary>
    public const int VacbannedFieldNumber = 4;
    private bool vacbanned_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Vacbanned {
      get { return vacbanned_; }
      set {
        vacbanned_ = value;
      }
    }

    /// <summary>Field number for the "publisherbanned" field.</summary>
    public const int PublisherbannedFieldNumber = 5;
    private bool publisherbanned_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Publisherbanned {
      get { return publisherbanned_; }
      set {
        publisherbanned_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SteamAuthenticateUserTicketPayloadParams);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SteamAuthenticateUserTicketPayloadParams other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Result != other.Result) return false;
      if (Steamid != other.Steamid) return false;
      if (Ownersteamid != other.Ownersteamid) return false;
      if (Vacbanned != other.Vacbanned) return false;
      if (Publisherbanned != other.Publisherbanned) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Result.Length != 0) hash ^= Result.GetHashCode();
      if (Steamid.Length != 0) hash ^= Steamid.GetHashCode();
      if (Ownersteamid.Length != 0) hash ^= Ownersteamid.GetHashCode();
      if (Vacbanned != false) hash ^= Vacbanned.GetHashCode();
      if (Publisherbanned != false) hash ^= Publisherbanned.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Result.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Result);
      }
      if (Steamid.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Steamid);
      }
      if (Ownersteamid.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Ownersteamid);
      }
      if (Vacbanned != false) {
        output.WriteRawTag(32);
        output.WriteBool(Vacbanned);
      }
      if (Publisherbanned != false) {
        output.WriteRawTag(40);
        output.WriteBool(Publisherbanned);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Result.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Result);
      }
      if (Steamid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Steamid);
      }
      if (Ownersteamid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Ownersteamid);
      }
      if (Vacbanned != false) {
        size += 1 + 1;
      }
      if (Publisherbanned != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SteamAuthenticateUserTicketPayloadParams other) {
      if (other == null) {
        return;
      }
      if (other.Result.Length != 0) {
        Result = other.Result;
      }
      if (other.Steamid.Length != 0) {
        Steamid = other.Steamid;
      }
      if (other.Ownersteamid.Length != 0) {
        Ownersteamid = other.Ownersteamid;
      }
      if (other.Vacbanned != false) {
        Vacbanned = other.Vacbanned;
      }
      if (other.Publisherbanned != false) {
        Publisherbanned = other.Publisherbanned;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Result = input.ReadString();
            break;
          }
          case 18: {
            Steamid = input.ReadString();
            break;
          }
          case 26: {
            Ownersteamid = input.ReadString();
            break;
          }
          case 32: {
            Vacbanned = input.ReadBool();
            break;
          }
          case 40: {
            Publisherbanned = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SteamAuthenticateUserTicketPayloadResp : pb::IMessage<SteamAuthenticateUserTicketPayloadResp> {
    private static readonly pb::MessageParser<SteamAuthenticateUserTicketPayloadResp> _parser = new pb::MessageParser<SteamAuthenticateUserTicketPayloadResp>(() => new SteamAuthenticateUserTicketPayloadResp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SteamAuthenticateUserTicketPayloadResp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::jtshared.SerializableDataReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SteamAuthenticateUserTicketPayloadResp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SteamAuthenticateUserTicketPayloadResp(SteamAuthenticateUserTicketPayloadResp other) : this() {
      params_ = other.params_ != null ? other.params_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SteamAuthenticateUserTicketPayloadResp Clone() {
      return new SteamAuthenticateUserTicketPayloadResp(this);
    }

    /// <summary>Field number for the "params" field.</summary>
    public const int ParamsFieldNumber = 1;
    private global::jtshared.SteamAuthenticateUserTicketPayloadParams params_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::jtshared.SteamAuthenticateUserTicketPayloadParams Params {
      get { return params_; }
      set {
        params_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SteamAuthenticateUserTicketPayloadResp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SteamAuthenticateUserTicketPayloadResp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Params, other.Params)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (params_ != null) hash ^= Params.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (params_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Params);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (params_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Params);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SteamAuthenticateUserTicketPayloadResp other) {
      if (other == null) {
        return;
      }
      if (other.params_ != null) {
        if (params_ == null) {
          Params = new global::jtshared.SteamAuthenticateUserTicketPayloadParams();
        }
        Params.MergeFrom(other.Params);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (params_ == null) {
              Params = new global::jtshared.SteamAuthenticateUserTicketPayloadParams();
            }
            input.ReadMessage(Params);
            break;
          }
        }
      }
    }

  }

  public sealed partial class SteamAuthenticateUserTicketResult : pb::IMessage<SteamAuthenticateUserTicketResult> {
    private static readonly pb::MessageParser<SteamAuthenticateUserTicketResult> _parser = new pb::MessageParser<SteamAuthenticateUserTicketResult>(() => new SteamAuthenticateUserTicketResult());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SteamAuthenticateUserTicketResult> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::jtshared.SerializableDataReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SteamAuthenticateUserTicketResult() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SteamAuthenticateUserTicketResult(SteamAuthenticateUserTicketResult other) : this() {
      response_ = other.response_ != null ? other.response_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SteamAuthenticateUserTicketResult Clone() {
      return new SteamAuthenticateUserTicketResult(this);
    }

    /// <summary>Field number for the "response" field.</summary>
    public const int ResponseFieldNumber = 1;
    private global::jtshared.SteamAuthenticateUserTicketPayloadResp response_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::jtshared.SteamAuthenticateUserTicketPayloadResp Response {
      get { return response_; }
      set {
        response_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SteamAuthenticateUserTicketResult);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SteamAuthenticateUserTicketResult other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Response, other.Response)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (response_ != null) hash ^= Response.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (response_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Response);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (response_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Response);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SteamAuthenticateUserTicketResult other) {
      if (other == null) {
        return;
      }
      if (other.response_ != null) {
        if (response_ == null) {
          Response = new global::jtshared.SteamAuthenticateUserTicketPayloadResp();
        }
        Response.MergeFrom(other.Response);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (response_ == null) {
              Response = new global::jtshared.SteamAuthenticateUserTicketPayloadResp();
            }
            input.ReadMessage(Response);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///
  ///Upon reception of an encoded "BattleInvitation", an invited player can either
  ///- enter it into a free-text editbox for joining, or 
  ///- click the link shared in a social media software, e.g. https://partner.steamgames.com/doc/api/ISteamFriends#InviteUserToGame.
  ///
  ///In both use cases, the invited player should visit its closest "auth-server" for exchanging 
  ///- "toBattlesrvId -> battlesrvEndpoint" for routing, and 
  ///- "steam ticket -> authTokenUnderlying" for "battle-server" security control.
  ///
  ///The received encoded "BattleInvitation" is a string produced by "b64Encode(protobufMarshal(instance: BattleInvitation))" from a "battle-server". 
  ///
  ///```ISteamFriends#InviteUserToGame
  ///bool InviteUserToGame( CSteamID steamIDFriend, const char *pchConnectString );
  ///-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  ///Name            |    Type	     |    Description
  ///-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  ///steamIDFriend	|    CSteamID	 |    The Steam ID of the friend to invite.
  ///pchConnectString|	const char * |	  A string that lets the friend know how to join the game (I.E. the game server IP). This can not be longer than specified in k_cchMaxRichPresenceValueLength.
  ///-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  ///
  ///Invites a friend or clan member to the current game using a special invite string.
  ///
  ///If the target user accepts the invite then the pchConnectString gets added to the command-line when launching the game.
  ///If the game is already running for that user, then they will receive a GameRichPresenceJoinRequested_t callback with the connect string.
  ///
  ///- Returns: bool
  ///Triggers a GameRichPresenceJoinRequested_t callback.
  ///- true if the invite was successfully sent.
  ///- false under the following conditions:
  ///- The Steam ID provided to steamIDFriend was invalid.
  ///- The Steam ID provided to steamIDFriend is not a friend or does not share the same Steam Group as the current user.
  ///- The value provided to pchConnectString was too long.
  ///```
  /// </summary>
  public sealed partial class BattleInvitation : pb::IMessage<BattleInvitation> {
    private static readonly pb::MessageParser<BattleInvitation> _parser = new pb::MessageParser<BattleInvitation>(() => new BattleInvitation());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BattleInvitation> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::jtshared.SerializableDataReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleInvitation() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleInvitation(BattleInvitation other) : this() {
      fromPlayerId_ = other.fromPlayerId_;
      toBattlesrvId_ = other.toBattlesrvId_;
      boundRoomId_ = other.boundRoomId_;
      expiresAt_ = other.expiresAt_;
      passcode_ = other.passcode_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleInvitation Clone() {
      return new BattleInvitation(this);
    }

    /// <summary>Field number for the "from_player_id" field.</summary>
    public const int FromPlayerIdFieldNumber = 1;
    private string fromPlayerId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FromPlayerId {
      get { return fromPlayerId_; }
      set {
        fromPlayerId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "to_battlesrv_id" field.</summary>
    public const int ToBattlesrvIdFieldNumber = 2;
    private uint toBattlesrvId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ToBattlesrvId {
      get { return toBattlesrvId_; }
      set {
        toBattlesrvId_ = value;
      }
    }

    /// <summary>Field number for the "bound_room_id" field.</summary>
    public const int BoundRoomIdFieldNumber = 3;
    private int boundRoomId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BoundRoomId {
      get { return boundRoomId_; }
      set {
        boundRoomId_ = value;
      }
    }

    /// <summary>Field number for the "expires_at" field.</summary>
    public const int ExpiresAtFieldNumber = 4;
    private long expiresAt_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ExpiresAt {
      get { return expiresAt_; }
      set {
        expiresAt_ = value;
      }
    }

    /// <summary>Field number for the "passcode" field.</summary>
    public const int PasscodeFieldNumber = 5;
    private string passcode_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Passcode {
      get { return passcode_; }
      set {
        passcode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BattleInvitation);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BattleInvitation other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FromPlayerId != other.FromPlayerId) return false;
      if (ToBattlesrvId != other.ToBattlesrvId) return false;
      if (BoundRoomId != other.BoundRoomId) return false;
      if (ExpiresAt != other.ExpiresAt) return false;
      if (Passcode != other.Passcode) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FromPlayerId.Length != 0) hash ^= FromPlayerId.GetHashCode();
      if (ToBattlesrvId != 0) hash ^= ToBattlesrvId.GetHashCode();
      if (BoundRoomId != 0) hash ^= BoundRoomId.GetHashCode();
      if (ExpiresAt != 0L) hash ^= ExpiresAt.GetHashCode();
      if (Passcode.Length != 0) hash ^= Passcode.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (FromPlayerId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(FromPlayerId);
      }
      if (ToBattlesrvId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(ToBattlesrvId);
      }
      if (BoundRoomId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(BoundRoomId);
      }
      if (ExpiresAt != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(ExpiresAt);
      }
      if (Passcode.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Passcode);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FromPlayerId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FromPlayerId);
      }
      if (ToBattlesrvId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ToBattlesrvId);
      }
      if (BoundRoomId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BoundRoomId);
      }
      if (ExpiresAt != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ExpiresAt);
      }
      if (Passcode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Passcode);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BattleInvitation other) {
      if (other == null) {
        return;
      }
      if (other.FromPlayerId.Length != 0) {
        FromPlayerId = other.FromPlayerId;
      }
      if (other.ToBattlesrvId != 0) {
        ToBattlesrvId = other.ToBattlesrvId;
      }
      if (other.BoundRoomId != 0) {
        BoundRoomId = other.BoundRoomId;
      }
      if (other.ExpiresAt != 0L) {
        ExpiresAt = other.ExpiresAt;
      }
      if (other.Passcode.Length != 0) {
        Passcode = other.Passcode;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            FromPlayerId = input.ReadString();
            break;
          }
          case 16: {
            ToBattlesrvId = input.ReadUInt32();
            break;
          }
          case 24: {
            BoundRoomId = input.ReadInt32();
            break;
          }
          case 32: {
            ExpiresAt = input.ReadInt64();
            break;
          }
          case 42: {
            Passcode = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CharacterConfig : pb::IMessage<CharacterConfig> {
    private static readonly pb::MessageParser<CharacterConfig> _parser = new pb::MessageParser<CharacterConfig>(() => new CharacterConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CharacterConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::jtshared.SerializableDataReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CharacterConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CharacterConfig(CharacterConfig other) : this() {
      speciesId_ = other.speciesId_;
      speciesName_ = other.speciesName_;
      hp_ = other.hp_;
      mp_ = other.mp_;
      layDownFrames_ = other.layDownFrames_;
      layDownFramesToRecover_ = other.layDownFramesToRecover_;
      getUpInvinsibleFrames_ = other.getUpInvinsibleFrames_;
      getUpFramesToRecover_ = other.getUpFramesToRecover_;
      speed_ = other.speed_;
      mpRegenPerInterval_ = other.mpRegenPerInterval_;
      mpRegenInterval_ = other.mpRegenInterval_;
      jumpingInitVelY_ = other.jumpingInitVelY_;
      inertiaFramesToRecover_ = other.inertiaFramesToRecover_;
      dashingEnabled_ = other.dashingEnabled_;
      slidingEnabled_ = other.slidingEnabled_;
      onWallEnabled_ = other.onWallEnabled_;
      crouchingEnabled_ = other.crouchingEnabled_;
      crouchingAtkEnabled_ = other.crouchingAtkEnabled_;
      wallJumpingFramesToRecover_ = other.wallJumpingFramesToRecover_;
      wallJumpingInitVelX_ = other.wallJumpingInitVelX_;
      wallJumpingInitVelY_ = other.wallJumpingInitVelY_;
      wallSlidingVelY_ = other.wallSlidingVelY_;
      minFallingVelY_ = other.minFallingVelY_;
      maxAscendingVelY_ = other.maxAscendingVelY_;
      atk1UsesMagazine_ = other.atk1UsesMagazine_;
      groundDodgeEnabledByIvSlotCInBlockStun_ = other.groundDodgeEnabledByIvSlotCInBlockStun_;
      groundDodgeEnabledByRdfCntFromBeginning_ = other.groundDodgeEnabledByRdfCntFromBeginning_;
      groundDodgedFramesToRecover_ = other.groundDodgedFramesToRecover_;
      groundDodgedFramesInvinsible_ = other.groundDodgedFramesInvinsible_;
      groundDodgedSpeed_ = other.groundDodgedSpeed_;
      visionOffsetX_ = other.visionOffsetX_;
      visionOffsetY_ = other.visionOffsetY_;
      visionSizeX_ = other.visionSizeX_;
      visionSizeY_ = other.visionSizeY_;
      capsuleRadius_ = other.capsuleRadius_;
      capsuleHalfHeight_ = other.capsuleHalfHeight_;
      shrinkedCapsuleRadius_ = other.shrinkedCapsuleRadius_;
      shrinkedCapsuleHalfHeight_ = other.shrinkedCapsuleHalfHeight_;
      layDownCapsuleRadius_ = other.layDownCapsuleRadius_;
      layDownCapsuleHalfHeight_ = other.layDownCapsuleHalfHeight_;
      dyingCapsuleRadius_ = other.dyingCapsuleRadius_;
      dyingCapsuleHalfHeight_ = other.dyingCapsuleHalfHeight_;
      dimmedCapsuleRadius_ = other.dimmedCapsuleRadius_;
      dimmedCapsuleHalfHeight_ = other.dimmedCapsuleHalfHeight_;
      antiGravityWhenIdle_ = other.antiGravityWhenIdle_;
      antiGravityFramesLingering_ = other.antiGravityFramesLingering_;
      omitGravity_ = other.omitGravity_;
      omitSoftPushback_ = other.omitSoftPushback_;
      repelSoftPushback_ = other.repelSoftPushback_;
      collisionTypeMask_ = other.collisionTypeMask_;
      hasTurnAroundAnim_ = other.hasTurnAroundAnim_;
      hasDimmedAnim_ = other.hasDimmedAnim_;
      hasAwakingAnim_ = other.hasAwakingAnim_;
      hasWalkStoppingAnim_ = other.hasWalkStoppingAnim_;
      hasInAirWalkStoppingAnim_ = other.hasInAirWalkStoppingAnim_;
      layDownToRecoverFromDimmed_ = other.layDownToRecoverFromDimmed_;
      hardness_ = other.hardness_;
      proactiveJumpStartupFrames_ = other.proactiveJumpStartupFrames_;
      defaultAirJumpQuota_ = other.defaultAirJumpQuota_;
      defaultAirDashQuota_ = other.defaultAirDashQuota_;
      defaultDef1Quota_ = other.defaultDef1Quota_;
      isolatedAirJumpAndDashQuota_ = other.isolatedAirJumpAndDashQuota_;
      airJumpVfxSpeciesId_ = other.airJumpVfxSpeciesId_;
      slipJumpThresHoldBelowTopFace_ = other.slipJumpThresHoldBelowTopFace_;
      slipJumpCharacterDropY_ = other.slipJumpCharacterDropY_;
      transformIntoSpeciesIdUponDeath_ = other.transformIntoSpeciesIdUponDeath_;
      jumpHoldingToFly_ = other.jumpHoldingToFly_;
      hasDef1_ = other.hasDef1_;
      hasDef1Atked1Anim_ = other.hasDef1Atked1Anim_;
      defaultDef1BrokenFramesToRecover_ = other.defaultDef1BrokenFramesToRecover_;
      def1ActiveVfxSpeciesId_ = other.def1ActiveVfxSpeciesId_;
      def1AtkedVfxSpeciesId_ = other.def1AtkedVfxSpeciesId_;
      def1BrokenVfxSpeciesId_ = other.def1BrokenVfxSpeciesId_;
      def1StartupFrames_ = other.def1StartupFrames_;
      def1DamageYield_ = other.def1DamageYield_;
      def1DefiesEleWeaknessPenetration_ = other.def1DefiesEleWeaknessPenetration_;
      def1DefiesDebuff_ = other.def1DefiesDebuff_;
      flyingQuotaRdfCnt_ = other.flyingQuotaRdfCnt_;
      walkingAutoDef1_ = other.walkingAutoDef1_;
      ifc_ = other.ifc_;
      eleWeakness_ = other.eleWeakness_;
      eleResistance_ = other.eleResistance_;
      hasBtnBCharging_ = other.hasBtnBCharging_;
      btnBChargedVfxSpeciesId_ = other.btnBChargedVfxSpeciesId_;
      isKeyCh_ = other.isKeyCh_;
      allowsSameTeamSoftPushback_ = other.allowsSameTeamSoftPushback_;
      gaugeIncWhenKilled_ = other.gaugeIncWhenKilled_;
      jumpingInsteadOfWalking_ = other.jumpingInsteadOfWalking_;
      visionSearchIntervalPow2Minus1U_ = other.visionSearchIntervalPow2Minus1U_;
      visionSearchIntervalPow2Minus1_ = other.visionSearchIntervalPow2Minus1_;
      npcNoDefaultAirWalking_ = other.npcNoDefaultAirWalking_;
      npcPrioritizeBulletHandling_ = other.npcPrioritizeBulletHandling_;
      npcPrioritizeAllyHealing_ = other.npcPrioritizeAllyHealing_;
      npcNotHuntingInAirOppoCh_ = other.npcNotHuntingInAirOppoCh_;
      transformIntoFramesToRecover_ = other.transformIntoFramesToRecover_;
      transformIntoFramesInvinsible_ = other.transformIntoFramesInvinsible_;
      awakingFramesToRecover_ = other.awakingFramesToRecover_;
      awakingFramesInvinsible_ = other.awakingFramesInvinsible_;
      useIdle1AsFlyingIdle_ = other.useIdle1AsFlyingIdle_;
      noFlee_ = other.noFlee_;
      atk1Magazine_ = other.atk1Magazine_ != null ? other.atk1Magazine_.Clone() : null;
      superAtkGuage_ = other.superAtkGuage_ != null ? other.superAtkGuage_.Clone() : null;
      initInventorySlots_ = other.initInventorySlots_.Clone();
      btnBAutoUnholdChStates_ = other.btnBAutoUnholdChStates_.Clone();
      loopingChStates_ = other.loopingChStates_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CharacterConfig Clone() {
      return new CharacterConfig(this);
    }

    /// <summary>Field number for the "species_id" field.</summary>
    public const int SpeciesIdFieldNumber = 1;
    private uint speciesId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SpeciesId {
      get { return speciesId_; }
      set {
        speciesId_ = value;
      }
    }

    /// <summary>Field number for the "species_name" field.</summary>
    public const int SpeciesNameFieldNumber = 2;
    private string speciesName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SpeciesName {
      get { return speciesName_; }
      set {
        speciesName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "hp" field.</summary>
    public const int HpFieldNumber = 3;
    private int hp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Hp {
      get { return hp_; }
      set {
        hp_ = value;
      }
    }

    /// <summary>Field number for the "mp" field.</summary>
    public const int MpFieldNumber = 4;
    private int mp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Mp {
      get { return mp_; }
      set {
        mp_ = value;
      }
    }

    /// <summary>Field number for the "lay_down_frames" field.</summary>
    public const int LayDownFramesFieldNumber = 5;
    private int layDownFrames_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LayDownFrames {
      get { return layDownFrames_; }
      set {
        layDownFrames_ = value;
      }
    }

    /// <summary>Field number for the "lay_down_frames_to_recover" field.</summary>
    public const int LayDownFramesToRecoverFieldNumber = 6;
    private int layDownFramesToRecover_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LayDownFramesToRecover {
      get { return layDownFramesToRecover_; }
      set {
        layDownFramesToRecover_ = value;
      }
    }

    /// <summary>Field number for the "get_up_invinsible_frames" field.</summary>
    public const int GetUpInvinsibleFramesFieldNumber = 7;
    private int getUpInvinsibleFrames_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GetUpInvinsibleFrames {
      get { return getUpInvinsibleFrames_; }
      set {
        getUpInvinsibleFrames_ = value;
      }
    }

    /// <summary>Field number for the "get_up_frames_to_recover" field.</summary>
    public const int GetUpFramesToRecoverFieldNumber = 8;
    private int getUpFramesToRecover_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GetUpFramesToRecover {
      get { return getUpFramesToRecover_; }
      set {
        getUpFramesToRecover_ = value;
      }
    }

    /// <summary>Field number for the "speed" field.</summary>
    public const int SpeedFieldNumber = 9;
    private float speed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Speed {
      get { return speed_; }
      set {
        speed_ = value;
      }
    }

    /// <summary>Field number for the "mp_regen_per_interval" field.</summary>
    public const int MpRegenPerIntervalFieldNumber = 10;
    private int mpRegenPerInterval_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MpRegenPerInterval {
      get { return mpRegenPerInterval_; }
      set {
        mpRegenPerInterval_ = value;
      }
    }

    /// <summary>Field number for the "mp_regen_interval" field.</summary>
    public const int MpRegenIntervalFieldNumber = 11;
    private int mpRegenInterval_;
    /// <summary>
    /// an integer of RenderFrame count
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MpRegenInterval {
      get { return mpRegenInterval_; }
      set {
        mpRegenInterval_ = value;
      }
    }

    /// <summary>Field number for the "jumping_init_vel_y" field.</summary>
    public const int JumpingInitVelYFieldNumber = 12;
    private float jumpingInitVelY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float JumpingInitVelY {
      get { return jumpingInitVelY_; }
      set {
        jumpingInitVelY_ = value;
      }
    }

    /// <summary>Field number for the "inertia_frames_to_recover" field.</summary>
    public const int InertiaFramesToRecoverFieldNumber = 13;
    private int inertiaFramesToRecover_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int InertiaFramesToRecover {
      get { return inertiaFramesToRecover_; }
      set {
        inertiaFramesToRecover_ = value;
      }
    }

    /// <summary>Field number for the "dashing_enabled" field.</summary>
    public const int DashingEnabledFieldNumber = 14;
    private bool dashingEnabled_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool DashingEnabled {
      get { return dashingEnabled_; }
      set {
        dashingEnabled_ = value;
      }
    }

    /// <summary>Field number for the "sliding_enabled" field.</summary>
    public const int SlidingEnabledFieldNumber = 15;
    private bool slidingEnabled_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool SlidingEnabled {
      get { return slidingEnabled_; }
      set {
        slidingEnabled_ = value;
      }
    }

    /// <summary>Field number for the "on_wall_enabled" field.</summary>
    public const int OnWallEnabledFieldNumber = 16;
    private bool onWallEnabled_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool OnWallEnabled {
      get { return onWallEnabled_; }
      set {
        onWallEnabled_ = value;
      }
    }

    /// <summary>Field number for the "crouching_enabled" field.</summary>
    public const int CrouchingEnabledFieldNumber = 17;
    private bool crouchingEnabled_;
    /// <summary>
    /// Considering that a character might be forced to crouch, "CrouchAtked1" is a MUST if "true == crouching_enabled"
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool CrouchingEnabled {
      get { return crouchingEnabled_; }
      set {
        crouchingEnabled_ = value;
      }
    }

    /// <summary>Field number for the "crouching_atk_enabled" field.</summary>
    public const int CrouchingAtkEnabledFieldNumber = 18;
    private bool crouchingAtkEnabled_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool CrouchingAtkEnabled {
      get { return crouchingAtkEnabled_; }
      set {
        crouchingAtkEnabled_ = value;
      }
    }

    /// <summary>Field number for the "wall_jumping_frames_to_recover" field.</summary>
    public const int WallJumpingFramesToRecoverFieldNumber = 19;
    private int wallJumpingFramesToRecover_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int WallJumpingFramesToRecover {
      get { return wallJumpingFramesToRecover_; }
      set {
        wallJumpingFramesToRecover_ = value;
      }
    }

    /// <summary>Field number for the "wall_jumping_init_vel_x" field.</summary>
    public const int WallJumpingInitVelXFieldNumber = 20;
    private float wallJumpingInitVelX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float WallJumpingInitVelX {
      get { return wallJumpingInitVelX_; }
      set {
        wallJumpingInitVelX_ = value;
      }
    }

    /// <summary>Field number for the "wall_jumping_init_vel_y" field.</summary>
    public const int WallJumpingInitVelYFieldNumber = 21;
    private float wallJumpingInitVelY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float WallJumpingInitVelY {
      get { return wallJumpingInitVelY_; }
      set {
        wallJumpingInitVelY_ = value;
      }
    }

    /// <summary>Field number for the "wall_sliding_vel_y" field.</summary>
    public const int WallSlidingVelYFieldNumber = 22;
    private float wallSlidingVelY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float WallSlidingVelY {
      get { return wallSlidingVelY_; }
      set {
        wallSlidingVelY_ = value;
      }
    }

    /// <summary>Field number for the "min_falling_vel_y" field.</summary>
    public const int MinFallingVelYFieldNumber = 23;
    private float minFallingVelY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float MinFallingVelY {
      get { return minFallingVelY_; }
      set {
        minFallingVelY_ = value;
      }
    }

    /// <summary>Field number for the "max_ascending_vel_y" field.</summary>
    public const int MaxAscendingVelYFieldNumber = 24;
    private float maxAscendingVelY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float MaxAscendingVelY {
      get { return maxAscendingVelY_; }
      set {
        maxAscendingVelY_ = value;
      }
    }

    /// <summary>Field number for the "atk1_uses_magazine" field.</summary>
    public const int Atk1UsesMagazineFieldNumber = 25;
    private bool atk1UsesMagazine_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Atk1UsesMagazine {
      get { return atk1UsesMagazine_; }
      set {
        atk1UsesMagazine_ = value;
      }
    }

    /// <summary>Field number for the "ground_dodge_enabled_by_iv_slot_c_in_block_stun" field.</summary>
    public const int GroundDodgeEnabledByIvSlotCInBlockStunFieldNumber = 26;
    private bool groundDodgeEnabledByIvSlotCInBlockStun_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool GroundDodgeEnabledByIvSlotCInBlockStun {
      get { return groundDodgeEnabledByIvSlotCInBlockStun_; }
      set {
        groundDodgeEnabledByIvSlotCInBlockStun_ = value;
      }
    }

    /// <summary>Field number for the "ground_dodge_enabled_by_rdf_cnt_from_beginning" field.</summary>
    public const int GroundDodgeEnabledByRdfCntFromBeginningFieldNumber = 27;
    private int groundDodgeEnabledByRdfCntFromBeginning_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GroundDodgeEnabledByRdfCntFromBeginning {
      get { return groundDodgeEnabledByRdfCntFromBeginning_; }
      set {
        groundDodgeEnabledByRdfCntFromBeginning_ = value;
      }
    }

    /// <summary>Field number for the "ground_dodged_frames_to_recover" field.</summary>
    public const int GroundDodgedFramesToRecoverFieldNumber = 28;
    private int groundDodgedFramesToRecover_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GroundDodgedFramesToRecover {
      get { return groundDodgedFramesToRecover_; }
      set {
        groundDodgedFramesToRecover_ = value;
      }
    }

    /// <summary>Field number for the "ground_dodged_frames_invinsible" field.</summary>
    public const int GroundDodgedFramesInvinsibleFieldNumber = 29;
    private int groundDodgedFramesInvinsible_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GroundDodgedFramesInvinsible {
      get { return groundDodgedFramesInvinsible_; }
      set {
        groundDodgedFramesInvinsible_ = value;
      }
    }

    /// <summary>Field number for the "ground_dodged_speed" field.</summary>
    public const int GroundDodgedSpeedFieldNumber = 30;
    private float groundDodgedSpeed_;
    /// <summary>
    /// TODO: For better flexibility, should allow "configurable list of speed keyframes", like that of "Hurtboxes"  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float GroundDodgedSpeed {
      get { return groundDodgedSpeed_; }
      set {
        groundDodgedSpeed_ = value;
      }
    }

    /// <summary>Field number for the "vision_offset_x" field.</summary>
    public const int VisionOffsetXFieldNumber = 31;
    private float visionOffsetX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float VisionOffsetX {
      get { return visionOffsetX_; }
      set {
        visionOffsetX_ = value;
      }
    }

    /// <summary>Field number for the "vision_offset_y" field.</summary>
    public const int VisionOffsetYFieldNumber = 32;
    private float visionOffsetY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float VisionOffsetY {
      get { return visionOffsetY_; }
      set {
        visionOffsetY_ = value;
      }
    }

    /// <summary>Field number for the "vision_size_x" field.</summary>
    public const int VisionSizeXFieldNumber = 33;
    private float visionSizeX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float VisionSizeX {
      get { return visionSizeX_; }
      set {
        visionSizeX_ = value;
      }
    }

    /// <summary>Field number for the "vision_size_y" field.</summary>
    public const int VisionSizeYFieldNumber = 34;
    private float visionSizeY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float VisionSizeY {
      get { return visionSizeY_; }
      set {
        visionSizeY_ = value;
      }
    }

    /// <summary>Field number for the "capsule_radius" field.</summary>
    public const int CapsuleRadiusFieldNumber = 35;
    private float capsuleRadius_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float CapsuleRadius {
      get { return capsuleRadius_; }
      set {
        capsuleRadius_ = value;
      }
    }

    /// <summary>Field number for the "capsule_half_height" field.</summary>
    public const int CapsuleHalfHeightFieldNumber = 36;
    private float capsuleHalfHeight_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float CapsuleHalfHeight {
      get { return capsuleHalfHeight_; }
      set {
        capsuleHalfHeight_ = value;
      }
    }

    /// <summary>Field number for the "shrinked_capsule_radius" field.</summary>
    public const int ShrinkedCapsuleRadiusFieldNumber = 37;
    private float shrinkedCapsuleRadius_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float ShrinkedCapsuleRadius {
      get { return shrinkedCapsuleRadius_; }
      set {
        shrinkedCapsuleRadius_ = value;
      }
    }

    /// <summary>Field number for the "shrinked_capsule_half_height" field.</summary>
    public const int ShrinkedCapsuleHalfHeightFieldNumber = 38;
    private float shrinkedCapsuleHalfHeight_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float ShrinkedCapsuleHalfHeight {
      get { return shrinkedCapsuleHalfHeight_; }
      set {
        shrinkedCapsuleHalfHeight_ = value;
      }
    }

    /// <summary>Field number for the "lay_down_capsule_radius" field.</summary>
    public const int LayDownCapsuleRadiusFieldNumber = 39;
    private float layDownCapsuleRadius_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float LayDownCapsuleRadius {
      get { return layDownCapsuleRadius_; }
      set {
        layDownCapsuleRadius_ = value;
      }
    }

    /// <summary>Field number for the "lay_down_capsule_half_height" field.</summary>
    public const int LayDownCapsuleHalfHeightFieldNumber = 40;
    private float layDownCapsuleHalfHeight_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float LayDownCapsuleHalfHeight {
      get { return layDownCapsuleHalfHeight_; }
      set {
        layDownCapsuleHalfHeight_ = value;
      }
    }

    /// <summary>Field number for the "dying_capsule_radius" field.</summary>
    public const int DyingCapsuleRadiusFieldNumber = 41;
    private float dyingCapsuleRadius_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float DyingCapsuleRadius {
      get { return dyingCapsuleRadius_; }
      set {
        dyingCapsuleRadius_ = value;
      }
    }

    /// <summary>Field number for the "dying_capsule_half_height" field.</summary>
    public const int DyingCapsuleHalfHeightFieldNumber = 42;
    private float dyingCapsuleHalfHeight_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float DyingCapsuleHalfHeight {
      get { return dyingCapsuleHalfHeight_; }
      set {
        dyingCapsuleHalfHeight_ = value;
      }
    }

    /// <summary>Field number for the "dimmed_capsule_radius" field.</summary>
    public const int DimmedCapsuleRadiusFieldNumber = 43;
    private float dimmedCapsuleRadius_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float DimmedCapsuleRadius {
      get { return dimmedCapsuleRadius_; }
      set {
        dimmedCapsuleRadius_ = value;
      }
    }

    /// <summary>Field number for the "dimmed_capsule_half_height" field.</summary>
    public const int DimmedCapsuleHalfHeightFieldNumber = 44;
    private float dimmedCapsuleHalfHeight_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float DimmedCapsuleHalfHeight {
      get { return dimmedCapsuleHalfHeight_; }
      set {
        dimmedCapsuleHalfHeight_ = value;
      }
    }

    /// <summary>Field number for the "anti_gravity_when_idle" field.</summary>
    public const int AntiGravityWhenIdleFieldNumber = 45;
    private bool antiGravityWhenIdle_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool AntiGravityWhenIdle {
      get { return antiGravityWhenIdle_; }
      set {
        antiGravityWhenIdle_ = value;
      }
    }

    /// <summary>Field number for the "anti_gravity_frames_lingering" field.</summary>
    public const int AntiGravityFramesLingeringFieldNumber = 46;
    private int antiGravityFramesLingering_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AntiGravityFramesLingering {
      get { return antiGravityFramesLingering_; }
      set {
        antiGravityFramesLingering_ = value;
      }
    }

    /// <summary>Field number for the "omit_gravity" field.</summary>
    public const int OmitGravityFieldNumber = 47;
    private bool omitGravity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool OmitGravity {
      get { return omitGravity_; }
      set {
        omitGravity_ = value;
      }
    }

    /// <summary>Field number for the "omit_soft_pushback" field.</summary>
    public const int OmitSoftPushbackFieldNumber = 48;
    private bool omitSoftPushback_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool OmitSoftPushback {
      get { return omitSoftPushback_; }
      set {
        omitSoftPushback_ = value;
      }
    }

    /// <summary>Field number for the "repel_soft_pushback" field.</summary>
    public const int RepelSoftPushbackFieldNumber = 49;
    private bool repelSoftPushback_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool RepelSoftPushback {
      get { return repelSoftPushback_; }
      set {
        repelSoftPushback_ = value;
      }
    }

    /// <summary>Field number for the "collision_type_mask" field.</summary>
    public const int CollisionTypeMaskFieldNumber = 50;
    private ulong collisionTypeMask_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong CollisionTypeMask {
      get { return collisionTypeMask_; }
      set {
        collisionTypeMask_ = value;
      }
    }

    /// <summary>Field number for the "has_turn_around_anim" field.</summary>
    public const int HasTurnAroundAnimFieldNumber = 51;
    private bool hasTurnAroundAnim_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTurnAroundAnim {
      get { return hasTurnAroundAnim_; }
      set {
        hasTurnAroundAnim_ = value;
      }
    }

    /// <summary>Field number for the "has_dimmed_anim" field.</summary>
    public const int HasDimmedAnimFieldNumber = 52;
    private bool hasDimmedAnim_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasDimmedAnim {
      get { return hasDimmedAnim_; }
      set {
        hasDimmedAnim_ = value;
      }
    }

    /// <summary>Field number for the "has_awaking_anim" field.</summary>
    public const int HasAwakingAnimFieldNumber = 53;
    private bool hasAwakingAnim_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasAwakingAnim {
      get { return hasAwakingAnim_; }
      set {
        hasAwakingAnim_ = value;
      }
    }

    /// <summary>Field number for the "has_walk_stopping_anim" field.</summary>
    public const int HasWalkStoppingAnimFieldNumber = 54;
    private bool hasWalkStoppingAnim_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasWalkStoppingAnim {
      get { return hasWalkStoppingAnim_; }
      set {
        hasWalkStoppingAnim_ = value;
      }
    }

    /// <summary>Field number for the "has_in_air_walk_stopping_anim" field.</summary>
    public const int HasInAirWalkStoppingAnimFieldNumber = 55;
    private bool hasInAirWalkStoppingAnim_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasInAirWalkStoppingAnim {
      get { return hasInAirWalkStoppingAnim_; }
      set {
        hasInAirWalkStoppingAnim_ = value;
      }
    }

    /// <summary>Field number for the "lay_down_to_recover_from_dimmed" field.</summary>
    public const int LayDownToRecoverFromDimmedFieldNumber = 56;
    private bool layDownToRecoverFromDimmed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool LayDownToRecoverFromDimmed {
      get { return layDownToRecoverFromDimmed_; }
      set {
        layDownToRecoverFromDimmed_ = value;
      }
    }

    /// <summary>Field number for the "hardness" field.</summary>
    public const int HardnessFieldNumber = 57;
    private int hardness_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Hardness {
      get { return hardness_; }
      set {
        hardness_ = value;
      }
    }

    /// <summary>Field number for the "proactive_jump_startup_frames" field.</summary>
    public const int ProactiveJumpStartupFramesFieldNumber = 58;
    private int proactiveJumpStartupFrames_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ProactiveJumpStartupFrames {
      get { return proactiveJumpStartupFrames_; }
      set {
        proactiveJumpStartupFrames_ = value;
      }
    }

    /// <summary>Field number for the "default_air_jump_quota" field.</summary>
    public const int DefaultAirJumpQuotaFieldNumber = 59;
    private uint defaultAirJumpQuota_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint DefaultAirJumpQuota {
      get { return defaultAirJumpQuota_; }
      set {
        defaultAirJumpQuota_ = value;
      }
    }

    /// <summary>Field number for the "default_air_dash_quota" field.</summary>
    public const int DefaultAirDashQuotaFieldNumber = 60;
    private uint defaultAirDashQuota_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint DefaultAirDashQuota {
      get { return defaultAirDashQuota_; }
      set {
        defaultAirDashQuota_ = value;
      }
    }

    /// <summary>Field number for the "default_def1_quota" field.</summary>
    public const int DefaultDef1QuotaFieldNumber = 61;
    private uint defaultDef1Quota_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint DefaultDef1Quota {
      get { return defaultDef1Quota_; }
      set {
        defaultDef1Quota_ = value;
      }
    }

    /// <summary>Field number for the "isolated_air_jump_and_dash_quota" field.</summary>
    public const int IsolatedAirJumpAndDashQuotaFieldNumber = 62;
    private bool isolatedAirJumpAndDashQuota_;
    /// <summary>
    /// default is false, in most cases Air_jump and Air_dash quotas are deduced together (but default initial quota can be different) 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsolatedAirJumpAndDashQuota {
      get { return isolatedAirJumpAndDashQuota_; }
      set {
        isolatedAirJumpAndDashQuota_ = value;
      }
    }

    /// <summary>Field number for the "air_jump_vfx_species_id" field.</summary>
    public const int AirJumpVfxSpeciesIdFieldNumber = 63;
    private int airJumpVfxSpeciesId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AirJumpVfxSpeciesId {
      get { return airJumpVfxSpeciesId_; }
      set {
        airJumpVfxSpeciesId_ = value;
      }
    }

    /// <summary>Field number for the "slip_jump_thres_hold_below_top_face" field.</summary>
    public const int SlipJumpThresHoldBelowTopFaceFieldNumber = 64;
    private float slipJumpThresHoldBelowTopFace_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float SlipJumpThresHoldBelowTopFace {
      get { return slipJumpThresHoldBelowTopFace_; }
      set {
        slipJumpThresHoldBelowTopFace_ = value;
      }
    }

    /// <summary>Field number for the "slip_jump_character_drop_y" field.</summary>
    public const int SlipJumpCharacterDropYFieldNumber = 65;
    private float slipJumpCharacterDropY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float SlipJumpCharacterDropY {
      get { return slipJumpCharacterDropY_; }
      set {
        slipJumpCharacterDropY_ = value;
      }
    }

    /// <summary>Field number for the "transform_into_species_id_upon_death" field.</summary>
    public const int TransformIntoSpeciesIdUponDeathFieldNumber = 66;
    private uint transformIntoSpeciesIdUponDeath_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TransformIntoSpeciesIdUponDeath {
      get { return transformIntoSpeciesIdUponDeath_; }
      set {
        transformIntoSpeciesIdUponDeath_ = value;
      }
    }

    /// <summary>Field number for the "jump_holding_to_fly" field.</summary>
    public const int JumpHoldingToFlyFieldNumber = 67;
    private bool jumpHoldingToFly_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool JumpHoldingToFly {
      get { return jumpHoldingToFly_; }
      set {
        jumpHoldingToFly_ = value;
      }
    }

    /// <summary>Field number for the "has_def1" field.</summary>
    public const int HasDef1FieldNumber = 68;
    private bool hasDef1_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasDef1 {
      get { return hasDef1_; }
      set {
        hasDef1_ = value;
      }
    }

    /// <summary>Field number for the "has_def1_atked1_anim" field.</summary>
    public const int HasDef1Atked1AnimFieldNumber = 69;
    private bool hasDef1Atked1Anim_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasDef1Atked1Anim {
      get { return hasDef1Atked1Anim_; }
      set {
        hasDef1Atked1Anim_ = value;
      }
    }

    /// <summary>Field number for the "default_def1_broken_frames_to_recover" field.</summary>
    public const int DefaultDef1BrokenFramesToRecoverFieldNumber = 70;
    private int defaultDef1BrokenFramesToRecover_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DefaultDef1BrokenFramesToRecover {
      get { return defaultDef1BrokenFramesToRecover_; }
      set {
        defaultDef1BrokenFramesToRecover_ = value;
      }
    }

    /// <summary>Field number for the "def1_active_vfx_species_id" field.</summary>
    public const int Def1ActiveVfxSpeciesIdFieldNumber = 71;
    private int def1ActiveVfxSpeciesId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Def1ActiveVfxSpeciesId {
      get { return def1ActiveVfxSpeciesId_; }
      set {
        def1ActiveVfxSpeciesId_ = value;
      }
    }

    /// <summary>Field number for the "def1_atked_vfx_species_id" field.</summary>
    public const int Def1AtkedVfxSpeciesIdFieldNumber = 72;
    private int def1AtkedVfxSpeciesId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Def1AtkedVfxSpeciesId {
      get { return def1AtkedVfxSpeciesId_; }
      set {
        def1AtkedVfxSpeciesId_ = value;
      }
    }

    /// <summary>Field number for the "def1_broken_vfx_species_id" field.</summary>
    public const int Def1BrokenVfxSpeciesIdFieldNumber = 73;
    private int def1BrokenVfxSpeciesId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Def1BrokenVfxSpeciesId {
      get { return def1BrokenVfxSpeciesId_; }
      set {
        def1BrokenVfxSpeciesId_ = value;
      }
    }

    /// <summary>Field number for the "def1_startup_frames" field.</summary>
    public const int Def1StartupFramesFieldNumber = 74;
    private int def1StartupFrames_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Def1StartupFrames {
      get { return def1StartupFrames_; }
      set {
        def1StartupFrames_ = value;
      }
    }

    /// <summary>Field number for the "def1_damage_yield" field.</summary>
    public const int Def1DamageYieldFieldNumber = 75;
    private float def1DamageYield_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Def1DamageYield {
      get { return def1DamageYield_; }
      set {
        def1DamageYield_ = value;
      }
    }

    /// <summary>Field number for the "def1_defies_ele_weakness_penetration" field.</summary>
    public const int Def1DefiesEleWeaknessPenetrationFieldNumber = 76;
    private bool def1DefiesEleWeaknessPenetration_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Def1DefiesEleWeaknessPenetration {
      get { return def1DefiesEleWeaknessPenetration_; }
      set {
        def1DefiesEleWeaknessPenetration_ = value;
      }
    }

    /// <summary>Field number for the "def1_defies_debuff" field.</summary>
    public const int Def1DefiesDebuffFieldNumber = 77;
    private bool def1DefiesDebuff_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Def1DefiesDebuff {
      get { return def1DefiesDebuff_; }
      set {
        def1DefiesDebuff_ = value;
      }
    }

    /// <summary>Field number for the "flying_quota_rdf_cnt" field.</summary>
    public const int FlyingQuotaRdfCntFieldNumber = 78;
    private int flyingQuotaRdfCnt_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FlyingQuotaRdfCnt {
      get { return flyingQuotaRdfCnt_; }
      set {
        flyingQuotaRdfCnt_ = value;
      }
    }

    /// <summary>Field number for the "walking_auto_def1" field.</summary>
    public const int WalkingAutoDef1FieldNumber = 79;
    private bool walkingAutoDef1_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool WalkingAutoDef1 {
      get { return walkingAutoDef1_; }
      set {
        walkingAutoDef1_ = value;
      }
    }

    /// <summary>Field number for the "Ifc" field.</summary>
    public const int IfcFieldNumber = 80;
    private global::jtshared.IfaceCat ifc_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::jtshared.IfaceCat Ifc {
      get { return ifc_; }
      set {
        ifc_ = value;
      }
    }

    /// <summary>Field number for the "ele_weakness" field.</summary>
    public const int EleWeaknessFieldNumber = 81;
    private uint eleWeakness_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint EleWeakness {
      get { return eleWeakness_; }
      set {
        eleWeakness_ = value;
      }
    }

    /// <summary>Field number for the "ele_resistance" field.</summary>
    public const int EleResistanceFieldNumber = 82;
    private uint eleResistance_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint EleResistance {
      get { return eleResistance_; }
      set {
        eleResistance_ = value;
      }
    }

    /// <summary>Field number for the "has_btn_b_charging" field.</summary>
    public const int HasBtnBChargingFieldNumber = 83;
    private bool hasBtnBCharging_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasBtnBCharging {
      get { return hasBtnBCharging_; }
      set {
        hasBtnBCharging_ = value;
      }
    }

    /// <summary>Field number for the "btn_b_charged_vfx_species_id" field.</summary>
    public const int BtnBChargedVfxSpeciesIdFieldNumber = 84;
    private int btnBChargedVfxSpeciesId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BtnBChargedVfxSpeciesId {
      get { return btnBChargedVfxSpeciesId_; }
      set {
        btnBChargedVfxSpeciesId_ = value;
      }
    }

    /// <summary>Field number for the "is_key_ch" field.</summary>
    public const int IsKeyChFieldNumber = 85;
    private bool isKeyCh_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsKeyCh {
      get { return isKeyCh_; }
      set {
        isKeyCh_ = value;
      }
    }

    /// <summary>Field number for the "allows_same_team_soft_pushback" field.</summary>
    public const int AllowsSameTeamSoftPushbackFieldNumber = 86;
    private bool allowsSameTeamSoftPushback_;
    /// <summary>
    /// For bricks
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool AllowsSameTeamSoftPushback {
      get { return allowsSameTeamSoftPushback_; }
      set {
        allowsSameTeamSoftPushback_ = value;
      }
    }

    /// <summary>Field number for the "gauge_inc_when_killed" field.</summary>
    public const int GaugeIncWhenKilledFieldNumber = 87;
    private int gaugeIncWhenKilled_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GaugeIncWhenKilled {
      get { return gaugeIncWhenKilled_; }
      set {
        gaugeIncWhenKilled_ = value;
      }
    }

    /// <summary>Field number for the "jumping_instead_of_walking" field.</summary>
    public const int JumpingInsteadOfWalkingFieldNumber = 88;
    private bool jumpingInsteadOfWalking_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool JumpingInsteadOfWalking {
      get { return jumpingInsteadOfWalking_; }
      set {
        jumpingInsteadOfWalking_ = value;
      }
    }

    /// <summary>Field number for the "vision_search_interval_pow2Minus1U" field.</summary>
    public const int VisionSearchIntervalPow2Minus1UFieldNumber = 89;
    private uint visionSearchIntervalPow2Minus1U_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint VisionSearchIntervalPow2Minus1U {
      get { return visionSearchIntervalPow2Minus1U_; }
      set {
        visionSearchIntervalPow2Minus1U_ = value;
      }
    }

    /// <summary>Field number for the "vision_search_interval_pow2Minus1" field.</summary>
    public const int VisionSearchIntervalPow2Minus1FieldNumber = 90;
    private int visionSearchIntervalPow2Minus1_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int VisionSearchIntervalPow2Minus1 {
      get { return visionSearchIntervalPow2Minus1_; }
      set {
        visionSearchIntervalPow2Minus1_ = value;
      }
    }

    /// <summary>Field number for the "npc_no_default_air_walking" field.</summary>
    public const int NpcNoDefaultAirWalkingFieldNumber = 91;
    private bool npcNoDefaultAirWalking_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool NpcNoDefaultAirWalking {
      get { return npcNoDefaultAirWalking_; }
      set {
        npcNoDefaultAirWalking_ = value;
      }
    }

    /// <summary>Field number for the "npc_prioritize_bullet_handling" field.</summary>
    public const int NpcPrioritizeBulletHandlingFieldNumber = 92;
    private bool npcPrioritizeBulletHandling_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool NpcPrioritizeBulletHandling {
      get { return npcPrioritizeBulletHandling_; }
      set {
        npcPrioritizeBulletHandling_ = value;
      }
    }

    /// <summary>Field number for the "npc_prioritize_ally_healing" field.</summary>
    public const int NpcPrioritizeAllyHealingFieldNumber = 93;
    private bool npcPrioritizeAllyHealing_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool NpcPrioritizeAllyHealing {
      get { return npcPrioritizeAllyHealing_; }
      set {
        npcPrioritizeAllyHealing_ = value;
      }
    }

    /// <summary>Field number for the "npc_not_hunting_in_air_oppo_ch" field.</summary>
    public const int NpcNotHuntingInAirOppoChFieldNumber = 94;
    private bool npcNotHuntingInAirOppoCh_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool NpcNotHuntingInAirOppoCh {
      get { return npcNotHuntingInAirOppoCh_; }
      set {
        npcNotHuntingInAirOppoCh_ = value;
      }
    }

    /// <summary>Field number for the "transform_into_frames_to_recover" field.</summary>
    public const int TransformIntoFramesToRecoverFieldNumber = 95;
    private int transformIntoFramesToRecover_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TransformIntoFramesToRecover {
      get { return transformIntoFramesToRecover_; }
      set {
        transformIntoFramesToRecover_ = value;
      }
    }

    /// <summary>Field number for the "transform_into_frames_invinsible" field.</summary>
    public const int TransformIntoFramesInvinsibleFieldNumber = 96;
    private int transformIntoFramesInvinsible_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TransformIntoFramesInvinsible {
      get { return transformIntoFramesInvinsible_; }
      set {
        transformIntoFramesInvinsible_ = value;
      }
    }

    /// <summary>Field number for the "awaking_frames_to_recover" field.</summary>
    public const int AwakingFramesToRecoverFieldNumber = 97;
    private int awakingFramesToRecover_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AwakingFramesToRecover {
      get { return awakingFramesToRecover_; }
      set {
        awakingFramesToRecover_ = value;
      }
    }

    /// <summary>Field number for the "awaking_frames_invinsible" field.</summary>
    public const int AwakingFramesInvinsibleFieldNumber = 98;
    private int awakingFramesInvinsible_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AwakingFramesInvinsible {
      get { return awakingFramesInvinsible_; }
      set {
        awakingFramesInvinsible_ = value;
      }
    }

    /// <summary>Field number for the "use_idle1_as_flying_idle" field.</summary>
    public const int UseIdle1AsFlyingIdleFieldNumber = 99;
    private bool useIdle1AsFlyingIdle_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool UseIdle1AsFlyingIdle {
      get { return useIdle1AsFlyingIdle_; }
      set {
        useIdle1AsFlyingIdle_ = value;
      }
    }

    /// <summary>Field number for the "no_flee" field.</summary>
    public const int NoFleeFieldNumber = 100;
    private bool noFlee_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool NoFlee {
      get { return noFlee_; }
      set {
        noFlee_ = value;
      }
    }

    /// <summary>Field number for the "atk1_magazine" field.</summary>
    public const int Atk1MagazineFieldNumber = 101;
    private global::jtshared.InventorySlotConfig atk1Magazine_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::jtshared.InventorySlotConfig Atk1Magazine {
      get { return atk1Magazine_; }
      set {
        atk1Magazine_ = value;
      }
    }

    /// <summary>Field number for the "super_atk_guage" field.</summary>
    public const int SuperAtkGuageFieldNumber = 102;
    private global::jtshared.InventorySlotConfig superAtkGuage_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::jtshared.InventorySlotConfig SuperAtkGuage {
      get { return superAtkGuage_; }
      set {
        superAtkGuage_ = value;
      }
    }

    /// <summary>Field number for the "init_inventory_slots" field.</summary>
    public const int InitInventorySlotsFieldNumber = 103;
    private static readonly pb::FieldCodec<global::jtshared.InventorySlotConfig> _repeated_initInventorySlots_codec
        = pb::FieldCodec.ForMessage(826, global::jtshared.InventorySlotConfig.Parser);
    private readonly pbc::RepeatedField<global::jtshared.InventorySlotConfig> initInventorySlots_ = new pbc::RepeatedField<global::jtshared.InventorySlotConfig>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::jtshared.InventorySlotConfig> InitInventorySlots {
      get { return initInventorySlots_; }
    }

    /// <summary>Field number for the "btn_b_auto_unhold_ch_states" field.</summary>
    public const int BtnBAutoUnholdChStatesFieldNumber = 104;
    private static readonly pbc::MapField<int, int>.Codec _map_btnBAutoUnholdChStates_codec
        = new pbc::MapField<int, int>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForInt32(16), 834);
    private readonly pbc::MapField<int, int> btnBAutoUnholdChStates_ = new pbc::MapField<int, int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, int> BtnBAutoUnholdChStates {
      get { return btnBAutoUnholdChStates_; }
    }

    /// <summary>Field number for the "looping_ch_states" field.</summary>
    public const int LoopingChStatesFieldNumber = 105;
    private static readonly pbc::MapField<int, int>.Codec _map_loopingChStates_codec
        = new pbc::MapField<int, int>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForInt32(16), 842);
    private readonly pbc::MapField<int, int> loopingChStates_ = new pbc::MapField<int, int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, int> LoopingChStates {
      get { return loopingChStates_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CharacterConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CharacterConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SpeciesId != other.SpeciesId) return false;
      if (SpeciesName != other.SpeciesName) return false;
      if (Hp != other.Hp) return false;
      if (Mp != other.Mp) return false;
      if (LayDownFrames != other.LayDownFrames) return false;
      if (LayDownFramesToRecover != other.LayDownFramesToRecover) return false;
      if (GetUpInvinsibleFrames != other.GetUpInvinsibleFrames) return false;
      if (GetUpFramesToRecover != other.GetUpFramesToRecover) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Speed, other.Speed)) return false;
      if (MpRegenPerInterval != other.MpRegenPerInterval) return false;
      if (MpRegenInterval != other.MpRegenInterval) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(JumpingInitVelY, other.JumpingInitVelY)) return false;
      if (InertiaFramesToRecover != other.InertiaFramesToRecover) return false;
      if (DashingEnabled != other.DashingEnabled) return false;
      if (SlidingEnabled != other.SlidingEnabled) return false;
      if (OnWallEnabled != other.OnWallEnabled) return false;
      if (CrouchingEnabled != other.CrouchingEnabled) return false;
      if (CrouchingAtkEnabled != other.CrouchingAtkEnabled) return false;
      if (WallJumpingFramesToRecover != other.WallJumpingFramesToRecover) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(WallJumpingInitVelX, other.WallJumpingInitVelX)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(WallJumpingInitVelY, other.WallJumpingInitVelY)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(WallSlidingVelY, other.WallSlidingVelY)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MinFallingVelY, other.MinFallingVelY)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MaxAscendingVelY, other.MaxAscendingVelY)) return false;
      if (Atk1UsesMagazine != other.Atk1UsesMagazine) return false;
      if (GroundDodgeEnabledByIvSlotCInBlockStun != other.GroundDodgeEnabledByIvSlotCInBlockStun) return false;
      if (GroundDodgeEnabledByRdfCntFromBeginning != other.GroundDodgeEnabledByRdfCntFromBeginning) return false;
      if (GroundDodgedFramesToRecover != other.GroundDodgedFramesToRecover) return false;
      if (GroundDodgedFramesInvinsible != other.GroundDodgedFramesInvinsible) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(GroundDodgedSpeed, other.GroundDodgedSpeed)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(VisionOffsetX, other.VisionOffsetX)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(VisionOffsetY, other.VisionOffsetY)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(VisionSizeX, other.VisionSizeX)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(VisionSizeY, other.VisionSizeY)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(CapsuleRadius, other.CapsuleRadius)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(CapsuleHalfHeight, other.CapsuleHalfHeight)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ShrinkedCapsuleRadius, other.ShrinkedCapsuleRadius)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ShrinkedCapsuleHalfHeight, other.ShrinkedCapsuleHalfHeight)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(LayDownCapsuleRadius, other.LayDownCapsuleRadius)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(LayDownCapsuleHalfHeight, other.LayDownCapsuleHalfHeight)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(DyingCapsuleRadius, other.DyingCapsuleRadius)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(DyingCapsuleHalfHeight, other.DyingCapsuleHalfHeight)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(DimmedCapsuleRadius, other.DimmedCapsuleRadius)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(DimmedCapsuleHalfHeight, other.DimmedCapsuleHalfHeight)) return false;
      if (AntiGravityWhenIdle != other.AntiGravityWhenIdle) return false;
      if (AntiGravityFramesLingering != other.AntiGravityFramesLingering) return false;
      if (OmitGravity != other.OmitGravity) return false;
      if (OmitSoftPushback != other.OmitSoftPushback) return false;
      if (RepelSoftPushback != other.RepelSoftPushback) return false;
      if (CollisionTypeMask != other.CollisionTypeMask) return false;
      if (HasTurnAroundAnim != other.HasTurnAroundAnim) return false;
      if (HasDimmedAnim != other.HasDimmedAnim) return false;
      if (HasAwakingAnim != other.HasAwakingAnim) return false;
      if (HasWalkStoppingAnim != other.HasWalkStoppingAnim) return false;
      if (HasInAirWalkStoppingAnim != other.HasInAirWalkStoppingAnim) return false;
      if (LayDownToRecoverFromDimmed != other.LayDownToRecoverFromDimmed) return false;
      if (Hardness != other.Hardness) return false;
      if (ProactiveJumpStartupFrames != other.ProactiveJumpStartupFrames) return false;
      if (DefaultAirJumpQuota != other.DefaultAirJumpQuota) return false;
      if (DefaultAirDashQuota != other.DefaultAirDashQuota) return false;
      if (DefaultDef1Quota != other.DefaultDef1Quota) return false;
      if (IsolatedAirJumpAndDashQuota != other.IsolatedAirJumpAndDashQuota) return false;
      if (AirJumpVfxSpeciesId != other.AirJumpVfxSpeciesId) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SlipJumpThresHoldBelowTopFace, other.SlipJumpThresHoldBelowTopFace)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SlipJumpCharacterDropY, other.SlipJumpCharacterDropY)) return false;
      if (TransformIntoSpeciesIdUponDeath != other.TransformIntoSpeciesIdUponDeath) return false;
      if (JumpHoldingToFly != other.JumpHoldingToFly) return false;
      if (HasDef1 != other.HasDef1) return false;
      if (HasDef1Atked1Anim != other.HasDef1Atked1Anim) return false;
      if (DefaultDef1BrokenFramesToRecover != other.DefaultDef1BrokenFramesToRecover) return false;
      if (Def1ActiveVfxSpeciesId != other.Def1ActiveVfxSpeciesId) return false;
      if (Def1AtkedVfxSpeciesId != other.Def1AtkedVfxSpeciesId) return false;
      if (Def1BrokenVfxSpeciesId != other.Def1BrokenVfxSpeciesId) return false;
      if (Def1StartupFrames != other.Def1StartupFrames) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Def1DamageYield, other.Def1DamageYield)) return false;
      if (Def1DefiesEleWeaknessPenetration != other.Def1DefiesEleWeaknessPenetration) return false;
      if (Def1DefiesDebuff != other.Def1DefiesDebuff) return false;
      if (FlyingQuotaRdfCnt != other.FlyingQuotaRdfCnt) return false;
      if (WalkingAutoDef1 != other.WalkingAutoDef1) return false;
      if (Ifc != other.Ifc) return false;
      if (EleWeakness != other.EleWeakness) return false;
      if (EleResistance != other.EleResistance) return false;
      if (HasBtnBCharging != other.HasBtnBCharging) return false;
      if (BtnBChargedVfxSpeciesId != other.BtnBChargedVfxSpeciesId) return false;
      if (IsKeyCh != other.IsKeyCh) return false;
      if (AllowsSameTeamSoftPushback != other.AllowsSameTeamSoftPushback) return false;
      if (GaugeIncWhenKilled != other.GaugeIncWhenKilled) return false;
      if (JumpingInsteadOfWalking != other.JumpingInsteadOfWalking) return false;
      if (VisionSearchIntervalPow2Minus1U != other.VisionSearchIntervalPow2Minus1U) return false;
      if (VisionSearchIntervalPow2Minus1 != other.VisionSearchIntervalPow2Minus1) return false;
      if (NpcNoDefaultAirWalking != other.NpcNoDefaultAirWalking) return false;
      if (NpcPrioritizeBulletHandling != other.NpcPrioritizeBulletHandling) return false;
      if (NpcPrioritizeAllyHealing != other.NpcPrioritizeAllyHealing) return false;
      if (NpcNotHuntingInAirOppoCh != other.NpcNotHuntingInAirOppoCh) return false;
      if (TransformIntoFramesToRecover != other.TransformIntoFramesToRecover) return false;
      if (TransformIntoFramesInvinsible != other.TransformIntoFramesInvinsible) return false;
      if (AwakingFramesToRecover != other.AwakingFramesToRecover) return false;
      if (AwakingFramesInvinsible != other.AwakingFramesInvinsible) return false;
      if (UseIdle1AsFlyingIdle != other.UseIdle1AsFlyingIdle) return false;
      if (NoFlee != other.NoFlee) return false;
      if (!object.Equals(Atk1Magazine, other.Atk1Magazine)) return false;
      if (!object.Equals(SuperAtkGuage, other.SuperAtkGuage)) return false;
      if(!initInventorySlots_.Equals(other.initInventorySlots_)) return false;
      if (!BtnBAutoUnholdChStates.Equals(other.BtnBAutoUnholdChStates)) return false;
      if (!LoopingChStates.Equals(other.LoopingChStates)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SpeciesId != 0) hash ^= SpeciesId.GetHashCode();
      if (SpeciesName.Length != 0) hash ^= SpeciesName.GetHashCode();
      if (Hp != 0) hash ^= Hp.GetHashCode();
      if (Mp != 0) hash ^= Mp.GetHashCode();
      if (LayDownFrames != 0) hash ^= LayDownFrames.GetHashCode();
      if (LayDownFramesToRecover != 0) hash ^= LayDownFramesToRecover.GetHashCode();
      if (GetUpInvinsibleFrames != 0) hash ^= GetUpInvinsibleFrames.GetHashCode();
      if (GetUpFramesToRecover != 0) hash ^= GetUpFramesToRecover.GetHashCode();
      if (Speed != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Speed);
      if (MpRegenPerInterval != 0) hash ^= MpRegenPerInterval.GetHashCode();
      if (MpRegenInterval != 0) hash ^= MpRegenInterval.GetHashCode();
      if (JumpingInitVelY != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(JumpingInitVelY);
      if (InertiaFramesToRecover != 0) hash ^= InertiaFramesToRecover.GetHashCode();
      if (DashingEnabled != false) hash ^= DashingEnabled.GetHashCode();
      if (SlidingEnabled != false) hash ^= SlidingEnabled.GetHashCode();
      if (OnWallEnabled != false) hash ^= OnWallEnabled.GetHashCode();
      if (CrouchingEnabled != false) hash ^= CrouchingEnabled.GetHashCode();
      if (CrouchingAtkEnabled != false) hash ^= CrouchingAtkEnabled.GetHashCode();
      if (WallJumpingFramesToRecover != 0) hash ^= WallJumpingFramesToRecover.GetHashCode();
      if (WallJumpingInitVelX != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(WallJumpingInitVelX);
      if (WallJumpingInitVelY != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(WallJumpingInitVelY);
      if (WallSlidingVelY != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(WallSlidingVelY);
      if (MinFallingVelY != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MinFallingVelY);
      if (MaxAscendingVelY != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MaxAscendingVelY);
      if (Atk1UsesMagazine != false) hash ^= Atk1UsesMagazine.GetHashCode();
      if (GroundDodgeEnabledByIvSlotCInBlockStun != false) hash ^= GroundDodgeEnabledByIvSlotCInBlockStun.GetHashCode();
      if (GroundDodgeEnabledByRdfCntFromBeginning != 0) hash ^= GroundDodgeEnabledByRdfCntFromBeginning.GetHashCode();
      if (GroundDodgedFramesToRecover != 0) hash ^= GroundDodgedFramesToRecover.GetHashCode();
      if (GroundDodgedFramesInvinsible != 0) hash ^= GroundDodgedFramesInvinsible.GetHashCode();
      if (GroundDodgedSpeed != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(GroundDodgedSpeed);
      if (VisionOffsetX != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(VisionOffsetX);
      if (VisionOffsetY != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(VisionOffsetY);
      if (VisionSizeX != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(VisionSizeX);
      if (VisionSizeY != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(VisionSizeY);
      if (CapsuleRadius != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(CapsuleRadius);
      if (CapsuleHalfHeight != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(CapsuleHalfHeight);
      if (ShrinkedCapsuleRadius != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ShrinkedCapsuleRadius);
      if (ShrinkedCapsuleHalfHeight != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ShrinkedCapsuleHalfHeight);
      if (LayDownCapsuleRadius != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(LayDownCapsuleRadius);
      if (LayDownCapsuleHalfHeight != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(LayDownCapsuleHalfHeight);
      if (DyingCapsuleRadius != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(DyingCapsuleRadius);
      if (DyingCapsuleHalfHeight != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(DyingCapsuleHalfHeight);
      if (DimmedCapsuleRadius != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(DimmedCapsuleRadius);
      if (DimmedCapsuleHalfHeight != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(DimmedCapsuleHalfHeight);
      if (AntiGravityWhenIdle != false) hash ^= AntiGravityWhenIdle.GetHashCode();
      if (AntiGravityFramesLingering != 0) hash ^= AntiGravityFramesLingering.GetHashCode();
      if (OmitGravity != false) hash ^= OmitGravity.GetHashCode();
      if (OmitSoftPushback != false) hash ^= OmitSoftPushback.GetHashCode();
      if (RepelSoftPushback != false) hash ^= RepelSoftPushback.GetHashCode();
      if (CollisionTypeMask != 0UL) hash ^= CollisionTypeMask.GetHashCode();
      if (HasTurnAroundAnim != false) hash ^= HasTurnAroundAnim.GetHashCode();
      if (HasDimmedAnim != false) hash ^= HasDimmedAnim.GetHashCode();
      if (HasAwakingAnim != false) hash ^= HasAwakingAnim.GetHashCode();
      if (HasWalkStoppingAnim != false) hash ^= HasWalkStoppingAnim.GetHashCode();
      if (HasInAirWalkStoppingAnim != false) hash ^= HasInAirWalkStoppingAnim.GetHashCode();
      if (LayDownToRecoverFromDimmed != false) hash ^= LayDownToRecoverFromDimmed.GetHashCode();
      if (Hardness != 0) hash ^= Hardness.GetHashCode();
      if (ProactiveJumpStartupFrames != 0) hash ^= ProactiveJumpStartupFrames.GetHashCode();
      if (DefaultAirJumpQuota != 0) hash ^= DefaultAirJumpQuota.GetHashCode();
      if (DefaultAirDashQuota != 0) hash ^= DefaultAirDashQuota.GetHashCode();
      if (DefaultDef1Quota != 0) hash ^= DefaultDef1Quota.GetHashCode();
      if (IsolatedAirJumpAndDashQuota != false) hash ^= IsolatedAirJumpAndDashQuota.GetHashCode();
      if (AirJumpVfxSpeciesId != 0) hash ^= AirJumpVfxSpeciesId.GetHashCode();
      if (SlipJumpThresHoldBelowTopFace != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SlipJumpThresHoldBelowTopFace);
      if (SlipJumpCharacterDropY != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SlipJumpCharacterDropY);
      if (TransformIntoSpeciesIdUponDeath != 0) hash ^= TransformIntoSpeciesIdUponDeath.GetHashCode();
      if (JumpHoldingToFly != false) hash ^= JumpHoldingToFly.GetHashCode();
      if (HasDef1 != false) hash ^= HasDef1.GetHashCode();
      if (HasDef1Atked1Anim != false) hash ^= HasDef1Atked1Anim.GetHashCode();
      if (DefaultDef1BrokenFramesToRecover != 0) hash ^= DefaultDef1BrokenFramesToRecover.GetHashCode();
      if (Def1ActiveVfxSpeciesId != 0) hash ^= Def1ActiveVfxSpeciesId.GetHashCode();
      if (Def1AtkedVfxSpeciesId != 0) hash ^= Def1AtkedVfxSpeciesId.GetHashCode();
      if (Def1BrokenVfxSpeciesId != 0) hash ^= Def1BrokenVfxSpeciesId.GetHashCode();
      if (Def1StartupFrames != 0) hash ^= Def1StartupFrames.GetHashCode();
      if (Def1DamageYield != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Def1DamageYield);
      if (Def1DefiesEleWeaknessPenetration != false) hash ^= Def1DefiesEleWeaknessPenetration.GetHashCode();
      if (Def1DefiesDebuff != false) hash ^= Def1DefiesDebuff.GetHashCode();
      if (FlyingQuotaRdfCnt != 0) hash ^= FlyingQuotaRdfCnt.GetHashCode();
      if (WalkingAutoDef1 != false) hash ^= WalkingAutoDef1.GetHashCode();
      if (Ifc != 0) hash ^= Ifc.GetHashCode();
      if (EleWeakness != 0) hash ^= EleWeakness.GetHashCode();
      if (EleResistance != 0) hash ^= EleResistance.GetHashCode();
      if (HasBtnBCharging != false) hash ^= HasBtnBCharging.GetHashCode();
      if (BtnBChargedVfxSpeciesId != 0) hash ^= BtnBChargedVfxSpeciesId.GetHashCode();
      if (IsKeyCh != false) hash ^= IsKeyCh.GetHashCode();
      if (AllowsSameTeamSoftPushback != false) hash ^= AllowsSameTeamSoftPushback.GetHashCode();
      if (GaugeIncWhenKilled != 0) hash ^= GaugeIncWhenKilled.GetHashCode();
      if (JumpingInsteadOfWalking != false) hash ^= JumpingInsteadOfWalking.GetHashCode();
      if (VisionSearchIntervalPow2Minus1U != 0) hash ^= VisionSearchIntervalPow2Minus1U.GetHashCode();
      if (VisionSearchIntervalPow2Minus1 != 0) hash ^= VisionSearchIntervalPow2Minus1.GetHashCode();
      if (NpcNoDefaultAirWalking != false) hash ^= NpcNoDefaultAirWalking.GetHashCode();
      if (NpcPrioritizeBulletHandling != false) hash ^= NpcPrioritizeBulletHandling.GetHashCode();
      if (NpcPrioritizeAllyHealing != false) hash ^= NpcPrioritizeAllyHealing.GetHashCode();
      if (NpcNotHuntingInAirOppoCh != false) hash ^= NpcNotHuntingInAirOppoCh.GetHashCode();
      if (TransformIntoFramesToRecover != 0) hash ^= TransformIntoFramesToRecover.GetHashCode();
      if (TransformIntoFramesInvinsible != 0) hash ^= TransformIntoFramesInvinsible.GetHashCode();
      if (AwakingFramesToRecover != 0) hash ^= AwakingFramesToRecover.GetHashCode();
      if (AwakingFramesInvinsible != 0) hash ^= AwakingFramesInvinsible.GetHashCode();
      if (UseIdle1AsFlyingIdle != false) hash ^= UseIdle1AsFlyingIdle.GetHashCode();
      if (NoFlee != false) hash ^= NoFlee.GetHashCode();
      if (atk1Magazine_ != null) hash ^= Atk1Magazine.GetHashCode();
      if (superAtkGuage_ != null) hash ^= SuperAtkGuage.GetHashCode();
      hash ^= initInventorySlots_.GetHashCode();
      hash ^= BtnBAutoUnholdChStates.GetHashCode();
      hash ^= LoopingChStates.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SpeciesId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(SpeciesId);
      }
      if (SpeciesName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(SpeciesName);
      }
      if (Hp != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Hp);
      }
      if (Mp != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Mp);
      }
      if (LayDownFrames != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(LayDownFrames);
      }
      if (LayDownFramesToRecover != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(LayDownFramesToRecover);
      }
      if (GetUpInvinsibleFrames != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(GetUpInvinsibleFrames);
      }
      if (GetUpFramesToRecover != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(GetUpFramesToRecover);
      }
      if (Speed != 0F) {
        output.WriteRawTag(77);
        output.WriteFloat(Speed);
      }
      if (MpRegenPerInterval != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(MpRegenPerInterval);
      }
      if (MpRegenInterval != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(MpRegenInterval);
      }
      if (JumpingInitVelY != 0F) {
        output.WriteRawTag(101);
        output.WriteFloat(JumpingInitVelY);
      }
      if (InertiaFramesToRecover != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(InertiaFramesToRecover);
      }
      if (DashingEnabled != false) {
        output.WriteRawTag(112);
        output.WriteBool(DashingEnabled);
      }
      if (SlidingEnabled != false) {
        output.WriteRawTag(120);
        output.WriteBool(SlidingEnabled);
      }
      if (OnWallEnabled != false) {
        output.WriteRawTag(128, 1);
        output.WriteBool(OnWallEnabled);
      }
      if (CrouchingEnabled != false) {
        output.WriteRawTag(136, 1);
        output.WriteBool(CrouchingEnabled);
      }
      if (CrouchingAtkEnabled != false) {
        output.WriteRawTag(144, 1);
        output.WriteBool(CrouchingAtkEnabled);
      }
      if (WallJumpingFramesToRecover != 0) {
        output.WriteRawTag(152, 1);
        output.WriteInt32(WallJumpingFramesToRecover);
      }
      if (WallJumpingInitVelX != 0F) {
        output.WriteRawTag(165, 1);
        output.WriteFloat(WallJumpingInitVelX);
      }
      if (WallJumpingInitVelY != 0F) {
        output.WriteRawTag(173, 1);
        output.WriteFloat(WallJumpingInitVelY);
      }
      if (WallSlidingVelY != 0F) {
        output.WriteRawTag(181, 1);
        output.WriteFloat(WallSlidingVelY);
      }
      if (MinFallingVelY != 0F) {
        output.WriteRawTag(189, 1);
        output.WriteFloat(MinFallingVelY);
      }
      if (MaxAscendingVelY != 0F) {
        output.WriteRawTag(197, 1);
        output.WriteFloat(MaxAscendingVelY);
      }
      if (Atk1UsesMagazine != false) {
        output.WriteRawTag(200, 1);
        output.WriteBool(Atk1UsesMagazine);
      }
      if (GroundDodgeEnabledByIvSlotCInBlockStun != false) {
        output.WriteRawTag(208, 1);
        output.WriteBool(GroundDodgeEnabledByIvSlotCInBlockStun);
      }
      if (GroundDodgeEnabledByRdfCntFromBeginning != 0) {
        output.WriteRawTag(216, 1);
        output.WriteInt32(GroundDodgeEnabledByRdfCntFromBeginning);
      }
      if (GroundDodgedFramesToRecover != 0) {
        output.WriteRawTag(224, 1);
        output.WriteInt32(GroundDodgedFramesToRecover);
      }
      if (GroundDodgedFramesInvinsible != 0) {
        output.WriteRawTag(232, 1);
        output.WriteInt32(GroundDodgedFramesInvinsible);
      }
      if (GroundDodgedSpeed != 0F) {
        output.WriteRawTag(245, 1);
        output.WriteFloat(GroundDodgedSpeed);
      }
      if (VisionOffsetX != 0F) {
        output.WriteRawTag(253, 1);
        output.WriteFloat(VisionOffsetX);
      }
      if (VisionOffsetY != 0F) {
        output.WriteRawTag(133, 2);
        output.WriteFloat(VisionOffsetY);
      }
      if (VisionSizeX != 0F) {
        output.WriteRawTag(141, 2);
        output.WriteFloat(VisionSizeX);
      }
      if (VisionSizeY != 0F) {
        output.WriteRawTag(149, 2);
        output.WriteFloat(VisionSizeY);
      }
      if (CapsuleRadius != 0F) {
        output.WriteRawTag(157, 2);
        output.WriteFloat(CapsuleRadius);
      }
      if (CapsuleHalfHeight != 0F) {
        output.WriteRawTag(165, 2);
        output.WriteFloat(CapsuleHalfHeight);
      }
      if (ShrinkedCapsuleRadius != 0F) {
        output.WriteRawTag(173, 2);
        output.WriteFloat(ShrinkedCapsuleRadius);
      }
      if (ShrinkedCapsuleHalfHeight != 0F) {
        output.WriteRawTag(181, 2);
        output.WriteFloat(ShrinkedCapsuleHalfHeight);
      }
      if (LayDownCapsuleRadius != 0F) {
        output.WriteRawTag(189, 2);
        output.WriteFloat(LayDownCapsuleRadius);
      }
      if (LayDownCapsuleHalfHeight != 0F) {
        output.WriteRawTag(197, 2);
        output.WriteFloat(LayDownCapsuleHalfHeight);
      }
      if (DyingCapsuleRadius != 0F) {
        output.WriteRawTag(205, 2);
        output.WriteFloat(DyingCapsuleRadius);
      }
      if (DyingCapsuleHalfHeight != 0F) {
        output.WriteRawTag(213, 2);
        output.WriteFloat(DyingCapsuleHalfHeight);
      }
      if (DimmedCapsuleRadius != 0F) {
        output.WriteRawTag(221, 2);
        output.WriteFloat(DimmedCapsuleRadius);
      }
      if (DimmedCapsuleHalfHeight != 0F) {
        output.WriteRawTag(229, 2);
        output.WriteFloat(DimmedCapsuleHalfHeight);
      }
      if (AntiGravityWhenIdle != false) {
        output.WriteRawTag(232, 2);
        output.WriteBool(AntiGravityWhenIdle);
      }
      if (AntiGravityFramesLingering != 0) {
        output.WriteRawTag(240, 2);
        output.WriteInt32(AntiGravityFramesLingering);
      }
      if (OmitGravity != false) {
        output.WriteRawTag(248, 2);
        output.WriteBool(OmitGravity);
      }
      if (OmitSoftPushback != false) {
        output.WriteRawTag(128, 3);
        output.WriteBool(OmitSoftPushback);
      }
      if (RepelSoftPushback != false) {
        output.WriteRawTag(136, 3);
        output.WriteBool(RepelSoftPushback);
      }
      if (CollisionTypeMask != 0UL) {
        output.WriteRawTag(144, 3);
        output.WriteUInt64(CollisionTypeMask);
      }
      if (HasTurnAroundAnim != false) {
        output.WriteRawTag(152, 3);
        output.WriteBool(HasTurnAroundAnim);
      }
      if (HasDimmedAnim != false) {
        output.WriteRawTag(160, 3);
        output.WriteBool(HasDimmedAnim);
      }
      if (HasAwakingAnim != false) {
        output.WriteRawTag(168, 3);
        output.WriteBool(HasAwakingAnim);
      }
      if (HasWalkStoppingAnim != false) {
        output.WriteRawTag(176, 3);
        output.WriteBool(HasWalkStoppingAnim);
      }
      if (HasInAirWalkStoppingAnim != false) {
        output.WriteRawTag(184, 3);
        output.WriteBool(HasInAirWalkStoppingAnim);
      }
      if (LayDownToRecoverFromDimmed != false) {
        output.WriteRawTag(192, 3);
        output.WriteBool(LayDownToRecoverFromDimmed);
      }
      if (Hardness != 0) {
        output.WriteRawTag(200, 3);
        output.WriteInt32(Hardness);
      }
      if (ProactiveJumpStartupFrames != 0) {
        output.WriteRawTag(208, 3);
        output.WriteInt32(ProactiveJumpStartupFrames);
      }
      if (DefaultAirJumpQuota != 0) {
        output.WriteRawTag(216, 3);
        output.WriteUInt32(DefaultAirJumpQuota);
      }
      if (DefaultAirDashQuota != 0) {
        output.WriteRawTag(224, 3);
        output.WriteUInt32(DefaultAirDashQuota);
      }
      if (DefaultDef1Quota != 0) {
        output.WriteRawTag(232, 3);
        output.WriteUInt32(DefaultDef1Quota);
      }
      if (IsolatedAirJumpAndDashQuota != false) {
        output.WriteRawTag(240, 3);
        output.WriteBool(IsolatedAirJumpAndDashQuota);
      }
      if (AirJumpVfxSpeciesId != 0) {
        output.WriteRawTag(248, 3);
        output.WriteInt32(AirJumpVfxSpeciesId);
      }
      if (SlipJumpThresHoldBelowTopFace != 0F) {
        output.WriteRawTag(133, 4);
        output.WriteFloat(SlipJumpThresHoldBelowTopFace);
      }
      if (SlipJumpCharacterDropY != 0F) {
        output.WriteRawTag(141, 4);
        output.WriteFloat(SlipJumpCharacterDropY);
      }
      if (TransformIntoSpeciesIdUponDeath != 0) {
        output.WriteRawTag(144, 4);
        output.WriteUInt32(TransformIntoSpeciesIdUponDeath);
      }
      if (JumpHoldingToFly != false) {
        output.WriteRawTag(152, 4);
        output.WriteBool(JumpHoldingToFly);
      }
      if (HasDef1 != false) {
        output.WriteRawTag(160, 4);
        output.WriteBool(HasDef1);
      }
      if (HasDef1Atked1Anim != false) {
        output.WriteRawTag(168, 4);
        output.WriteBool(HasDef1Atked1Anim);
      }
      if (DefaultDef1BrokenFramesToRecover != 0) {
        output.WriteRawTag(176, 4);
        output.WriteInt32(DefaultDef1BrokenFramesToRecover);
      }
      if (Def1ActiveVfxSpeciesId != 0) {
        output.WriteRawTag(184, 4);
        output.WriteInt32(Def1ActiveVfxSpeciesId);
      }
      if (Def1AtkedVfxSpeciesId != 0) {
        output.WriteRawTag(192, 4);
        output.WriteInt32(Def1AtkedVfxSpeciesId);
      }
      if (Def1BrokenVfxSpeciesId != 0) {
        output.WriteRawTag(200, 4);
        output.WriteInt32(Def1BrokenVfxSpeciesId);
      }
      if (Def1StartupFrames != 0) {
        output.WriteRawTag(208, 4);
        output.WriteInt32(Def1StartupFrames);
      }
      if (Def1DamageYield != 0F) {
        output.WriteRawTag(221, 4);
        output.WriteFloat(Def1DamageYield);
      }
      if (Def1DefiesEleWeaknessPenetration != false) {
        output.WriteRawTag(224, 4);
        output.WriteBool(Def1DefiesEleWeaknessPenetration);
      }
      if (Def1DefiesDebuff != false) {
        output.WriteRawTag(232, 4);
        output.WriteBool(Def1DefiesDebuff);
      }
      if (FlyingQuotaRdfCnt != 0) {
        output.WriteRawTag(240, 4);
        output.WriteInt32(FlyingQuotaRdfCnt);
      }
      if (WalkingAutoDef1 != false) {
        output.WriteRawTag(248, 4);
        output.WriteBool(WalkingAutoDef1);
      }
      if (Ifc != 0) {
        output.WriteRawTag(128, 5);
        output.WriteEnum((int) Ifc);
      }
      if (EleWeakness != 0) {
        output.WriteRawTag(136, 5);
        output.WriteUInt32(EleWeakness);
      }
      if (EleResistance != 0) {
        output.WriteRawTag(144, 5);
        output.WriteUInt32(EleResistance);
      }
      if (HasBtnBCharging != false) {
        output.WriteRawTag(152, 5);
        output.WriteBool(HasBtnBCharging);
      }
      if (BtnBChargedVfxSpeciesId != 0) {
        output.WriteRawTag(160, 5);
        output.WriteInt32(BtnBChargedVfxSpeciesId);
      }
      if (IsKeyCh != false) {
        output.WriteRawTag(168, 5);
        output.WriteBool(IsKeyCh);
      }
      if (AllowsSameTeamSoftPushback != false) {
        output.WriteRawTag(176, 5);
        output.WriteBool(AllowsSameTeamSoftPushback);
      }
      if (GaugeIncWhenKilled != 0) {
        output.WriteRawTag(184, 5);
        output.WriteInt32(GaugeIncWhenKilled);
      }
      if (JumpingInsteadOfWalking != false) {
        output.WriteRawTag(192, 5);
        output.WriteBool(JumpingInsteadOfWalking);
      }
      if (VisionSearchIntervalPow2Minus1U != 0) {
        output.WriteRawTag(200, 5);
        output.WriteUInt32(VisionSearchIntervalPow2Minus1U);
      }
      if (VisionSearchIntervalPow2Minus1 != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(VisionSearchIntervalPow2Minus1);
      }
      if (NpcNoDefaultAirWalking != false) {
        output.WriteRawTag(216, 5);
        output.WriteBool(NpcNoDefaultAirWalking);
      }
      if (NpcPrioritizeBulletHandling != false) {
        output.WriteRawTag(224, 5);
        output.WriteBool(NpcPrioritizeBulletHandling);
      }
      if (NpcPrioritizeAllyHealing != false) {
        output.WriteRawTag(232, 5);
        output.WriteBool(NpcPrioritizeAllyHealing);
      }
      if (NpcNotHuntingInAirOppoCh != false) {
        output.WriteRawTag(240, 5);
        output.WriteBool(NpcNotHuntingInAirOppoCh);
      }
      if (TransformIntoFramesToRecover != 0) {
        output.WriteRawTag(248, 5);
        output.WriteInt32(TransformIntoFramesToRecover);
      }
      if (TransformIntoFramesInvinsible != 0) {
        output.WriteRawTag(128, 6);
        output.WriteInt32(TransformIntoFramesInvinsible);
      }
      if (AwakingFramesToRecover != 0) {
        output.WriteRawTag(136, 6);
        output.WriteInt32(AwakingFramesToRecover);
      }
      if (AwakingFramesInvinsible != 0) {
        output.WriteRawTag(144, 6);
        output.WriteInt32(AwakingFramesInvinsible);
      }
      if (UseIdle1AsFlyingIdle != false) {
        output.WriteRawTag(152, 6);
        output.WriteBool(UseIdle1AsFlyingIdle);
      }
      if (NoFlee != false) {
        output.WriteRawTag(160, 6);
        output.WriteBool(NoFlee);
      }
      if (atk1Magazine_ != null) {
        output.WriteRawTag(170, 6);
        output.WriteMessage(Atk1Magazine);
      }
      if (superAtkGuage_ != null) {
        output.WriteRawTag(178, 6);
        output.WriteMessage(SuperAtkGuage);
      }
      initInventorySlots_.WriteTo(output, _repeated_initInventorySlots_codec);
      btnBAutoUnholdChStates_.WriteTo(output, _map_btnBAutoUnholdChStates_codec);
      loopingChStates_.WriteTo(output, _map_loopingChStates_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SpeciesId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SpeciesId);
      }
      if (SpeciesName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SpeciesName);
      }
      if (Hp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Hp);
      }
      if (Mp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Mp);
      }
      if (LayDownFrames != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LayDownFrames);
      }
      if (LayDownFramesToRecover != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LayDownFramesToRecover);
      }
      if (GetUpInvinsibleFrames != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GetUpInvinsibleFrames);
      }
      if (GetUpFramesToRecover != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GetUpFramesToRecover);
      }
      if (Speed != 0F) {
        size += 1 + 4;
      }
      if (MpRegenPerInterval != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MpRegenPerInterval);
      }
      if (MpRegenInterval != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MpRegenInterval);
      }
      if (JumpingInitVelY != 0F) {
        size += 1 + 4;
      }
      if (InertiaFramesToRecover != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(InertiaFramesToRecover);
      }
      if (DashingEnabled != false) {
        size += 1 + 1;
      }
      if (SlidingEnabled != false) {
        size += 1 + 1;
      }
      if (OnWallEnabled != false) {
        size += 2 + 1;
      }
      if (CrouchingEnabled != false) {
        size += 2 + 1;
      }
      if (CrouchingAtkEnabled != false) {
        size += 2 + 1;
      }
      if (WallJumpingFramesToRecover != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(WallJumpingFramesToRecover);
      }
      if (WallJumpingInitVelX != 0F) {
        size += 2 + 4;
      }
      if (WallJumpingInitVelY != 0F) {
        size += 2 + 4;
      }
      if (WallSlidingVelY != 0F) {
        size += 2 + 4;
      }
      if (MinFallingVelY != 0F) {
        size += 2 + 4;
      }
      if (MaxAscendingVelY != 0F) {
        size += 2 + 4;
      }
      if (Atk1UsesMagazine != false) {
        size += 2 + 1;
      }
      if (GroundDodgeEnabledByIvSlotCInBlockStun != false) {
        size += 2 + 1;
      }
      if (GroundDodgeEnabledByRdfCntFromBeginning != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(GroundDodgeEnabledByRdfCntFromBeginning);
      }
      if (GroundDodgedFramesToRecover != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(GroundDodgedFramesToRecover);
      }
      if (GroundDodgedFramesInvinsible != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(GroundDodgedFramesInvinsible);
      }
      if (GroundDodgedSpeed != 0F) {
        size += 2 + 4;
      }
      if (VisionOffsetX != 0F) {
        size += 2 + 4;
      }
      if (VisionOffsetY != 0F) {
        size += 2 + 4;
      }
      if (VisionSizeX != 0F) {
        size += 2 + 4;
      }
      if (VisionSizeY != 0F) {
        size += 2 + 4;
      }
      if (CapsuleRadius != 0F) {
        size += 2 + 4;
      }
      if (CapsuleHalfHeight != 0F) {
        size += 2 + 4;
      }
      if (ShrinkedCapsuleRadius != 0F) {
        size += 2 + 4;
      }
      if (ShrinkedCapsuleHalfHeight != 0F) {
        size += 2 + 4;
      }
      if (LayDownCapsuleRadius != 0F) {
        size += 2 + 4;
      }
      if (LayDownCapsuleHalfHeight != 0F) {
        size += 2 + 4;
      }
      if (DyingCapsuleRadius != 0F) {
        size += 2 + 4;
      }
      if (DyingCapsuleHalfHeight != 0F) {
        size += 2 + 4;
      }
      if (DimmedCapsuleRadius != 0F) {
        size += 2 + 4;
      }
      if (DimmedCapsuleHalfHeight != 0F) {
        size += 2 + 4;
      }
      if (AntiGravityWhenIdle != false) {
        size += 2 + 1;
      }
      if (AntiGravityFramesLingering != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(AntiGravityFramesLingering);
      }
      if (OmitGravity != false) {
        size += 2 + 1;
      }
      if (OmitSoftPushback != false) {
        size += 2 + 1;
      }
      if (RepelSoftPushback != false) {
        size += 2 + 1;
      }
      if (CollisionTypeMask != 0UL) {
        size += 2 + pb::CodedOutputStream.ComputeUInt64Size(CollisionTypeMask);
      }
      if (HasTurnAroundAnim != false) {
        size += 2 + 1;
      }
      if (HasDimmedAnim != false) {
        size += 2 + 1;
      }
      if (HasAwakingAnim != false) {
        size += 2 + 1;
      }
      if (HasWalkStoppingAnim != false) {
        size += 2 + 1;
      }
      if (HasInAirWalkStoppingAnim != false) {
        size += 2 + 1;
      }
      if (LayDownToRecoverFromDimmed != false) {
        size += 2 + 1;
      }
      if (Hardness != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Hardness);
      }
      if (ProactiveJumpStartupFrames != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ProactiveJumpStartupFrames);
      }
      if (DefaultAirJumpQuota != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(DefaultAirJumpQuota);
      }
      if (DefaultAirDashQuota != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(DefaultAirDashQuota);
      }
      if (DefaultDef1Quota != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(DefaultDef1Quota);
      }
      if (IsolatedAirJumpAndDashQuota != false) {
        size += 2 + 1;
      }
      if (AirJumpVfxSpeciesId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(AirJumpVfxSpeciesId);
      }
      if (SlipJumpThresHoldBelowTopFace != 0F) {
        size += 2 + 4;
      }
      if (SlipJumpCharacterDropY != 0F) {
        size += 2 + 4;
      }
      if (TransformIntoSpeciesIdUponDeath != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(TransformIntoSpeciesIdUponDeath);
      }
      if (JumpHoldingToFly != false) {
        size += 2 + 1;
      }
      if (HasDef1 != false) {
        size += 2 + 1;
      }
      if (HasDef1Atked1Anim != false) {
        size += 2 + 1;
      }
      if (DefaultDef1BrokenFramesToRecover != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(DefaultDef1BrokenFramesToRecover);
      }
      if (Def1ActiveVfxSpeciesId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Def1ActiveVfxSpeciesId);
      }
      if (Def1AtkedVfxSpeciesId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Def1AtkedVfxSpeciesId);
      }
      if (Def1BrokenVfxSpeciesId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Def1BrokenVfxSpeciesId);
      }
      if (Def1StartupFrames != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Def1StartupFrames);
      }
      if (Def1DamageYield != 0F) {
        size += 2 + 4;
      }
      if (Def1DefiesEleWeaknessPenetration != false) {
        size += 2 + 1;
      }
      if (Def1DefiesDebuff != false) {
        size += 2 + 1;
      }
      if (FlyingQuotaRdfCnt != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(FlyingQuotaRdfCnt);
      }
      if (WalkingAutoDef1 != false) {
        size += 2 + 1;
      }
      if (Ifc != 0) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) Ifc);
      }
      if (EleWeakness != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(EleWeakness);
      }
      if (EleResistance != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(EleResistance);
      }
      if (HasBtnBCharging != false) {
        size += 2 + 1;
      }
      if (BtnBChargedVfxSpeciesId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(BtnBChargedVfxSpeciesId);
      }
      if (IsKeyCh != false) {
        size += 2 + 1;
      }
      if (AllowsSameTeamSoftPushback != false) {
        size += 2 + 1;
      }
      if (GaugeIncWhenKilled != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(GaugeIncWhenKilled);
      }
      if (JumpingInsteadOfWalking != false) {
        size += 2 + 1;
      }
      if (VisionSearchIntervalPow2Minus1U != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(VisionSearchIntervalPow2Minus1U);
      }
      if (VisionSearchIntervalPow2Minus1 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(VisionSearchIntervalPow2Minus1);
      }
      if (NpcNoDefaultAirWalking != false) {
        size += 2 + 1;
      }
      if (NpcPrioritizeBulletHandling != false) {
        size += 2 + 1;
      }
      if (NpcPrioritizeAllyHealing != false) {
        size += 2 + 1;
      }
      if (NpcNotHuntingInAirOppoCh != false) {
        size += 2 + 1;
      }
      if (TransformIntoFramesToRecover != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(TransformIntoFramesToRecover);
      }
      if (TransformIntoFramesInvinsible != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(TransformIntoFramesInvinsible);
      }
      if (AwakingFramesToRecover != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(AwakingFramesToRecover);
      }
      if (AwakingFramesInvinsible != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(AwakingFramesInvinsible);
      }
      if (UseIdle1AsFlyingIdle != false) {
        size += 2 + 1;
      }
      if (NoFlee != false) {
        size += 2 + 1;
      }
      if (atk1Magazine_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Atk1Magazine);
      }
      if (superAtkGuage_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(SuperAtkGuage);
      }
      size += initInventorySlots_.CalculateSize(_repeated_initInventorySlots_codec);
      size += btnBAutoUnholdChStates_.CalculateSize(_map_btnBAutoUnholdChStates_codec);
      size += loopingChStates_.CalculateSize(_map_loopingChStates_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CharacterConfig other) {
      if (other == null) {
        return;
      }
      if (other.SpeciesId != 0) {
        SpeciesId = other.SpeciesId;
      }
      if (other.SpeciesName.Length != 0) {
        SpeciesName = other.SpeciesName;
      }
      if (other.Hp != 0) {
        Hp = other.Hp;
      }
      if (other.Mp != 0) {
        Mp = other.Mp;
      }
      if (other.LayDownFrames != 0) {
        LayDownFrames = other.LayDownFrames;
      }
      if (other.LayDownFramesToRecover != 0) {
        LayDownFramesToRecover = other.LayDownFramesToRecover;
      }
      if (other.GetUpInvinsibleFrames != 0) {
        GetUpInvinsibleFrames = other.GetUpInvinsibleFrames;
      }
      if (other.GetUpFramesToRecover != 0) {
        GetUpFramesToRecover = other.GetUpFramesToRecover;
      }
      if (other.Speed != 0F) {
        Speed = other.Speed;
      }
      if (other.MpRegenPerInterval != 0) {
        MpRegenPerInterval = other.MpRegenPerInterval;
      }
      if (other.MpRegenInterval != 0) {
        MpRegenInterval = other.MpRegenInterval;
      }
      if (other.JumpingInitVelY != 0F) {
        JumpingInitVelY = other.JumpingInitVelY;
      }
      if (other.InertiaFramesToRecover != 0) {
        InertiaFramesToRecover = other.InertiaFramesToRecover;
      }
      if (other.DashingEnabled != false) {
        DashingEnabled = other.DashingEnabled;
      }
      if (other.SlidingEnabled != false) {
        SlidingEnabled = other.SlidingEnabled;
      }
      if (other.OnWallEnabled != false) {
        OnWallEnabled = other.OnWallEnabled;
      }
      if (other.CrouchingEnabled != false) {
        CrouchingEnabled = other.CrouchingEnabled;
      }
      if (other.CrouchingAtkEnabled != false) {
        CrouchingAtkEnabled = other.CrouchingAtkEnabled;
      }
      if (other.WallJumpingFramesToRecover != 0) {
        WallJumpingFramesToRecover = other.WallJumpingFramesToRecover;
      }
      if (other.WallJumpingInitVelX != 0F) {
        WallJumpingInitVelX = other.WallJumpingInitVelX;
      }
      if (other.WallJumpingInitVelY != 0F) {
        WallJumpingInitVelY = other.WallJumpingInitVelY;
      }
      if (other.WallSlidingVelY != 0F) {
        WallSlidingVelY = other.WallSlidingVelY;
      }
      if (other.MinFallingVelY != 0F) {
        MinFallingVelY = other.MinFallingVelY;
      }
      if (other.MaxAscendingVelY != 0F) {
        MaxAscendingVelY = other.MaxAscendingVelY;
      }
      if (other.Atk1UsesMagazine != false) {
        Atk1UsesMagazine = other.Atk1UsesMagazine;
      }
      if (other.GroundDodgeEnabledByIvSlotCInBlockStun != false) {
        GroundDodgeEnabledByIvSlotCInBlockStun = other.GroundDodgeEnabledByIvSlotCInBlockStun;
      }
      if (other.GroundDodgeEnabledByRdfCntFromBeginning != 0) {
        GroundDodgeEnabledByRdfCntFromBeginning = other.GroundDodgeEnabledByRdfCntFromBeginning;
      }
      if (other.GroundDodgedFramesToRecover != 0) {
        GroundDodgedFramesToRecover = other.GroundDodgedFramesToRecover;
      }
      if (other.GroundDodgedFramesInvinsible != 0) {
        GroundDodgedFramesInvinsible = other.GroundDodgedFramesInvinsible;
      }
      if (other.GroundDodgedSpeed != 0F) {
        GroundDodgedSpeed = other.GroundDodgedSpeed;
      }
      if (other.VisionOffsetX != 0F) {
        VisionOffsetX = other.VisionOffsetX;
      }
      if (other.VisionOffsetY != 0F) {
        VisionOffsetY = other.VisionOffsetY;
      }
      if (other.VisionSizeX != 0F) {
        VisionSizeX = other.VisionSizeX;
      }
      if (other.VisionSizeY != 0F) {
        VisionSizeY = other.VisionSizeY;
      }
      if (other.CapsuleRadius != 0F) {
        CapsuleRadius = other.CapsuleRadius;
      }
      if (other.CapsuleHalfHeight != 0F) {
        CapsuleHalfHeight = other.CapsuleHalfHeight;
      }
      if (other.ShrinkedCapsuleRadius != 0F) {
        ShrinkedCapsuleRadius = other.ShrinkedCapsuleRadius;
      }
      if (other.ShrinkedCapsuleHalfHeight != 0F) {
        ShrinkedCapsuleHalfHeight = other.ShrinkedCapsuleHalfHeight;
      }
      if (other.LayDownCapsuleRadius != 0F) {
        LayDownCapsuleRadius = other.LayDownCapsuleRadius;
      }
      if (other.LayDownCapsuleHalfHeight != 0F) {
        LayDownCapsuleHalfHeight = other.LayDownCapsuleHalfHeight;
      }
      if (other.DyingCapsuleRadius != 0F) {
        DyingCapsuleRadius = other.DyingCapsuleRadius;
      }
      if (other.DyingCapsuleHalfHeight != 0F) {
        DyingCapsuleHalfHeight = other.DyingCapsuleHalfHeight;
      }
      if (other.DimmedCapsuleRadius != 0F) {
        DimmedCapsuleRadius = other.DimmedCapsuleRadius;
      }
      if (other.DimmedCapsuleHalfHeight != 0F) {
        DimmedCapsuleHalfHeight = other.DimmedCapsuleHalfHeight;
      }
      if (other.AntiGravityWhenIdle != false) {
        AntiGravityWhenIdle = other.AntiGravityWhenIdle;
      }
      if (other.AntiGravityFramesLingering != 0) {
        AntiGravityFramesLingering = other.AntiGravityFramesLingering;
      }
      if (other.OmitGravity != false) {
        OmitGravity = other.OmitGravity;
      }
      if (other.OmitSoftPushback != false) {
        OmitSoftPushback = other.OmitSoftPushback;
      }
      if (other.RepelSoftPushback != false) {
        RepelSoftPushback = other.RepelSoftPushback;
      }
      if (other.CollisionTypeMask != 0UL) {
        CollisionTypeMask = other.CollisionTypeMask;
      }
      if (other.HasTurnAroundAnim != false) {
        HasTurnAroundAnim = other.HasTurnAroundAnim;
      }
      if (other.HasDimmedAnim != false) {
        HasDimmedAnim = other.HasDimmedAnim;
      }
      if (other.HasAwakingAnim != false) {
        HasAwakingAnim = other.HasAwakingAnim;
      }
      if (other.HasWalkStoppingAnim != false) {
        HasWalkStoppingAnim = other.HasWalkStoppingAnim;
      }
      if (other.HasInAirWalkStoppingAnim != false) {
        HasInAirWalkStoppingAnim = other.HasInAirWalkStoppingAnim;
      }
      if (other.LayDownToRecoverFromDimmed != false) {
        LayDownToRecoverFromDimmed = other.LayDownToRecoverFromDimmed;
      }
      if (other.Hardness != 0) {
        Hardness = other.Hardness;
      }
      if (other.ProactiveJumpStartupFrames != 0) {
        ProactiveJumpStartupFrames = other.ProactiveJumpStartupFrames;
      }
      if (other.DefaultAirJumpQuota != 0) {
        DefaultAirJumpQuota = other.DefaultAirJumpQuota;
      }
      if (other.DefaultAirDashQuota != 0) {
        DefaultAirDashQuota = other.DefaultAirDashQuota;
      }
      if (other.DefaultDef1Quota != 0) {
        DefaultDef1Quota = other.DefaultDef1Quota;
      }
      if (other.IsolatedAirJumpAndDashQuota != false) {
        IsolatedAirJumpAndDashQuota = other.IsolatedAirJumpAndDashQuota;
      }
      if (other.AirJumpVfxSpeciesId != 0) {
        AirJumpVfxSpeciesId = other.AirJumpVfxSpeciesId;
      }
      if (other.SlipJumpThresHoldBelowTopFace != 0F) {
        SlipJumpThresHoldBelowTopFace = other.SlipJumpThresHoldBelowTopFace;
      }
      if (other.SlipJumpCharacterDropY != 0F) {
        SlipJumpCharacterDropY = other.SlipJumpCharacterDropY;
      }
      if (other.TransformIntoSpeciesIdUponDeath != 0) {
        TransformIntoSpeciesIdUponDeath = other.TransformIntoSpeciesIdUponDeath;
      }
      if (other.JumpHoldingToFly != false) {
        JumpHoldingToFly = other.JumpHoldingToFly;
      }
      if (other.HasDef1 != false) {
        HasDef1 = other.HasDef1;
      }
      if (other.HasDef1Atked1Anim != false) {
        HasDef1Atked1Anim = other.HasDef1Atked1Anim;
      }
      if (other.DefaultDef1BrokenFramesToRecover != 0) {
        DefaultDef1BrokenFramesToRecover = other.DefaultDef1BrokenFramesToRecover;
      }
      if (other.Def1ActiveVfxSpeciesId != 0) {
        Def1ActiveVfxSpeciesId = other.Def1ActiveVfxSpeciesId;
      }
      if (other.Def1AtkedVfxSpeciesId != 0) {
        Def1AtkedVfxSpeciesId = other.Def1AtkedVfxSpeciesId;
      }
      if (other.Def1BrokenVfxSpeciesId != 0) {
        Def1BrokenVfxSpeciesId = other.Def1BrokenVfxSpeciesId;
      }
      if (other.Def1StartupFrames != 0) {
        Def1StartupFrames = other.Def1StartupFrames;
      }
      if (other.Def1DamageYield != 0F) {
        Def1DamageYield = other.Def1DamageYield;
      }
      if (other.Def1DefiesEleWeaknessPenetration != false) {
        Def1DefiesEleWeaknessPenetration = other.Def1DefiesEleWeaknessPenetration;
      }
      if (other.Def1DefiesDebuff != false) {
        Def1DefiesDebuff = other.Def1DefiesDebuff;
      }
      if (other.FlyingQuotaRdfCnt != 0) {
        FlyingQuotaRdfCnt = other.FlyingQuotaRdfCnt;
      }
      if (other.WalkingAutoDef1 != false) {
        WalkingAutoDef1 = other.WalkingAutoDef1;
      }
      if (other.Ifc != 0) {
        Ifc = other.Ifc;
      }
      if (other.EleWeakness != 0) {
        EleWeakness = other.EleWeakness;
      }
      if (other.EleResistance != 0) {
        EleResistance = other.EleResistance;
      }
      if (other.HasBtnBCharging != false) {
        HasBtnBCharging = other.HasBtnBCharging;
      }
      if (other.BtnBChargedVfxSpeciesId != 0) {
        BtnBChargedVfxSpeciesId = other.BtnBChargedVfxSpeciesId;
      }
      if (other.IsKeyCh != false) {
        IsKeyCh = other.IsKeyCh;
      }
      if (other.AllowsSameTeamSoftPushback != false) {
        AllowsSameTeamSoftPushback = other.AllowsSameTeamSoftPushback;
      }
      if (other.GaugeIncWhenKilled != 0) {
        GaugeIncWhenKilled = other.GaugeIncWhenKilled;
      }
      if (other.JumpingInsteadOfWalking != false) {
        JumpingInsteadOfWalking = other.JumpingInsteadOfWalking;
      }
      if (other.VisionSearchIntervalPow2Minus1U != 0) {
        VisionSearchIntervalPow2Minus1U = other.VisionSearchIntervalPow2Minus1U;
      }
      if (other.VisionSearchIntervalPow2Minus1 != 0) {
        VisionSearchIntervalPow2Minus1 = other.VisionSearchIntervalPow2Minus1;
      }
      if (other.NpcNoDefaultAirWalking != false) {
        NpcNoDefaultAirWalking = other.NpcNoDefaultAirWalking;
      }
      if (other.NpcPrioritizeBulletHandling != false) {
        NpcPrioritizeBulletHandling = other.NpcPrioritizeBulletHandling;
      }
      if (other.NpcPrioritizeAllyHealing != false) {
        NpcPrioritizeAllyHealing = other.NpcPrioritizeAllyHealing;
      }
      if (other.NpcNotHuntingInAirOppoCh != false) {
        NpcNotHuntingInAirOppoCh = other.NpcNotHuntingInAirOppoCh;
      }
      if (other.TransformIntoFramesToRecover != 0) {
        TransformIntoFramesToRecover = other.TransformIntoFramesToRecover;
      }
      if (other.TransformIntoFramesInvinsible != 0) {
        TransformIntoFramesInvinsible = other.TransformIntoFramesInvinsible;
      }
      if (other.AwakingFramesToRecover != 0) {
        AwakingFramesToRecover = other.AwakingFramesToRecover;
      }
      if (other.AwakingFramesInvinsible != 0) {
        AwakingFramesInvinsible = other.AwakingFramesInvinsible;
      }
      if (other.UseIdle1AsFlyingIdle != false) {
        UseIdle1AsFlyingIdle = other.UseIdle1AsFlyingIdle;
      }
      if (other.NoFlee != false) {
        NoFlee = other.NoFlee;
      }
      if (other.atk1Magazine_ != null) {
        if (atk1Magazine_ == null) {
          Atk1Magazine = new global::jtshared.InventorySlotConfig();
        }
        Atk1Magazine.MergeFrom(other.Atk1Magazine);
      }
      if (other.superAtkGuage_ != null) {
        if (superAtkGuage_ == null) {
          SuperAtkGuage = new global::jtshared.InventorySlotConfig();
        }
        SuperAtkGuage.MergeFrom(other.SuperAtkGuage);
      }
      initInventorySlots_.Add(other.initInventorySlots_);
      btnBAutoUnholdChStates_.Add(other.btnBAutoUnholdChStates_);
      loopingChStates_.Add(other.loopingChStates_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            SpeciesId = input.ReadUInt32();
            break;
          }
          case 18: {
            SpeciesName = input.ReadString();
            break;
          }
          case 24: {
            Hp = input.ReadInt32();
            break;
          }
          case 32: {
            Mp = input.ReadInt32();
            break;
          }
          case 40: {
            LayDownFrames = input.ReadInt32();
            break;
          }
          case 48: {
            LayDownFramesToRecover = input.ReadInt32();
            break;
          }
          case 56: {
            GetUpInvinsibleFrames = input.ReadInt32();
            break;
          }
          case 64: {
            GetUpFramesToRecover = input.ReadInt32();
            break;
          }
          case 77: {
            Speed = input.ReadFloat();
            break;
          }
          case 80: {
            MpRegenPerInterval = input.ReadInt32();
            break;
          }
          case 88: {
            MpRegenInterval = input.ReadInt32();
            break;
          }
          case 101: {
            JumpingInitVelY = input.ReadFloat();
            break;
          }
          case 104: {
            InertiaFramesToRecover = input.ReadInt32();
            break;
          }
          case 112: {
            DashingEnabled = input.ReadBool();
            break;
          }
          case 120: {
            SlidingEnabled = input.ReadBool();
            break;
          }
          case 128: {
            OnWallEnabled = input.ReadBool();
            break;
          }
          case 136: {
            CrouchingEnabled = input.ReadBool();
            break;
          }
          case 144: {
            CrouchingAtkEnabled = input.ReadBool();
            break;
          }
          case 152: {
            WallJumpingFramesToRecover = input.ReadInt32();
            break;
          }
          case 165: {
            WallJumpingInitVelX = input.ReadFloat();
            break;
          }
          case 173: {
            WallJumpingInitVelY = input.ReadFloat();
            break;
          }
          case 181: {
            WallSlidingVelY = input.ReadFloat();
            break;
          }
          case 189: {
            MinFallingVelY = input.ReadFloat();
            break;
          }
          case 197: {
            MaxAscendingVelY = input.ReadFloat();
            break;
          }
          case 200: {
            Atk1UsesMagazine = input.ReadBool();
            break;
          }
          case 208: {
            GroundDodgeEnabledByIvSlotCInBlockStun = input.ReadBool();
            break;
          }
          case 216: {
            GroundDodgeEnabledByRdfCntFromBeginning = input.ReadInt32();
            break;
          }
          case 224: {
            GroundDodgedFramesToRecover = input.ReadInt32();
            break;
          }
          case 232: {
            GroundDodgedFramesInvinsible = input.ReadInt32();
            break;
          }
          case 245: {
            GroundDodgedSpeed = input.ReadFloat();
            break;
          }
          case 253: {
            VisionOffsetX = input.ReadFloat();
            break;
          }
          case 261: {
            VisionOffsetY = input.ReadFloat();
            break;
          }
          case 269: {
            VisionSizeX = input.ReadFloat();
            break;
          }
          case 277: {
            VisionSizeY = input.ReadFloat();
            break;
          }
          case 285: {
            CapsuleRadius = input.ReadFloat();
            break;
          }
          case 293: {
            CapsuleHalfHeight = input.ReadFloat();
            break;
          }
          case 301: {
            ShrinkedCapsuleRadius = input.ReadFloat();
            break;
          }
          case 309: {
            ShrinkedCapsuleHalfHeight = input.ReadFloat();
            break;
          }
          case 317: {
            LayDownCapsuleRadius = input.ReadFloat();
            break;
          }
          case 325: {
            LayDownCapsuleHalfHeight = input.ReadFloat();
            break;
          }
          case 333: {
            DyingCapsuleRadius = input.ReadFloat();
            break;
          }
          case 341: {
            DyingCapsuleHalfHeight = input.ReadFloat();
            break;
          }
          case 349: {
            DimmedCapsuleRadius = input.ReadFloat();
            break;
          }
          case 357: {
            DimmedCapsuleHalfHeight = input.ReadFloat();
            break;
          }
          case 360: {
            AntiGravityWhenIdle = input.ReadBool();
            break;
          }
          case 368: {
            AntiGravityFramesLingering = input.ReadInt32();
            break;
          }
          case 376: {
            OmitGravity = input.ReadBool();
            break;
          }
          case 384: {
            OmitSoftPushback = input.ReadBool();
            break;
          }
          case 392: {
            RepelSoftPushback = input.ReadBool();
            break;
          }
          case 400: {
            CollisionTypeMask = input.ReadUInt64();
            break;
          }
          case 408: {
            HasTurnAroundAnim = input.ReadBool();
            break;
          }
          case 416: {
            HasDimmedAnim = input.ReadBool();
            break;
          }
          case 424: {
            HasAwakingAnim = input.ReadBool();
            break;
          }
          case 432: {
            HasWalkStoppingAnim = input.ReadBool();
            break;
          }
          case 440: {
            HasInAirWalkStoppingAnim = input.ReadBool();
            break;
          }
          case 448: {
            LayDownToRecoverFromDimmed = input.ReadBool();
            break;
          }
          case 456: {
            Hardness = input.ReadInt32();
            break;
          }
          case 464: {
            ProactiveJumpStartupFrames = input.ReadInt32();
            break;
          }
          case 472: {
            DefaultAirJumpQuota = input.ReadUInt32();
            break;
          }
          case 480: {
            DefaultAirDashQuota = input.ReadUInt32();
            break;
          }
          case 488: {
            DefaultDef1Quota = input.ReadUInt32();
            break;
          }
          case 496: {
            IsolatedAirJumpAndDashQuota = input.ReadBool();
            break;
          }
          case 504: {
            AirJumpVfxSpeciesId = input.ReadInt32();
            break;
          }
          case 517: {
            SlipJumpThresHoldBelowTopFace = input.ReadFloat();
            break;
          }
          case 525: {
            SlipJumpCharacterDropY = input.ReadFloat();
            break;
          }
          case 528: {
            TransformIntoSpeciesIdUponDeath = input.ReadUInt32();
            break;
          }
          case 536: {
            JumpHoldingToFly = input.ReadBool();
            break;
          }
          case 544: {
            HasDef1 = input.ReadBool();
            break;
          }
          case 552: {
            HasDef1Atked1Anim = input.ReadBool();
            break;
          }
          case 560: {
            DefaultDef1BrokenFramesToRecover = input.ReadInt32();
            break;
          }
          case 568: {
            Def1ActiveVfxSpeciesId = input.ReadInt32();
            break;
          }
          case 576: {
            Def1AtkedVfxSpeciesId = input.ReadInt32();
            break;
          }
          case 584: {
            Def1BrokenVfxSpeciesId = input.ReadInt32();
            break;
          }
          case 592: {
            Def1StartupFrames = input.ReadInt32();
            break;
          }
          case 605: {
            Def1DamageYield = input.ReadFloat();
            break;
          }
          case 608: {
            Def1DefiesEleWeaknessPenetration = input.ReadBool();
            break;
          }
          case 616: {
            Def1DefiesDebuff = input.ReadBool();
            break;
          }
          case 624: {
            FlyingQuotaRdfCnt = input.ReadInt32();
            break;
          }
          case 632: {
            WalkingAutoDef1 = input.ReadBool();
            break;
          }
          case 640: {
            Ifc = (global::jtshared.IfaceCat) input.ReadEnum();
            break;
          }
          case 648: {
            EleWeakness = input.ReadUInt32();
            break;
          }
          case 656: {
            EleResistance = input.ReadUInt32();
            break;
          }
          case 664: {
            HasBtnBCharging = input.ReadBool();
            break;
          }
          case 672: {
            BtnBChargedVfxSpeciesId = input.ReadInt32();
            break;
          }
          case 680: {
            IsKeyCh = input.ReadBool();
            break;
          }
          case 688: {
            AllowsSameTeamSoftPushback = input.ReadBool();
            break;
          }
          case 696: {
            GaugeIncWhenKilled = input.ReadInt32();
            break;
          }
          case 704: {
            JumpingInsteadOfWalking = input.ReadBool();
            break;
          }
          case 712: {
            VisionSearchIntervalPow2Minus1U = input.ReadUInt32();
            break;
          }
          case 720: {
            VisionSearchIntervalPow2Minus1 = input.ReadInt32();
            break;
          }
          case 728: {
            NpcNoDefaultAirWalking = input.ReadBool();
            break;
          }
          case 736: {
            NpcPrioritizeBulletHandling = input.ReadBool();
            break;
          }
          case 744: {
            NpcPrioritizeAllyHealing = input.ReadBool();
            break;
          }
          case 752: {
            NpcNotHuntingInAirOppoCh = input.ReadBool();
            break;
          }
          case 760: {
            TransformIntoFramesToRecover = input.ReadInt32();
            break;
          }
          case 768: {
            TransformIntoFramesInvinsible = input.ReadInt32();
            break;
          }
          case 776: {
            AwakingFramesToRecover = input.ReadInt32();
            break;
          }
          case 784: {
            AwakingFramesInvinsible = input.ReadInt32();
            break;
          }
          case 792: {
            UseIdle1AsFlyingIdle = input.ReadBool();
            break;
          }
          case 800: {
            NoFlee = input.ReadBool();
            break;
          }
          case 810: {
            if (atk1Magazine_ == null) {
              Atk1Magazine = new global::jtshared.InventorySlotConfig();
            }
            input.ReadMessage(Atk1Magazine);
            break;
          }
          case 818: {
            if (superAtkGuage_ == null) {
              SuperAtkGuage = new global::jtshared.InventorySlotConfig();
            }
            input.ReadMessage(SuperAtkGuage);
            break;
          }
          case 826: {
            initInventorySlots_.AddEntriesFrom(input, _repeated_initInventorySlots_codec);
            break;
          }
          case 834: {
            btnBAutoUnholdChStates_.AddEntriesFrom(input, _map_btnBAutoUnholdChStates_codec);
            break;
          }
          case 842: {
            loopingChStates_.AddEntriesFrom(input, _map_loopingChStates_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class CharacterDownsync : pb::IMessage<CharacterDownsync> {
    private static readonly pb::MessageParser<CharacterDownsync> _parser = new pb::MessageParser<CharacterDownsync>(() => new CharacterDownsync());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CharacterDownsync> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::jtshared.SerializableDataReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CharacterDownsync() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CharacterDownsync(CharacterDownsync other) : this() {
      x_ = other.x_;
      y_ = other.y_;
      dirX_ = other.dirX_;
      dirY_ = other.dirY_;
      velX_ = other.velX_;
      velY_ = other.velY_;
      speed_ = other.speed_;
      speciesId_ = other.speciesId_;
      framesToRecover_ = other.framesToRecover_;
      framesCapturedByInertia_ = other.framesCapturedByInertia_;
      hp_ = other.hp_;
      mp_ = other.mp_;
      chCollisionTeamId_ = other.chCollisionTeamId_;
      chState_ = other.chState_;
      framesInChState_ = other.framesInChState_;
      jumpTriggered_ = other.jumpTriggered_;
      omitGravity_ = other.omitGravity_;
      forcedCrouching_ = other.forcedCrouching_;
      slipJumpTriggered_ = other.slipJumpTriggered_;
      primarilyOnSlippableHardPushback_ = other.primarilyOnSlippableHardPushback_;
      prevWasCrouching_ = other.prevWasCrouching_;
      newBirthRdfCountdown_ = other.newBirthRdfCountdown_;
      framesInvinsible_ = other.framesInvinsible_;
      jumpStarted_ = other.jumpStarted_;
      framesToStartJump_ = other.framesToStartJump_;
      bulletTeamId_ = other.bulletTeamId_;
      remainingAirJumpQuota_ = other.remainingAirJumpQuota_;
      remainingAirDashQuota_ = other.remainingAirDashQuota_;
      damagedHintRdfCountdown_ = other.damagedHintRdfCountdown_;
      damagedElementalAttrs_ = other.damagedElementalAttrs_;
      remainingDef1Quota_ = other.remainingDef1Quota_;
      comboHitCnt_ = other.comboHitCnt_;
      comboFramesRemained_ = other.comboFramesRemained_;
      lastDamagedByUd_ = other.lastDamagedByUd_;
      lastDamagedByBulletTeamId_ = other.lastDamagedByBulletTeamId_;
      activeSkillId_ = other.activeSkillId_;
      activeSkillHit_ = other.activeSkillHit_;
      btnAHoldingRdfCnt_ = other.btnAHoldingRdfCnt_;
      btnBHoldingRdfCnt_ = other.btnBHoldingRdfCnt_;
      btnCHoldingRdfCnt_ = other.btnCHoldingRdfCnt_;
      btnDHoldingRdfCnt_ = other.btnDHoldingRdfCnt_;
      btnEHoldingRdfCnt_ = other.btnEHoldingRdfCnt_;
      parryPrepRdfCntDown_ = other.parryPrepRdfCntDown_;
      mpRegenRdfCountdown_ = other.mpRegenRdfCountdown_;
      flyingRdfCountdown_ = other.flyingRdfCountdown_;
      lockingOnUd_ = other.lockingOnUd_;
      buffList_ = other.buffList_.Clone();
      debuffList_ = other.debuffList_.Clone();
      atk1Magazine_ = other.atk1Magazine_ != null ? other.atk1Magazine_.Clone() : null;
      superAtkGauge_ = other.superAtkGauge_ != null ? other.superAtkGauge_.Clone() : null;
      inventory_ = other.inventory_ != null ? other.inventory_.Clone() : null;
      bulletImmuneRecords_ = other.bulletImmuneRecords_.Clone();
      kinematicKnobs_ = other.kinematicKnobs_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CharacterDownsync Clone() {
      return new CharacterDownsync(this);
    }

    /// <summary>Field number for the "x" field.</summary>
    public const int XFieldNumber = 2;
    private float x_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "y" field.</summary>
    public const int YFieldNumber = 3;
    private float y_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    /// <summary>Field number for the "dir_x" field.</summary>
    public const int DirXFieldNumber = 4;
    private int dirX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DirX {
      get { return dirX_; }
      set {
        dirX_ = value;
      }
    }

    /// <summary>Field number for the "dir_y" field.</summary>
    public const int DirYFieldNumber = 5;
    private int dirY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DirY {
      get { return dirY_; }
      set {
        dirY_ = value;
      }
    }

    /// <summary>Field number for the "vel_x" field.</summary>
    public const int VelXFieldNumber = 6;
    private float velX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float VelX {
      get { return velX_; }
      set {
        velX_ = value;
      }
    }

    /// <summary>Field number for the "vel_y" field.</summary>
    public const int VelYFieldNumber = 7;
    private float velY_;
    /// <summary>
    /// "vel_x" and "vel_y" is used to record the accumulated effect by inertia and accelerations (including gravity)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float VelY {
      get { return velY_; }
      set {
        velY_ = value;
      }
    }

    /// <summary>Field number for the "speed" field.</summary>
    public const int SpeedFieldNumber = 8;
    private float speed_;
    /// <summary>
    /// this is the instantaneous scalar attribute of a character, different from but will be accounted in "vel_x" and "vel_y"
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Speed {
      get { return speed_; }
      set {
        speed_ = value;
      }
    }

    /// <summary>Field number for the "species_id" field.</summary>
    public const int SpeciesIdFieldNumber = 9;
    private uint speciesId_;
    /// <summary>
    /// For evolution during battle
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SpeciesId {
      get { return speciesId_; }
      set {
        speciesId_ = value;
      }
    }

    /// <summary>Field number for the "frames_to_recover" field.</summary>
    public const int FramesToRecoverFieldNumber = 10;
    private int framesToRecover_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FramesToRecover {
      get { return framesToRecover_; }
      set {
        framesToRecover_ = value;
      }
    }

    /// <summary>Field number for the "frames_captured_by_inertia" field.</summary>
    public const int FramesCapturedByInertiaFieldNumber = 11;
    private int framesCapturedByInertia_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FramesCapturedByInertia {
      get { return framesCapturedByInertia_; }
      set {
        framesCapturedByInertia_ = value;
      }
    }

    /// <summary>Field number for the "hp" field.</summary>
    public const int HpFieldNumber = 12;
    private int hp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Hp {
      get { return hp_; }
      set {
        hp_ = value;
      }
    }

    /// <summary>Field number for the "mp" field.</summary>
    public const int MpFieldNumber = 13;
    private int mp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Mp {
      get { return mp_; }
      set {
        mp_ = value;
      }
    }

    /// <summary>Field number for the "ch_collision_team_id" field.</summary>
    public const int ChCollisionTeamIdFieldNumber = 14;
    private int chCollisionTeamId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ChCollisionTeamId {
      get { return chCollisionTeamId_; }
      set {
        chCollisionTeamId_ = value;
      }
    }

    /// <summary>Field number for the "ch_state" field.</summary>
    public const int ChStateFieldNumber = 15;
    private global::jtshared.CharacterState chState_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::jtshared.CharacterState ChState {
      get { return chState_; }
      set {
        chState_ = value;
      }
    }

    /// <summary>Field number for the "frames_in_ch_state" field.</summary>
    public const int FramesInChStateFieldNumber = 16;
    private int framesInChState_;
    /// <summary>
    /// number of frames elapsed in the current character state   
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FramesInChState {
      get { return framesInChState_; }
      set {
        framesInChState_ = value;
      }
    }

    /// <summary>Field number for the "jump_triggered" field.</summary>
    public const int JumpTriggeredFieldNumber = 18;
    private bool jumpTriggered_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool JumpTriggered {
      get { return jumpTriggered_; }
      set {
        jumpTriggered_ = value;
      }
    }

    /// <summary>Field number for the "omit_gravity" field.</summary>
    public const int OmitGravityFieldNumber = 22;
    private bool omitGravity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool OmitGravity {
      get { return omitGravity_; }
      set {
        omitGravity_ = value;
      }
    }

    /// <summary>Field number for the "forced_crouching" field.</summary>
    public const int ForcedCrouchingFieldNumber = 23;
    private bool forcedCrouching_;
    /// <summary>
    /// by design a standalone field only inferred by the collision result of "Step" instead of "character_state", because we need check the transition for "character_state" from this field, i.e. "forced_crouching (prev -> curr)"
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ForcedCrouching {
      get { return forcedCrouching_; }
      set {
        forcedCrouching_ = value;
      }
    }

    /// <summary>Field number for the "slip_jump_triggered" field.</summary>
    public const int SlipJumpTriggeredFieldNumber = 24;
    private bool slipJumpTriggered_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool SlipJumpTriggered {
      get { return slipJumpTriggered_; }
      set {
        slipJumpTriggered_ = value;
      }
    }

    /// <summary>Field number for the "primarily_on_slippable_hard_pushback" field.</summary>
    public const int PrimarilyOnSlippableHardPushbackFieldNumber = 25;
    private bool primarilyOnSlippableHardPushback_;
    /// <summary>
    /// by design a standalone field only inferred by the calc result of "Battle.Step" instead of "character_state"
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool PrimarilyOnSlippableHardPushback {
      get { return primarilyOnSlippableHardPushback_; }
      set {
        primarilyOnSlippableHardPushback_ = value;
      }
    }

    /// <summary>Field number for the "prev_was_crouching" field.</summary>
    public const int PrevWasCrouchingFieldNumber = 26;
    private bool prevWasCrouching_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool PrevWasCrouching {
      get { return prevWasCrouching_; }
      set {
        prevWasCrouching_ = value;
      }
    }

    /// <summary>Field number for the "new_birth_rdf_countdown" field.</summary>
    public const int NewBirthRdfCountdownFieldNumber = 27;
    private int newBirthRdfCountdown_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NewBirthRdfCountdown {
      get { return newBirthRdfCountdown_; }
      set {
        newBirthRdfCountdown_ = value;
      }
    }

    /// <summary>Field number for the "frames_invinsible" field.</summary>
    public const int FramesInvinsibleFieldNumber = 28;
    private int framesInvinsible_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FramesInvinsible {
      get { return framesInvinsible_; }
      set {
        framesInvinsible_ = value;
      }
    }

    /// <summary>Field number for the "jump_started" field.</summary>
    public const int JumpStartedFieldNumber = 29;
    private bool jumpStarted_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool JumpStarted {
      get { return jumpStarted_; }
      set {
        jumpStarted_ = value;
      }
    }

    /// <summary>Field number for the "frames_to_start_jump" field.</summary>
    public const int FramesToStartJumpFieldNumber = 30;
    private int framesToStartJump_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FramesToStartJump {
      get { return framesToStartJump_; }
      set {
        framesToStartJump_ = value;
      }
    }

    /// <summary>Field number for the "bullet_team_id" field.</summary>
    public const int BulletTeamIdFieldNumber = 31;
    private int bulletTeamId_;
    /// <summary>
    /// Kindly note that "collision_type_mask" is NOT GRANULAR ENOUGH for inter-character collision configuration, e.g. same team omission, thus we'd still need the fields "bullet_team_id" and "ch_collision_team_id" here
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BulletTeamId {
      get { return bulletTeamId_; }
      set {
        bulletTeamId_ = value;
      }
    }

    /// <summary>Field number for the "remaining_air_jump_quota" field.</summary>
    public const int RemainingAirJumpQuotaFieldNumber = 32;
    private uint remainingAirJumpQuota_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RemainingAirJumpQuota {
      get { return remainingAirJumpQuota_; }
      set {
        remainingAirJumpQuota_ = value;
      }
    }

    /// <summary>Field number for the "remaining_air_dash_quota" field.</summary>
    public const int RemainingAirDashQuotaFieldNumber = 33;
    private uint remainingAirDashQuota_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RemainingAirDashQuota {
      get { return remainingAirDashQuota_; }
      set {
        remainingAirDashQuota_ = value;
      }
    }

    /// <summary>Field number for the "damaged_hint_rdf_countdown" field.</summary>
    public const int DamagedHintRdfCountdownFieldNumber = 34;
    private int damagedHintRdfCountdown_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DamagedHintRdfCountdown {
      get { return damagedHintRdfCountdown_; }
      set {
        damagedHintRdfCountdown_ = value;
      }
    }

    /// <summary>Field number for the "damaged_elemental_attrs" field.</summary>
    public const int DamagedElementalAttrsFieldNumber = 35;
    private uint damagedElementalAttrs_;
    /// <summary>
    /// Should be cleared whenever entering a non-attacked ch_state
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint DamagedElementalAttrs {
      get { return damagedElementalAttrs_; }
      set {
        damagedElementalAttrs_ = value;
      }
    }

    /// <summary>Field number for the "remaining_def1_quota" field.</summary>
    public const int RemainingDef1QuotaFieldNumber = 36;
    private uint remainingDef1Quota_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RemainingDef1Quota {
      get { return remainingDef1Quota_; }
      set {
        remainingDef1Quota_ = value;
      }
    }

    /// <summary>Field number for the "combo_hit_cnt" field.</summary>
    public const int ComboHitCntFieldNumber = 37;
    private uint comboHitCnt_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ComboHitCnt {
      get { return comboHitCnt_; }
      set {
        comboHitCnt_ = value;
      }
    }

    /// <summary>Field number for the "combo_frames_remained" field.</summary>
    public const int ComboFramesRemainedFieldNumber = 38;
    private int comboFramesRemained_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ComboFramesRemained {
      get { return comboFramesRemained_; }
      set {
        comboFramesRemained_ = value;
      }
    }

    /// <summary>Field number for the "last_damaged_by_ud" field.</summary>
    public const int LastDamagedByUdFieldNumber = 39;
    private ulong lastDamagedByUd_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong LastDamagedByUd {
      get { return lastDamagedByUd_; }
      set {
        lastDamagedByUd_ = value;
      }
    }

    /// <summary>Field number for the "last_damaged_by_bullet_team_id" field.</summary>
    public const int LastDamagedByBulletTeamIdFieldNumber = 40;
    private int lastDamagedByBulletTeamId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LastDamagedByBulletTeamId {
      get { return lastDamagedByBulletTeamId_; }
      set {
        lastDamagedByBulletTeamId_ = value;
      }
    }

    /// <summary>Field number for the "active_skill_id" field.</summary>
    public const int ActiveSkillIdFieldNumber = 41;
    private uint activeSkillId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ActiveSkillId {
      get { return activeSkillId_; }
      set {
        activeSkillId_ = value;
      }
    }

    /// <summary>Field number for the "active_skill_hit" field.</summary>
    public const int ActiveSkillHitFieldNumber = 42;
    private int activeSkillHit_;
    /// <summary>
    /// TODO: change to 1-based in code and uint32
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ActiveSkillHit {
      get { return activeSkillHit_; }
      set {
        activeSkillHit_ = value;
      }
    }

    /// <summary>Field number for the "btn_a_holding_rdf_cnt" field.</summary>
    public const int BtnAHoldingRdfCntFieldNumber = 43;
    private int btnAHoldingRdfCnt_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BtnAHoldingRdfCnt {
      get { return btnAHoldingRdfCnt_; }
      set {
        btnAHoldingRdfCnt_ = value;
      }
    }

    /// <summary>Field number for the "btn_b_holding_rdf_cnt" field.</summary>
    public const int BtnBHoldingRdfCntFieldNumber = 44;
    private int btnBHoldingRdfCnt_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BtnBHoldingRdfCnt {
      get { return btnBHoldingRdfCnt_; }
      set {
        btnBHoldingRdfCnt_ = value;
      }
    }

    /// <summary>Field number for the "btn_c_holding_rdf_cnt" field.</summary>
    public const int BtnCHoldingRdfCntFieldNumber = 45;
    private int btnCHoldingRdfCnt_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BtnCHoldingRdfCnt {
      get { return btnCHoldingRdfCnt_; }
      set {
        btnCHoldingRdfCnt_ = value;
      }
    }

    /// <summary>Field number for the "btn_d_Holding_rdf_cnt" field.</summary>
    public const int BtnDHoldingRdfCntFieldNumber = 46;
    private int btnDHoldingRdfCnt_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BtnDHoldingRdfCnt {
      get { return btnDHoldingRdfCnt_; }
      set {
        btnDHoldingRdfCnt_ = value;
      }
    }

    /// <summary>Field number for the "btn_e_holding_rdf_cnt" field.</summary>
    public const int BtnEHoldingRdfCntFieldNumber = 47;
    private int btnEHoldingRdfCnt_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BtnEHoldingRdfCnt {
      get { return btnEHoldingRdfCnt_; }
      set {
        btnEHoldingRdfCnt_ = value;
      }
    }

    /// <summary>Field number for the "parry_prep_rdf_cnt_down" field.</summary>
    public const int ParryPrepRdfCntDownFieldNumber = 48;
    private int parryPrepRdfCntDown_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ParryPrepRdfCntDown {
      get { return parryPrepRdfCntDown_; }
      set {
        parryPrepRdfCntDown_ = value;
      }
    }

    /// <summary>Field number for the "mp_regen_rdf_countdown" field.</summary>
    public const int MpRegenRdfCountdownFieldNumber = 49;
    private int mpRegenRdfCountdown_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MpRegenRdfCountdown {
      get { return mpRegenRdfCountdown_; }
      set {
        mpRegenRdfCountdown_ = value;
      }
    }

    /// <summary>Field number for the "flying_rdf_countdown" field.</summary>
    public const int FlyingRdfCountdownFieldNumber = 50;
    private int flyingRdfCountdown_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FlyingRdfCountdown {
      get { return flyingRdfCountdown_; }
      set {
        flyingRdfCountdown_ = value;
      }
    }

    /// <summary>Field number for the "locking_on_ud" field.</summary>
    public const int LockingOnUdFieldNumber = 51;
    private uint lockingOnUd_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint LockingOnUd {
      get { return lockingOnUd_; }
      set {
        lockingOnUd_ = value;
      }
    }

    /// <summary>Field number for the "buff_list" field.</summary>
    public const int BuffListFieldNumber = 52;
    private static readonly pb::FieldCodec<global::jtshared.Buff> _repeated_buffList_codec
        = pb::FieldCodec.ForMessage(418, global::jtshared.Buff.Parser);
    private readonly pbc::RepeatedField<global::jtshared.Buff> buffList_ = new pbc::RepeatedField<global::jtshared.Buff>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::jtshared.Buff> BuffList {
      get { return buffList_; }
    }

    /// <summary>Field number for the "debuff_list" field.</summary>
    public const int DebuffListFieldNumber = 53;
    private static readonly pb::FieldCodec<global::jtshared.Debuff> _repeated_debuffList_codec
        = pb::FieldCodec.ForMessage(426, global::jtshared.Debuff.Parser);
    private readonly pbc::RepeatedField<global::jtshared.Debuff> debuffList_ = new pbc::RepeatedField<global::jtshared.Debuff>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::jtshared.Debuff> DebuffList {
      get { return debuffList_; }
    }

    /// <summary>Field number for the "atk1_magazine" field.</summary>
    public const int Atk1MagazineFieldNumber = 54;
    private global::jtshared.InventorySlot atk1Magazine_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::jtshared.InventorySlot Atk1Magazine {
      get { return atk1Magazine_; }
      set {
        atk1Magazine_ = value;
      }
    }

    /// <summary>Field number for the "super_atk_gauge" field.</summary>
    public const int SuperAtkGaugeFieldNumber = 55;
    private global::jtshared.InventorySlot superAtkGauge_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::jtshared.InventorySlot SuperAtkGauge {
      get { return superAtkGauge_; }
      set {
        superAtkGauge_ = value;
      }
    }

    /// <summary>Field number for the "inventory" field.</summary>
    public const int InventoryFieldNumber = 56;
    private global::jtshared.Inventory inventory_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::jtshared.Inventory Inventory {
      get { return inventory_; }
      set {
        inventory_ = value;
      }
    }

    /// <summary>Field number for the "bullet_immune_records" field.</summary>
    public const int BulletImmuneRecordsFieldNumber = 57;
    private static readonly pb::FieldCodec<global::jtshared.BulletImmuneRecord> _repeated_bulletImmuneRecords_codec
        = pb::FieldCodec.ForMessage(458, global::jtshared.BulletImmuneRecord.Parser);
    private readonly pbc::RepeatedField<global::jtshared.BulletImmuneRecord> bulletImmuneRecords_ = new pbc::RepeatedField<global::jtshared.BulletImmuneRecord>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::jtshared.BulletImmuneRecord> BulletImmuneRecords {
      get { return bulletImmuneRecords_; }
    }

    /// <summary>Field number for the "kinematic_knobs" field.</summary>
    public const int KinematicKnobsFieldNumber = 58;
    private static readonly pb::FieldCodec<float> _repeated_kinematicKnobs_codec
        = pb::FieldCodec.ForFloat(466);
    private readonly pbc::RepeatedField<float> kinematicKnobs_ = new pbc::RepeatedField<float>();
    /// <summary>
    /// including both forward-kinematics and inverse-kinematics   
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> KinematicKnobs {
      get { return kinematicKnobs_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CharacterDownsync);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CharacterDownsync other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(X, other.X)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Y, other.Y)) return false;
      if (DirX != other.DirX) return false;
      if (DirY != other.DirY) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(VelX, other.VelX)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(VelY, other.VelY)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Speed, other.Speed)) return false;
      if (SpeciesId != other.SpeciesId) return false;
      if (FramesToRecover != other.FramesToRecover) return false;
      if (FramesCapturedByInertia != other.FramesCapturedByInertia) return false;
      if (Hp != other.Hp) return false;
      if (Mp != other.Mp) return false;
      if (ChCollisionTeamId != other.ChCollisionTeamId) return false;
      if (ChState != other.ChState) return false;
      if (FramesInChState != other.FramesInChState) return false;
      if (JumpTriggered != other.JumpTriggered) return false;
      if (OmitGravity != other.OmitGravity) return false;
      if (ForcedCrouching != other.ForcedCrouching) return false;
      if (SlipJumpTriggered != other.SlipJumpTriggered) return false;
      if (PrimarilyOnSlippableHardPushback != other.PrimarilyOnSlippableHardPushback) return false;
      if (PrevWasCrouching != other.PrevWasCrouching) return false;
      if (NewBirthRdfCountdown != other.NewBirthRdfCountdown) return false;
      if (FramesInvinsible != other.FramesInvinsible) return false;
      if (JumpStarted != other.JumpStarted) return false;
      if (FramesToStartJump != other.FramesToStartJump) return false;
      if (BulletTeamId != other.BulletTeamId) return false;
      if (RemainingAirJumpQuota != other.RemainingAirJumpQuota) return false;
      if (RemainingAirDashQuota != other.RemainingAirDashQuota) return false;
      if (DamagedHintRdfCountdown != other.DamagedHintRdfCountdown) return false;
      if (DamagedElementalAttrs != other.DamagedElementalAttrs) return false;
      if (RemainingDef1Quota != other.RemainingDef1Quota) return false;
      if (ComboHitCnt != other.ComboHitCnt) return false;
      if (ComboFramesRemained != other.ComboFramesRemained) return false;
      if (LastDamagedByUd != other.LastDamagedByUd) return false;
      if (LastDamagedByBulletTeamId != other.LastDamagedByBulletTeamId) return false;
      if (ActiveSkillId != other.ActiveSkillId) return false;
      if (ActiveSkillHit != other.ActiveSkillHit) return false;
      if (BtnAHoldingRdfCnt != other.BtnAHoldingRdfCnt) return false;
      if (BtnBHoldingRdfCnt != other.BtnBHoldingRdfCnt) return false;
      if (BtnCHoldingRdfCnt != other.BtnCHoldingRdfCnt) return false;
      if (BtnDHoldingRdfCnt != other.BtnDHoldingRdfCnt) return false;
      if (BtnEHoldingRdfCnt != other.BtnEHoldingRdfCnt) return false;
      if (ParryPrepRdfCntDown != other.ParryPrepRdfCntDown) return false;
      if (MpRegenRdfCountdown != other.MpRegenRdfCountdown) return false;
      if (FlyingRdfCountdown != other.FlyingRdfCountdown) return false;
      if (LockingOnUd != other.LockingOnUd) return false;
      if(!buffList_.Equals(other.buffList_)) return false;
      if(!debuffList_.Equals(other.debuffList_)) return false;
      if (!object.Equals(Atk1Magazine, other.Atk1Magazine)) return false;
      if (!object.Equals(SuperAtkGauge, other.SuperAtkGauge)) return false;
      if (!object.Equals(Inventory, other.Inventory)) return false;
      if(!bulletImmuneRecords_.Equals(other.bulletImmuneRecords_)) return false;
      if(!kinematicKnobs_.Equals(other.kinematicKnobs_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (X != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(X);
      if (Y != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Y);
      if (DirX != 0) hash ^= DirX.GetHashCode();
      if (DirY != 0) hash ^= DirY.GetHashCode();
      if (VelX != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(VelX);
      if (VelY != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(VelY);
      if (Speed != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Speed);
      if (SpeciesId != 0) hash ^= SpeciesId.GetHashCode();
      if (FramesToRecover != 0) hash ^= FramesToRecover.GetHashCode();
      if (FramesCapturedByInertia != 0) hash ^= FramesCapturedByInertia.GetHashCode();
      if (Hp != 0) hash ^= Hp.GetHashCode();
      if (Mp != 0) hash ^= Mp.GetHashCode();
      if (ChCollisionTeamId != 0) hash ^= ChCollisionTeamId.GetHashCode();
      if (ChState != 0) hash ^= ChState.GetHashCode();
      if (FramesInChState != 0) hash ^= FramesInChState.GetHashCode();
      if (JumpTriggered != false) hash ^= JumpTriggered.GetHashCode();
      if (OmitGravity != false) hash ^= OmitGravity.GetHashCode();
      if (ForcedCrouching != false) hash ^= ForcedCrouching.GetHashCode();
      if (SlipJumpTriggered != false) hash ^= SlipJumpTriggered.GetHashCode();
      if (PrimarilyOnSlippableHardPushback != false) hash ^= PrimarilyOnSlippableHardPushback.GetHashCode();
      if (PrevWasCrouching != false) hash ^= PrevWasCrouching.GetHashCode();
      if (NewBirthRdfCountdown != 0) hash ^= NewBirthRdfCountdown.GetHashCode();
      if (FramesInvinsible != 0) hash ^= FramesInvinsible.GetHashCode();
      if (JumpStarted != false) hash ^= JumpStarted.GetHashCode();
      if (FramesToStartJump != 0) hash ^= FramesToStartJump.GetHashCode();
      if (BulletTeamId != 0) hash ^= BulletTeamId.GetHashCode();
      if (RemainingAirJumpQuota != 0) hash ^= RemainingAirJumpQuota.GetHashCode();
      if (RemainingAirDashQuota != 0) hash ^= RemainingAirDashQuota.GetHashCode();
      if (DamagedHintRdfCountdown != 0) hash ^= DamagedHintRdfCountdown.GetHashCode();
      if (DamagedElementalAttrs != 0) hash ^= DamagedElementalAttrs.GetHashCode();
      if (RemainingDef1Quota != 0) hash ^= RemainingDef1Quota.GetHashCode();
      if (ComboHitCnt != 0) hash ^= ComboHitCnt.GetHashCode();
      if (ComboFramesRemained != 0) hash ^= ComboFramesRemained.GetHashCode();
      if (LastDamagedByUd != 0UL) hash ^= LastDamagedByUd.GetHashCode();
      if (LastDamagedByBulletTeamId != 0) hash ^= LastDamagedByBulletTeamId.GetHashCode();
      if (ActiveSkillId != 0) hash ^= ActiveSkillId.GetHashCode();
      if (ActiveSkillHit != 0) hash ^= ActiveSkillHit.GetHashCode();
      if (BtnAHoldingRdfCnt != 0) hash ^= BtnAHoldingRdfCnt.GetHashCode();
      if (BtnBHoldingRdfCnt != 0) hash ^= BtnBHoldingRdfCnt.GetHashCode();
      if (BtnCHoldingRdfCnt != 0) hash ^= BtnCHoldingRdfCnt.GetHashCode();
      if (BtnDHoldingRdfCnt != 0) hash ^= BtnDHoldingRdfCnt.GetHashCode();
      if (BtnEHoldingRdfCnt != 0) hash ^= BtnEHoldingRdfCnt.GetHashCode();
      if (ParryPrepRdfCntDown != 0) hash ^= ParryPrepRdfCntDown.GetHashCode();
      if (MpRegenRdfCountdown != 0) hash ^= MpRegenRdfCountdown.GetHashCode();
      if (FlyingRdfCountdown != 0) hash ^= FlyingRdfCountdown.GetHashCode();
      if (LockingOnUd != 0) hash ^= LockingOnUd.GetHashCode();
      hash ^= buffList_.GetHashCode();
      hash ^= debuffList_.GetHashCode();
      if (atk1Magazine_ != null) hash ^= Atk1Magazine.GetHashCode();
      if (superAtkGauge_ != null) hash ^= SuperAtkGauge.GetHashCode();
      if (inventory_ != null) hash ^= Inventory.GetHashCode();
      hash ^= bulletImmuneRecords_.GetHashCode();
      hash ^= kinematicKnobs_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (X != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(X);
      }
      if (Y != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Y);
      }
      if (DirX != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(DirX);
      }
      if (DirY != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(DirY);
      }
      if (VelX != 0F) {
        output.WriteRawTag(53);
        output.WriteFloat(VelX);
      }
      if (VelY != 0F) {
        output.WriteRawTag(61);
        output.WriteFloat(VelY);
      }
      if (Speed != 0F) {
        output.WriteRawTag(69);
        output.WriteFloat(Speed);
      }
      if (SpeciesId != 0) {
        output.WriteRawTag(72);
        output.WriteUInt32(SpeciesId);
      }
      if (FramesToRecover != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(FramesToRecover);
      }
      if (FramesCapturedByInertia != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(FramesCapturedByInertia);
      }
      if (Hp != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(Hp);
      }
      if (Mp != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(Mp);
      }
      if (ChCollisionTeamId != 0) {
        output.WriteRawTag(112);
        output.WriteInt32(ChCollisionTeamId);
      }
      if (ChState != 0) {
        output.WriteRawTag(120);
        output.WriteEnum((int) ChState);
      }
      if (FramesInChState != 0) {
        output.WriteRawTag(128, 1);
        output.WriteInt32(FramesInChState);
      }
      if (JumpTriggered != false) {
        output.WriteRawTag(144, 1);
        output.WriteBool(JumpTriggered);
      }
      if (OmitGravity != false) {
        output.WriteRawTag(176, 1);
        output.WriteBool(OmitGravity);
      }
      if (ForcedCrouching != false) {
        output.WriteRawTag(184, 1);
        output.WriteBool(ForcedCrouching);
      }
      if (SlipJumpTriggered != false) {
        output.WriteRawTag(192, 1);
        output.WriteBool(SlipJumpTriggered);
      }
      if (PrimarilyOnSlippableHardPushback != false) {
        output.WriteRawTag(200, 1);
        output.WriteBool(PrimarilyOnSlippableHardPushback);
      }
      if (PrevWasCrouching != false) {
        output.WriteRawTag(208, 1);
        output.WriteBool(PrevWasCrouching);
      }
      if (NewBirthRdfCountdown != 0) {
        output.WriteRawTag(216, 1);
        output.WriteInt32(NewBirthRdfCountdown);
      }
      if (FramesInvinsible != 0) {
        output.WriteRawTag(224, 1);
        output.WriteInt32(FramesInvinsible);
      }
      if (JumpStarted != false) {
        output.WriteRawTag(232, 1);
        output.WriteBool(JumpStarted);
      }
      if (FramesToStartJump != 0) {
        output.WriteRawTag(240, 1);
        output.WriteInt32(FramesToStartJump);
      }
      if (BulletTeamId != 0) {
        output.WriteRawTag(248, 1);
        output.WriteInt32(BulletTeamId);
      }
      if (RemainingAirJumpQuota != 0) {
        output.WriteRawTag(128, 2);
        output.WriteUInt32(RemainingAirJumpQuota);
      }
      if (RemainingAirDashQuota != 0) {
        output.WriteRawTag(136, 2);
        output.WriteUInt32(RemainingAirDashQuota);
      }
      if (DamagedHintRdfCountdown != 0) {
        output.WriteRawTag(144, 2);
        output.WriteInt32(DamagedHintRdfCountdown);
      }
      if (DamagedElementalAttrs != 0) {
        output.WriteRawTag(152, 2);
        output.WriteUInt32(DamagedElementalAttrs);
      }
      if (RemainingDef1Quota != 0) {
        output.WriteRawTag(160, 2);
        output.WriteUInt32(RemainingDef1Quota);
      }
      if (ComboHitCnt != 0) {
        output.WriteRawTag(168, 2);
        output.WriteUInt32(ComboHitCnt);
      }
      if (ComboFramesRemained != 0) {
        output.WriteRawTag(176, 2);
        output.WriteInt32(ComboFramesRemained);
      }
      if (LastDamagedByUd != 0UL) {
        output.WriteRawTag(184, 2);
        output.WriteUInt64(LastDamagedByUd);
      }
      if (LastDamagedByBulletTeamId != 0) {
        output.WriteRawTag(192, 2);
        output.WriteInt32(LastDamagedByBulletTeamId);
      }
      if (ActiveSkillId != 0) {
        output.WriteRawTag(200, 2);
        output.WriteUInt32(ActiveSkillId);
      }
      if (ActiveSkillHit != 0) {
        output.WriteRawTag(208, 2);
        output.WriteInt32(ActiveSkillHit);
      }
      if (BtnAHoldingRdfCnt != 0) {
        output.WriteRawTag(216, 2);
        output.WriteInt32(BtnAHoldingRdfCnt);
      }
      if (BtnBHoldingRdfCnt != 0) {
        output.WriteRawTag(224, 2);
        output.WriteInt32(BtnBHoldingRdfCnt);
      }
      if (BtnCHoldingRdfCnt != 0) {
        output.WriteRawTag(232, 2);
        output.WriteInt32(BtnCHoldingRdfCnt);
      }
      if (BtnDHoldingRdfCnt != 0) {
        output.WriteRawTag(240, 2);
        output.WriteInt32(BtnDHoldingRdfCnt);
      }
      if (BtnEHoldingRdfCnt != 0) {
        output.WriteRawTag(248, 2);
        output.WriteInt32(BtnEHoldingRdfCnt);
      }
      if (ParryPrepRdfCntDown != 0) {
        output.WriteRawTag(128, 3);
        output.WriteInt32(ParryPrepRdfCntDown);
      }
      if (MpRegenRdfCountdown != 0) {
        output.WriteRawTag(136, 3);
        output.WriteInt32(MpRegenRdfCountdown);
      }
      if (FlyingRdfCountdown != 0) {
        output.WriteRawTag(144, 3);
        output.WriteInt32(FlyingRdfCountdown);
      }
      if (LockingOnUd != 0) {
        output.WriteRawTag(152, 3);
        output.WriteUInt32(LockingOnUd);
      }
      buffList_.WriteTo(output, _repeated_buffList_codec);
      debuffList_.WriteTo(output, _repeated_debuffList_codec);
      if (atk1Magazine_ != null) {
        output.WriteRawTag(178, 3);
        output.WriteMessage(Atk1Magazine);
      }
      if (superAtkGauge_ != null) {
        output.WriteRawTag(186, 3);
        output.WriteMessage(SuperAtkGauge);
      }
      if (inventory_ != null) {
        output.WriteRawTag(194, 3);
        output.WriteMessage(Inventory);
      }
      bulletImmuneRecords_.WriteTo(output, _repeated_bulletImmuneRecords_codec);
      kinematicKnobs_.WriteTo(output, _repeated_kinematicKnobs_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (X != 0F) {
        size += 1 + 4;
      }
      if (Y != 0F) {
        size += 1 + 4;
      }
      if (DirX != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DirX);
      }
      if (DirY != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DirY);
      }
      if (VelX != 0F) {
        size += 1 + 4;
      }
      if (VelY != 0F) {
        size += 1 + 4;
      }
      if (Speed != 0F) {
        size += 1 + 4;
      }
      if (SpeciesId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SpeciesId);
      }
      if (FramesToRecover != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FramesToRecover);
      }
      if (FramesCapturedByInertia != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FramesCapturedByInertia);
      }
      if (Hp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Hp);
      }
      if (Mp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Mp);
      }
      if (ChCollisionTeamId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ChCollisionTeamId);
      }
      if (ChState != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ChState);
      }
      if (FramesInChState != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(FramesInChState);
      }
      if (JumpTriggered != false) {
        size += 2 + 1;
      }
      if (OmitGravity != false) {
        size += 2 + 1;
      }
      if (ForcedCrouching != false) {
        size += 2 + 1;
      }
      if (SlipJumpTriggered != false) {
        size += 2 + 1;
      }
      if (PrimarilyOnSlippableHardPushback != false) {
        size += 2 + 1;
      }
      if (PrevWasCrouching != false) {
        size += 2 + 1;
      }
      if (NewBirthRdfCountdown != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(NewBirthRdfCountdown);
      }
      if (FramesInvinsible != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(FramesInvinsible);
      }
      if (JumpStarted != false) {
        size += 2 + 1;
      }
      if (FramesToStartJump != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(FramesToStartJump);
      }
      if (BulletTeamId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(BulletTeamId);
      }
      if (RemainingAirJumpQuota != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(RemainingAirJumpQuota);
      }
      if (RemainingAirDashQuota != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(RemainingAirDashQuota);
      }
      if (DamagedHintRdfCountdown != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(DamagedHintRdfCountdown);
      }
      if (DamagedElementalAttrs != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(DamagedElementalAttrs);
      }
      if (RemainingDef1Quota != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(RemainingDef1Quota);
      }
      if (ComboHitCnt != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(ComboHitCnt);
      }
      if (ComboFramesRemained != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ComboFramesRemained);
      }
      if (LastDamagedByUd != 0UL) {
        size += 2 + pb::CodedOutputStream.ComputeUInt64Size(LastDamagedByUd);
      }
      if (LastDamagedByBulletTeamId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(LastDamagedByBulletTeamId);
      }
      if (ActiveSkillId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(ActiveSkillId);
      }
      if (ActiveSkillHit != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ActiveSkillHit);
      }
      if (BtnAHoldingRdfCnt != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(BtnAHoldingRdfCnt);
      }
      if (BtnBHoldingRdfCnt != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(BtnBHoldingRdfCnt);
      }
      if (BtnCHoldingRdfCnt != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(BtnCHoldingRdfCnt);
      }
      if (BtnDHoldingRdfCnt != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(BtnDHoldingRdfCnt);
      }
      if (BtnEHoldingRdfCnt != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(BtnEHoldingRdfCnt);
      }
      if (ParryPrepRdfCntDown != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ParryPrepRdfCntDown);
      }
      if (MpRegenRdfCountdown != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(MpRegenRdfCountdown);
      }
      if (FlyingRdfCountdown != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(FlyingRdfCountdown);
      }
      if (LockingOnUd != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(LockingOnUd);
      }
      size += buffList_.CalculateSize(_repeated_buffList_codec);
      size += debuffList_.CalculateSize(_repeated_debuffList_codec);
      if (atk1Magazine_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Atk1Magazine);
      }
      if (superAtkGauge_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(SuperAtkGauge);
      }
      if (inventory_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Inventory);
      }
      size += bulletImmuneRecords_.CalculateSize(_repeated_bulletImmuneRecords_codec);
      size += kinematicKnobs_.CalculateSize(_repeated_kinematicKnobs_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CharacterDownsync other) {
      if (other == null) {
        return;
      }
      if (other.X != 0F) {
        X = other.X;
      }
      if (other.Y != 0F) {
        Y = other.Y;
      }
      if (other.DirX != 0) {
        DirX = other.DirX;
      }
      if (other.DirY != 0) {
        DirY = other.DirY;
      }
      if (other.VelX != 0F) {
        VelX = other.VelX;
      }
      if (other.VelY != 0F) {
        VelY = other.VelY;
      }
      if (other.Speed != 0F) {
        Speed = other.Speed;
      }
      if (other.SpeciesId != 0) {
        SpeciesId = other.SpeciesId;
      }
      if (other.FramesToRecover != 0) {
        FramesToRecover = other.FramesToRecover;
      }
      if (other.FramesCapturedByInertia != 0) {
        FramesCapturedByInertia = other.FramesCapturedByInertia;
      }
      if (other.Hp != 0) {
        Hp = other.Hp;
      }
      if (other.Mp != 0) {
        Mp = other.Mp;
      }
      if (other.ChCollisionTeamId != 0) {
        ChCollisionTeamId = other.ChCollisionTeamId;
      }
      if (other.ChState != 0) {
        ChState = other.ChState;
      }
      if (other.FramesInChState != 0) {
        FramesInChState = other.FramesInChState;
      }
      if (other.JumpTriggered != false) {
        JumpTriggered = other.JumpTriggered;
      }
      if (other.OmitGravity != false) {
        OmitGravity = other.OmitGravity;
      }
      if (other.ForcedCrouching != false) {
        ForcedCrouching = other.ForcedCrouching;
      }
      if (other.SlipJumpTriggered != false) {
        SlipJumpTriggered = other.SlipJumpTriggered;
      }
      if (other.PrimarilyOnSlippableHardPushback != false) {
        PrimarilyOnSlippableHardPushback = other.PrimarilyOnSlippableHardPushback;
      }
      if (other.PrevWasCrouching != false) {
        PrevWasCrouching = other.PrevWasCrouching;
      }
      if (other.NewBirthRdfCountdown != 0) {
        NewBirthRdfCountdown = other.NewBirthRdfCountdown;
      }
      if (other.FramesInvinsible != 0) {
        FramesInvinsible = other.FramesInvinsible;
      }
      if (other.JumpStarted != false) {
        JumpStarted = other.JumpStarted;
      }
      if (other.FramesToStartJump != 0) {
        FramesToStartJump = other.FramesToStartJump;
      }
      if (other.BulletTeamId != 0) {
        BulletTeamId = other.BulletTeamId;
      }
      if (other.RemainingAirJumpQuota != 0) {
        RemainingAirJumpQuota = other.RemainingAirJumpQuota;
      }
      if (other.RemainingAirDashQuota != 0) {
        RemainingAirDashQuota = other.RemainingAirDashQuota;
      }
      if (other.DamagedHintRdfCountdown != 0) {
        DamagedHintRdfCountdown = other.DamagedHintRdfCountdown;
      }
      if (other.DamagedElementalAttrs != 0) {
        DamagedElementalAttrs = other.DamagedElementalAttrs;
      }
      if (other.RemainingDef1Quota != 0) {
        RemainingDef1Quota = other.RemainingDef1Quota;
      }
      if (other.ComboHitCnt != 0) {
        ComboHitCnt = other.ComboHitCnt;
      }
      if (other.ComboFramesRemained != 0) {
        ComboFramesRemained = other.ComboFramesRemained;
      }
      if (other.LastDamagedByUd != 0UL) {
        LastDamagedByUd = other.LastDamagedByUd;
      }
      if (other.LastDamagedByBulletTeamId != 0) {
        LastDamagedByBulletTeamId = other.LastDamagedByBulletTeamId;
      }
      if (other.ActiveSkillId != 0) {
        ActiveSkillId = other.ActiveSkillId;
      }
      if (other.ActiveSkillHit != 0) {
        ActiveSkillHit = other.ActiveSkillHit;
      }
      if (other.BtnAHoldingRdfCnt != 0) {
        BtnAHoldingRdfCnt = other.BtnAHoldingRdfCnt;
      }
      if (other.BtnBHoldingRdfCnt != 0) {
        BtnBHoldingRdfCnt = other.BtnBHoldingRdfCnt;
      }
      if (other.BtnCHoldingRdfCnt != 0) {
        BtnCHoldingRdfCnt = other.BtnCHoldingRdfCnt;
      }
      if (other.BtnDHoldingRdfCnt != 0) {
        BtnDHoldingRdfCnt = other.BtnDHoldingRdfCnt;
      }
      if (other.BtnEHoldingRdfCnt != 0) {
        BtnEHoldingRdfCnt = other.BtnEHoldingRdfCnt;
      }
      if (other.ParryPrepRdfCntDown != 0) {
        ParryPrepRdfCntDown = other.ParryPrepRdfCntDown;
      }
      if (other.MpRegenRdfCountdown != 0) {
        MpRegenRdfCountdown = other.MpRegenRdfCountdown;
      }
      if (other.FlyingRdfCountdown != 0) {
        FlyingRdfCountdown = other.FlyingRdfCountdown;
      }
      if (other.LockingOnUd != 0) {
        LockingOnUd = other.LockingOnUd;
      }
      buffList_.Add(other.buffList_);
      debuffList_.Add(other.debuffList_);
      if (other.atk1Magazine_ != null) {
        if (atk1Magazine_ == null) {
          Atk1Magazine = new global::jtshared.InventorySlot();
        }
        Atk1Magazine.MergeFrom(other.Atk1Magazine);
      }
      if (other.superAtkGauge_ != null) {
        if (superAtkGauge_ == null) {
          SuperAtkGauge = new global::jtshared.InventorySlot();
        }
        SuperAtkGauge.MergeFrom(other.SuperAtkGauge);
      }
      if (other.inventory_ != null) {
        if (inventory_ == null) {
          Inventory = new global::jtshared.Inventory();
        }
        Inventory.MergeFrom(other.Inventory);
      }
      bulletImmuneRecords_.Add(other.bulletImmuneRecords_);
      kinematicKnobs_.Add(other.kinematicKnobs_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 21: {
            X = input.ReadFloat();
            break;
          }
          case 29: {
            Y = input.ReadFloat();
            break;
          }
          case 32: {
            DirX = input.ReadInt32();
            break;
          }
          case 40: {
            DirY = input.ReadInt32();
            break;
          }
          case 53: {
            VelX = input.ReadFloat();
            break;
          }
          case 61: {
            VelY = input.ReadFloat();
            break;
          }
          case 69: {
            Speed = input.ReadFloat();
            break;
          }
          case 72: {
            SpeciesId = input.ReadUInt32();
            break;
          }
          case 80: {
            FramesToRecover = input.ReadInt32();
            break;
          }
          case 88: {
            FramesCapturedByInertia = input.ReadInt32();
            break;
          }
          case 96: {
            Hp = input.ReadInt32();
            break;
          }
          case 104: {
            Mp = input.ReadInt32();
            break;
          }
          case 112: {
            ChCollisionTeamId = input.ReadInt32();
            break;
          }
          case 120: {
            ChState = (global::jtshared.CharacterState) input.ReadEnum();
            break;
          }
          case 128: {
            FramesInChState = input.ReadInt32();
            break;
          }
          case 144: {
            JumpTriggered = input.ReadBool();
            break;
          }
          case 176: {
            OmitGravity = input.ReadBool();
            break;
          }
          case 184: {
            ForcedCrouching = input.ReadBool();
            break;
          }
          case 192: {
            SlipJumpTriggered = input.ReadBool();
            break;
          }
          case 200: {
            PrimarilyOnSlippableHardPushback = input.ReadBool();
            break;
          }
          case 208: {
            PrevWasCrouching = input.ReadBool();
            break;
          }
          case 216: {
            NewBirthRdfCountdown = input.ReadInt32();
            break;
          }
          case 224: {
            FramesInvinsible = input.ReadInt32();
            break;
          }
          case 232: {
            JumpStarted = input.ReadBool();
            break;
          }
          case 240: {
            FramesToStartJump = input.ReadInt32();
            break;
          }
          case 248: {
            BulletTeamId = input.ReadInt32();
            break;
          }
          case 256: {
            RemainingAirJumpQuota = input.ReadUInt32();
            break;
          }
          case 264: {
            RemainingAirDashQuota = input.ReadUInt32();
            break;
          }
          case 272: {
            DamagedHintRdfCountdown = input.ReadInt32();
            break;
          }
          case 280: {
            DamagedElementalAttrs = input.ReadUInt32();
            break;
          }
          case 288: {
            RemainingDef1Quota = input.ReadUInt32();
            break;
          }
          case 296: {
            ComboHitCnt = input.ReadUInt32();
            break;
          }
          case 304: {
            ComboFramesRemained = input.ReadInt32();
            break;
          }
          case 312: {
            LastDamagedByUd = input.ReadUInt64();
            break;
          }
          case 320: {
            LastDamagedByBulletTeamId = input.ReadInt32();
            break;
          }
          case 328: {
            ActiveSkillId = input.ReadUInt32();
            break;
          }
          case 336: {
            ActiveSkillHit = input.ReadInt32();
            break;
          }
          case 344: {
            BtnAHoldingRdfCnt = input.ReadInt32();
            break;
          }
          case 352: {
            BtnBHoldingRdfCnt = input.ReadInt32();
            break;
          }
          case 360: {
            BtnCHoldingRdfCnt = input.ReadInt32();
            break;
          }
          case 368: {
            BtnDHoldingRdfCnt = input.ReadInt32();
            break;
          }
          case 376: {
            BtnEHoldingRdfCnt = input.ReadInt32();
            break;
          }
          case 384: {
            ParryPrepRdfCntDown = input.ReadInt32();
            break;
          }
          case 392: {
            MpRegenRdfCountdown = input.ReadInt32();
            break;
          }
          case 400: {
            FlyingRdfCountdown = input.ReadInt32();
            break;
          }
          case 408: {
            LockingOnUd = input.ReadUInt32();
            break;
          }
          case 418: {
            buffList_.AddEntriesFrom(input, _repeated_buffList_codec);
            break;
          }
          case 426: {
            debuffList_.AddEntriesFrom(input, _repeated_debuffList_codec);
            break;
          }
          case 434: {
            if (atk1Magazine_ == null) {
              Atk1Magazine = new global::jtshared.InventorySlot();
            }
            input.ReadMessage(Atk1Magazine);
            break;
          }
          case 442: {
            if (superAtkGauge_ == null) {
              SuperAtkGauge = new global::jtshared.InventorySlot();
            }
            input.ReadMessage(SuperAtkGauge);
            break;
          }
          case 450: {
            if (inventory_ == null) {
              Inventory = new global::jtshared.Inventory();
            }
            input.ReadMessage(Inventory);
            break;
          }
          case 458: {
            bulletImmuneRecords_.AddEntriesFrom(input, _repeated_bulletImmuneRecords_codec);
            break;
          }
          case 466:
          case 469: {
            kinematicKnobs_.AddEntriesFrom(input, _repeated_kinematicKnobs_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class PlayerCharacterDownsync : pb::IMessage<PlayerCharacterDownsync> {
    private static readonly pb::MessageParser<PlayerCharacterDownsync> _parser = new pb::MessageParser<PlayerCharacterDownsync>(() => new PlayerCharacterDownsync());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerCharacterDownsync> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::jtshared.SerializableDataReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerCharacterDownsync() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerCharacterDownsync(PlayerCharacterDownsync other) : this() {
      chd_ = other.chd_ != null ? other.chd_.Clone() : null;
      joinIndex_ = other.joinIndex_;
      beatsCnt_ = other.beatsCnt_;
      beatenCnt_ = other.beatenCnt_;
      revivalX_ = other.revivalX_;
      revivalY_ = other.revivalY_;
      revivalDirX_ = other.revivalDirX_;
      revivalDirY_ = other.revivalDirY_;
      notEnoughMpHintRdfCountdown_ = other.notEnoughMpHintRdfCountdown_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerCharacterDownsync Clone() {
      return new PlayerCharacterDownsync(this);
    }

    /// <summary>Field number for the "chd" field.</summary>
    public const int ChdFieldNumber = 1;
    private global::jtshared.CharacterDownsync chd_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::jtshared.CharacterDownsync Chd {
      get { return chd_; }
      set {
        chd_ = value;
      }
    }

    /// <summary>Field number for the "join_index" field.</summary>
    public const int JoinIndexFieldNumber = 2;
    private uint joinIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint JoinIndex {
      get { return joinIndex_; }
      set {
        joinIndex_ = value;
      }
    }

    /// <summary>Field number for the "beats_cnt" field.</summary>
    public const int BeatsCntFieldNumber = 3;
    private uint beatsCnt_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint BeatsCnt {
      get { return beatsCnt_; }
      set {
        beatsCnt_ = value;
      }
    }

    /// <summary>Field number for the "beaten_cnt" field.</summary>
    public const int BeatenCntFieldNumber = 4;
    private uint beatenCnt_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint BeatenCnt {
      get { return beatenCnt_; }
      set {
        beatenCnt_ = value;
      }
    }

    /// <summary>Field number for the "revival_x" field.</summary>
    public const int RevivalXFieldNumber = 5;
    private float revivalX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float RevivalX {
      get { return revivalX_; }
      set {
        revivalX_ = value;
      }
    }

    /// <summary>Field number for the "revival_y" field.</summary>
    public const int RevivalYFieldNumber = 6;
    private float revivalY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float RevivalY {
      get { return revivalY_; }
      set {
        revivalY_ = value;
      }
    }

    /// <summary>Field number for the "revival_dir_x" field.</summary>
    public const int RevivalDirXFieldNumber = 7;
    private int revivalDirX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RevivalDirX {
      get { return revivalDirX_; }
      set {
        revivalDirX_ = value;
      }
    }

    /// <summary>Field number for the "revival_dir_y" field.</summary>
    public const int RevivalDirYFieldNumber = 8;
    private int revivalDirY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RevivalDirY {
      get { return revivalDirY_; }
      set {
        revivalDirY_ = value;
      }
    }

    /// <summary>Field number for the "not_enough_mp_hint_rdf_countdown" field.</summary>
    public const int NotEnoughMpHintRdfCountdownFieldNumber = 9;
    private int notEnoughMpHintRdfCountdown_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NotEnoughMpHintRdfCountdown {
      get { return notEnoughMpHintRdfCountdown_; }
      set {
        notEnoughMpHintRdfCountdown_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayerCharacterDownsync);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayerCharacterDownsync other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Chd, other.Chd)) return false;
      if (JoinIndex != other.JoinIndex) return false;
      if (BeatsCnt != other.BeatsCnt) return false;
      if (BeatenCnt != other.BeatenCnt) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(RevivalX, other.RevivalX)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(RevivalY, other.RevivalY)) return false;
      if (RevivalDirX != other.RevivalDirX) return false;
      if (RevivalDirY != other.RevivalDirY) return false;
      if (NotEnoughMpHintRdfCountdown != other.NotEnoughMpHintRdfCountdown) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (chd_ != null) hash ^= Chd.GetHashCode();
      if (JoinIndex != 0) hash ^= JoinIndex.GetHashCode();
      if (BeatsCnt != 0) hash ^= BeatsCnt.GetHashCode();
      if (BeatenCnt != 0) hash ^= BeatenCnt.GetHashCode();
      if (RevivalX != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(RevivalX);
      if (RevivalY != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(RevivalY);
      if (RevivalDirX != 0) hash ^= RevivalDirX.GetHashCode();
      if (RevivalDirY != 0) hash ^= RevivalDirY.GetHashCode();
      if (NotEnoughMpHintRdfCountdown != 0) hash ^= NotEnoughMpHintRdfCountdown.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (chd_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Chd);
      }
      if (JoinIndex != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(JoinIndex);
      }
      if (BeatsCnt != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(BeatsCnt);
      }
      if (BeatenCnt != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(BeatenCnt);
      }
      if (RevivalX != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(RevivalX);
      }
      if (RevivalY != 0F) {
        output.WriteRawTag(53);
        output.WriteFloat(RevivalY);
      }
      if (RevivalDirX != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(RevivalDirX);
      }
      if (RevivalDirY != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(RevivalDirY);
      }
      if (NotEnoughMpHintRdfCountdown != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(NotEnoughMpHintRdfCountdown);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (chd_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Chd);
      }
      if (JoinIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(JoinIndex);
      }
      if (BeatsCnt != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BeatsCnt);
      }
      if (BeatenCnt != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BeatenCnt);
      }
      if (RevivalX != 0F) {
        size += 1 + 4;
      }
      if (RevivalY != 0F) {
        size += 1 + 4;
      }
      if (RevivalDirX != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RevivalDirX);
      }
      if (RevivalDirY != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RevivalDirY);
      }
      if (NotEnoughMpHintRdfCountdown != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NotEnoughMpHintRdfCountdown);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayerCharacterDownsync other) {
      if (other == null) {
        return;
      }
      if (other.chd_ != null) {
        if (chd_ == null) {
          Chd = new global::jtshared.CharacterDownsync();
        }
        Chd.MergeFrom(other.Chd);
      }
      if (other.JoinIndex != 0) {
        JoinIndex = other.JoinIndex;
      }
      if (other.BeatsCnt != 0) {
        BeatsCnt = other.BeatsCnt;
      }
      if (other.BeatenCnt != 0) {
        BeatenCnt = other.BeatenCnt;
      }
      if (other.RevivalX != 0F) {
        RevivalX = other.RevivalX;
      }
      if (other.RevivalY != 0F) {
        RevivalY = other.RevivalY;
      }
      if (other.RevivalDirX != 0) {
        RevivalDirX = other.RevivalDirX;
      }
      if (other.RevivalDirY != 0) {
        RevivalDirY = other.RevivalDirY;
      }
      if (other.NotEnoughMpHintRdfCountdown != 0) {
        NotEnoughMpHintRdfCountdown = other.NotEnoughMpHintRdfCountdown;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (chd_ == null) {
              Chd = new global::jtshared.CharacterDownsync();
            }
            input.ReadMessage(Chd);
            break;
          }
          case 16: {
            JoinIndex = input.ReadUInt32();
            break;
          }
          case 24: {
            BeatsCnt = input.ReadUInt32();
            break;
          }
          case 32: {
            BeatenCnt = input.ReadUInt32();
            break;
          }
          case 45: {
            RevivalX = input.ReadFloat();
            break;
          }
          case 53: {
            RevivalY = input.ReadFloat();
            break;
          }
          case 56: {
            RevivalDirX = input.ReadInt32();
            break;
          }
          case 64: {
            RevivalDirY = input.ReadInt32();
            break;
          }
          case 72: {
            NotEnoughMpHintRdfCountdown = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class NpcCharacterDownsync : pb::IMessage<NpcCharacterDownsync> {
    private static readonly pb::MessageParser<NpcCharacterDownsync> _parser = new pb::MessageParser<NpcCharacterDownsync>(() => new NpcCharacterDownsync());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NpcCharacterDownsync> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::jtshared.SerializableDataReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NpcCharacterDownsync() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NpcCharacterDownsync(NpcCharacterDownsync other) : this() {
      chd_ = other.chd_ != null ? other.chd_.Clone() : null;
      id_ = other.id_;
      activatedRdfId_ = other.activatedRdfId_;
      cachedCueCmd_ = other.cachedCueCmd_;
      waivingPatrolCueId_ = other.waivingPatrolCueId_;
      goalAsNpc_ = other.goalAsNpc_;
      publishingEvtMaskUponKilled_ = other.publishingEvtMaskUponKilled_;
      publishingToTriggerIdUponKilled_ = other.publishingToTriggerIdUponKilled_;
      subscribesToTriggerId_ = other.subscribesToTriggerId_;
      capturedByPatrolCue_ = other.capturedByPatrolCue_;
      framesInPatrolCue_ = other.framesInPatrolCue_;
      killedToDropConsumableSpeciesId_ = other.killedToDropConsumableSpeciesId_;
      killedToDropBuffSpeciesId_ = other.killedToDropBuffSpeciesId_;
      killedToDropPickupSkillId_ = other.killedToDropPickupSkillId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NpcCharacterDownsync Clone() {
      return new NpcCharacterDownsync(this);
    }

    /// <summary>Field number for the "chd" field.</summary>
    public const int ChdFieldNumber = 1;
    private global::jtshared.CharacterDownsync chd_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::jtshared.CharacterDownsync Chd {
      get { return chd_; }
      set {
        chd_ = value;
      }
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 2;
    private uint id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "activated_rdf_id" field.</summary>
    public const int ActivatedRdfIdFieldNumber = 3;
    private int activatedRdfId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ActivatedRdfId {
      get { return activatedRdfId_; }
      set {
        activatedRdfId_ = value;
      }
    }

    /// <summary>Field number for the "cached_cue_cmd" field.</summary>
    public const int CachedCueCmdFieldNumber = 4;
    private ulong cachedCueCmd_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong CachedCueCmd {
      get { return cachedCueCmd_; }
      set {
        cachedCueCmd_ = value;
      }
    }

    /// <summary>Field number for the "waiving_patrol_cue_id" field.</summary>
    public const int WaivingPatrolCueIdFieldNumber = 5;
    private int waivingPatrolCueId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int WaivingPatrolCueId {
      get { return waivingPatrolCueId_; }
      set {
        waivingPatrolCueId_ = value;
      }
    }

    /// <summary>Field number for the "goal_as_npc" field.</summary>
    public const int GoalAsNpcFieldNumber = 6;
    private global::jtshared.NpcGoal goalAsNpc_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::jtshared.NpcGoal GoalAsNpc {
      get { return goalAsNpc_; }
      set {
        goalAsNpc_ = value;
      }
    }

    /// <summary>Field number for the "publishing_evt_mask_upon_killed" field.</summary>
    public const int PublishingEvtMaskUponKilledFieldNumber = 7;
    private ulong publishingEvtMaskUponKilled_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong PublishingEvtMaskUponKilled {
      get { return publishingEvtMaskUponKilled_; }
      set {
        publishingEvtMaskUponKilled_ = value;
      }
    }

    /// <summary>Field number for the "publishing_to_trigger_id_upon_killed" field.</summary>
    public const int PublishingToTriggerIdUponKilledFieldNumber = 8;
    private uint publishingToTriggerIdUponKilled_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PublishingToTriggerIdUponKilled {
      get { return publishingToTriggerIdUponKilled_; }
      set {
        publishingToTriggerIdUponKilled_ = value;
      }
    }

    /// <summary>Field number for the "subscribes_to_trigger_id" field.</summary>
    public const int SubscribesToTriggerIdFieldNumber = 9;
    private uint subscribesToTriggerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SubscribesToTriggerId {
      get { return subscribesToTriggerId_; }
      set {
        subscribesToTriggerId_ = value;
      }
    }

    /// <summary>Field number for the "captured_by_patrol_cue" field.</summary>
    public const int CapturedByPatrolCueFieldNumber = 10;
    private bool capturedByPatrolCue_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool CapturedByPatrolCue {
      get { return capturedByPatrolCue_; }
      set {
        capturedByPatrolCue_ = value;
      }
    }

    /// <summary>Field number for the "frames_in_patrol_cue" field.</summary>
    public const int FramesInPatrolCueFieldNumber = 11;
    private int framesInPatrolCue_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FramesInPatrolCue {
      get { return framesInPatrolCue_; }
      set {
        framesInPatrolCue_ = value;
      }
    }

    /// <summary>Field number for the "killed_to_drop_consumable_species_id" field.</summary>
    public const int KilledToDropConsumableSpeciesIdFieldNumber = 12;
    private uint killedToDropConsumableSpeciesId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint KilledToDropConsumableSpeciesId {
      get { return killedToDropConsumableSpeciesId_; }
      set {
        killedToDropConsumableSpeciesId_ = value;
      }
    }

    /// <summary>Field number for the "killed_to_drop_buff_species_id" field.</summary>
    public const int KilledToDropBuffSpeciesIdFieldNumber = 13;
    private uint killedToDropBuffSpeciesId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint KilledToDropBuffSpeciesId {
      get { return killedToDropBuffSpeciesId_; }
      set {
        killedToDropBuffSpeciesId_ = value;
      }
    }

    /// <summary>Field number for the "killed_to_drop_pickup_skill_id" field.</summary>
    public const int KilledToDropPickupSkillIdFieldNumber = 14;
    private uint killedToDropPickupSkillId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint KilledToDropPickupSkillId {
      get { return killedToDropPickupSkillId_; }
      set {
        killedToDropPickupSkillId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NpcCharacterDownsync);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NpcCharacterDownsync other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Chd, other.Chd)) return false;
      if (Id != other.Id) return false;
      if (ActivatedRdfId != other.ActivatedRdfId) return false;
      if (CachedCueCmd != other.CachedCueCmd) return false;
      if (WaivingPatrolCueId != other.WaivingPatrolCueId) return false;
      if (GoalAsNpc != other.GoalAsNpc) return false;
      if (PublishingEvtMaskUponKilled != other.PublishingEvtMaskUponKilled) return false;
      if (PublishingToTriggerIdUponKilled != other.PublishingToTriggerIdUponKilled) return false;
      if (SubscribesToTriggerId != other.SubscribesToTriggerId) return false;
      if (CapturedByPatrolCue != other.CapturedByPatrolCue) return false;
      if (FramesInPatrolCue != other.FramesInPatrolCue) return false;
      if (KilledToDropConsumableSpeciesId != other.KilledToDropConsumableSpeciesId) return false;
      if (KilledToDropBuffSpeciesId != other.KilledToDropBuffSpeciesId) return false;
      if (KilledToDropPickupSkillId != other.KilledToDropPickupSkillId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (chd_ != null) hash ^= Chd.GetHashCode();
      if (Id != 0) hash ^= Id.GetHashCode();
      if (ActivatedRdfId != 0) hash ^= ActivatedRdfId.GetHashCode();
      if (CachedCueCmd != 0UL) hash ^= CachedCueCmd.GetHashCode();
      if (WaivingPatrolCueId != 0) hash ^= WaivingPatrolCueId.GetHashCode();
      if (GoalAsNpc != 0) hash ^= GoalAsNpc.GetHashCode();
      if (PublishingEvtMaskUponKilled != 0UL) hash ^= PublishingEvtMaskUponKilled.GetHashCode();
      if (PublishingToTriggerIdUponKilled != 0) hash ^= PublishingToTriggerIdUponKilled.GetHashCode();
      if (SubscribesToTriggerId != 0) hash ^= SubscribesToTriggerId.GetHashCode();
      if (CapturedByPatrolCue != false) hash ^= CapturedByPatrolCue.GetHashCode();
      if (FramesInPatrolCue != 0) hash ^= FramesInPatrolCue.GetHashCode();
      if (KilledToDropConsumableSpeciesId != 0) hash ^= KilledToDropConsumableSpeciesId.GetHashCode();
      if (KilledToDropBuffSpeciesId != 0) hash ^= KilledToDropBuffSpeciesId.GetHashCode();
      if (KilledToDropPickupSkillId != 0) hash ^= KilledToDropPickupSkillId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (chd_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Chd);
      }
      if (Id != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Id);
      }
      if (ActivatedRdfId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(ActivatedRdfId);
      }
      if (CachedCueCmd != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(CachedCueCmd);
      }
      if (WaivingPatrolCueId != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(WaivingPatrolCueId);
      }
      if (GoalAsNpc != 0) {
        output.WriteRawTag(48);
        output.WriteEnum((int) GoalAsNpc);
      }
      if (PublishingEvtMaskUponKilled != 0UL) {
        output.WriteRawTag(56);
        output.WriteUInt64(PublishingEvtMaskUponKilled);
      }
      if (PublishingToTriggerIdUponKilled != 0) {
        output.WriteRawTag(64);
        output.WriteUInt32(PublishingToTriggerIdUponKilled);
      }
      if (SubscribesToTriggerId != 0) {
        output.WriteRawTag(72);
        output.WriteUInt32(SubscribesToTriggerId);
      }
      if (CapturedByPatrolCue != false) {
        output.WriteRawTag(80);
        output.WriteBool(CapturedByPatrolCue);
      }
      if (FramesInPatrolCue != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(FramesInPatrolCue);
      }
      if (KilledToDropConsumableSpeciesId != 0) {
        output.WriteRawTag(96);
        output.WriteUInt32(KilledToDropConsumableSpeciesId);
      }
      if (KilledToDropBuffSpeciesId != 0) {
        output.WriteRawTag(104);
        output.WriteUInt32(KilledToDropBuffSpeciesId);
      }
      if (KilledToDropPickupSkillId != 0) {
        output.WriteRawTag(112);
        output.WriteUInt32(KilledToDropPickupSkillId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (chd_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Chd);
      }
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
      }
      if (ActivatedRdfId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ActivatedRdfId);
      }
      if (CachedCueCmd != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(CachedCueCmd);
      }
      if (WaivingPatrolCueId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(WaivingPatrolCueId);
      }
      if (GoalAsNpc != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) GoalAsNpc);
      }
      if (PublishingEvtMaskUponKilled != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(PublishingEvtMaskUponKilled);
      }
      if (PublishingToTriggerIdUponKilled != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PublishingToTriggerIdUponKilled);
      }
      if (SubscribesToTriggerId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SubscribesToTriggerId);
      }
      if (CapturedByPatrolCue != false) {
        size += 1 + 1;
      }
      if (FramesInPatrolCue != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FramesInPatrolCue);
      }
      if (KilledToDropConsumableSpeciesId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(KilledToDropConsumableSpeciesId);
      }
      if (KilledToDropBuffSpeciesId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(KilledToDropBuffSpeciesId);
      }
      if (KilledToDropPickupSkillId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(KilledToDropPickupSkillId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NpcCharacterDownsync other) {
      if (other == null) {
        return;
      }
      if (other.chd_ != null) {
        if (chd_ == null) {
          Chd = new global::jtshared.CharacterDownsync();
        }
        Chd.MergeFrom(other.Chd);
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.ActivatedRdfId != 0) {
        ActivatedRdfId = other.ActivatedRdfId;
      }
      if (other.CachedCueCmd != 0UL) {
        CachedCueCmd = other.CachedCueCmd;
      }
      if (other.WaivingPatrolCueId != 0) {
        WaivingPatrolCueId = other.WaivingPatrolCueId;
      }
      if (other.GoalAsNpc != 0) {
        GoalAsNpc = other.GoalAsNpc;
      }
      if (other.PublishingEvtMaskUponKilled != 0UL) {
        PublishingEvtMaskUponKilled = other.PublishingEvtMaskUponKilled;
      }
      if (other.PublishingToTriggerIdUponKilled != 0) {
        PublishingToTriggerIdUponKilled = other.PublishingToTriggerIdUponKilled;
      }
      if (other.SubscribesToTriggerId != 0) {
        SubscribesToTriggerId = other.SubscribesToTriggerId;
      }
      if (other.CapturedByPatrolCue != false) {
        CapturedByPatrolCue = other.CapturedByPatrolCue;
      }
      if (other.FramesInPatrolCue != 0) {
        FramesInPatrolCue = other.FramesInPatrolCue;
      }
      if (other.KilledToDropConsumableSpeciesId != 0) {
        KilledToDropConsumableSpeciesId = other.KilledToDropConsumableSpeciesId;
      }
      if (other.KilledToDropBuffSpeciesId != 0) {
        KilledToDropBuffSpeciesId = other.KilledToDropBuffSpeciesId;
      }
      if (other.KilledToDropPickupSkillId != 0) {
        KilledToDropPickupSkillId = other.KilledToDropPickupSkillId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (chd_ == null) {
              Chd = new global::jtshared.CharacterDownsync();
            }
            input.ReadMessage(Chd);
            break;
          }
          case 16: {
            Id = input.ReadUInt32();
            break;
          }
          case 24: {
            ActivatedRdfId = input.ReadInt32();
            break;
          }
          case 32: {
            CachedCueCmd = input.ReadUInt64();
            break;
          }
          case 40: {
            WaivingPatrolCueId = input.ReadInt32();
            break;
          }
          case 48: {
            GoalAsNpc = (global::jtshared.NpcGoal) input.ReadEnum();
            break;
          }
          case 56: {
            PublishingEvtMaskUponKilled = input.ReadUInt64();
            break;
          }
          case 64: {
            PublishingToTriggerIdUponKilled = input.ReadUInt32();
            break;
          }
          case 72: {
            SubscribesToTriggerId = input.ReadUInt32();
            break;
          }
          case 80: {
            CapturedByPatrolCue = input.ReadBool();
            break;
          }
          case 88: {
            FramesInPatrolCue = input.ReadInt32();
            break;
          }
          case 96: {
            KilledToDropConsumableSpeciesId = input.ReadUInt32();
            break;
          }
          case 104: {
            KilledToDropBuffSpeciesId = input.ReadUInt32();
            break;
          }
          case 112: {
            KilledToDropPickupSkillId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class InputFrameDecoded : pb::IMessage<InputFrameDecoded> {
    private static readonly pb::MessageParser<InputFrameDecoded> _parser = new pb::MessageParser<InputFrameDecoded>(() => new InputFrameDecoded());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InputFrameDecoded> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::jtshared.SerializableDataReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InputFrameDecoded() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InputFrameDecoded(InputFrameDecoded other) : this() {
      dx_ = other.dx_;
      dy_ = other.dy_;
      btnALevel_ = other.btnALevel_;
      btnBLevel_ = other.btnBLevel_;
      btnCLevel_ = other.btnCLevel_;
      btnDLevel_ = other.btnDLevel_;
      btnELevel_ = other.btnELevel_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InputFrameDecoded Clone() {
      return new InputFrameDecoded(this);
    }

    /// <summary>Field number for the "dx" field.</summary>
    public const int DxFieldNumber = 1;
    private int dx_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Dx {
      get { return dx_; }
      set {
        dx_ = value;
      }
    }

    /// <summary>Field number for the "dy" field.</summary>
    public const int DyFieldNumber = 2;
    private int dy_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Dy {
      get { return dy_; }
      set {
        dy_ = value;
      }
    }

    /// <summary>Field number for the "btn_a_level" field.</summary>
    public const int BtnALevelFieldNumber = 3;
    private int btnALevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BtnALevel {
      get { return btnALevel_; }
      set {
        btnALevel_ = value;
      }
    }

    /// <summary>Field number for the "btn_b_level" field.</summary>
    public const int BtnBLevelFieldNumber = 4;
    private int btnBLevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BtnBLevel {
      get { return btnBLevel_; }
      set {
        btnBLevel_ = value;
      }
    }

    /// <summary>Field number for the "btn_c_level" field.</summary>
    public const int BtnCLevelFieldNumber = 5;
    private int btnCLevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BtnCLevel {
      get { return btnCLevel_; }
      set {
        btnCLevel_ = value;
      }
    }

    /// <summary>Field number for the "btn_d_level" field.</summary>
    public const int BtnDLevelFieldNumber = 6;
    private int btnDLevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BtnDLevel {
      get { return btnDLevel_; }
      set {
        btnDLevel_ = value;
      }
    }

    /// <summary>Field number for the "btn_e_level" field.</summary>
    public const int BtnELevelFieldNumber = 7;
    private int btnELevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BtnELevel {
      get { return btnELevel_; }
      set {
        btnELevel_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as InputFrameDecoded);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(InputFrameDecoded other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Dx != other.Dx) return false;
      if (Dy != other.Dy) return false;
      if (BtnALevel != other.BtnALevel) return false;
      if (BtnBLevel != other.BtnBLevel) return false;
      if (BtnCLevel != other.BtnCLevel) return false;
      if (BtnDLevel != other.BtnDLevel) return false;
      if (BtnELevel != other.BtnELevel) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Dx != 0) hash ^= Dx.GetHashCode();
      if (Dy != 0) hash ^= Dy.GetHashCode();
      if (BtnALevel != 0) hash ^= BtnALevel.GetHashCode();
      if (BtnBLevel != 0) hash ^= BtnBLevel.GetHashCode();
      if (BtnCLevel != 0) hash ^= BtnCLevel.GetHashCode();
      if (BtnDLevel != 0) hash ^= BtnDLevel.GetHashCode();
      if (BtnELevel != 0) hash ^= BtnELevel.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Dx != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Dx);
      }
      if (Dy != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Dy);
      }
      if (BtnALevel != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(BtnALevel);
      }
      if (BtnBLevel != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(BtnBLevel);
      }
      if (BtnCLevel != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(BtnCLevel);
      }
      if (BtnDLevel != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(BtnDLevel);
      }
      if (BtnELevel != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(BtnELevel);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Dx != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Dx);
      }
      if (Dy != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Dy);
      }
      if (BtnALevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BtnALevel);
      }
      if (BtnBLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BtnBLevel);
      }
      if (BtnCLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BtnCLevel);
      }
      if (BtnDLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BtnDLevel);
      }
      if (BtnELevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BtnELevel);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(InputFrameDecoded other) {
      if (other == null) {
        return;
      }
      if (other.Dx != 0) {
        Dx = other.Dx;
      }
      if (other.Dy != 0) {
        Dy = other.Dy;
      }
      if (other.BtnALevel != 0) {
        BtnALevel = other.BtnALevel;
      }
      if (other.BtnBLevel != 0) {
        BtnBLevel = other.BtnBLevel;
      }
      if (other.BtnCLevel != 0) {
        BtnCLevel = other.BtnCLevel;
      }
      if (other.BtnDLevel != 0) {
        BtnDLevel = other.BtnDLevel;
      }
      if (other.BtnELevel != 0) {
        BtnELevel = other.BtnELevel;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Dx = input.ReadInt32();
            break;
          }
          case 16: {
            Dy = input.ReadInt32();
            break;
          }
          case 24: {
            BtnALevel = input.ReadInt32();
            break;
          }
          case 32: {
            BtnBLevel = input.ReadInt32();
            break;
          }
          case 40: {
            BtnCLevel = input.ReadInt32();
            break;
          }
          case 48: {
            BtnDLevel = input.ReadInt32();
            break;
          }
          case 56: {
            BtnELevel = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class InputFrameUpsync : pb::IMessage<InputFrameUpsync> {
    private static readonly pb::MessageParser<InputFrameUpsync> _parser = new pb::MessageParser<InputFrameUpsync>(() => new InputFrameUpsync());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InputFrameUpsync> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::jtshared.SerializableDataReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InputFrameUpsync() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InputFrameUpsync(InputFrameUpsync other) : this() {
      inputFrameId_ = other.inputFrameId_;
      encoded_ = other.encoded_;
      joinIndex_ = other.joinIndex_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InputFrameUpsync Clone() {
      return new InputFrameUpsync(this);
    }

    /// <summary>Field number for the "input_frame_id" field.</summary>
    public const int InputFrameIdFieldNumber = 1;
    private int inputFrameId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int InputFrameId {
      get { return inputFrameId_; }
      set {
        inputFrameId_ = value;
      }
    }

    /// <summary>Field number for the "encoded" field.</summary>
    public const int EncodedFieldNumber = 2;
    private ulong encoded_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Encoded {
      get { return encoded_; }
      set {
        encoded_ = value;
      }
    }

    /// <summary>Field number for the "join_index" field.</summary>
    public const int JoinIndexFieldNumber = 3;
    private uint joinIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint JoinIndex {
      get { return joinIndex_; }
      set {
        joinIndex_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as InputFrameUpsync);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(InputFrameUpsync other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (InputFrameId != other.InputFrameId) return false;
      if (Encoded != other.Encoded) return false;
      if (JoinIndex != other.JoinIndex) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (InputFrameId != 0) hash ^= InputFrameId.GetHashCode();
      if (Encoded != 0UL) hash ^= Encoded.GetHashCode();
      if (JoinIndex != 0) hash ^= JoinIndex.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (InputFrameId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(InputFrameId);
      }
      if (Encoded != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(Encoded);
      }
      if (JoinIndex != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(JoinIndex);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (InputFrameId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(InputFrameId);
      }
      if (Encoded != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Encoded);
      }
      if (JoinIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(JoinIndex);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(InputFrameUpsync other) {
      if (other == null) {
        return;
      }
      if (other.InputFrameId != 0) {
        InputFrameId = other.InputFrameId;
      }
      if (other.Encoded != 0UL) {
        Encoded = other.Encoded;
      }
      if (other.JoinIndex != 0) {
        JoinIndex = other.JoinIndex;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            InputFrameId = input.ReadInt32();
            break;
          }
          case 16: {
            Encoded = input.ReadUInt64();
            break;
          }
          case 24: {
            JoinIndex = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class InputFrameDownsync : pb::IMessage<InputFrameDownsync> {
    private static readonly pb::MessageParser<InputFrameDownsync> _parser = new pb::MessageParser<InputFrameDownsync>(() => new InputFrameDownsync());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InputFrameDownsync> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::jtshared.SerializableDataReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InputFrameDownsync() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InputFrameDownsync(InputFrameDownsync other) : this() {
      inputFrameId_ = other.inputFrameId_;
      inputList_ = other.inputList_.Clone();
      confirmedList_ = other.confirmedList_;
      udpConfirmedList_ = other.udpConfirmedList_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InputFrameDownsync Clone() {
      return new InputFrameDownsync(this);
    }

    /// <summary>Field number for the "input_frame_id" field.</summary>
    public const int InputFrameIdFieldNumber = 1;
    private int inputFrameId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int InputFrameId {
      get { return inputFrameId_; }
      set {
        inputFrameId_ = value;
      }
    }

    /// <summary>Field number for the "input_list" field.</summary>
    public const int InputListFieldNumber = 2;
    private static readonly pb::FieldCodec<ulong> _repeated_inputList_codec
        = pb::FieldCodec.ForUInt64(18);
    private readonly pbc::RepeatedField<ulong> inputList_ = new pbc::RepeatedField<ulong>();
    /// <summary>
    /// Indexed by "join_index", we try to compress the "single player input" into 1 word (64-bit for 64-bit Golang runtime) because atomic compare-and-swap only works on 1 word. Although CAS on custom struct is possible in C# https://learn.microsoft.com/en-us/dotnet/api/system.threading.interlocked?view=netstandard-2.1, using a single word is still faster whenever possible. 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<ulong> InputList {
      get { return inputList_; }
    }

    /// <summary>Field number for the "confirmed_list" field.</summary>
    public const int ConfirmedListFieldNumber = 3;
    private ulong confirmedList_;
    /// <summary>
    /// Indexed by "join_index", same compression concern as above
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ConfirmedList {
      get { return confirmedList_; }
      set {
        confirmedList_ = value;
      }
    }

    /// <summary>Field number for the "udp_confirmed_list" field.</summary>
    public const int UdpConfirmedListFieldNumber = 4;
    private ulong udpConfirmedList_;
    /// <summary>
    /// [WARNING] Only used by frontend, i.e. on backend this field can be always zero because backend sets "InputFrameDownsync.confirmed_list" by UDP packets too while frontend shouldn't. 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong UdpConfirmedList {
      get { return udpConfirmedList_; }
      set {
        udpConfirmedList_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as InputFrameDownsync);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(InputFrameDownsync other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (InputFrameId != other.InputFrameId) return false;
      if(!inputList_.Equals(other.inputList_)) return false;
      if (ConfirmedList != other.ConfirmedList) return false;
      if (UdpConfirmedList != other.UdpConfirmedList) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (InputFrameId != 0) hash ^= InputFrameId.GetHashCode();
      hash ^= inputList_.GetHashCode();
      if (ConfirmedList != 0UL) hash ^= ConfirmedList.GetHashCode();
      if (UdpConfirmedList != 0UL) hash ^= UdpConfirmedList.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (InputFrameId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(InputFrameId);
      }
      inputList_.WriteTo(output, _repeated_inputList_codec);
      if (ConfirmedList != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(ConfirmedList);
      }
      if (UdpConfirmedList != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(UdpConfirmedList);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (InputFrameId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(InputFrameId);
      }
      size += inputList_.CalculateSize(_repeated_inputList_codec);
      if (ConfirmedList != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ConfirmedList);
      }
      if (UdpConfirmedList != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(UdpConfirmedList);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(InputFrameDownsync other) {
      if (other == null) {
        return;
      }
      if (other.InputFrameId != 0) {
        InputFrameId = other.InputFrameId;
      }
      inputList_.Add(other.inputList_);
      if (other.ConfirmedList != 0UL) {
        ConfirmedList = other.ConfirmedList;
      }
      if (other.UdpConfirmedList != 0UL) {
        UdpConfirmedList = other.UdpConfirmedList;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            InputFrameId = input.ReadInt32();
            break;
          }
          case 18:
          case 16: {
            inputList_.AddEntriesFrom(input, _repeated_inputList_codec);
            break;
          }
          case 24: {
            ConfirmedList = input.ReadUInt64();
            break;
          }
          case 32: {
            UdpConfirmedList = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class WsReq : pb::IMessage<WsReq> {
    private static readonly pb::MessageParser<WsReq> _parser = new pb::MessageParser<WsReq>(() => new WsReq());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WsReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::jtshared.SerializableDataReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WsReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WsReq(WsReq other) : this() {
      playerId_ = other.playerId_;
      act_ = other.act_;
      joinIndex_ = other.joinIndex_;
      ackingFrameId_ = other.ackingFrameId_;
      ackingInputFrameId_ = other.ackingInputFrameId_;
      authKey_ = other.authKey_;
      inputFrameUpsyncBatch_ = other.inputFrameUpsyncBatch_.Clone();
      selfParsedRdf_ = other.selfParsedRdf_ != null ? other.selfParsedRdf_.Clone() : null;
      collisionSpaceHalfWidth_ = other.collisionSpaceHalfWidth_;
      collisionSpaceHalfHeight_ = other.collisionSpaceHalfHeight_;
      battleDurationSeconds_ = other.battleDurationSeconds_;
      serializedBarrierPolygons_ = other.serializedBarrierPolygons_.Clone();
      serializedStaticPatrolCues_ = other.serializedStaticPatrolCues_.Clone();
      serializedCompletelyStaticTraps_ = other.serializedCompletelyStaticTraps_.Clone();
      serializedStaticTriggers_ = other.serializedStaticTriggers_.Clone();
      serializedTrapIdToColliderAttrs_ = other.serializedTrapIdToColliderAttrs_ != null ? other.serializedTrapIdToColliderAttrs_.Clone() : null;
      serializedTriggerEditorIdToId_ = other.serializedTriggerEditorIdToId_ != null ? other.serializedTriggerEditorIdToId_.Clone() : null;
      seqNo_ = other.seqNo_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WsReq Clone() {
      return new WsReq(this);
    }

    /// <summary>Field number for the "player_id" field.</summary>
    public const int PlayerIdFieldNumber = 1;
    private string playerId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PlayerId {
      get { return playerId_; }
      set {
        playerId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "act" field.</summary>
    public const int ActFieldNumber = 2;
    private int act_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Act {
      get { return act_; }
      set {
        act_ = value;
      }
    }

    /// <summary>Field number for the "join_index" field.</summary>
    public const int JoinIndexFieldNumber = 3;
    private uint joinIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint JoinIndex {
      get { return joinIndex_; }
      set {
        joinIndex_ = value;
      }
    }

    /// <summary>Field number for the "acking_frame_id" field.</summary>
    public const int AckingFrameIdFieldNumber = 4;
    private int ackingFrameId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AckingFrameId {
      get { return ackingFrameId_; }
      set {
        ackingFrameId_ = value;
      }
    }

    /// <summary>Field number for the "acking_input_frame_id" field.</summary>
    public const int AckingInputFrameIdFieldNumber = 5;
    private int ackingInputFrameId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AckingInputFrameId {
      get { return ackingInputFrameId_; }
      set {
        ackingInputFrameId_ = value;
      }
    }

    /// <summary>Field number for the "auth_key" field.</summary>
    public const int AuthKeyFieldNumber = 6;
    private int authKey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AuthKey {
      get { return authKey_; }
      set {
        authKey_ = value;
      }
    }

    /// <summary>Field number for the "input_frame_upsync_batch" field.</summary>
    public const int InputFrameUpsyncBatchFieldNumber = 7;
    private static readonly pb::FieldCodec<global::jtshared.InputFrameUpsync> _repeated_inputFrameUpsyncBatch_codec
        = pb::FieldCodec.ForMessage(58, global::jtshared.InputFrameUpsync.Parser);
    private readonly pbc::RepeatedField<global::jtshared.InputFrameUpsync> inputFrameUpsyncBatch_ = new pbc::RepeatedField<global::jtshared.InputFrameUpsync>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::jtshared.InputFrameUpsync> InputFrameUpsyncBatch {
      get { return inputFrameUpsyncBatch_; }
    }

    /// <summary>Field number for the "self_parsed_rdf" field.</summary>
    public const int SelfParsedRdfFieldNumber = 8;
    private global::jtshared.RenderFrame selfParsedRdf_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::jtshared.RenderFrame SelfParsedRdf {
      get { return selfParsedRdf_; }
      set {
        selfParsedRdf_ = value;
      }
    }

    /// <summary>Field number for the "collision_space_half_width" field.</summary>
    public const int CollisionSpaceHalfWidthFieldNumber = 9;
    private int collisionSpaceHalfWidth_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CollisionSpaceHalfWidth {
      get { return collisionSpaceHalfWidth_; }
      set {
        collisionSpaceHalfWidth_ = value;
      }
    }

    /// <summary>Field number for the "collision_space_half_height" field.</summary>
    public const int CollisionSpaceHalfHeightFieldNumber = 10;
    private int collisionSpaceHalfHeight_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CollisionSpaceHalfHeight {
      get { return collisionSpaceHalfHeight_; }
      set {
        collisionSpaceHalfHeight_ = value;
      }
    }

    /// <summary>Field number for the "battle_duration_seconds" field.</summary>
    public const int BattleDurationSecondsFieldNumber = 11;
    private int battleDurationSeconds_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BattleDurationSeconds {
      get { return battleDurationSeconds_; }
      set {
        battleDurationSeconds_ = value;
      }
    }

    /// <summary>Field number for the "serialized_barrier_polygons" field.</summary>
    public const int SerializedBarrierPolygonsFieldNumber = 12;
    private static readonly pb::FieldCodec<global::jtshared.SerializableConvexPolygon> _repeated_serializedBarrierPolygons_codec
        = pb::FieldCodec.ForMessage(98, global::jtshared.SerializableConvexPolygon.Parser);
    private readonly pbc::RepeatedField<global::jtshared.SerializableConvexPolygon> serializedBarrierPolygons_ = new pbc::RepeatedField<global::jtshared.SerializableConvexPolygon>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::jtshared.SerializableConvexPolygon> SerializedBarrierPolygons {
      get { return serializedBarrierPolygons_; }
    }

    /// <summary>Field number for the "serialized_static_patrol_cues" field.</summary>
    public const int SerializedStaticPatrolCuesFieldNumber = 13;
    private static readonly pb::FieldCodec<global::jtshared.SerializedCompletelyStaticPatrolCueCollider> _repeated_serializedStaticPatrolCues_codec
        = pb::FieldCodec.ForMessage(106, global::jtshared.SerializedCompletelyStaticPatrolCueCollider.Parser);
    private readonly pbc::RepeatedField<global::jtshared.SerializedCompletelyStaticPatrolCueCollider> serializedStaticPatrolCues_ = new pbc::RepeatedField<global::jtshared.SerializedCompletelyStaticPatrolCueCollider>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::jtshared.SerializedCompletelyStaticPatrolCueCollider> SerializedStaticPatrolCues {
      get { return serializedStaticPatrolCues_; }
    }

    /// <summary>Field number for the "serialized_completely_static_traps" field.</summary>
    public const int SerializedCompletelyStaticTrapsFieldNumber = 14;
    private static readonly pb::FieldCodec<global::jtshared.SerializedCompletelyStaticTrapCollider> _repeated_serializedCompletelyStaticTraps_codec
        = pb::FieldCodec.ForMessage(114, global::jtshared.SerializedCompletelyStaticTrapCollider.Parser);
    private readonly pbc::RepeatedField<global::jtshared.SerializedCompletelyStaticTrapCollider> serializedCompletelyStaticTraps_ = new pbc::RepeatedField<global::jtshared.SerializedCompletelyStaticTrapCollider>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::jtshared.SerializedCompletelyStaticTrapCollider> SerializedCompletelyStaticTraps {
      get { return serializedCompletelyStaticTraps_; }
    }

    /// <summary>Field number for the "serialized_static_triggers" field.</summary>
    public const int SerializedStaticTriggersFieldNumber = 15;
    private static readonly pb::FieldCodec<global::jtshared.SerializedCompletelyStaticTriggerCollider> _repeated_serializedStaticTriggers_codec
        = pb::FieldCodec.ForMessage(122, global::jtshared.SerializedCompletelyStaticTriggerCollider.Parser);
    private readonly pbc::RepeatedField<global::jtshared.SerializedCompletelyStaticTriggerCollider> serializedStaticTriggers_ = new pbc::RepeatedField<global::jtshared.SerializedCompletelyStaticTriggerCollider>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::jtshared.SerializedCompletelyStaticTriggerCollider> SerializedStaticTriggers {
      get { return serializedStaticTriggers_; }
    }

    /// <summary>Field number for the "serialized_trap_id_to_collider_attrs" field.</summary>
    public const int SerializedTrapIdToColliderAttrsFieldNumber = 16;
    private global::jtshared.SerializedTrapLocalIdToColliderAttrs serializedTrapIdToColliderAttrs_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::jtshared.SerializedTrapLocalIdToColliderAttrs SerializedTrapIdToColliderAttrs {
      get { return serializedTrapIdToColliderAttrs_; }
      set {
        serializedTrapIdToColliderAttrs_ = value;
      }
    }

    /// <summary>Field number for the "serialized_trigger_editor_id_to_id" field.</summary>
    public const int SerializedTriggerEditorIdToIdFieldNumber = 18;
    private global::jtshared.SerializedTriggerEditorIdToLocalId serializedTriggerEditorIdToId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::jtshared.SerializedTriggerEditorIdToLocalId SerializedTriggerEditorIdToId {
      get { return serializedTriggerEditorIdToId_; }
      set {
        serializedTriggerEditorIdToId_ = value;
      }
    }

    /// <summary>Field number for the "seq_no" field.</summary>
    public const int SeqNoFieldNumber = 19;
    private uint seqNo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SeqNo {
      get { return seqNo_; }
      set {
        seqNo_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WsReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WsReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlayerId != other.PlayerId) return false;
      if (Act != other.Act) return false;
      if (JoinIndex != other.JoinIndex) return false;
      if (AckingFrameId != other.AckingFrameId) return false;
      if (AckingInputFrameId != other.AckingInputFrameId) return false;
      if (AuthKey != other.AuthKey) return false;
      if(!inputFrameUpsyncBatch_.Equals(other.inputFrameUpsyncBatch_)) return false;
      if (!object.Equals(SelfParsedRdf, other.SelfParsedRdf)) return false;
      if (CollisionSpaceHalfWidth != other.CollisionSpaceHalfWidth) return false;
      if (CollisionSpaceHalfHeight != other.CollisionSpaceHalfHeight) return false;
      if (BattleDurationSeconds != other.BattleDurationSeconds) return false;
      if(!serializedBarrierPolygons_.Equals(other.serializedBarrierPolygons_)) return false;
      if(!serializedStaticPatrolCues_.Equals(other.serializedStaticPatrolCues_)) return false;
      if(!serializedCompletelyStaticTraps_.Equals(other.serializedCompletelyStaticTraps_)) return false;
      if(!serializedStaticTriggers_.Equals(other.serializedStaticTriggers_)) return false;
      if (!object.Equals(SerializedTrapIdToColliderAttrs, other.SerializedTrapIdToColliderAttrs)) return false;
      if (!object.Equals(SerializedTriggerEditorIdToId, other.SerializedTriggerEditorIdToId)) return false;
      if (SeqNo != other.SeqNo) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PlayerId.Length != 0) hash ^= PlayerId.GetHashCode();
      if (Act != 0) hash ^= Act.GetHashCode();
      if (JoinIndex != 0) hash ^= JoinIndex.GetHashCode();
      if (AckingFrameId != 0) hash ^= AckingFrameId.GetHashCode();
      if (AckingInputFrameId != 0) hash ^= AckingInputFrameId.GetHashCode();
      if (AuthKey != 0) hash ^= AuthKey.GetHashCode();
      hash ^= inputFrameUpsyncBatch_.GetHashCode();
      if (selfParsedRdf_ != null) hash ^= SelfParsedRdf.GetHashCode();
      if (CollisionSpaceHalfWidth != 0) hash ^= CollisionSpaceHalfWidth.GetHashCode();
      if (CollisionSpaceHalfHeight != 0) hash ^= CollisionSpaceHalfHeight.GetHashCode();
      if (BattleDurationSeconds != 0) hash ^= BattleDurationSeconds.GetHashCode();
      hash ^= serializedBarrierPolygons_.GetHashCode();
      hash ^= serializedStaticPatrolCues_.GetHashCode();
      hash ^= serializedCompletelyStaticTraps_.GetHashCode();
      hash ^= serializedStaticTriggers_.GetHashCode();
      if (serializedTrapIdToColliderAttrs_ != null) hash ^= SerializedTrapIdToColliderAttrs.GetHashCode();
      if (serializedTriggerEditorIdToId_ != null) hash ^= SerializedTriggerEditorIdToId.GetHashCode();
      if (SeqNo != 0) hash ^= SeqNo.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PlayerId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(PlayerId);
      }
      if (Act != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Act);
      }
      if (JoinIndex != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(JoinIndex);
      }
      if (AckingFrameId != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(AckingFrameId);
      }
      if (AckingInputFrameId != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(AckingInputFrameId);
      }
      if (AuthKey != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(AuthKey);
      }
      inputFrameUpsyncBatch_.WriteTo(output, _repeated_inputFrameUpsyncBatch_codec);
      if (selfParsedRdf_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(SelfParsedRdf);
      }
      if (CollisionSpaceHalfWidth != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(CollisionSpaceHalfWidth);
      }
      if (CollisionSpaceHalfHeight != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(CollisionSpaceHalfHeight);
      }
      if (BattleDurationSeconds != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(BattleDurationSeconds);
      }
      serializedBarrierPolygons_.WriteTo(output, _repeated_serializedBarrierPolygons_codec);
      serializedStaticPatrolCues_.WriteTo(output, _repeated_serializedStaticPatrolCues_codec);
      serializedCompletelyStaticTraps_.WriteTo(output, _repeated_serializedCompletelyStaticTraps_codec);
      serializedStaticTriggers_.WriteTo(output, _repeated_serializedStaticTriggers_codec);
      if (serializedTrapIdToColliderAttrs_ != null) {
        output.WriteRawTag(130, 1);
        output.WriteMessage(SerializedTrapIdToColliderAttrs);
      }
      if (serializedTriggerEditorIdToId_ != null) {
        output.WriteRawTag(146, 1);
        output.WriteMessage(SerializedTriggerEditorIdToId);
      }
      if (SeqNo != 0) {
        output.WriteRawTag(152, 1);
        output.WriteUInt32(SeqNo);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlayerId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PlayerId);
      }
      if (Act != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Act);
      }
      if (JoinIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(JoinIndex);
      }
      if (AckingFrameId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AckingFrameId);
      }
      if (AckingInputFrameId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AckingInputFrameId);
      }
      if (AuthKey != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AuthKey);
      }
      size += inputFrameUpsyncBatch_.CalculateSize(_repeated_inputFrameUpsyncBatch_codec);
      if (selfParsedRdf_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SelfParsedRdf);
      }
      if (CollisionSpaceHalfWidth != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CollisionSpaceHalfWidth);
      }
      if (CollisionSpaceHalfHeight != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CollisionSpaceHalfHeight);
      }
      if (BattleDurationSeconds != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BattleDurationSeconds);
      }
      size += serializedBarrierPolygons_.CalculateSize(_repeated_serializedBarrierPolygons_codec);
      size += serializedStaticPatrolCues_.CalculateSize(_repeated_serializedStaticPatrolCues_codec);
      size += serializedCompletelyStaticTraps_.CalculateSize(_repeated_serializedCompletelyStaticTraps_codec);
      size += serializedStaticTriggers_.CalculateSize(_repeated_serializedStaticTriggers_codec);
      if (serializedTrapIdToColliderAttrs_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(SerializedTrapIdToColliderAttrs);
      }
      if (serializedTriggerEditorIdToId_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(SerializedTriggerEditorIdToId);
      }
      if (SeqNo != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(SeqNo);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WsReq other) {
      if (other == null) {
        return;
      }
      if (other.PlayerId.Length != 0) {
        PlayerId = other.PlayerId;
      }
      if (other.Act != 0) {
        Act = other.Act;
      }
      if (other.JoinIndex != 0) {
        JoinIndex = other.JoinIndex;
      }
      if (other.AckingFrameId != 0) {
        AckingFrameId = other.AckingFrameId;
      }
      if (other.AckingInputFrameId != 0) {
        AckingInputFrameId = other.AckingInputFrameId;
      }
      if (other.AuthKey != 0) {
        AuthKey = other.AuthKey;
      }
      inputFrameUpsyncBatch_.Add(other.inputFrameUpsyncBatch_);
      if (other.selfParsedRdf_ != null) {
        if (selfParsedRdf_ == null) {
          SelfParsedRdf = new global::jtshared.RenderFrame();
        }
        SelfParsedRdf.MergeFrom(other.SelfParsedRdf);
      }
      if (other.CollisionSpaceHalfWidth != 0) {
        CollisionSpaceHalfWidth = other.CollisionSpaceHalfWidth;
      }
      if (other.CollisionSpaceHalfHeight != 0) {
        CollisionSpaceHalfHeight = other.CollisionSpaceHalfHeight;
      }
      if (other.BattleDurationSeconds != 0) {
        BattleDurationSeconds = other.BattleDurationSeconds;
      }
      serializedBarrierPolygons_.Add(other.serializedBarrierPolygons_);
      serializedStaticPatrolCues_.Add(other.serializedStaticPatrolCues_);
      serializedCompletelyStaticTraps_.Add(other.serializedCompletelyStaticTraps_);
      serializedStaticTriggers_.Add(other.serializedStaticTriggers_);
      if (other.serializedTrapIdToColliderAttrs_ != null) {
        if (serializedTrapIdToColliderAttrs_ == null) {
          SerializedTrapIdToColliderAttrs = new global::jtshared.SerializedTrapLocalIdToColliderAttrs();
        }
        SerializedTrapIdToColliderAttrs.MergeFrom(other.SerializedTrapIdToColliderAttrs);
      }
      if (other.serializedTriggerEditorIdToId_ != null) {
        if (serializedTriggerEditorIdToId_ == null) {
          SerializedTriggerEditorIdToId = new global::jtshared.SerializedTriggerEditorIdToLocalId();
        }
        SerializedTriggerEditorIdToId.MergeFrom(other.SerializedTriggerEditorIdToId);
      }
      if (other.SeqNo != 0) {
        SeqNo = other.SeqNo;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            PlayerId = input.ReadString();
            break;
          }
          case 16: {
            Act = input.ReadInt32();
            break;
          }
          case 24: {
            JoinIndex = input.ReadUInt32();
            break;
          }
          case 32: {
            AckingFrameId = input.ReadInt32();
            break;
          }
          case 40: {
            AckingInputFrameId = input.ReadInt32();
            break;
          }
          case 48: {
            AuthKey = input.ReadInt32();
            break;
          }
          case 58: {
            inputFrameUpsyncBatch_.AddEntriesFrom(input, _repeated_inputFrameUpsyncBatch_codec);
            break;
          }
          case 66: {
            if (selfParsedRdf_ == null) {
              SelfParsedRdf = new global::jtshared.RenderFrame();
            }
            input.ReadMessage(SelfParsedRdf);
            break;
          }
          case 72: {
            CollisionSpaceHalfWidth = input.ReadInt32();
            break;
          }
          case 80: {
            CollisionSpaceHalfHeight = input.ReadInt32();
            break;
          }
          case 88: {
            BattleDurationSeconds = input.ReadInt32();
            break;
          }
          case 98: {
            serializedBarrierPolygons_.AddEntriesFrom(input, _repeated_serializedBarrierPolygons_codec);
            break;
          }
          case 106: {
            serializedStaticPatrolCues_.AddEntriesFrom(input, _repeated_serializedStaticPatrolCues_codec);
            break;
          }
          case 114: {
            serializedCompletelyStaticTraps_.AddEntriesFrom(input, _repeated_serializedCompletelyStaticTraps_codec);
            break;
          }
          case 122: {
            serializedStaticTriggers_.AddEntriesFrom(input, _repeated_serializedStaticTriggers_codec);
            break;
          }
          case 130: {
            if (serializedTrapIdToColliderAttrs_ == null) {
              SerializedTrapIdToColliderAttrs = new global::jtshared.SerializedTrapLocalIdToColliderAttrs();
            }
            input.ReadMessage(SerializedTrapIdToColliderAttrs);
            break;
          }
          case 146: {
            if (serializedTriggerEditorIdToId_ == null) {
              SerializedTriggerEditorIdToId = new global::jtshared.SerializedTriggerEditorIdToLocalId();
            }
            input.ReadMessage(SerializedTriggerEditorIdToId);
            break;
          }
          case 152: {
            SeqNo = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class InputBufferSnapshot : pb::IMessage<InputBufferSnapshot> {
    private static readonly pb::MessageParser<InputBufferSnapshot> _parser = new pb::MessageParser<InputBufferSnapshot>(() => new InputBufferSnapshot());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InputBufferSnapshot> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::jtshared.SerializableDataReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InputBufferSnapshot() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InputBufferSnapshot(InputBufferSnapshot other) : this() {
      refRenderFrameId_ = other.refRenderFrameId_;
      unconfirmedMask_ = other.unconfirmedMask_;
      toSendInputFrameDownsyncs_ = other.toSendInputFrameDownsyncs_.Clone();
      shouldForceResync_ = other.shouldForceResync_;
      peerJoinIndex_ = other.peerJoinIndex_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InputBufferSnapshot Clone() {
      return new InputBufferSnapshot(this);
    }

    /// <summary>Field number for the "ref_render_frame_id" field.</summary>
    public const int RefRenderFrameIdFieldNumber = 1;
    private int refRenderFrameId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RefRenderFrameId {
      get { return refRenderFrameId_; }
      set {
        refRenderFrameId_ = value;
      }
    }

    /// <summary>Field number for the "unconfirmed_mask" field.</summary>
    public const int UnconfirmedMaskFieldNumber = 2;
    private ulong unconfirmedMask_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong UnconfirmedMask {
      get { return unconfirmedMask_; }
      set {
        unconfirmedMask_ = value;
      }
    }

    /// <summary>Field number for the "to_send_input_frame_downsyncs" field.</summary>
    public const int ToSendInputFrameDownsyncsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::jtshared.InputFrameDownsync> _repeated_toSendInputFrameDownsyncs_codec
        = pb::FieldCodec.ForMessage(26, global::jtshared.InputFrameDownsync.Parser);
    private readonly pbc::RepeatedField<global::jtshared.InputFrameDownsync> toSendInputFrameDownsyncs_ = new pbc::RepeatedField<global::jtshared.InputFrameDownsync>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::jtshared.InputFrameDownsync> ToSendInputFrameDownsyncs {
      get { return toSendInputFrameDownsyncs_; }
    }

    /// <summary>Field number for the "should_force_resync" field.</summary>
    public const int ShouldForceResyncFieldNumber = 4;
    private bool shouldForceResync_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ShouldForceResync {
      get { return shouldForceResync_; }
      set {
        shouldForceResync_ = value;
      }
    }

    /// <summary>Field number for the "peer_join_index" field.</summary>
    public const int PeerJoinIndexFieldNumber = 5;
    private uint peerJoinIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PeerJoinIndex {
      get { return peerJoinIndex_; }
      set {
        peerJoinIndex_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as InputBufferSnapshot);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(InputBufferSnapshot other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RefRenderFrameId != other.RefRenderFrameId) return false;
      if (UnconfirmedMask != other.UnconfirmedMask) return false;
      if(!toSendInputFrameDownsyncs_.Equals(other.toSendInputFrameDownsyncs_)) return false;
      if (ShouldForceResync != other.ShouldForceResync) return false;
      if (PeerJoinIndex != other.PeerJoinIndex) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RefRenderFrameId != 0) hash ^= RefRenderFrameId.GetHashCode();
      if (UnconfirmedMask != 0UL) hash ^= UnconfirmedMask.GetHashCode();
      hash ^= toSendInputFrameDownsyncs_.GetHashCode();
      if (ShouldForceResync != false) hash ^= ShouldForceResync.GetHashCode();
      if (PeerJoinIndex != 0) hash ^= PeerJoinIndex.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RefRenderFrameId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(RefRenderFrameId);
      }
      if (UnconfirmedMask != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(UnconfirmedMask);
      }
      toSendInputFrameDownsyncs_.WriteTo(output, _repeated_toSendInputFrameDownsyncs_codec);
      if (ShouldForceResync != false) {
        output.WriteRawTag(32);
        output.WriteBool(ShouldForceResync);
      }
      if (PeerJoinIndex != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(PeerJoinIndex);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RefRenderFrameId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RefRenderFrameId);
      }
      if (UnconfirmedMask != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(UnconfirmedMask);
      }
      size += toSendInputFrameDownsyncs_.CalculateSize(_repeated_toSendInputFrameDownsyncs_codec);
      if (ShouldForceResync != false) {
        size += 1 + 1;
      }
      if (PeerJoinIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PeerJoinIndex);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(InputBufferSnapshot other) {
      if (other == null) {
        return;
      }
      if (other.RefRenderFrameId != 0) {
        RefRenderFrameId = other.RefRenderFrameId;
      }
      if (other.UnconfirmedMask != 0UL) {
        UnconfirmedMask = other.UnconfirmedMask;
      }
      toSendInputFrameDownsyncs_.Add(other.toSendInputFrameDownsyncs_);
      if (other.ShouldForceResync != false) {
        ShouldForceResync = other.ShouldForceResync;
      }
      if (other.PeerJoinIndex != 0) {
        PeerJoinIndex = other.PeerJoinIndex;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            RefRenderFrameId = input.ReadInt32();
            break;
          }
          case 16: {
            UnconfirmedMask = input.ReadUInt64();
            break;
          }
          case 26: {
            toSendInputFrameDownsyncs_.AddEntriesFrom(input, _repeated_toSendInputFrameDownsyncs_codec);
            break;
          }
          case 32: {
            ShouldForceResync = input.ReadBool();
            break;
          }
          case 40: {
            PeerJoinIndex = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PatrolCue : pb::IMessage<PatrolCue> {
    private static readonly pb::MessageParser<PatrolCue> _parser = new pb::MessageParser<PatrolCue>(() => new PatrolCue());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PatrolCue> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::jtshared.SerializableDataReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PatrolCue() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PatrolCue(PatrolCue other) : this() {
      id_ = other.id_;
      flAct_ = other.flAct_;
      frAct_ = other.frAct_;
      flCaptureFrames_ = other.flCaptureFrames_;
      frCaptureFrames_ = other.frCaptureFrames_;
      fdAct_ = other.fdAct_;
      fuAct_ = other.fuAct_;
      fdCaptureFrames_ = other.fdCaptureFrames_;
      fuCaptureFrames_ = other.fuCaptureFrames_;
      collisionTypeMask_ = other.collisionTypeMask_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PatrolCue Clone() {
      return new PatrolCue(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "fl_act" field.</summary>
    public const int FlActFieldNumber = 2;
    private ulong flAct_;
    /// <summary>
    /// "input when colliding from the left side"
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong FlAct {
      get { return flAct_; }
      set {
        flAct_ = value;
      }
    }

    /// <summary>Field number for the "fr_act" field.</summary>
    public const int FrActFieldNumber = 3;
    private ulong frAct_;
    /// <summary>
    /// "input when colliding from the right side"
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong FrAct {
      get { return frAct_; }
      set {
        frAct_ = value;
      }
    }

    /// <summary>Field number for the "fl_capture_frames" field.</summary>
    public const int FlCaptureFramesFieldNumber = 4;
    private int flCaptureFrames_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FlCaptureFrames {
      get { return flCaptureFrames_; }
      set {
        flCaptureFrames_ = value;
      }
    }

    /// <summary>Field number for the "fr_capture_frames" field.</summary>
    public const int FrCaptureFramesFieldNumber = 5;
    private int frCaptureFrames_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FrCaptureFrames {
      get { return frCaptureFrames_; }
      set {
        frCaptureFrames_ = value;
      }
    }

    /// <summary>Field number for the "fd_act" field.</summary>
    public const int FdActFieldNumber = 6;
    private ulong fdAct_;
    /// <summary>
    /// "input when colliding from the down side"
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong FdAct {
      get { return fdAct_; }
      set {
        fdAct_ = value;
      }
    }

    /// <summary>Field number for the "fu_act" field.</summary>
    public const int FuActFieldNumber = 7;
    private ulong fuAct_;
    /// <summary>
    /// "input when colliding from the up side"
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong FuAct {
      get { return fuAct_; }
      set {
        fuAct_ = value;
      }
    }

    /// <summary>Field number for the "fd_capture_frames" field.</summary>
    public const int FdCaptureFramesFieldNumber = 8;
    private int fdCaptureFrames_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FdCaptureFrames {
      get { return fdCaptureFrames_; }
      set {
        fdCaptureFrames_ = value;
      }
    }

    /// <summary>Field number for the "fu_capture_frames" field.</summary>
    public const int FuCaptureFramesFieldNumber = 9;
    private int fuCaptureFrames_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FuCaptureFrames {
      get { return fuCaptureFrames_; }
      set {
        fuCaptureFrames_ = value;
      }
    }

    /// <summary>Field number for the "collision_type_mask" field.</summary>
    public const int CollisionTypeMaskFieldNumber = 1029;
    private ulong collisionTypeMask_;
    /// <summary>
    /// [COLLISION_NPC_PATROL_CUE_INDEX_PREFIX, COLLISION_TRAP_PATROL_CUE_INDEX_PREFIX]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong CollisionTypeMask {
      get { return collisionTypeMask_; }
      set {
        collisionTypeMask_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PatrolCue);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PatrolCue other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (FlAct != other.FlAct) return false;
      if (FrAct != other.FrAct) return false;
      if (FlCaptureFrames != other.FlCaptureFrames) return false;
      if (FrCaptureFrames != other.FrCaptureFrames) return false;
      if (FdAct != other.FdAct) return false;
      if (FuAct != other.FuAct) return false;
      if (FdCaptureFrames != other.FdCaptureFrames) return false;
      if (FuCaptureFrames != other.FuCaptureFrames) return false;
      if (CollisionTypeMask != other.CollisionTypeMask) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (FlAct != 0UL) hash ^= FlAct.GetHashCode();
      if (FrAct != 0UL) hash ^= FrAct.GetHashCode();
      if (FlCaptureFrames != 0) hash ^= FlCaptureFrames.GetHashCode();
      if (FrCaptureFrames != 0) hash ^= FrCaptureFrames.GetHashCode();
      if (FdAct != 0UL) hash ^= FdAct.GetHashCode();
      if (FuAct != 0UL) hash ^= FuAct.GetHashCode();
      if (FdCaptureFrames != 0) hash ^= FdCaptureFrames.GetHashCode();
      if (FuCaptureFrames != 0) hash ^= FuCaptureFrames.GetHashCode();
      if (CollisionTypeMask != 0UL) hash ^= CollisionTypeMask.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (FlAct != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(FlAct);
      }
      if (FrAct != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(FrAct);
      }
      if (FlCaptureFrames != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(FlCaptureFrames);
      }
      if (FrCaptureFrames != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(FrCaptureFrames);
      }
      if (FdAct != 0UL) {
        output.WriteRawTag(48);
        output.WriteUInt64(FdAct);
      }
      if (FuAct != 0UL) {
        output.WriteRawTag(56);
        output.WriteUInt64(FuAct);
      }
      if (FdCaptureFrames != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(FdCaptureFrames);
      }
      if (FuCaptureFrames != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(FuCaptureFrames);
      }
      if (CollisionTypeMask != 0UL) {
        output.WriteRawTag(168, 64);
        output.WriteUInt64(CollisionTypeMask);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (FlAct != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(FlAct);
      }
      if (FrAct != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(FrAct);
      }
      if (FlCaptureFrames != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FlCaptureFrames);
      }
      if (FrCaptureFrames != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FrCaptureFrames);
      }
      if (FdAct != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(FdAct);
      }
      if (FuAct != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(FuAct);
      }
      if (FdCaptureFrames != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FdCaptureFrames);
      }
      if (FuCaptureFrames != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FuCaptureFrames);
      }
      if (CollisionTypeMask != 0UL) {
        size += 2 + pb::CodedOutputStream.ComputeUInt64Size(CollisionTypeMask);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PatrolCue other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.FlAct != 0UL) {
        FlAct = other.FlAct;
      }
      if (other.FrAct != 0UL) {
        FrAct = other.FrAct;
      }
      if (other.FlCaptureFrames != 0) {
        FlCaptureFrames = other.FlCaptureFrames;
      }
      if (other.FrCaptureFrames != 0) {
        FrCaptureFrames = other.FrCaptureFrames;
      }
      if (other.FdAct != 0UL) {
        FdAct = other.FdAct;
      }
      if (other.FuAct != 0UL) {
        FuAct = other.FuAct;
      }
      if (other.FdCaptureFrames != 0) {
        FdCaptureFrames = other.FdCaptureFrames;
      }
      if (other.FuCaptureFrames != 0) {
        FuCaptureFrames = other.FuCaptureFrames;
      }
      if (other.CollisionTypeMask != 0UL) {
        CollisionTypeMask = other.CollisionTypeMask;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            FlAct = input.ReadUInt64();
            break;
          }
          case 24: {
            FrAct = input.ReadUInt64();
            break;
          }
          case 32: {
            FlCaptureFrames = input.ReadInt32();
            break;
          }
          case 40: {
            FrCaptureFrames = input.ReadInt32();
            break;
          }
          case 48: {
            FdAct = input.ReadUInt64();
            break;
          }
          case 56: {
            FuAct = input.ReadUInt64();
            break;
          }
          case 64: {
            FdCaptureFrames = input.ReadInt32();
            break;
          }
          case 72: {
            FuCaptureFrames = input.ReadInt32();
            break;
          }
          case 8232: {
            CollisionTypeMask = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class VfxConfig : pb::IMessage<VfxConfig> {
    private static readonly pb::MessageParser<VfxConfig> _parser = new pb::MessageParser<VfxConfig>(() => new VfxConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<VfxConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::jtshared.SerializableDataReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VfxConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VfxConfig(VfxConfig other) : this() {
      speciesId_ = other.speciesId_;
      motionType_ = other.motionType_;
      durationType_ = other.durationType_;
      onCharacter_ = other.onCharacter_;
      onBullet_ = other.onBullet_;
      onTrap_ = other.onTrap_;
      usePixelatedVer_ = other.usePixelatedVer_;
      name_ = other.name_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VfxConfig Clone() {
      return new VfxConfig(this);
    }

    /// <summary>Field number for the "species_id" field.</summary>
    public const int SpeciesIdFieldNumber = 1;
    private int speciesId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SpeciesId {
      get { return speciesId_; }
      set {
        speciesId_ = value;
      }
    }

    /// <summary>Field number for the "motion_type" field.</summary>
    public const int MotionTypeFieldNumber = 2;
    private global::jtshared.VfxMotionType motionType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::jtshared.VfxMotionType MotionType {
      get { return motionType_; }
      set {
        motionType_ = value;
      }
    }

    /// <summary>Field number for the "duration_type" field.</summary>
    public const int DurationTypeFieldNumber = 3;
    private global::jtshared.VfxDurationType durationType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::jtshared.VfxDurationType DurationType {
      get { return durationType_; }
      set {
        durationType_ = value;
      }
    }

    /// <summary>Field number for the "on_character" field.</summary>
    public const int OnCharacterFieldNumber = 4;
    private bool onCharacter_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool OnCharacter {
      get { return onCharacter_; }
      set {
        onCharacter_ = value;
      }
    }

    /// <summary>Field number for the "on_bullet" field.</summary>
    public const int OnBulletFieldNumber = 5;
    private bool onBullet_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool OnBullet {
      get { return onBullet_; }
      set {
        onBullet_ = value;
      }
    }

    /// <summary>Field number for the "on_trap" field.</summary>
    public const int OnTrapFieldNumber = 6;
    private bool onTrap_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool OnTrap {
      get { return onTrap_; }
      set {
        onTrap_ = value;
      }
    }

    /// <summary>Field number for the "use_pixelated_ver" field.</summary>
    public const int UsePixelatedVerFieldNumber = 7;
    private bool usePixelatedVer_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool UsePixelatedVer {
      get { return usePixelatedVer_; }
      set {
        usePixelatedVer_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1024;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as VfxConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(VfxConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SpeciesId != other.SpeciesId) return false;
      if (MotionType != other.MotionType) return false;
      if (DurationType != other.DurationType) return false;
      if (OnCharacter != other.OnCharacter) return false;
      if (OnBullet != other.OnBullet) return false;
      if (OnTrap != other.OnTrap) return false;
      if (UsePixelatedVer != other.UsePixelatedVer) return false;
      if (Name != other.Name) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SpeciesId != 0) hash ^= SpeciesId.GetHashCode();
      if (MotionType != 0) hash ^= MotionType.GetHashCode();
      if (DurationType != 0) hash ^= DurationType.GetHashCode();
      if (OnCharacter != false) hash ^= OnCharacter.GetHashCode();
      if (OnBullet != false) hash ^= OnBullet.GetHashCode();
      if (OnTrap != false) hash ^= OnTrap.GetHashCode();
      if (UsePixelatedVer != false) hash ^= UsePixelatedVer.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SpeciesId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(SpeciesId);
      }
      if (MotionType != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) MotionType);
      }
      if (DurationType != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) DurationType);
      }
      if (OnCharacter != false) {
        output.WriteRawTag(32);
        output.WriteBool(OnCharacter);
      }
      if (OnBullet != false) {
        output.WriteRawTag(40);
        output.WriteBool(OnBullet);
      }
      if (OnTrap != false) {
        output.WriteRawTag(48);
        output.WriteBool(OnTrap);
      }
      if (UsePixelatedVer != false) {
        output.WriteRawTag(56);
        output.WriteBool(UsePixelatedVer);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(130, 64);
        output.WriteString(Name);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SpeciesId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SpeciesId);
      }
      if (MotionType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) MotionType);
      }
      if (DurationType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) DurationType);
      }
      if (OnCharacter != false) {
        size += 1 + 1;
      }
      if (OnBullet != false) {
        size += 1 + 1;
      }
      if (OnTrap != false) {
        size += 1 + 1;
      }
      if (UsePixelatedVer != false) {
        size += 1 + 1;
      }
      if (Name.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(VfxConfig other) {
      if (other == null) {
        return;
      }
      if (other.SpeciesId != 0) {
        SpeciesId = other.SpeciesId;
      }
      if (other.MotionType != 0) {
        MotionType = other.MotionType;
      }
      if (other.DurationType != 0) {
        DurationType = other.DurationType;
      }
      if (other.OnCharacter != false) {
        OnCharacter = other.OnCharacter;
      }
      if (other.OnBullet != false) {
        OnBullet = other.OnBullet;
      }
      if (other.OnTrap != false) {
        OnTrap = other.OnTrap;
      }
      if (other.UsePixelatedVer != false) {
        UsePixelatedVer = other.UsePixelatedVer;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            SpeciesId = input.ReadInt32();
            break;
          }
          case 16: {
            MotionType = (global::jtshared.VfxMotionType) input.ReadEnum();
            break;
          }
          case 24: {
            DurationType = (global::jtshared.VfxDurationType) input.ReadEnum();
            break;
          }
          case 32: {
            OnCharacter = input.ReadBool();
            break;
          }
          case 40: {
            OnBullet = input.ReadBool();
            break;
          }
          case 48: {
            OnTrap = input.ReadBool();
            break;
          }
          case 56: {
            UsePixelatedVer = input.ReadBool();
            break;
          }
          case 8194: {
            Name = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class BulletConfig : pb::IMessage<BulletConfig> {
    private static readonly pb::MessageParser<BulletConfig> _parser = new pb::MessageParser<BulletConfig>(() => new BulletConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BulletConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::jtshared.SerializableDataReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BulletConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BulletConfig(BulletConfig other) : this() {
      startupFrames_ = other.startupFrames_;
      cancellableStFrame_ = other.cancellableStFrame_;
      cancellableEdFrame_ = other.cancellableEdFrame_;
      activeFrames_ = other.activeFrames_;
      hitStunFrames_ = other.hitStunFrames_;
      blockStunFrames_ = other.blockStunFrames_;
      pushbackVelX_ = other.pushbackVelX_;
      pushbackVelY_ = other.pushbackVelY_;
      damage_ = other.damage_;
      selfLockVelX_ = other.selfLockVelX_;
      selfLockVelY_ = other.selfLockVelY_;
      hitboxOffsetX_ = other.hitboxOffsetX_;
      hitboxOffsetY_ = other.hitboxOffsetY_;
      hitboxSizeX_ = other.hitboxSizeX_;
      hitboxSizeY_ = other.hitboxSizeY_;
      blowUp_ = other.blowUp_;
      speciesId_ = other.speciesId_;
      explosionFrames_ = other.explosionFrames_;
      bType_ = other.bType_;
      mhType_ = other.mhType_;
      simultaneousMultiHitCnt_ = other.simultaneousMultiHitCnt_;
      speed_ = other.speed_;
      dirX_ = other.dirX_;
      dirY_ = other.dirY_;
      cancelTransit_ = other.cancelTransit_.Clone();
      repeatQuota_ = other.repeatQuota_;
      activeVfxSpeciesId_ = other.activeVfxSpeciesId_;
      explosionVfxSpeciesId_ = other.explosionVfxSpeciesId_;
      allowsWalking_ = other.allowsWalking_;
      allowsCrouching_ = other.allowsCrouching_;
      hardness_ = other.hardness_;
      startupInvinsibleFrames_ = other.startupInvinsibleFrames_;
      hitInvinsibleFrames_ = other.hitInvinsibleFrames_;
      explosionSpeciesId_ = other.explosionSpeciesId_;
      perpAccMag_ = other.perpAccMag_;
      delaySelfVelToActive_ = other.delaySelfVelToActive_;
      speedIfNotHit_ = other.speedIfNotHit_;
      omitSoftPushback_ = other.omitSoftPushback_;
      hitboxSizeIncX_ = other.hitboxSizeIncX_;
      hitboxSizeIncY_ = other.hitboxSizeIncY_;
      remainsUponHit_ = other.remainsUponHit_;
      rotatesAlongVelocity_ = other.rotatesAlongVelocity_;
      defaultHardPushbackBounceQuota_ = other.defaultHardPushbackBounceQuota_;
      hardPushbackBounceNormFactor_ = other.hardPushbackBounceNormFactor_;
      hardPushbackBounceSheerFactor_ = other.hardPushbackBounceSheerFactor_;
      isPixelatedActiveVfx_ = other.isPixelatedActiveVfx_;
      isPixelatedExplostionVfx_ = other.isPixelatedExplostionVfx_;
      mhVanishOnMeleeHit_ = other.mhVanishOnMeleeHit_;
      downSlopePrimerVelY_ = other.downSlopePrimerVelY_;
      mhUpdatesOriginPos_ = other.mhUpdatesOriginPos_;
      beamCollision_ = other.beamCollision_;
      angularFrameVelCos_ = other.angularFrameVelCos_;
      angularFrameVelSin_ = other.angularFrameVelSin_;
      visionOffsetX_ = other.visionOffsetX_;
      visionOffsetY_ = other.visionOffsetY_;
      visionSizeX_ = other.visionSizeX_;
      visionSizeY_ = other.visionSizeY_;
      selfLockVelYWhenFlying_ = other.selfLockVelYWhenFlying_;
      elementalAttrs_ = other.elementalAttrs_;
      cancellableByInventorySlotC_ = other.cancellableByInventorySlotC_;
      cancellableByInventorySlotD_ = other.cancellableByInventorySlotD_;
      spinAnchorX_ = other.spinAnchorX_;
      spinAnchorY_ = other.spinAnchorY_;
      beamVisualSizeY_ = other.beamVisualSizeY_;
      touchExplosionBombCollision_ = other.touchExplosionBombCollision_;
      airRidingGroundWave_ = other.airRidingGroundWave_;
      groundImpactMeleeCollision_ = other.groundImpactMeleeCollision_;
      wallImpactMeleeCollision_ = other.wallImpactMeleeCollision_;
      mhInheritsSpin_ = other.mhInheritsSpin_;
      initSpinCos_ = other.initSpinCos_;
      initSpinSin_ = other.initSpinSin_;
      finishingFrames_ = other.finishingFrames_;
      noExplosionOnHardPushback_ = other.noExplosionOnHardPushback_;
      startupVfxSpeciesId_ = other.startupVfxSpeciesId_;
      ifc_ = other.ifc_;
      reflectFireballXIfNotHarder_ = other.reflectFireballXIfNotHarder_;
      rejectsReflectionFromAnotherBullet_ = other.rejectsReflectionFromAnotherBullet_;
      providesXHardPushback_ = other.providesXHardPushback_;
      providesYHardPushbackTop_ = other.providesYHardPushbackTop_;
      providesYHardPushbackBottom_ = other.providesYHardPushbackBottom_;
      ignoreSlopeDeceleration_ = other.ignoreSlopeDeceleration_;
      rotateOffenderWithSpin_ = other.rotateOffenderWithSpin_;
      mhNotTriggerOnChHit_ = other.mhNotTriggerOnChHit_;
      mhNotTriggerOnHarderBulletHit_ = other.mhNotTriggerOnHarderBulletHit_;
      mhNotTriggerOnHardPushbackHit_ = other.mhNotTriggerOnHardPushbackHit_;
      hopperMissile_ = other.hopperMissile_;
      beamRendering_ = other.beamRendering_;
      missileSearchIntervalPow2Minus1_ = other.missileSearchIntervalPow2Minus1_;
      useChOffsetRegardlessOfEmissionMh_ = other.useChOffsetRegardlessOfEmissionMh_;
      inplaceVanishExplosionSpeciesId_ = other.inplaceVanishExplosionSpeciesId_;
      animLoopingRdfOffset_ = other.animLoopingRdfOffset_;
      explosionAnimLoopingRdfOffset_ = other.explosionAnimLoopingRdfOffset_;
      gaugeIncReductionRatio_ = other.gaugeIncReductionRatio_;
      mhInheritsFramesInBlState_ = other.mhInheritsFramesInBlState_;
      guardBreakerExtraHitCnt_ = other.guardBreakerExtraHitCnt_;
      takesDef1AsHardPushback_ = other.takesDef1AsHardPushback_;
      collisionTypeMask_ = other.collisionTypeMask_;
      takesGravity_ = other.takesGravity_;
      buffConfig_ = other.buffConfig_ != null ? other.buffConfig_.Clone() : null;
      characterEmitSfxName_ = other.characterEmitSfxName_;
      fireballEmitSfxName_ = other.fireballEmitSfxName_;
      explosionSfxName_ = other.explosionSfxName_;
      activeSfxName_ = other.activeSfxName_;
      explosionOnFleshSfxName_ = other.explosionOnFleshSfxName_;
      explosionOnRockSfxName_ = other.explosionOnRockSfxName_;
      explosionOnMetalSfxName_ = other.explosionOnMetalSfxName_;
      explosionOnWoodSfxName_ = other.explosionOnWoodSfxName_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BulletConfig Clone() {
      return new BulletConfig(this);
    }

    /// <summary>Field number for the "startup_frames" field.</summary>
    public const int StartupFramesFieldNumber = 1;
    private int startupFrames_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StartupFrames {
      get { return startupFrames_; }
      set {
        startupFrames_ = value;
      }
    }

    /// <summary>Field number for the "cancellable_st_frame" field.</summary>
    public const int CancellableStFrameFieldNumber = 2;
    private int cancellableStFrame_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CancellableStFrame {
      get { return cancellableStFrame_; }
      set {
        cancellableStFrame_ = value;
      }
    }

    /// <summary>Field number for the "cancellable_ed_frame" field.</summary>
    public const int CancellableEdFrameFieldNumber = 3;
    private int cancellableEdFrame_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CancellableEdFrame {
      get { return cancellableEdFrame_; }
      set {
        cancellableEdFrame_ = value;
      }
    }

    /// <summary>Field number for the "active_frames" field.</summary>
    public const int ActiveFramesFieldNumber = 4;
    private int activeFrames_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ActiveFrames {
      get { return activeFrames_; }
      set {
        activeFrames_ = value;
      }
    }

    /// <summary>Field number for the "hit_stun_frames" field.</summary>
    public const int HitStunFramesFieldNumber = 5;
    private int hitStunFrames_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HitStunFrames {
      get { return hitStunFrames_; }
      set {
        hitStunFrames_ = value;
      }
    }

    /// <summary>Field number for the "block_stun_frames" field.</summary>
    public const int BlockStunFramesFieldNumber = 6;
    private int blockStunFrames_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BlockStunFrames {
      get { return blockStunFrames_; }
      set {
        blockStunFrames_ = value;
      }
    }

    /// <summary>Field number for the "pushback_vel_x" field.</summary>
    public const int PushbackVelXFieldNumber = 7;
    private float pushbackVelX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float PushbackVelX {
      get { return pushbackVelX_; }
      set {
        pushbackVelX_ = value;
      }
    }

    /// <summary>Field number for the "pushback_vel_y" field.</summary>
    public const int PushbackVelYFieldNumber = 8;
    private float pushbackVelY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float PushbackVelY {
      get { return pushbackVelY_; }
      set {
        pushbackVelY_ = value;
      }
    }

    /// <summary>Field number for the "damage" field.</summary>
    public const int DamageFieldNumber = 9;
    private int damage_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Damage {
      get { return damage_; }
      set {
        damage_ = value;
      }
    }

    /// <summary>Field number for the "self_lock_vel_x" field.</summary>
    public const int SelfLockVelXFieldNumber = 10;
    private float selfLockVelX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float SelfLockVelX {
      get { return selfLockVelX_; }
      set {
        selfLockVelX_ = value;
      }
    }

    /// <summary>Field number for the "self_lock_vel_y" field.</summary>
    public const int SelfLockVelYFieldNumber = 11;
    private float selfLockVelY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float SelfLockVelY {
      get { return selfLockVelY_; }
      set {
        selfLockVelY_ = value;
      }
    }

    /// <summary>Field number for the "hitbox_offset_x" field.</summary>
    public const int HitboxOffsetXFieldNumber = 12;
    private float hitboxOffsetX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float HitboxOffsetX {
      get { return hitboxOffsetX_; }
      set {
        hitboxOffsetX_ = value;
      }
    }

    /// <summary>Field number for the "hitbox_offset_y" field.</summary>
    public const int HitboxOffsetYFieldNumber = 13;
    private float hitboxOffsetY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float HitboxOffsetY {
      get { return hitboxOffsetY_; }
      set {
        hitboxOffsetY_ = value;
      }
    }

    /// <summary>Field number for the "hitbox_size_x" field.</summary>
    public const int HitboxSizeXFieldNumber = 14;
    private float hitboxSizeX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float HitboxSizeX {
      get { return hitboxSizeX_; }
      set {
        hitboxSizeX_ = value;
      }
    }

    /// <summary>Field number for the "hitbox_size_y" field.</summary>
    public const int HitboxSizeYFieldNumber = 15;
    private float hitboxSizeY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float HitboxSizeY {
      get { return hitboxSizeY_; }
      set {
        hitboxSizeY_ = value;
      }
    }

    /// <summary>Field number for the "blow_up" field.</summary>
    public const int BlowUpFieldNumber = 16;
    private bool blowUp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool BlowUp {
      get { return blowUp_; }
      set {
        blowUp_ = value;
      }
    }

    /// <summary>Field number for the "species_id" field.</summary>
    public const int SpeciesIdFieldNumber = 17;
    private int speciesId_;
    /// <summary>
    /// For fireball, this species_id specifies both the active animation and the explosion animation (if "explosion_species_id" not explicitly assigned), for melee it specifies the explosion animation
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SpeciesId {
      get { return speciesId_; }
      set {
        speciesId_ = value;
      }
    }

    /// <summary>Field number for the "explosion_frames" field.</summary>
    public const int ExplosionFramesFieldNumber = 18;
    private int explosionFrames_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ExplosionFrames {
      get { return explosionFrames_; }
      set {
        explosionFrames_ = value;
      }
    }

    /// <summary>Field number for the "b_type" field.</summary>
    public const int BTypeFieldNumber = 19;
    private global::jtshared.BulletType bType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::jtshared.BulletType BType {
      get { return bType_; }
      set {
        bType_ = value;
      }
    }

    /// <summary>Field number for the "mh_type" field.</summary>
    public const int MhTypeFieldNumber = 20;
    private global::jtshared.MultiHitType mhType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::jtshared.MultiHitType MhType {
      get { return mhType_; }
      set {
        mhType_ = value;
      }
    }

    /// <summary>Field number for the "simultaneous_multi_hit_cnt" field.</summary>
    public const int SimultaneousMultiHitCntFieldNumber = 21;
    private uint simultaneousMultiHitCnt_;
    /// <summary>
    /// marks how many simultaneous bullets are left, default to 0 indicating that the current bullet is the only one to fire 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SimultaneousMultiHitCnt {
      get { return simultaneousMultiHitCnt_; }
      set {
        simultaneousMultiHitCnt_ = value;
      }
    }

    /// <summary>Field number for the "speed" field.</summary>
    public const int SpeedFieldNumber = 22;
    private float speed_;
    /// <summary>
    /// For speed varying bullets, this is the initial speed
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Speed {
      get { return speed_; }
      set {
        speed_ = value;
      }
    }

    /// <summary>Field number for the "dir_x" field.</summary>
    public const int DirXFieldNumber = 23;
    private int dirX_;
    /// <summary>
    /// the initial direction indicator for X-axis
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DirX {
      get { return dirX_; }
      set {
        dirX_ = value;
      }
    }

    /// <summary>Field number for the "dir_y" field.</summary>
    public const int DirYFieldNumber = 24;
    private int dirY_;
    /// <summary>
    /// the initial direction indicator for Y-axis
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DirY {
      get { return dirY_; }
      set {
        dirY_ = value;
      }
    }

    /// <summary>Field number for the "cancel_transit" field.</summary>
    public const int CancelTransitFieldNumber = 25;
    private static readonly pbc::MapField<int, uint>.Codec _map_cancelTransit_codec
        = new pbc::MapField<int, uint>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForUInt32(16), 202);
    private readonly pbc::MapField<int, uint> cancelTransit_ = new pbc::MapField<int, uint>();
    /// <summary>
    /// pattern_id -> skill_id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, uint> CancelTransit {
      get { return cancelTransit_; }
    }

    /// <summary>Field number for the "repeat_quota" field.</summary>
    public const int RepeatQuotaFieldNumber = 26;
    private int repeatQuota_;
    /// <summary>
    /// for long lasting bullet, applicable for "mh_type == (FromPrevHitActual | FromPrevHitAnyway)"
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RepeatQuota {
      get { return repeatQuota_; }
      set {
        repeatQuota_ = value;
      }
    }

    /// <summary>Field number for the "active_vfx_species_id" field.</summary>
    public const int ActiveVfxSpeciesIdFieldNumber = 27;
    private int activeVfxSpeciesId_;
    /// <summary>
    /// currently only support 1 vfx config when active
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ActiveVfxSpeciesId {
      get { return activeVfxSpeciesId_; }
      set {
        activeVfxSpeciesId_ = value;
      }
    }

    /// <summary>Field number for the "explosion_vfx_species_id" field.</summary>
    public const int ExplosionVfxSpeciesIdFieldNumber = 28;
    private int explosionVfxSpeciesId_;
    /// <summary>
    /// currently only support 1 vfx config when exploding
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ExplosionVfxSpeciesId {
      get { return explosionVfxSpeciesId_; }
      set {
        explosionVfxSpeciesId_ = value;
      }
    }

    /// <summary>Field number for the "allows_walking" field.</summary>
    public const int AllowsWalkingFieldNumber = 29;
    private bool allowsWalking_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool AllowsWalking {
      get { return allowsWalking_; }
      set {
        allowsWalking_ = value;
      }
    }

    /// <summary>Field number for the "allows_crouching" field.</summary>
    public const int AllowsCrouchingFieldNumber = 30;
    private bool allowsCrouching_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool AllowsCrouching {
      get { return allowsCrouching_; }
      set {
        allowsCrouching_ = value;
      }
    }

    /// <summary>Field number for the "hardness" field.</summary>
    public const int HardnessFieldNumber = 31;
    private int hardness_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Hardness {
      get { return hardness_; }
      set {
        hardness_ = value;
      }
    }

    /// <summary>Field number for the "startup_invinsible_frames" field.</summary>
    public const int StartupInvinsibleFramesFieldNumber = 32;
    private int startupInvinsibleFrames_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StartupInvinsibleFrames {
      get { return startupInvinsibleFrames_; }
      set {
        startupInvinsibleFrames_ = value;
      }
    }

    /// <summary>Field number for the "hit_invinsible_frames" field.</summary>
    public const int HitInvinsibleFramesFieldNumber = 33;
    private int hitInvinsibleFrames_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HitInvinsibleFrames {
      get { return hitInvinsibleFrames_; }
      set {
        hitInvinsibleFrames_ = value;
      }
    }

    /// <summary>Field number for the "explosion_species_id" field.</summary>
    public const int ExplosionSpeciesIdFieldNumber = 34;
    private int explosionSpeciesId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ExplosionSpeciesId {
      get { return explosionSpeciesId_; }
      set {
        explosionSpeciesId_ = value;
      }
    }

    /// <summary>Field number for the "perp_acc_mag" field.</summary>
    public const int PerpAccMagFieldNumber = 35;
    private int perpAccMag_;
    /// <summary>
    /// acceleration perpendicular to instantaneous velocity per frame
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PerpAccMag {
      get { return perpAccMag_; }
      set {
        perpAccMag_ = value;
      }
    }

    /// <summary>Field number for the "delay_self_vel_to_active" field.</summary>
    public const int DelaySelfVelToActiveFieldNumber = 36;
    private bool delaySelfVelToActive_;
    /// <summary>
    /// if true, "self_lock_vel_x" &amp; "self_lock_vel_y" would only be applied when bullet is active 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool DelaySelfVelToActive {
      get { return delaySelfVelToActive_; }
      set {
        delaySelfVelToActive_ = value;
      }
    }

    /// <summary>Field number for the "speed_if_not_hit" field.</summary>
    public const int SpeedIfNotHitFieldNumber = 37;
    private float speedIfNotHit_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float SpeedIfNotHit {
      get { return speedIfNotHit_; }
      set {
        speedIfNotHit_ = value;
      }
    }

    /// <summary>Field number for the "omit_soft_pushback" field.</summary>
    public const int OmitSoftPushbackFieldNumber = 38;
    private bool omitSoftPushback_;
    /// <summary>
    /// Only used for melee bullets
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool OmitSoftPushback {
      get { return omitSoftPushback_; }
      set {
        omitSoftPushback_ = value;
      }
    }

    /// <summary>Field number for the "hitbox_size_inc_x" field.</summary>
    public const int HitboxSizeIncXFieldNumber = 39;
    private float hitboxSizeIncX_;
    /// <summary>
    /// Change of hitbox_size_x per frame
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float HitboxSizeIncX {
      get { return hitboxSizeIncX_; }
      set {
        hitboxSizeIncX_ = value;
      }
    }

    /// <summary>Field number for the "hitbox_size_inc_y" field.</summary>
    public const int HitboxSizeIncYFieldNumber = 40;
    private float hitboxSizeIncY_;
    /// <summary>
    /// Change of hitbox_size_y per frame
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float HitboxSizeIncY {
      get { return hitboxSizeIncY_; }
      set {
        hitboxSizeIncY_ = value;
      }
    }

    /// <summary>Field number for the "remains_upon_hit" field.</summary>
    public const int RemainsUponHitFieldNumber = 41;
    private bool remainsUponHit_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool RemainsUponHit {
      get { return remainsUponHit_; }
      set {
        remainsUponHit_ = value;
      }
    }

    /// <summary>Field number for the "rotates_along_velocity" field.</summary>
    public const int RotatesAlongVelocityFieldNumber = 42;
    private bool rotatesAlongVelocity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool RotatesAlongVelocity {
      get { return rotatesAlongVelocity_; }
      set {
        rotatesAlongVelocity_ = value;
      }
    }

    /// <summary>Field number for the "default_hard_pushback_bounce_quota" field.</summary>
    public const int DefaultHardPushbackBounceQuotaFieldNumber = 43;
    private int defaultHardPushbackBounceQuota_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DefaultHardPushbackBounceQuota {
      get { return defaultHardPushbackBounceQuota_; }
      set {
        defaultHardPushbackBounceQuota_ = value;
      }
    }

    /// <summary>Field number for the "hard_pushback_bounce_norm_factor" field.</summary>
    public const int HardPushbackBounceNormFactorFieldNumber = 44;
    private float hardPushbackBounceNormFactor_;
    /// <summary>
    /// For attenuation
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float HardPushbackBounceNormFactor {
      get { return hardPushbackBounceNormFactor_; }
      set {
        hardPushbackBounceNormFactor_ = value;
      }
    }

    /// <summary>Field number for the "hard_pushback_bounce_sheer_factor" field.</summary>
    public const int HardPushbackBounceSheerFactorFieldNumber = 45;
    private float hardPushbackBounceSheerFactor_;
    /// <summary>
    /// For attenuation
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float HardPushbackBounceSheerFactor {
      get { return hardPushbackBounceSheerFactor_; }
      set {
        hardPushbackBounceSheerFactor_ = value;
      }
    }

    /// <summary>Field number for the "is_pixelated_active_vfx" field.</summary>
    public const int IsPixelatedActiveVfxFieldNumber = 46;
    private bool isPixelatedActiveVfx_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsPixelatedActiveVfx {
      get { return isPixelatedActiveVfx_; }
      set {
        isPixelatedActiveVfx_ = value;
      }
    }

    /// <summary>Field number for the "is_pixelated_explostion_vfx" field.</summary>
    public const int IsPixelatedExplostionVfxFieldNumber = 47;
    private bool isPixelatedExplostionVfx_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsPixelatedExplostionVfx {
      get { return isPixelatedExplostionVfx_; }
      set {
        isPixelatedExplostionVfx_ = value;
      }
    }

    /// <summary>Field number for the "mh_vanish_on_melee_hit" field.</summary>
    public const int MhVanishOnMeleeHitFieldNumber = 48;
    private bool mhVanishOnMeleeHit_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool MhVanishOnMeleeHit {
      get { return mhVanishOnMeleeHit_; }
      set {
        mhVanishOnMeleeHit_ = value;
      }
    }

    /// <summary>Field number for the "down_slope_primer_vel_y" field.</summary>
    public const int DownSlopePrimerVelYFieldNumber = 49;
    private float downSlopePrimerVelY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float DownSlopePrimerVelY {
      get { return downSlopePrimerVelY_; }
      set {
        downSlopePrimerVelY_ = value;
      }
    }

    /// <summary>Field number for the "mh_updates_origin_pos" field.</summary>
    public const int MhUpdatesOriginPosFieldNumber = 50;
    private bool mhUpdatesOriginPos_;
    /// <summary>
    /// Default is false, multihit bullets will inherit (originated_virtual_grid_x, originated_virtual_grid_y) from the previous bullet
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool MhUpdatesOriginPos {
      get { return mhUpdatesOriginPos_; }
      set {
        mhUpdatesOriginPos_ = value;
      }
    }

    /// <summary>Field number for the "beam_collision" field.</summary>
    public const int BeamCollisionFieldNumber = 51;
    private bool beamCollision_;
    /// <summary>
    /// If true, both collision &amp; rendering of the bullet will respect (originated_virtual_grid_x, originated_virtual_grid_y) -> (virtual_grid_x, virtual_grid_y)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool BeamCollision {
      get { return beamCollision_; }
      set {
        beamCollision_ = value;
      }
    }

    /// <summary>Field number for the "angular_frame_vel_cos" field.</summary>
    public const int AngularFrameVelCosFieldNumber = 52;
    private float angularFrameVelCos_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float AngularFrameVelCos {
      get { return angularFrameVelCos_; }
      set {
        angularFrameVelCos_ = value;
      }
    }

    /// <summary>Field number for the "angular_frame_vel_sin" field.</summary>
    public const int AngularFrameVelSinFieldNumber = 53;
    private float angularFrameVelSin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float AngularFrameVelSin {
      get { return angularFrameVelSin_; }
      set {
        angularFrameVelSin_ = value;
      }
    }

    /// <summary>Field number for the "vision_offset_x" field.</summary>
    public const int VisionOffsetXFieldNumber = 54;
    private float visionOffsetX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float VisionOffsetX {
      get { return visionOffsetX_; }
      set {
        visionOffsetX_ = value;
      }
    }

    /// <summary>Field number for the "vision_offset_y" field.</summary>
    public const int VisionOffsetYFieldNumber = 55;
    private float visionOffsetY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float VisionOffsetY {
      get { return visionOffsetY_; }
      set {
        visionOffsetY_ = value;
      }
    }

    /// <summary>Field number for the "vision_size_x" field.</summary>
    public const int VisionSizeXFieldNumber = 56;
    private float visionSizeX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float VisionSizeX {
      get { return visionSizeX_; }
      set {
        visionSizeX_ = value;
      }
    }

    /// <summary>Field number for the "vision_size_y" field.</summary>
    public const int VisionSizeYFieldNumber = 57;
    private float visionSizeY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float VisionSizeY {
      get { return visionSizeY_; }
      set {
        visionSizeY_ = value;
      }
    }

    /// <summary>Field number for the "self_lock_vel_yWhen_flying" field.</summary>
    public const int SelfLockVelYWhenFlyingFieldNumber = 58;
    private int selfLockVelYWhenFlying_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SelfLockVelYWhenFlying {
      get { return selfLockVelYWhenFlying_; }
      set {
        selfLockVelYWhenFlying_ = value;
      }
    }

    /// <summary>Field number for the "elemental_attrs" field.</summary>
    public const int ElementalAttrsFieldNumber = 59;
    private uint elementalAttrs_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ElementalAttrs {
      get { return elementalAttrs_; }
      set {
        elementalAttrs_ = value;
      }
    }

    /// <summary>Field number for the "cancellable_by_inventory_slot_c" field.</summary>
    public const int CancellableByInventorySlotCFieldNumber = 60;
    private bool cancellableByInventorySlotC_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool CancellableByInventorySlotC {
      get { return cancellableByInventorySlotC_; }
      set {
        cancellableByInventorySlotC_ = value;
      }
    }

    /// <summary>Field number for the "cancellable_by_inventory_slot_d" field.</summary>
    public const int CancellableByInventorySlotDFieldNumber = 61;
    private bool cancellableByInventorySlotD_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool CancellableByInventorySlotD {
      get { return cancellableByInventorySlotD_; }
      set {
        cancellableByInventorySlotD_ = value;
      }
    }

    /// <summary>Field number for the "spin_anchor_x" field.</summary>
    public const int SpinAnchorXFieldNumber = 62;
    private float spinAnchorX_;
    /// <summary>
    /// collision space translation from the original anchor of unrotated polygon 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float SpinAnchorX {
      get { return spinAnchorX_; }
      set {
        spinAnchorX_ = value;
      }
    }

    /// <summary>Field number for the "spin_anchor_y" field.</summary>
    public const int SpinAnchorYFieldNumber = 63;
    private float spinAnchorY_;
    /// <summary>
    /// collision space translation from the original anchor of unrotated polygon
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float SpinAnchorY {
      get { return spinAnchorY_; }
      set {
        spinAnchorY_ = value;
      }
    }

    /// <summary>Field number for the "beam_visual_size_y" field.</summary>
    public const int BeamVisualSizeYFieldNumber = 64;
    private float beamVisualSizeY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float BeamVisualSizeY {
      get { return beamVisualSizeY_; }
      set {
        beamVisualSizeY_ = value;
      }
    }

    /// <summary>Field number for the "touch_explosion_bomb_collision" field.</summary>
    public const int TouchExplosionBombCollisionFieldNumber = 65;
    private bool touchExplosionBombCollision_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool TouchExplosionBombCollision {
      get { return touchExplosionBombCollision_; }
      set {
        touchExplosionBombCollision_ = value;
      }
    }

    /// <summary>Field number for the "air_riding_ground_wave" field.</summary>
    public const int AirRidingGroundWaveFieldNumber = 66;
    private bool airRidingGroundWave_;
    /// <summary>
    /// Only applicable to "b_type == GroundWave"
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool AirRidingGroundWave {
      get { return airRidingGroundWave_; }
      set {
        airRidingGroundWave_ = value;
      }
    }

    /// <summary>Field number for the "ground_impact_melee_collision" field.</summary>
    public const int GroundImpactMeleeCollisionFieldNumber = 67;
    private bool groundImpactMeleeCollision_;
    /// <summary>
    /// Only applicable to "b_type == Melee"
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool GroundImpactMeleeCollision {
      get { return groundImpactMeleeCollision_; }
      set {
        groundImpactMeleeCollision_ = value;
      }
    }

    /// <summary>Field number for the "wall_impact_melee_collision" field.</summary>
    public const int WallImpactMeleeCollisionFieldNumber = 68;
    private bool wallImpactMeleeCollision_;
    /// <summary>
    /// Only applicable to "b_type == Melee"
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool WallImpactMeleeCollision {
      get { return wallImpactMeleeCollision_; }
      set {
        wallImpactMeleeCollision_ = value;
      }
    }

    /// <summary>Field number for the "mh_inherits_spin" field.</summary>
    public const int MhInheritsSpinFieldNumber = 69;
    private bool mhInheritsSpin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool MhInheritsSpin {
      get { return mhInheritsSpin_; }
      set {
        mhInheritsSpin_ = value;
      }
    }

    /// <summary>Field number for the "init_spin_cos" field.</summary>
    public const int InitSpinCosFieldNumber = 70;
    private float initSpinCos_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float InitSpinCos {
      get { return initSpinCos_; }
      set {
        initSpinCos_ = value;
      }
    }

    /// <summary>Field number for the "init_spin_sin" field.</summary>
    public const int InitSpinSinFieldNumber = 71;
    private float initSpinSin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float InitSpinSin {
      get { return initSpinSin_; }
      set {
        initSpinSin_ = value;
      }
    }

    /// <summary>Field number for the "finishing_frames" field.</summary>
    public const int FinishingFramesFieldNumber = 72;
    private int finishingFrames_;
    /// <summary>
    /// Only applicable to "true == ground_impact_melee_collision"
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FinishingFrames {
      get { return finishingFrames_; }
      set {
        finishingFrames_ = value;
      }
    }

    /// <summary>Field number for the "no_explosion_on_hard_pushback" field.</summary>
    public const int NoExplosionOnHardPushbackFieldNumber = 73;
    private bool noExplosionOnHardPushback_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool NoExplosionOnHardPushback {
      get { return noExplosionOnHardPushback_; }
      set {
        noExplosionOnHardPushback_ = value;
      }
    }

    /// <summary>Field number for the "startup_vfx_species_id" field.</summary>
    public const int StartupVfxSpeciesIdFieldNumber = 74;
    private int startupVfxSpeciesId_;
    /// <summary>
    /// currently only support 1 vfx config when starting up
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StartupVfxSpeciesId {
      get { return startupVfxSpeciesId_; }
      set {
        startupVfxSpeciesId_ = value;
      }
    }

    /// <summary>Field number for the "ifc" field.</summary>
    public const int IfcFieldNumber = 75;
    private global::jtshared.IfaceCat ifc_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::jtshared.IfaceCat Ifc {
      get { return ifc_; }
      set {
        ifc_ = value;
      }
    }

    /// <summary>Field number for the "reflect_fireball_xIf_not_harder" field.</summary>
    public const int ReflectFireballXIfNotHarderFieldNumber = 76;
    private bool reflectFireballXIfNotHarder_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ReflectFireballXIfNotHarder {
      get { return reflectFireballXIfNotHarder_; }
      set {
        reflectFireballXIfNotHarder_ = value;
      }
    }

    /// <summary>Field number for the "rejects_reflection_from_another_bullet" field.</summary>
    public const int RejectsReflectionFromAnotherBulletFieldNumber = 77;
    private bool rejectsReflectionFromAnotherBullet_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool RejectsReflectionFromAnotherBullet {
      get { return rejectsReflectionFromAnotherBullet_; }
      set {
        rejectsReflectionFromAnotherBullet_ = value;
      }
    }

    /// <summary>Field number for the "provides_xHard_pushback" field.</summary>
    public const int ProvidesXHardPushbackFieldNumber = 78;
    private bool providesXHardPushback_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ProvidesXHardPushback {
      get { return providesXHardPushback_; }
      set {
        providesXHardPushback_ = value;
      }
    }

    /// <summary>Field number for the "provides_yHard_pushback_top" field.</summary>
    public const int ProvidesYHardPushbackTopFieldNumber = 79;
    private bool providesYHardPushbackTop_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ProvidesYHardPushbackTop {
      get { return providesYHardPushbackTop_; }
      set {
        providesYHardPushbackTop_ = value;
      }
    }

    /// <summary>Field number for the "provides_yHard_pushback_bottom" field.</summary>
    public const int ProvidesYHardPushbackBottomFieldNumber = 80;
    private bool providesYHardPushbackBottom_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ProvidesYHardPushbackBottom {
      get { return providesYHardPushbackBottom_; }
      set {
        providesYHardPushbackBottom_ = value;
      }
    }

    /// <summary>Field number for the "ignore_slope_deceleration" field.</summary>
    public const int IgnoreSlopeDecelerationFieldNumber = 81;
    private bool ignoreSlopeDeceleration_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IgnoreSlopeDeceleration {
      get { return ignoreSlopeDeceleration_; }
      set {
        ignoreSlopeDeceleration_ = value;
      }
    }

    /// <summary>Field number for the "rotate_offender_with_spin" field.</summary>
    public const int RotateOffenderWithSpinFieldNumber = 82;
    private bool rotateOffenderWithSpin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool RotateOffenderWithSpin {
      get { return rotateOffenderWithSpin_; }
      set {
        rotateOffenderWithSpin_ = value;
      }
    }

    /// <summary>Field number for the "mh_not_trigger_on_ch_hit" field.</summary>
    public const int MhNotTriggerOnChHitFieldNumber = 83;
    private bool mhNotTriggerOnChHit_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool MhNotTriggerOnChHit {
      get { return mhNotTriggerOnChHit_; }
      set {
        mhNotTriggerOnChHit_ = value;
      }
    }

    /// <summary>Field number for the "mh_not_trigger_on_harder_bullet_hit" field.</summary>
    public const int MhNotTriggerOnHarderBulletHitFieldNumber = 84;
    private bool mhNotTriggerOnHarderBulletHit_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool MhNotTriggerOnHarderBulletHit {
      get { return mhNotTriggerOnHarderBulletHit_; }
      set {
        mhNotTriggerOnHarderBulletHit_ = value;
      }
    }

    /// <summary>Field number for the "mh_not_trigger_on_hard_pushback_hit" field.</summary>
    public const int MhNotTriggerOnHardPushbackHitFieldNumber = 85;
    private bool mhNotTriggerOnHardPushbackHit_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool MhNotTriggerOnHardPushbackHit {
      get { return mhNotTriggerOnHardPushbackHit_; }
      set {
        mhNotTriggerOnHardPushbackHit_ = value;
      }
    }

    /// <summary>Field number for the "hopper_missile" field.</summary>
    public const int HopperMissileFieldNumber = 86;
    private bool hopperMissile_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HopperMissile {
      get { return hopperMissile_; }
      set {
        hopperMissile_ = value;
      }
    }

    /// <summary>Field number for the "beam_rendering" field.</summary>
    public const int BeamRenderingFieldNumber = 87;
    private bool beamRendering_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool BeamRendering {
      get { return beamRendering_; }
      set {
        beamRendering_ = value;
      }
    }

    /// <summary>Field number for the "missile_search_interval_pow2Minus1" field.</summary>
    public const int MissileSearchIntervalPow2Minus1FieldNumber = 88;
    private uint missileSearchIntervalPow2Minus1_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MissileSearchIntervalPow2Minus1 {
      get { return missileSearchIntervalPow2Minus1_; }
      set {
        missileSearchIntervalPow2Minus1_ = value;
      }
    }

    /// <summary>Field number for the "use_ch_offset_regardless_of_emission_mh" field.</summary>
    public const int UseChOffsetRegardlessOfEmissionMhFieldNumber = 89;
    private bool useChOffsetRegardlessOfEmissionMh_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool UseChOffsetRegardlessOfEmissionMh {
      get { return useChOffsetRegardlessOfEmissionMh_; }
      set {
        useChOffsetRegardlessOfEmissionMh_ = value;
      }
    }

    /// <summary>Field number for the "inplace_vanish_explosion_species_id" field.</summary>
    public const int InplaceVanishExplosionSpeciesIdFieldNumber = 90;
    private int inplaceVanishExplosionSpeciesId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int InplaceVanishExplosionSpeciesId {
      get { return inplaceVanishExplosionSpeciesId_; }
      set {
        inplaceVanishExplosionSpeciesId_ = value;
      }
    }

    /// <summary>Field number for the "anim_looping_rdf_offset" field.</summary>
    public const int AnimLoopingRdfOffsetFieldNumber = 91;
    private int animLoopingRdfOffset_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AnimLoopingRdfOffset {
      get { return animLoopingRdfOffset_; }
      set {
        animLoopingRdfOffset_ = value;
      }
    }

    /// <summary>Field number for the "explosion_anim_looping_rdf_offset" field.</summary>
    public const int ExplosionAnimLoopingRdfOffsetFieldNumber = 92;
    private int explosionAnimLoopingRdfOffset_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ExplosionAnimLoopingRdfOffset {
      get { return explosionAnimLoopingRdfOffset_; }
      set {
        explosionAnimLoopingRdfOffset_ = value;
      }
    }

    /// <summary>Field number for the "gauge_inc_reduction_ratio" field.</summary>
    public const int GaugeIncReductionRatioFieldNumber = 93;
    private float gaugeIncReductionRatio_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float GaugeIncReductionRatio {
      get { return gaugeIncReductionRatio_; }
      set {
        gaugeIncReductionRatio_ = value;
      }
    }

    /// <summary>Field number for the "mh_inherits_frames_in_bl_state" field.</summary>
    public const int MhInheritsFramesInBlStateFieldNumber = 94;
    private bool mhInheritsFramesInBlState_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool MhInheritsFramesInBlState {
      get { return mhInheritsFramesInBlState_; }
      set {
        mhInheritsFramesInBlState_ = value;
      }
    }

    /// <summary>Field number for the "guard_breaker_extra_hit_cnt" field.</summary>
    public const int GuardBreakerExtraHitCntFieldNumber = 95;
    private uint guardBreakerExtraHitCnt_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint GuardBreakerExtraHitCnt {
      get { return guardBreakerExtraHitCnt_; }
      set {
        guardBreakerExtraHitCnt_ = value;
      }
    }

    /// <summary>Field number for the "takes_def1_as_hard_pushback" field.</summary>
    public const int TakesDef1AsHardPushbackFieldNumber = 96;
    private bool takesDef1AsHardPushback_;
    /// <summary>
    /// [WARNING] Always implies "beam_collision" and must be used together with "beam_collision".
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool TakesDef1AsHardPushback {
      get { return takesDef1AsHardPushback_; }
      set {
        takesDef1AsHardPushback_ = value;
      }
    }

    /// <summary>Field number for the "collision_type_mask" field.</summary>
    public const int CollisionTypeMaskFieldNumber = 1029;
    private ulong collisionTypeMask_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong CollisionTypeMask {
      get { return collisionTypeMask_; }
      set {
        collisionTypeMask_ = value;
      }
    }

    /// <summary>Field number for the "takes_gravity" field.</summary>
    public const int TakesGravityFieldNumber = 1030;
    private bool takesGravity_;
    /// <summary>
    /// e.g. a bomb, a ground-wave
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool TakesGravity {
      get { return takesGravity_; }
      set {
        takesGravity_ = value;
      }
    }

    /// <summary>Field number for the "buff_config" field.</summary>
    public const int BuffConfigFieldNumber = 1031;
    private global::jtshared.BuffConfig buffConfig_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::jtshared.BuffConfig BuffConfig {
      get { return buffConfig_; }
      set {
        buffConfig_ = value;
      }
    }

    /// <summary>Field number for the "character_emit_sfx_name" field.</summary>
    public const int CharacterEmitSfxNameFieldNumber = 2048;
    private string characterEmitSfxName_ = "";
    /// <summary>
    /// Sfx configs
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CharacterEmitSfxName {
      get { return characterEmitSfxName_; }
      set {
        characterEmitSfxName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "fireball_emit_sfx_name" field.</summary>
    public const int FireballEmitSfxNameFieldNumber = 2049;
    private string fireballEmitSfxName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FireballEmitSfxName {
      get { return fireballEmitSfxName_; }
      set {
        fireballEmitSfxName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "explosion_sfx_name" field.</summary>
    public const int ExplosionSfxNameFieldNumber = 2050;
    private string explosionSfxName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ExplosionSfxName {
      get { return explosionSfxName_; }
      set {
        explosionSfxName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "active_sfx_name" field.</summary>
    public const int ActiveSfxNameFieldNumber = 2051;
    private string activeSfxName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ActiveSfxName {
      get { return activeSfxName_; }
      set {
        activeSfxName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "explosion_on_flesh_sfx_name" field.</summary>
    public const int ExplosionOnFleshSfxNameFieldNumber = 2052;
    private string explosionOnFleshSfxName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ExplosionOnFleshSfxName {
      get { return explosionOnFleshSfxName_; }
      set {
        explosionOnFleshSfxName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "explosion_on_rock_sfx_name" field.</summary>
    public const int ExplosionOnRockSfxNameFieldNumber = 2053;
    private string explosionOnRockSfxName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ExplosionOnRockSfxName {
      get { return explosionOnRockSfxName_; }
      set {
        explosionOnRockSfxName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "explosion_on_metal_sfx_name" field.</summary>
    public const int ExplosionOnMetalSfxNameFieldNumber = 2054;
    private string explosionOnMetalSfxName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ExplosionOnMetalSfxName {
      get { return explosionOnMetalSfxName_; }
      set {
        explosionOnMetalSfxName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "explosion_on_wood_sfx_name" field.</summary>
    public const int ExplosionOnWoodSfxNameFieldNumber = 2055;
    private string explosionOnWoodSfxName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ExplosionOnWoodSfxName {
      get { return explosionOnWoodSfxName_; }
      set {
        explosionOnWoodSfxName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BulletConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BulletConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (StartupFrames != other.StartupFrames) return false;
      if (CancellableStFrame != other.CancellableStFrame) return false;
      if (CancellableEdFrame != other.CancellableEdFrame) return false;
      if (ActiveFrames != other.ActiveFrames) return false;
      if (HitStunFrames != other.HitStunFrames) return false;
      if (BlockStunFrames != other.BlockStunFrames) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PushbackVelX, other.PushbackVelX)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PushbackVelY, other.PushbackVelY)) return false;
      if (Damage != other.Damage) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SelfLockVelX, other.SelfLockVelX)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SelfLockVelY, other.SelfLockVelY)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(HitboxOffsetX, other.HitboxOffsetX)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(HitboxOffsetY, other.HitboxOffsetY)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(HitboxSizeX, other.HitboxSizeX)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(HitboxSizeY, other.HitboxSizeY)) return false;
      if (BlowUp != other.BlowUp) return false;
      if (SpeciesId != other.SpeciesId) return false;
      if (ExplosionFrames != other.ExplosionFrames) return false;
      if (BType != other.BType) return false;
      if (MhType != other.MhType) return false;
      if (SimultaneousMultiHitCnt != other.SimultaneousMultiHitCnt) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Speed, other.Speed)) return false;
      if (DirX != other.DirX) return false;
      if (DirY != other.DirY) return false;
      if (!CancelTransit.Equals(other.CancelTransit)) return false;
      if (RepeatQuota != other.RepeatQuota) return false;
      if (ActiveVfxSpeciesId != other.ActiveVfxSpeciesId) return false;
      if (ExplosionVfxSpeciesId != other.ExplosionVfxSpeciesId) return false;
      if (AllowsWalking != other.AllowsWalking) return false;
      if (AllowsCrouching != other.AllowsCrouching) return false;
      if (Hardness != other.Hardness) return false;
      if (StartupInvinsibleFrames != other.StartupInvinsibleFrames) return false;
      if (HitInvinsibleFrames != other.HitInvinsibleFrames) return false;
      if (ExplosionSpeciesId != other.ExplosionSpeciesId) return false;
      if (PerpAccMag != other.PerpAccMag) return false;
      if (DelaySelfVelToActive != other.DelaySelfVelToActive) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SpeedIfNotHit, other.SpeedIfNotHit)) return false;
      if (OmitSoftPushback != other.OmitSoftPushback) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(HitboxSizeIncX, other.HitboxSizeIncX)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(HitboxSizeIncY, other.HitboxSizeIncY)) return false;
      if (RemainsUponHit != other.RemainsUponHit) return false;
      if (RotatesAlongVelocity != other.RotatesAlongVelocity) return false;
      if (DefaultHardPushbackBounceQuota != other.DefaultHardPushbackBounceQuota) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(HardPushbackBounceNormFactor, other.HardPushbackBounceNormFactor)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(HardPushbackBounceSheerFactor, other.HardPushbackBounceSheerFactor)) return false;
      if (IsPixelatedActiveVfx != other.IsPixelatedActiveVfx) return false;
      if (IsPixelatedExplostionVfx != other.IsPixelatedExplostionVfx) return false;
      if (MhVanishOnMeleeHit != other.MhVanishOnMeleeHit) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(DownSlopePrimerVelY, other.DownSlopePrimerVelY)) return false;
      if (MhUpdatesOriginPos != other.MhUpdatesOriginPos) return false;
      if (BeamCollision != other.BeamCollision) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(AngularFrameVelCos, other.AngularFrameVelCos)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(AngularFrameVelSin, other.AngularFrameVelSin)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(VisionOffsetX, other.VisionOffsetX)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(VisionOffsetY, other.VisionOffsetY)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(VisionSizeX, other.VisionSizeX)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(VisionSizeY, other.VisionSizeY)) return false;
      if (SelfLockVelYWhenFlying != other.SelfLockVelYWhenFlying) return false;
      if (ElementalAttrs != other.ElementalAttrs) return false;
      if (CancellableByInventorySlotC != other.CancellableByInventorySlotC) return false;
      if (CancellableByInventorySlotD != other.CancellableByInventorySlotD) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SpinAnchorX, other.SpinAnchorX)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SpinAnchorY, other.SpinAnchorY)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(BeamVisualSizeY, other.BeamVisualSizeY)) return false;
      if (TouchExplosionBombCollision != other.TouchExplosionBombCollision) return false;
      if (AirRidingGroundWave != other.AirRidingGroundWave) return false;
      if (GroundImpactMeleeCollision != other.GroundImpactMeleeCollision) return false;
      if (WallImpactMeleeCollision != other.WallImpactMeleeCollision) return false;
      if (MhInheritsSpin != other.MhInheritsSpin) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(InitSpinCos, other.InitSpinCos)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(InitSpinSin, other.InitSpinSin)) return false;
      if (FinishingFrames != other.FinishingFrames) return false;
      if (NoExplosionOnHardPushback != other.NoExplosionOnHardPushback) return false;
      if (StartupVfxSpeciesId != other.StartupVfxSpeciesId) return false;
      if (Ifc != other.Ifc) return false;
      if (ReflectFireballXIfNotHarder != other.ReflectFireballXIfNotHarder) return false;
      if (RejectsReflectionFromAnotherBullet != other.RejectsReflectionFromAnotherBullet) return false;
      if (ProvidesXHardPushback != other.ProvidesXHardPushback) return false;
      if (ProvidesYHardPushbackTop != other.ProvidesYHardPushbackTop) return false;
      if (ProvidesYHardPushbackBottom != other.ProvidesYHardPushbackBottom) return false;
      if (IgnoreSlopeDeceleration != other.IgnoreSlopeDeceleration) return false;
      if (RotateOffenderWithSpin != other.RotateOffenderWithSpin) return false;
      if (MhNotTriggerOnChHit != other.MhNotTriggerOnChHit) return false;
      if (MhNotTriggerOnHarderBulletHit != other.MhNotTriggerOnHarderBulletHit) return false;
      if (MhNotTriggerOnHardPushbackHit != other.MhNotTriggerOnHardPushbackHit) return false;
      if (HopperMissile != other.HopperMissile) return false;
      if (BeamRendering != other.BeamRendering) return false;
      if (MissileSearchIntervalPow2Minus1 != other.MissileSearchIntervalPow2Minus1) return false;
      if (UseChOffsetRegardlessOfEmissionMh != other.UseChOffsetRegardlessOfEmissionMh) return false;
      if (InplaceVanishExplosionSpeciesId != other.InplaceVanishExplosionSpeciesId) return false;
      if (AnimLoopingRdfOffset != other.AnimLoopingRdfOffset) return false;
      if (ExplosionAnimLoopingRdfOffset != other.ExplosionAnimLoopingRdfOffset) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(GaugeIncReductionRatio, other.GaugeIncReductionRatio)) return false;
      if (MhInheritsFramesInBlState != other.MhInheritsFramesInBlState) return false;
      if (GuardBreakerExtraHitCnt != other.GuardBreakerExtraHitCnt) return false;
      if (TakesDef1AsHardPushback != other.TakesDef1AsHardPushback) return false;
      if (CollisionTypeMask != other.CollisionTypeMask) return false;
      if (TakesGravity != other.TakesGravity) return false;
      if (!object.Equals(BuffConfig, other.BuffConfig)) return false;
      if (CharacterEmitSfxName != other.CharacterEmitSfxName) return false;
      if (FireballEmitSfxName != other.FireballEmitSfxName) return false;
      if (ExplosionSfxName != other.ExplosionSfxName) return false;
      if (ActiveSfxName != other.ActiveSfxName) return false;
      if (ExplosionOnFleshSfxName != other.ExplosionOnFleshSfxName) return false;
      if (ExplosionOnRockSfxName != other.ExplosionOnRockSfxName) return false;
      if (ExplosionOnMetalSfxName != other.ExplosionOnMetalSfxName) return false;
      if (ExplosionOnWoodSfxName != other.ExplosionOnWoodSfxName) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (StartupFrames != 0) hash ^= StartupFrames.GetHashCode();
      if (CancellableStFrame != 0) hash ^= CancellableStFrame.GetHashCode();
      if (CancellableEdFrame != 0) hash ^= CancellableEdFrame.GetHashCode();
      if (ActiveFrames != 0) hash ^= ActiveFrames.GetHashCode();
      if (HitStunFrames != 0) hash ^= HitStunFrames.GetHashCode();
      if (BlockStunFrames != 0) hash ^= BlockStunFrames.GetHashCode();
      if (PushbackVelX != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PushbackVelX);
      if (PushbackVelY != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PushbackVelY);
      if (Damage != 0) hash ^= Damage.GetHashCode();
      if (SelfLockVelX != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SelfLockVelX);
      if (SelfLockVelY != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SelfLockVelY);
      if (HitboxOffsetX != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(HitboxOffsetX);
      if (HitboxOffsetY != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(HitboxOffsetY);
      if (HitboxSizeX != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(HitboxSizeX);
      if (HitboxSizeY != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(HitboxSizeY);
      if (BlowUp != false) hash ^= BlowUp.GetHashCode();
      if (SpeciesId != 0) hash ^= SpeciesId.GetHashCode();
      if (ExplosionFrames != 0) hash ^= ExplosionFrames.GetHashCode();
      if (BType != 0) hash ^= BType.GetHashCode();
      if (MhType != 0) hash ^= MhType.GetHashCode();
      if (SimultaneousMultiHitCnt != 0) hash ^= SimultaneousMultiHitCnt.GetHashCode();
      if (Speed != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Speed);
      if (DirX != 0) hash ^= DirX.GetHashCode();
      if (DirY != 0) hash ^= DirY.GetHashCode();
      hash ^= CancelTransit.GetHashCode();
      if (RepeatQuota != 0) hash ^= RepeatQuota.GetHashCode();
      if (ActiveVfxSpeciesId != 0) hash ^= ActiveVfxSpeciesId.GetHashCode();
      if (ExplosionVfxSpeciesId != 0) hash ^= ExplosionVfxSpeciesId.GetHashCode();
      if (AllowsWalking != false) hash ^= AllowsWalking.GetHashCode();
      if (AllowsCrouching != false) hash ^= AllowsCrouching.GetHashCode();
      if (Hardness != 0) hash ^= Hardness.GetHashCode();
      if (StartupInvinsibleFrames != 0) hash ^= StartupInvinsibleFrames.GetHashCode();
      if (HitInvinsibleFrames != 0) hash ^= HitInvinsibleFrames.GetHashCode();
      if (ExplosionSpeciesId != 0) hash ^= ExplosionSpeciesId.GetHashCode();
      if (PerpAccMag != 0) hash ^= PerpAccMag.GetHashCode();
      if (DelaySelfVelToActive != false) hash ^= DelaySelfVelToActive.GetHashCode();
      if (SpeedIfNotHit != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SpeedIfNotHit);
      if (OmitSoftPushback != false) hash ^= OmitSoftPushback.GetHashCode();
      if (HitboxSizeIncX != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(HitboxSizeIncX);
      if (HitboxSizeIncY != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(HitboxSizeIncY);
      if (RemainsUponHit != false) hash ^= RemainsUponHit.GetHashCode();
      if (RotatesAlongVelocity != false) hash ^= RotatesAlongVelocity.GetHashCode();
      if (DefaultHardPushbackBounceQuota != 0) hash ^= DefaultHardPushbackBounceQuota.GetHashCode();
      if (HardPushbackBounceNormFactor != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(HardPushbackBounceNormFactor);
      if (HardPushbackBounceSheerFactor != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(HardPushbackBounceSheerFactor);
      if (IsPixelatedActiveVfx != false) hash ^= IsPixelatedActiveVfx.GetHashCode();
      if (IsPixelatedExplostionVfx != false) hash ^= IsPixelatedExplostionVfx.GetHashCode();
      if (MhVanishOnMeleeHit != false) hash ^= MhVanishOnMeleeHit.GetHashCode();
      if (DownSlopePrimerVelY != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(DownSlopePrimerVelY);
      if (MhUpdatesOriginPos != false) hash ^= MhUpdatesOriginPos.GetHashCode();
      if (BeamCollision != false) hash ^= BeamCollision.GetHashCode();
      if (AngularFrameVelCos != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(AngularFrameVelCos);
      if (AngularFrameVelSin != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(AngularFrameVelSin);
      if (VisionOffsetX != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(VisionOffsetX);
      if (VisionOffsetY != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(VisionOffsetY);
      if (VisionSizeX != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(VisionSizeX);
      if (VisionSizeY != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(VisionSizeY);
      if (SelfLockVelYWhenFlying != 0) hash ^= SelfLockVelYWhenFlying.GetHashCode();
      if (ElementalAttrs != 0) hash ^= ElementalAttrs.GetHashCode();
      if (CancellableByInventorySlotC != false) hash ^= CancellableByInventorySlotC.GetHashCode();
      if (CancellableByInventorySlotD != false) hash ^= CancellableByInventorySlotD.GetHashCode();
      if (SpinAnchorX != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SpinAnchorX);
      if (SpinAnchorY != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SpinAnchorY);
      if (BeamVisualSizeY != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(BeamVisualSizeY);
      if (TouchExplosionBombCollision != false) hash ^= TouchExplosionBombCollision.GetHashCode();
      if (AirRidingGroundWave != false) hash ^= AirRidingGroundWave.GetHashCode();
      if (GroundImpactMeleeCollision != false) hash ^= GroundImpactMeleeCollision.GetHashCode();
      if (WallImpactMeleeCollision != false) hash ^= WallImpactMeleeCollision.GetHashCode();
      if (MhInheritsSpin != false) hash ^= MhInheritsSpin.GetHashCode();
      if (InitSpinCos != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(InitSpinCos);
      if (InitSpinSin != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(InitSpinSin);
      if (FinishingFrames != 0) hash ^= FinishingFrames.GetHashCode();
      if (NoExplosionOnHardPushback != false) hash ^= NoExplosionOnHardPushback.GetHashCode();
      if (StartupVfxSpeciesId != 0) hash ^= StartupVfxSpeciesId.GetHashCode();
      if (Ifc != 0) hash ^= Ifc.GetHashCode();
      if (ReflectFireballXIfNotHarder != false) hash ^= ReflectFireballXIfNotHarder.GetHashCode();
      if (RejectsReflectionFromAnotherBullet != false) hash ^= RejectsReflectionFromAnotherBullet.GetHashCode();
      if (ProvidesXHardPushback != false) hash ^= ProvidesXHardPushback.GetHashCode();
      if (ProvidesYHardPushbackTop != false) hash ^= ProvidesYHardPushbackTop.GetHashCode();
      if (ProvidesYHardPushbackBottom != false) hash ^= ProvidesYHardPushbackBottom.GetHashCode();
      if (IgnoreSlopeDeceleration != false) hash ^= IgnoreSlopeDeceleration.GetHashCode();
      if (RotateOffenderWithSpin != false) hash ^= RotateOffenderWithSpin.GetHashCode();
      if (MhNotTriggerOnChHit != false) hash ^= MhNotTriggerOnChHit.GetHashCode();
      if (MhNotTriggerOnHarderBulletHit != false) hash ^= MhNotTriggerOnHarderBulletHit.GetHashCode();
      if (MhNotTriggerOnHardPushbackHit != false) hash ^= MhNotTriggerOnHardPushbackHit.GetHashCode();
      if (HopperMissile != false) hash ^= HopperMissile.GetHashCode();
      if (BeamRendering != false) hash ^= BeamRendering.GetHashCode();
      if (MissileSearchIntervalPow2Minus1 != 0) hash ^= MissileSearchIntervalPow2Minus1.GetHashCode();
      if (UseChOffsetRegardlessOfEmissionMh != false) hash ^= UseChOffsetRegardlessOfEmissionMh.GetHashCode();
      if (InplaceVanishExplosionSpeciesId != 0) hash ^= InplaceVanishExplosionSpeciesId.GetHashCode();
      if (AnimLoopingRdfOffset != 0) hash ^= AnimLoopingRdfOffset.GetHashCode();
      if (ExplosionAnimLoopingRdfOffset != 0) hash ^= ExplosionAnimLoopingRdfOffset.GetHashCode();
      if (GaugeIncReductionRatio != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(GaugeIncReductionRatio);
      if (MhInheritsFramesInBlState != false) hash ^= MhInheritsFramesInBlState.GetHashCode();
      if (GuardBreakerExtraHitCnt != 0) hash ^= GuardBreakerExtraHitCnt.GetHashCode();
      if (TakesDef1AsHardPushback != false) hash ^= TakesDef1AsHardPushback.GetHashCode();
      if (CollisionTypeMask != 0UL) hash ^= CollisionTypeMask.GetHashCode();
      if (TakesGravity != false) hash ^= TakesGravity.GetHashCode();
      if (buffConfig_ != null) hash ^= BuffConfig.GetHashCode();
      if (CharacterEmitSfxName.Length != 0) hash ^= CharacterEmitSfxName.GetHashCode();
      if (FireballEmitSfxName.Length != 0) hash ^= FireballEmitSfxName.GetHashCode();
      if (ExplosionSfxName.Length != 0) hash ^= ExplosionSfxName.GetHashCode();
      if (ActiveSfxName.Length != 0) hash ^= ActiveSfxName.GetHashCode();
      if (ExplosionOnFleshSfxName.Length != 0) hash ^= ExplosionOnFleshSfxName.GetHashCode();
      if (ExplosionOnRockSfxName.Length != 0) hash ^= ExplosionOnRockSfxName.GetHashCode();
      if (ExplosionOnMetalSfxName.Length != 0) hash ^= ExplosionOnMetalSfxName.GetHashCode();
      if (ExplosionOnWoodSfxName.Length != 0) hash ^= ExplosionOnWoodSfxName.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (StartupFrames != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(StartupFrames);
      }
      if (CancellableStFrame != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(CancellableStFrame);
      }
      if (CancellableEdFrame != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(CancellableEdFrame);
      }
      if (ActiveFrames != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(ActiveFrames);
      }
      if (HitStunFrames != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(HitStunFrames);
      }
      if (BlockStunFrames != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(BlockStunFrames);
      }
      if (PushbackVelX != 0F) {
        output.WriteRawTag(61);
        output.WriteFloat(PushbackVelX);
      }
      if (PushbackVelY != 0F) {
        output.WriteRawTag(69);
        output.WriteFloat(PushbackVelY);
      }
      if (Damage != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(Damage);
      }
      if (SelfLockVelX != 0F) {
        output.WriteRawTag(85);
        output.WriteFloat(SelfLockVelX);
      }
      if (SelfLockVelY != 0F) {
        output.WriteRawTag(93);
        output.WriteFloat(SelfLockVelY);
      }
      if (HitboxOffsetX != 0F) {
        output.WriteRawTag(101);
        output.WriteFloat(HitboxOffsetX);
      }
      if (HitboxOffsetY != 0F) {
        output.WriteRawTag(109);
        output.WriteFloat(HitboxOffsetY);
      }
      if (HitboxSizeX != 0F) {
        output.WriteRawTag(117);
        output.WriteFloat(HitboxSizeX);
      }
      if (HitboxSizeY != 0F) {
        output.WriteRawTag(125);
        output.WriteFloat(HitboxSizeY);
      }
      if (BlowUp != false) {
        output.WriteRawTag(128, 1);
        output.WriteBool(BlowUp);
      }
      if (SpeciesId != 0) {
        output.WriteRawTag(136, 1);
        output.WriteInt32(SpeciesId);
      }
      if (ExplosionFrames != 0) {
        output.WriteRawTag(144, 1);
        output.WriteInt32(ExplosionFrames);
      }
      if (BType != 0) {
        output.WriteRawTag(152, 1);
        output.WriteEnum((int) BType);
      }
      if (MhType != 0) {
        output.WriteRawTag(160, 1);
        output.WriteEnum((int) MhType);
      }
      if (SimultaneousMultiHitCnt != 0) {
        output.WriteRawTag(168, 1);
        output.WriteUInt32(SimultaneousMultiHitCnt);
      }
      if (Speed != 0F) {
        output.WriteRawTag(181, 1);
        output.WriteFloat(Speed);
      }
      if (DirX != 0) {
        output.WriteRawTag(184, 1);
        output.WriteInt32(DirX);
      }
      if (DirY != 0) {
        output.WriteRawTag(192, 1);
        output.WriteInt32(DirY);
      }
      cancelTransit_.WriteTo(output, _map_cancelTransit_codec);
      if (RepeatQuota != 0) {
        output.WriteRawTag(208, 1);
        output.WriteInt32(RepeatQuota);
      }
      if (ActiveVfxSpeciesId != 0) {
        output.WriteRawTag(216, 1);
        output.WriteInt32(ActiveVfxSpeciesId);
      }
      if (ExplosionVfxSpeciesId != 0) {
        output.WriteRawTag(224, 1);
        output.WriteInt32(ExplosionVfxSpeciesId);
      }
      if (AllowsWalking != false) {
        output.WriteRawTag(232, 1);
        output.WriteBool(AllowsWalking);
      }
      if (AllowsCrouching != false) {
        output.WriteRawTag(240, 1);
        output.WriteBool(AllowsCrouching);
      }
      if (Hardness != 0) {
        output.WriteRawTag(248, 1);
        output.WriteInt32(Hardness);
      }
      if (StartupInvinsibleFrames != 0) {
        output.WriteRawTag(128, 2);
        output.WriteInt32(StartupInvinsibleFrames);
      }
      if (HitInvinsibleFrames != 0) {
        output.WriteRawTag(136, 2);
        output.WriteInt32(HitInvinsibleFrames);
      }
      if (ExplosionSpeciesId != 0) {
        output.WriteRawTag(144, 2);
        output.WriteInt32(ExplosionSpeciesId);
      }
      if (PerpAccMag != 0) {
        output.WriteRawTag(152, 2);
        output.WriteInt32(PerpAccMag);
      }
      if (DelaySelfVelToActive != false) {
        output.WriteRawTag(160, 2);
        output.WriteBool(DelaySelfVelToActive);
      }
      if (SpeedIfNotHit != 0F) {
        output.WriteRawTag(173, 2);
        output.WriteFloat(SpeedIfNotHit);
      }
      if (OmitSoftPushback != false) {
        output.WriteRawTag(176, 2);
        output.WriteBool(OmitSoftPushback);
      }
      if (HitboxSizeIncX != 0F) {
        output.WriteRawTag(189, 2);
        output.WriteFloat(HitboxSizeIncX);
      }
      if (HitboxSizeIncY != 0F) {
        output.WriteRawTag(197, 2);
        output.WriteFloat(HitboxSizeIncY);
      }
      if (RemainsUponHit != false) {
        output.WriteRawTag(200, 2);
        output.WriteBool(RemainsUponHit);
      }
      if (RotatesAlongVelocity != false) {
        output.WriteRawTag(208, 2);
        output.WriteBool(RotatesAlongVelocity);
      }
      if (DefaultHardPushbackBounceQuota != 0) {
        output.WriteRawTag(216, 2);
        output.WriteInt32(DefaultHardPushbackBounceQuota);
      }
      if (HardPushbackBounceNormFactor != 0F) {
        output.WriteRawTag(229, 2);
        output.WriteFloat(HardPushbackBounceNormFactor);
      }
      if (HardPushbackBounceSheerFactor != 0F) {
        output.WriteRawTag(237, 2);
        output.WriteFloat(HardPushbackBounceSheerFactor);
      }
      if (IsPixelatedActiveVfx != false) {
        output.WriteRawTag(240, 2);
        output.WriteBool(IsPixelatedActiveVfx);
      }
      if (IsPixelatedExplostionVfx != false) {
        output.WriteRawTag(248, 2);
        output.WriteBool(IsPixelatedExplostionVfx);
      }
      if (MhVanishOnMeleeHit != false) {
        output.WriteRawTag(128, 3);
        output.WriteBool(MhVanishOnMeleeHit);
      }
      if (DownSlopePrimerVelY != 0F) {
        output.WriteRawTag(141, 3);
        output.WriteFloat(DownSlopePrimerVelY);
      }
      if (MhUpdatesOriginPos != false) {
        output.WriteRawTag(144, 3);
        output.WriteBool(MhUpdatesOriginPos);
      }
      if (BeamCollision != false) {
        output.WriteRawTag(152, 3);
        output.WriteBool(BeamCollision);
      }
      if (AngularFrameVelCos != 0F) {
        output.WriteRawTag(165, 3);
        output.WriteFloat(AngularFrameVelCos);
      }
      if (AngularFrameVelSin != 0F) {
        output.WriteRawTag(173, 3);
        output.WriteFloat(AngularFrameVelSin);
      }
      if (VisionOffsetX != 0F) {
        output.WriteRawTag(181, 3);
        output.WriteFloat(VisionOffsetX);
      }
      if (VisionOffsetY != 0F) {
        output.WriteRawTag(189, 3);
        output.WriteFloat(VisionOffsetY);
      }
      if (VisionSizeX != 0F) {
        output.WriteRawTag(197, 3);
        output.WriteFloat(VisionSizeX);
      }
      if (VisionSizeY != 0F) {
        output.WriteRawTag(205, 3);
        output.WriteFloat(VisionSizeY);
      }
      if (SelfLockVelYWhenFlying != 0) {
        output.WriteRawTag(208, 3);
        output.WriteInt32(SelfLockVelYWhenFlying);
      }
      if (ElementalAttrs != 0) {
        output.WriteRawTag(216, 3);
        output.WriteUInt32(ElementalAttrs);
      }
      if (CancellableByInventorySlotC != false) {
        output.WriteRawTag(224, 3);
        output.WriteBool(CancellableByInventorySlotC);
      }
      if (CancellableByInventorySlotD != false) {
        output.WriteRawTag(232, 3);
        output.WriteBool(CancellableByInventorySlotD);
      }
      if (SpinAnchorX != 0F) {
        output.WriteRawTag(245, 3);
        output.WriteFloat(SpinAnchorX);
      }
      if (SpinAnchorY != 0F) {
        output.WriteRawTag(253, 3);
        output.WriteFloat(SpinAnchorY);
      }
      if (BeamVisualSizeY != 0F) {
        output.WriteRawTag(133, 4);
        output.WriteFloat(BeamVisualSizeY);
      }
      if (TouchExplosionBombCollision != false) {
        output.WriteRawTag(136, 4);
        output.WriteBool(TouchExplosionBombCollision);
      }
      if (AirRidingGroundWave != false) {
        output.WriteRawTag(144, 4);
        output.WriteBool(AirRidingGroundWave);
      }
      if (GroundImpactMeleeCollision != false) {
        output.WriteRawTag(152, 4);
        output.WriteBool(GroundImpactMeleeCollision);
      }
      if (WallImpactMeleeCollision != false) {
        output.WriteRawTag(160, 4);
        output.WriteBool(WallImpactMeleeCollision);
      }
      if (MhInheritsSpin != false) {
        output.WriteRawTag(168, 4);
        output.WriteBool(MhInheritsSpin);
      }
      if (InitSpinCos != 0F) {
        output.WriteRawTag(181, 4);
        output.WriteFloat(InitSpinCos);
      }
      if (InitSpinSin != 0F) {
        output.WriteRawTag(189, 4);
        output.WriteFloat(InitSpinSin);
      }
      if (FinishingFrames != 0) {
        output.WriteRawTag(192, 4);
        output.WriteInt32(FinishingFrames);
      }
      if (NoExplosionOnHardPushback != false) {
        output.WriteRawTag(200, 4);
        output.WriteBool(NoExplosionOnHardPushback);
      }
      if (StartupVfxSpeciesId != 0) {
        output.WriteRawTag(208, 4);
        output.WriteInt32(StartupVfxSpeciesId);
      }
      if (Ifc != 0) {
        output.WriteRawTag(216, 4);
        output.WriteEnum((int) Ifc);
      }
      if (ReflectFireballXIfNotHarder != false) {
        output.WriteRawTag(224, 4);
        output.WriteBool(ReflectFireballXIfNotHarder);
      }
      if (RejectsReflectionFromAnotherBullet != false) {
        output.WriteRawTag(232, 4);
        output.WriteBool(RejectsReflectionFromAnotherBullet);
      }
      if (ProvidesXHardPushback != false) {
        output.WriteRawTag(240, 4);
        output.WriteBool(ProvidesXHardPushback);
      }
      if (ProvidesYHardPushbackTop != false) {
        output.WriteRawTag(248, 4);
        output.WriteBool(ProvidesYHardPushbackTop);
      }
      if (ProvidesYHardPushbackBottom != false) {
        output.WriteRawTag(128, 5);
        output.WriteBool(ProvidesYHardPushbackBottom);
      }
      if (IgnoreSlopeDeceleration != false) {
        output.WriteRawTag(136, 5);
        output.WriteBool(IgnoreSlopeDeceleration);
      }
      if (RotateOffenderWithSpin != false) {
        output.WriteRawTag(144, 5);
        output.WriteBool(RotateOffenderWithSpin);
      }
      if (MhNotTriggerOnChHit != false) {
        output.WriteRawTag(152, 5);
        output.WriteBool(MhNotTriggerOnChHit);
      }
      if (MhNotTriggerOnHarderBulletHit != false) {
        output.WriteRawTag(160, 5);
        output.WriteBool(MhNotTriggerOnHarderBulletHit);
      }
      if (MhNotTriggerOnHardPushbackHit != false) {
        output.WriteRawTag(168, 5);
        output.WriteBool(MhNotTriggerOnHardPushbackHit);
      }
      if (HopperMissile != false) {
        output.WriteRawTag(176, 5);
        output.WriteBool(HopperMissile);
      }
      if (BeamRendering != false) {
        output.WriteRawTag(184, 5);
        output.WriteBool(BeamRendering);
      }
      if (MissileSearchIntervalPow2Minus1 != 0) {
        output.WriteRawTag(192, 5);
        output.WriteUInt32(MissileSearchIntervalPow2Minus1);
      }
      if (UseChOffsetRegardlessOfEmissionMh != false) {
        output.WriteRawTag(200, 5);
        output.WriteBool(UseChOffsetRegardlessOfEmissionMh);
      }
      if (InplaceVanishExplosionSpeciesId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(InplaceVanishExplosionSpeciesId);
      }
      if (AnimLoopingRdfOffset != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(AnimLoopingRdfOffset);
      }
      if (ExplosionAnimLoopingRdfOffset != 0) {
        output.WriteRawTag(224, 5);
        output.WriteInt32(ExplosionAnimLoopingRdfOffset);
      }
      if (GaugeIncReductionRatio != 0F) {
        output.WriteRawTag(237, 5);
        output.WriteFloat(GaugeIncReductionRatio);
      }
      if (MhInheritsFramesInBlState != false) {
        output.WriteRawTag(240, 5);
        output.WriteBool(MhInheritsFramesInBlState);
      }
      if (GuardBreakerExtraHitCnt != 0) {
        output.WriteRawTag(248, 5);
        output.WriteUInt32(GuardBreakerExtraHitCnt);
      }
      if (TakesDef1AsHardPushback != false) {
        output.WriteRawTag(128, 6);
        output.WriteBool(TakesDef1AsHardPushback);
      }
      if (CollisionTypeMask != 0UL) {
        output.WriteRawTag(168, 64);
        output.WriteUInt64(CollisionTypeMask);
      }
      if (TakesGravity != false) {
        output.WriteRawTag(176, 64);
        output.WriteBool(TakesGravity);
      }
      if (buffConfig_ != null) {
        output.WriteRawTag(186, 64);
        output.WriteMessage(BuffConfig);
      }
      if (CharacterEmitSfxName.Length != 0) {
        output.WriteRawTag(130, 128, 1);
        output.WriteString(CharacterEmitSfxName);
      }
      if (FireballEmitSfxName.Length != 0) {
        output.WriteRawTag(138, 128, 1);
        output.WriteString(FireballEmitSfxName);
      }
      if (ExplosionSfxName.Length != 0) {
        output.WriteRawTag(146, 128, 1);
        output.WriteString(ExplosionSfxName);
      }
      if (ActiveSfxName.Length != 0) {
        output.WriteRawTag(154, 128, 1);
        output.WriteString(ActiveSfxName);
      }
      if (ExplosionOnFleshSfxName.Length != 0) {
        output.WriteRawTag(162, 128, 1);
        output.WriteString(ExplosionOnFleshSfxName);
      }
      if (ExplosionOnRockSfxName.Length != 0) {
        output.WriteRawTag(170, 128, 1);
        output.WriteString(ExplosionOnRockSfxName);
      }
      if (ExplosionOnMetalSfxName.Length != 0) {
        output.WriteRawTag(178, 128, 1);
        output.WriteString(ExplosionOnMetalSfxName);
      }
      if (ExplosionOnWoodSfxName.Length != 0) {
        output.WriteRawTag(186, 128, 1);
        output.WriteString(ExplosionOnWoodSfxName);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (StartupFrames != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StartupFrames);
      }
      if (CancellableStFrame != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CancellableStFrame);
      }
      if (CancellableEdFrame != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CancellableEdFrame);
      }
      if (ActiveFrames != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ActiveFrames);
      }
      if (HitStunFrames != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HitStunFrames);
      }
      if (BlockStunFrames != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BlockStunFrames);
      }
      if (PushbackVelX != 0F) {
        size += 1 + 4;
      }
      if (PushbackVelY != 0F) {
        size += 1 + 4;
      }
      if (Damage != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Damage);
      }
      if (SelfLockVelX != 0F) {
        size += 1 + 4;
      }
      if (SelfLockVelY != 0F) {
        size += 1 + 4;
      }
      if (HitboxOffsetX != 0F) {
        size += 1 + 4;
      }
      if (HitboxOffsetY != 0F) {
        size += 1 + 4;
      }
      if (HitboxSizeX != 0F) {
        size += 1 + 4;
      }
      if (HitboxSizeY != 0F) {
        size += 1 + 4;
      }
      if (BlowUp != false) {
        size += 2 + 1;
      }
      if (SpeciesId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(SpeciesId);
      }
      if (ExplosionFrames != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ExplosionFrames);
      }
      if (BType != 0) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) BType);
      }
      if (MhType != 0) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) MhType);
      }
      if (SimultaneousMultiHitCnt != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(SimultaneousMultiHitCnt);
      }
      if (Speed != 0F) {
        size += 2 + 4;
      }
      if (DirX != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(DirX);
      }
      if (DirY != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(DirY);
      }
      size += cancelTransit_.CalculateSize(_map_cancelTransit_codec);
      if (RepeatQuota != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RepeatQuota);
      }
      if (ActiveVfxSpeciesId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ActiveVfxSpeciesId);
      }
      if (ExplosionVfxSpeciesId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ExplosionVfxSpeciesId);
      }
      if (AllowsWalking != false) {
        size += 2 + 1;
      }
      if (AllowsCrouching != false) {
        size += 2 + 1;
      }
      if (Hardness != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Hardness);
      }
      if (StartupInvinsibleFrames != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(StartupInvinsibleFrames);
      }
      if (HitInvinsibleFrames != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(HitInvinsibleFrames);
      }
      if (ExplosionSpeciesId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ExplosionSpeciesId);
      }
      if (PerpAccMag != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(PerpAccMag);
      }
      if (DelaySelfVelToActive != false) {
        size += 2 + 1;
      }
      if (SpeedIfNotHit != 0F) {
        size += 2 + 4;
      }
      if (OmitSoftPushback != false) {
        size += 2 + 1;
      }
      if (HitboxSizeIncX != 0F) {
        size += 2 + 4;
      }
      if (HitboxSizeIncY != 0F) {
        size += 2 + 4;
      }
      if (RemainsUponHit != false) {
        size += 2 + 1;
      }
      if (RotatesAlongVelocity != false) {
        size += 2 + 1;
      }
      if (DefaultHardPushbackBounceQuota != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(DefaultHardPushbackBounceQuota);
      }
      if (HardPushbackBounceNormFactor != 0F) {
        size += 2 + 4;
      }
      if (HardPushbackBounceSheerFactor != 0F) {
        size += 2 + 4;
      }
      if (IsPixelatedActiveVfx != false) {
        size += 2 + 1;
      }
      if (IsPixelatedExplostionVfx != false) {
        size += 2 + 1;
      }
      if (MhVanishOnMeleeHit != false) {
        size += 2 + 1;
      }
      if (DownSlopePrimerVelY != 0F) {
        size += 2 + 4;
      }
      if (MhUpdatesOriginPos != false) {
        size += 2 + 1;
      }
      if (BeamCollision != false) {
        size += 2 + 1;
      }
      if (AngularFrameVelCos != 0F) {
        size += 2 + 4;
      }
      if (AngularFrameVelSin != 0F) {
        size += 2 + 4;
      }
      if (VisionOffsetX != 0F) {
        size += 2 + 4;
      }
      if (VisionOffsetY != 0F) {
        size += 2 + 4;
      }
      if (VisionSizeX != 0F) {
        size += 2 + 4;
      }
      if (VisionSizeY != 0F) {
        size += 2 + 4;
      }
      if (SelfLockVelYWhenFlying != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(SelfLockVelYWhenFlying);
      }
      if (ElementalAttrs != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(ElementalAttrs);
      }
      if (CancellableByInventorySlotC != false) {
        size += 2 + 1;
      }
      if (CancellableByInventorySlotD != false) {
        size += 2 + 1;
      }
      if (SpinAnchorX != 0F) {
        size += 2 + 4;
      }
      if (SpinAnchorY != 0F) {
        size += 2 + 4;
      }
      if (BeamVisualSizeY != 0F) {
        size += 2 + 4;
      }
      if (TouchExplosionBombCollision != false) {
        size += 2 + 1;
      }
      if (AirRidingGroundWave != false) {
        size += 2 + 1;
      }
      if (GroundImpactMeleeCollision != false) {
        size += 2 + 1;
      }
      if (WallImpactMeleeCollision != false) {
        size += 2 + 1;
      }
      if (MhInheritsSpin != false) {
        size += 2 + 1;
      }
      if (InitSpinCos != 0F) {
        size += 2 + 4;
      }
      if (InitSpinSin != 0F) {
        size += 2 + 4;
      }
      if (FinishingFrames != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(FinishingFrames);
      }
      if (NoExplosionOnHardPushback != false) {
        size += 2 + 1;
      }
      if (StartupVfxSpeciesId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(StartupVfxSpeciesId);
      }
      if (Ifc != 0) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) Ifc);
      }
      if (ReflectFireballXIfNotHarder != false) {
        size += 2 + 1;
      }
      if (RejectsReflectionFromAnotherBullet != false) {
        size += 2 + 1;
      }
      if (ProvidesXHardPushback != false) {
        size += 2 + 1;
      }
      if (ProvidesYHardPushbackTop != false) {
        size += 2 + 1;
      }
      if (ProvidesYHardPushbackBottom != false) {
        size += 2 + 1;
      }
      if (IgnoreSlopeDeceleration != false) {
        size += 2 + 1;
      }
      if (RotateOffenderWithSpin != false) {
        size += 2 + 1;
      }
      if (MhNotTriggerOnChHit != false) {
        size += 2 + 1;
      }
      if (MhNotTriggerOnHarderBulletHit != false) {
        size += 2 + 1;
      }
      if (MhNotTriggerOnHardPushbackHit != false) {
        size += 2 + 1;
      }
      if (HopperMissile != false) {
        size += 2 + 1;
      }
      if (BeamRendering != false) {
        size += 2 + 1;
      }
      if (MissileSearchIntervalPow2Minus1 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(MissileSearchIntervalPow2Minus1);
      }
      if (UseChOffsetRegardlessOfEmissionMh != false) {
        size += 2 + 1;
      }
      if (InplaceVanishExplosionSpeciesId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(InplaceVanishExplosionSpeciesId);
      }
      if (AnimLoopingRdfOffset != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(AnimLoopingRdfOffset);
      }
      if (ExplosionAnimLoopingRdfOffset != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ExplosionAnimLoopingRdfOffset);
      }
      if (GaugeIncReductionRatio != 0F) {
        size += 2 + 4;
      }
      if (MhInheritsFramesInBlState != false) {
        size += 2 + 1;
      }
      if (GuardBreakerExtraHitCnt != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(GuardBreakerExtraHitCnt);
      }
      if (TakesDef1AsHardPushback != false) {
        size += 2 + 1;
      }
      if (CollisionTypeMask != 0UL) {
        size += 2 + pb::CodedOutputStream.ComputeUInt64Size(CollisionTypeMask);
      }
      if (TakesGravity != false) {
        size += 2 + 1;
      }
      if (buffConfig_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(BuffConfig);
      }
      if (CharacterEmitSfxName.Length != 0) {
        size += 3 + pb::CodedOutputStream.ComputeStringSize(CharacterEmitSfxName);
      }
      if (FireballEmitSfxName.Length != 0) {
        size += 3 + pb::CodedOutputStream.ComputeStringSize(FireballEmitSfxName);
      }
      if (ExplosionSfxName.Length != 0) {
        size += 3 + pb::CodedOutputStream.ComputeStringSize(ExplosionSfxName);
      }
      if (ActiveSfxName.Length != 0) {
        size += 3 + pb::CodedOutputStream.ComputeStringSize(ActiveSfxName);
      }
      if (ExplosionOnFleshSfxName.Length != 0) {
        size += 3 + pb::CodedOutputStream.ComputeStringSize(ExplosionOnFleshSfxName);
      }
      if (ExplosionOnRockSfxName.Length != 0) {
        size += 3 + pb::CodedOutputStream.ComputeStringSize(ExplosionOnRockSfxName);
      }
      if (ExplosionOnMetalSfxName.Length != 0) {
        size += 3 + pb::CodedOutputStream.ComputeStringSize(ExplosionOnMetalSfxName);
      }
      if (ExplosionOnWoodSfxName.Length != 0) {
        size += 3 + pb::CodedOutputStream.ComputeStringSize(ExplosionOnWoodSfxName);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BulletConfig other) {
      if (other == null) {
        return;
      }
      if (other.StartupFrames != 0) {
        StartupFrames = other.StartupFrames;
      }
      if (other.CancellableStFrame != 0) {
        CancellableStFrame = other.CancellableStFrame;
      }
      if (other.CancellableEdFrame != 0) {
        CancellableEdFrame = other.CancellableEdFrame;
      }
      if (other.ActiveFrames != 0) {
        ActiveFrames = other.ActiveFrames;
      }
      if (other.HitStunFrames != 0) {
        HitStunFrames = other.HitStunFrames;
      }
      if (other.BlockStunFrames != 0) {
        BlockStunFrames = other.BlockStunFrames;
      }
      if (other.PushbackVelX != 0F) {
        PushbackVelX = other.PushbackVelX;
      }
      if (other.PushbackVelY != 0F) {
        PushbackVelY = other.PushbackVelY;
      }
      if (other.Damage != 0) {
        Damage = other.Damage;
      }
      if (other.SelfLockVelX != 0F) {
        SelfLockVelX = other.SelfLockVelX;
      }
      if (other.SelfLockVelY != 0F) {
        SelfLockVelY = other.SelfLockVelY;
      }
      if (other.HitboxOffsetX != 0F) {
        HitboxOffsetX = other.HitboxOffsetX;
      }
      if (other.HitboxOffsetY != 0F) {
        HitboxOffsetY = other.HitboxOffsetY;
      }
      if (other.HitboxSizeX != 0F) {
        HitboxSizeX = other.HitboxSizeX;
      }
      if (other.HitboxSizeY != 0F) {
        HitboxSizeY = other.HitboxSizeY;
      }
      if (other.BlowUp != false) {
        BlowUp = other.BlowUp;
      }
      if (other.SpeciesId != 0) {
        SpeciesId = other.SpeciesId;
      }
      if (other.ExplosionFrames != 0) {
        ExplosionFrames = other.ExplosionFrames;
      }
      if (other.BType != 0) {
        BType = other.BType;
      }
      if (other.MhType != 0) {
        MhType = other.MhType;
      }
      if (other.SimultaneousMultiHitCnt != 0) {
        SimultaneousMultiHitCnt = other.SimultaneousMultiHitCnt;
      }
      if (other.Speed != 0F) {
        Speed = other.Speed;
      }
      if (other.DirX != 0) {
        DirX = other.DirX;
      }
      if (other.DirY != 0) {
        DirY = other.DirY;
      }
      cancelTransit_.Add(other.cancelTransit_);
      if (other.RepeatQuota != 0) {
        RepeatQuota = other.RepeatQuota;
      }
      if (other.ActiveVfxSpeciesId != 0) {
        ActiveVfxSpeciesId = other.ActiveVfxSpeciesId;
      }
      if (other.ExplosionVfxSpeciesId != 0) {
        ExplosionVfxSpeciesId = other.ExplosionVfxSpeciesId;
      }
      if (other.AllowsWalking != false) {
        AllowsWalking = other.AllowsWalking;
      }
      if (other.AllowsCrouching != false) {
        AllowsCrouching = other.AllowsCrouching;
      }
      if (other.Hardness != 0) {
        Hardness = other.Hardness;
      }
      if (other.StartupInvinsibleFrames != 0) {
        StartupInvinsibleFrames = other.StartupInvinsibleFrames;
      }
      if (other.HitInvinsibleFrames != 0) {
        HitInvinsibleFrames = other.HitInvinsibleFrames;
      }
      if (other.ExplosionSpeciesId != 0) {
        ExplosionSpeciesId = other.ExplosionSpeciesId;
      }
      if (other.PerpAccMag != 0) {
        PerpAccMag = other.PerpAccMag;
      }
      if (other.DelaySelfVelToActive != false) {
        DelaySelfVelToActive = other.DelaySelfVelToActive;
      }
      if (other.SpeedIfNotHit != 0F) {
        SpeedIfNotHit = other.SpeedIfNotHit;
      }
      if (other.OmitSoftPushback != false) {
        OmitSoftPushback = other.OmitSoftPushback;
      }
      if (other.HitboxSizeIncX != 0F) {
        HitboxSizeIncX = other.HitboxSizeIncX;
      }
      if (other.HitboxSizeIncY != 0F) {
        HitboxSizeIncY = other.HitboxSizeIncY;
      }
      if (other.RemainsUponHit != false) {
        RemainsUponHit = other.RemainsUponHit;
      }
      if (other.RotatesAlongVelocity != false) {
        RotatesAlongVelocity = other.RotatesAlongVelocity;
      }
      if (other.DefaultHardPushbackBounceQuota != 0) {
        DefaultHardPushbackBounceQuota = other.DefaultHardPushbackBounceQuota;
      }
      if (other.HardPushbackBounceNormFactor != 0F) {
        HardPushbackBounceNormFactor = other.HardPushbackBounceNormFactor;
      }
      if (other.HardPushbackBounceSheerFactor != 0F) {
        HardPushbackBounceSheerFactor = other.HardPushbackBounceSheerFactor;
      }
      if (other.IsPixelatedActiveVfx != false) {
        IsPixelatedActiveVfx = other.IsPixelatedActiveVfx;
      }
      if (other.IsPixelatedExplostionVfx != false) {
        IsPixelatedExplostionVfx = other.IsPixelatedExplostionVfx;
      }
      if (other.MhVanishOnMeleeHit != false) {
        MhVanishOnMeleeHit = other.MhVanishOnMeleeHit;
      }
      if (other.DownSlopePrimerVelY != 0F) {
        DownSlopePrimerVelY = other.DownSlopePrimerVelY;
      }
      if (other.MhUpdatesOriginPos != false) {
        MhUpdatesOriginPos = other.MhUpdatesOriginPos;
      }
      if (other.BeamCollision != false) {
        BeamCollision = other.BeamCollision;
      }
      if (other.AngularFrameVelCos != 0F) {
        AngularFrameVelCos = other.AngularFrameVelCos;
      }
      if (other.AngularFrameVelSin != 0F) {
        AngularFrameVelSin = other.AngularFrameVelSin;
      }
      if (other.VisionOffsetX != 0F) {
        VisionOffsetX = other.VisionOffsetX;
      }
      if (other.VisionOffsetY != 0F) {
        VisionOffsetY = other.VisionOffsetY;
      }
      if (other.VisionSizeX != 0F) {
        VisionSizeX = other.VisionSizeX;
      }
      if (other.VisionSizeY != 0F) {
        VisionSizeY = other.VisionSizeY;
      }
      if (other.SelfLockVelYWhenFlying != 0) {
        SelfLockVelYWhenFlying = other.SelfLockVelYWhenFlying;
      }
      if (other.ElementalAttrs != 0) {
        ElementalAttrs = other.ElementalAttrs;
      }
      if (other.CancellableByInventorySlotC != false) {
        CancellableByInventorySlotC = other.CancellableByInventorySlotC;
      }
      if (other.CancellableByInventorySlotD != false) {
        CancellableByInventorySlotD = other.CancellableByInventorySlotD;
      }
      if (other.SpinAnchorX != 0F) {
        SpinAnchorX = other.SpinAnchorX;
      }
      if (other.SpinAnchorY != 0F) {
        SpinAnchorY = other.SpinAnchorY;
      }
      if (other.BeamVisualSizeY != 0F) {
        BeamVisualSizeY = other.BeamVisualSizeY;
      }
      if (other.TouchExplosionBombCollision != false) {
        TouchExplosionBombCollision = other.TouchExplosionBombCollision;
      }
      if (other.AirRidingGroundWave != false) {
        AirRidingGroundWave = other.AirRidingGroundWave;
      }
      if (other.GroundImpactMeleeCollision != false) {
        GroundImpactMeleeCollision = other.GroundImpactMeleeCollision;
      }
      if (other.WallImpactMeleeCollision != false) {
        WallImpactMeleeCollision = other.WallImpactMeleeCollision;
      }
      if (other.MhInheritsSpin != false) {
        MhInheritsSpin = other.MhInheritsSpin;
      }
      if (other.InitSpinCos != 0F) {
        InitSpinCos = other.InitSpinCos;
      }
      if (other.InitSpinSin != 0F) {
        InitSpinSin = other.InitSpinSin;
      }
      if (other.FinishingFrames != 0) {
        FinishingFrames = other.FinishingFrames;
      }
      if (other.NoExplosionOnHardPushback != false) {
        NoExplosionOnHardPushback = other.NoExplosionOnHardPushback;
      }
      if (other.StartupVfxSpeciesId != 0) {
        StartupVfxSpeciesId = other.StartupVfxSpeciesId;
      }
      if (other.Ifc != 0) {
        Ifc = other.Ifc;
      }
      if (other.ReflectFireballXIfNotHarder != false) {
        ReflectFireballXIfNotHarder = other.ReflectFireballXIfNotHarder;
      }
      if (other.RejectsReflectionFromAnotherBullet != false) {
        RejectsReflectionFromAnotherBullet = other.RejectsReflectionFromAnotherBullet;
      }
      if (other.ProvidesXHardPushback != false) {
        ProvidesXHardPushback = other.ProvidesXHardPushback;
      }
      if (other.ProvidesYHardPushbackTop != false) {
        ProvidesYHardPushbackTop = other.ProvidesYHardPushbackTop;
      }
      if (other.ProvidesYHardPushbackBottom != false) {
        ProvidesYHardPushbackBottom = other.ProvidesYHardPushbackBottom;
      }
      if (other.IgnoreSlopeDeceleration != false) {
        IgnoreSlopeDeceleration = other.IgnoreSlopeDeceleration;
      }
      if (other.RotateOffenderWithSpin != false) {
        RotateOffenderWithSpin = other.RotateOffenderWithSpin;
      }
      if (other.MhNotTriggerOnChHit != false) {
        MhNotTriggerOnChHit = other.MhNotTriggerOnChHit;
      }
      if (other.MhNotTriggerOnHarderBulletHit != false) {
        MhNotTriggerOnHarderBulletHit = other.MhNotTriggerOnHarderBulletHit;
      }
      if (other.MhNotTriggerOnHardPushbackHit != false) {
        MhNotTriggerOnHardPushbackHit = other.MhNotTriggerOnHardPushbackHit;
      }
      if (other.HopperMissile != false) {
        HopperMissile = other.HopperMissile;
      }
      if (other.BeamRendering != false) {
        BeamRendering = other.BeamRendering;
      }
      if (other.MissileSearchIntervalPow2Minus1 != 0) {
        MissileSearchIntervalPow2Minus1 = other.MissileSearchIntervalPow2Minus1;
      }
      if (other.UseChOffsetRegardlessOfEmissionMh != false) {
        UseChOffsetRegardlessOfEmissionMh = other.UseChOffsetRegardlessOfEmissionMh;
      }
      if (other.InplaceVanishExplosionSpeciesId != 0) {
        InplaceVanishExplosionSpeciesId = other.InplaceVanishExplosionSpeciesId;
      }
      if (other.AnimLoopingRdfOffset != 0) {
        AnimLoopingRdfOffset = other.AnimLoopingRdfOffset;
      }
      if (other.ExplosionAnimLoopingRdfOffset != 0) {
        ExplosionAnimLoopingRdfOffset = other.ExplosionAnimLoopingRdfOffset;
      }
      if (other.GaugeIncReductionRatio != 0F) {
        GaugeIncReductionRatio = other.GaugeIncReductionRatio;
      }
      if (other.MhInheritsFramesInBlState != false) {
        MhInheritsFramesInBlState = other.MhInheritsFramesInBlState;
      }
      if (other.GuardBreakerExtraHitCnt != 0) {
        GuardBreakerExtraHitCnt = other.GuardBreakerExtraHitCnt;
      }
      if (other.TakesDef1AsHardPushback != false) {
        TakesDef1AsHardPushback = other.TakesDef1AsHardPushback;
      }
      if (other.CollisionTypeMask != 0UL) {
        CollisionTypeMask = other.CollisionTypeMask;
      }
      if (other.TakesGravity != false) {
        TakesGravity = other.TakesGravity;
      }
      if (other.buffConfig_ != null) {
        if (buffConfig_ == null) {
          BuffConfig = new global::jtshared.BuffConfig();
        }
        BuffConfig.MergeFrom(other.BuffConfig);
      }
      if (other.CharacterEmitSfxName.Length != 0) {
        CharacterEmitSfxName = other.CharacterEmitSfxName;
      }
      if (other.FireballEmitSfxName.Length != 0) {
        FireballEmitSfxName = other.FireballEmitSfxName;
      }
      if (other.ExplosionSfxName.Length != 0) {
        ExplosionSfxName = other.ExplosionSfxName;
      }
      if (other.ActiveSfxName.Length != 0) {
        ActiveSfxName = other.ActiveSfxName;
      }
      if (other.ExplosionOnFleshSfxName.Length != 0) {
        ExplosionOnFleshSfxName = other.ExplosionOnFleshSfxName;
      }
      if (other.ExplosionOnRockSfxName.Length != 0) {
        ExplosionOnRockSfxName = other.ExplosionOnRockSfxName;
      }
      if (other.ExplosionOnMetalSfxName.Length != 0) {
        ExplosionOnMetalSfxName = other.ExplosionOnMetalSfxName;
      }
      if (other.ExplosionOnWoodSfxName.Length != 0) {
        ExplosionOnWoodSfxName = other.ExplosionOnWoodSfxName;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            StartupFrames = input.ReadInt32();
            break;
          }
          case 16: {
            CancellableStFrame = input.ReadInt32();
            break;
          }
          case 24: {
            CancellableEdFrame = input.ReadInt32();
            break;
          }
          case 32: {
            ActiveFrames = input.ReadInt32();
            break;
          }
          case 40: {
            HitStunFrames = input.ReadInt32();
            break;
          }
          case 48: {
            BlockStunFrames = input.ReadInt32();
            break;
          }
          case 61: {
            PushbackVelX = input.ReadFloat();
            break;
          }
          case 69: {
            PushbackVelY = input.ReadFloat();
            break;
          }
          case 72: {
            Damage = input.ReadInt32();
            break;
          }
          case 85: {
            SelfLockVelX = input.ReadFloat();
            break;
          }
          case 93: {
            SelfLockVelY = input.ReadFloat();
            break;
          }
          case 101: {
            HitboxOffsetX = input.ReadFloat();
            break;
          }
          case 109: {
            HitboxOffsetY = input.ReadFloat();
            break;
          }
          case 117: {
            HitboxSizeX = input.ReadFloat();
            break;
          }
          case 125: {
            HitboxSizeY = input.ReadFloat();
            break;
          }
          case 128: {
            BlowUp = input.ReadBool();
            break;
          }
          case 136: {
            SpeciesId = input.ReadInt32();
            break;
          }
          case 144: {
            ExplosionFrames = input.ReadInt32();
            break;
          }
          case 152: {
            BType = (global::jtshared.BulletType) input.ReadEnum();
            break;
          }
          case 160: {
            MhType = (global::jtshared.MultiHitType) input.ReadEnum();
            break;
          }
          case 168: {
            SimultaneousMultiHitCnt = input.ReadUInt32();
            break;
          }
          case 181: {
            Speed = input.ReadFloat();
            break;
          }
          case 184: {
            DirX = input.ReadInt32();
            break;
          }
          case 192: {
            DirY = input.ReadInt32();
            break;
          }
          case 202: {
            cancelTransit_.AddEntriesFrom(input, _map_cancelTransit_codec);
            break;
          }
          case 208: {
            RepeatQuota = input.ReadInt32();
            break;
          }
          case 216: {
            ActiveVfxSpeciesId = input.ReadInt32();
            break;
          }
          case 224: {
            ExplosionVfxSpeciesId = input.ReadInt32();
            break;
          }
          case 232: {
            AllowsWalking = input.ReadBool();
            break;
          }
          case 240: {
            AllowsCrouching = input.ReadBool();
            break;
          }
          case 248: {
            Hardness = input.ReadInt32();
            break;
          }
          case 256: {
            StartupInvinsibleFrames = input.ReadInt32();
            break;
          }
          case 264: {
            HitInvinsibleFrames = input.ReadInt32();
            break;
          }
          case 272: {
            ExplosionSpeciesId = input.ReadInt32();
            break;
          }
          case 280: {
            PerpAccMag = input.ReadInt32();
            break;
          }
          case 288: {
            DelaySelfVelToActive = input.ReadBool();
            break;
          }
          case 301: {
            SpeedIfNotHit = input.ReadFloat();
            break;
          }
          case 304: {
            OmitSoftPushback = input.ReadBool();
            break;
          }
          case 317: {
            HitboxSizeIncX = input.ReadFloat();
            break;
          }
          case 325: {
            HitboxSizeIncY = input.ReadFloat();
            break;
          }
          case 328: {
            RemainsUponHit = input.ReadBool();
            break;
          }
          case 336: {
            RotatesAlongVelocity = input.ReadBool();
            break;
          }
          case 344: {
            DefaultHardPushbackBounceQuota = input.ReadInt32();
            break;
          }
          case 357: {
            HardPushbackBounceNormFactor = input.ReadFloat();
            break;
          }
          case 365: {
            HardPushbackBounceSheerFactor = input.ReadFloat();
            break;
          }
          case 368: {
            IsPixelatedActiveVfx = input.ReadBool();
            break;
          }
          case 376: {
            IsPixelatedExplostionVfx = input.ReadBool();
            break;
          }
          case 384: {
            MhVanishOnMeleeHit = input.ReadBool();
            break;
          }
          case 397: {
            DownSlopePrimerVelY = input.ReadFloat();
            break;
          }
          case 400: {
            MhUpdatesOriginPos = input.ReadBool();
            break;
          }
          case 408: {
            BeamCollision = input.ReadBool();
            break;
          }
          case 421: {
            AngularFrameVelCos = input.ReadFloat();
            break;
          }
          case 429: {
            AngularFrameVelSin = input.ReadFloat();
            break;
          }
          case 437: {
            VisionOffsetX = input.ReadFloat();
            break;
          }
          case 445: {
            VisionOffsetY = input.ReadFloat();
            break;
          }
          case 453: {
            VisionSizeX = input.ReadFloat();
            break;
          }
          case 461: {
            VisionSizeY = input.ReadFloat();
            break;
          }
          case 464: {
            SelfLockVelYWhenFlying = input.ReadInt32();
            break;
          }
          case 472: {
            ElementalAttrs = input.ReadUInt32();
            break;
          }
          case 480: {
            CancellableByInventorySlotC = input.ReadBool();
            break;
          }
          case 488: {
            CancellableByInventorySlotD = input.ReadBool();
            break;
          }
          case 501: {
            SpinAnchorX = input.ReadFloat();
            break;
          }
          case 509: {
            SpinAnchorY = input.ReadFloat();
            break;
          }
          case 517: {
            BeamVisualSizeY = input.ReadFloat();
            break;
          }
          case 520: {
            TouchExplosionBombCollision = input.ReadBool();
            break;
          }
          case 528: {
            AirRidingGroundWave = input.ReadBool();
            break;
          }
          case 536: {
            GroundImpactMeleeCollision = input.ReadBool();
            break;
          }
          case 544: {
            WallImpactMeleeCollision = input.ReadBool();
            break;
          }
          case 552: {
            MhInheritsSpin = input.ReadBool();
            break;
          }
          case 565: {
            InitSpinCos = input.ReadFloat();
            break;
          }
          case 573: {
            InitSpinSin = input.ReadFloat();
            break;
          }
          case 576: {
            FinishingFrames = input.ReadInt32();
            break;
          }
          case 584: {
            NoExplosionOnHardPushback = input.ReadBool();
            break;
          }
          case 592: {
            StartupVfxSpeciesId = input.ReadInt32();
            break;
          }
          case 600: {
            Ifc = (global::jtshared.IfaceCat) input.ReadEnum();
            break;
          }
          case 608: {
            ReflectFireballXIfNotHarder = input.ReadBool();
            break;
          }
          case 616: {
            RejectsReflectionFromAnotherBullet = input.ReadBool();
            break;
          }
          case 624: {
            ProvidesXHardPushback = input.ReadBool();
            break;
          }
          case 632: {
            ProvidesYHardPushbackTop = input.ReadBool();
            break;
          }
          case 640: {
            ProvidesYHardPushbackBottom = input.ReadBool();
            break;
          }
          case 648: {
            IgnoreSlopeDeceleration = input.ReadBool();
            break;
          }
          case 656: {
            RotateOffenderWithSpin = input.ReadBool();
            break;
          }
          case 664: {
            MhNotTriggerOnChHit = input.ReadBool();
            break;
          }
          case 672: {
            MhNotTriggerOnHarderBulletHit = input.ReadBool();
            break;
          }
          case 680: {
            MhNotTriggerOnHardPushbackHit = input.ReadBool();
            break;
          }
          case 688: {
            HopperMissile = input.ReadBool();
            break;
          }
          case 696: {
            BeamRendering = input.ReadBool();
            break;
          }
          case 704: {
            MissileSearchIntervalPow2Minus1 = input.ReadUInt32();
            break;
          }
          case 712: {
            UseChOffsetRegardlessOfEmissionMh = input.ReadBool();
            break;
          }
          case 720: {
            InplaceVanishExplosionSpeciesId = input.ReadInt32();
            break;
          }
          case 728: {
            AnimLoopingRdfOffset = input.ReadInt32();
            break;
          }
          case 736: {
            ExplosionAnimLoopingRdfOffset = input.ReadInt32();
            break;
          }
          case 749: {
            GaugeIncReductionRatio = input.ReadFloat();
            break;
          }
          case 752: {
            MhInheritsFramesInBlState = input.ReadBool();
            break;
          }
          case 760: {
            GuardBreakerExtraHitCnt = input.ReadUInt32();
            break;
          }
          case 768: {
            TakesDef1AsHardPushback = input.ReadBool();
            break;
          }
          case 8232: {
            CollisionTypeMask = input.ReadUInt64();
            break;
          }
          case 8240: {
            TakesGravity = input.ReadBool();
            break;
          }
          case 8250: {
            if (buffConfig_ == null) {
              BuffConfig = new global::jtshared.BuffConfig();
            }
            input.ReadMessage(BuffConfig);
            break;
          }
          case 16386: {
            CharacterEmitSfxName = input.ReadString();
            break;
          }
          case 16394: {
            FireballEmitSfxName = input.ReadString();
            break;
          }
          case 16402: {
            ExplosionSfxName = input.ReadString();
            break;
          }
          case 16410: {
            ActiveSfxName = input.ReadString();
            break;
          }
          case 16418: {
            ExplosionOnFleshSfxName = input.ReadString();
            break;
          }
          case 16426: {
            ExplosionOnRockSfxName = input.ReadString();
            break;
          }
          case 16434: {
            ExplosionOnMetalSfxName = input.ReadString();
            break;
          }
          case 16442: {
            ExplosionOnWoodSfxName = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Bullet : pb::IMessage<Bullet> {
    private static readonly pb::MessageParser<Bullet> _parser = new pb::MessageParser<Bullet>(() => new Bullet());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Bullet> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::jtshared.SerializableDataReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Bullet() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Bullet(Bullet other) : this() {
      blState_ = other.blState_;
      framesInBlState_ = other.framesInBlState_;
      id_ = other.id_;
      originatedRenderFrameId_ = other.originatedRenderFrameId_;
      offenderUd_ = other.offenderUd_;
      teamId_ = other.teamId_;
      x_ = other.x_;
      y_ = other.y_;
      dirX_ = other.dirX_;
      dirY_ = other.dirY_;
      velX_ = other.velX_;
      velY_ = other.velY_;
      originatedX_ = other.originatedX_;
      originatedY_ = other.originatedY_;
      repeatQuotaLeft_ = other.repeatQuotaLeft_;
      remainingHardPushbackBounceQuota_ = other.remainingHardPushbackBounceQuota_;
      targetUd_ = other.targetUd_;
      damageDealed_ = other.damageDealed_;
      explodedOnIfc_ = other.explodedOnIfc_;
      spinCos_ = other.spinCos_;
      spinSin_ = other.spinSin_;
      activeSkillHit_ = other.activeSkillHit_;
      skillId_ = other.skillId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Bullet Clone() {
      return new Bullet(this);
    }

    /// <summary>Field number for the "bl_state" field.</summary>
    public const int BlStateFieldNumber = 1;
    private global::jtshared.BulletState blState_ = 0;
    /// <summary>
    /// Jargon reference https://www.thegamer.com/fighting-games-frame-data-explained/
    /// ALL lengths are in world coordinate
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::jtshared.BulletState BlState {
      get { return blState_; }
      set {
        blState_ = value;
      }
    }

    /// <summary>Field number for the "frames_in_bl_state" field.</summary>
    public const int FramesInBlStateFieldNumber = 2;
    private int framesInBlState_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FramesInBlState {
      get { return framesInBlState_; }
      set {
        framesInBlState_ = value;
      }
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 25;
    private uint id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "originated_render_frame_id" field.</summary>
    public const int OriginatedRenderFrameIdFieldNumber = 4;
    private int originatedRenderFrameId_;
    /// <summary>
    /// Copied from the first bullet for all subsequent bullets
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OriginatedRenderFrameId {
      get { return originatedRenderFrameId_; }
      set {
        originatedRenderFrameId_ = value;
      }
    }

    /// <summary>Field number for the "offender_ud" field.</summary>
    public const int OffenderUdFieldNumber = 5;
    private ulong offenderUd_;
    /// <summary>
    /// Copied to favor collision handling of the dispatched bullet
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong OffenderUd {
      get { return offenderUd_; }
      set {
        offenderUd_ = value;
      }
    }

    /// <summary>Field number for the "team_id" field.</summary>
    public const int TeamIdFieldNumber = 7;
    private int teamId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TeamId {
      get { return teamId_; }
      set {
        teamId_ = value;
      }
    }

    /// <summary>Field number for the "x" field.</summary>
    public const int XFieldNumber = 8;
    private float x_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "y" field.</summary>
    public const int YFieldNumber = 9;
    private float y_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    /// <summary>Field number for the "dir_x" field.</summary>
    public const int DirXFieldNumber = 10;
    private float dirX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float DirX {
      get { return dirX_; }
      set {
        dirX_ = value;
      }
    }

    /// <summary>Field number for the "dir_y" field.</summary>
    public const int DirYFieldNumber = 11;
    private float dirY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float DirY {
      get { return dirY_; }
      set {
        dirY_ = value;
      }
    }

    /// <summary>Field number for the "vel_x" field.</summary>
    public const int VelXFieldNumber = 12;
    private float velX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float VelX {
      get { return velX_; }
      set {
        velX_ = value;
      }
    }

    /// <summary>Field number for the "vel_y" field.</summary>
    public const int VelYFieldNumber = 13;
    private float velY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float VelY {
      get { return velY_; }
      set {
        velY_ = value;
      }
    }

    /// <summary>Field number for the "originated_x" field.</summary>
    public const int OriginatedXFieldNumber = 14;
    private float originatedX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float OriginatedX {
      get { return originatedX_; }
      set {
        originatedX_ = value;
      }
    }

    /// <summary>Field number for the "originated_y" field.</summary>
    public const int OriginatedYFieldNumber = 15;
    private float originatedY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float OriginatedY {
      get { return originatedY_; }
      set {
        originatedY_ = value;
      }
    }

    /// <summary>Field number for the "repeat_quota_left" field.</summary>
    public const int RepeatQuotaLeftFieldNumber = 16;
    private int repeatQuotaLeft_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RepeatQuotaLeft {
      get { return repeatQuotaLeft_; }
      set {
        repeatQuotaLeft_ = value;
      }
    }

    /// <summary>Field number for the "remaining_hard_pushback_bounce_quota" field.</summary>
    public const int RemainingHardPushbackBounceQuotaFieldNumber = 17;
    private int remainingHardPushbackBounceQuota_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RemainingHardPushbackBounceQuota {
      get { return remainingHardPushbackBounceQuota_; }
      set {
        remainingHardPushbackBounceQuota_ = value;
      }
    }

    /// <summary>Field number for the "target_ud" field.</summary>
    public const int TargetUdFieldNumber = 18;
    private ulong targetUd_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong TargetUd {
      get { return targetUd_; }
      set {
        targetUd_ = value;
      }
    }

    /// <summary>Field number for the "damage_dealed" field.</summary>
    public const int DamageDealedFieldNumber = 19;
    private int damageDealed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DamageDealed {
      get { return damageDealed_; }
      set {
        damageDealed_ = value;
      }
    }

    /// <summary>Field number for the "exploded_on_ifc" field.</summary>
    public const int ExplodedOnIfcFieldNumber = 20;
    private global::jtshared.IfaceCat explodedOnIfc_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::jtshared.IfaceCat ExplodedOnIfc {
      get { return explodedOnIfc_; }
      set {
        explodedOnIfc_ = value;
      }
    }

    /// <summary>Field number for the "spin_cos" field.</summary>
    public const int SpinCosFieldNumber = 21;
    private float spinCos_;
    /// <summary>
    /// Not using quaternion yet because this is a 2D game.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float SpinCos {
      get { return spinCos_; }
      set {
        spinCos_ = value;
      }
    }

    /// <summary>Field number for the "spin_sin" field.</summary>
    public const int SpinSinFieldNumber = 22;
    private float spinSin_;
    /// <summary>
    /// To be used after applying "dir_x (used for mirroring)"
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float SpinSin {
      get { return spinSin_; }
      set {
        spinSin_ = value;
      }
    }

    /// <summary>Field number for the "active_skill_hit" field.</summary>
    public const int ActiveSkillHitFieldNumber = 23;
    private int activeSkillHit_;
    /// <summary>
    /// for the convenience of selecting the correct next bullet for multihit fireball (where the offender's "active_skill_hit" might've already been reset)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ActiveSkillHit {
      get { return activeSkillHit_; }
      set {
        activeSkillHit_ = value;
      }
    }

    /// <summary>Field number for the "skill_id" field.</summary>
    public const int SkillIdFieldNumber = 24;
    private uint skillId_;
    /// <summary>
    /// for the convenience of selecting the correct next bullet for multihit fireball (where the offender's "active_skill_id" might've already been reset); also for reverse lookup in multihit transition, in the most extreme case, a same "BulletConfig" instance is to be shared across different "Skill"s, thus we put "skill_id" in "BulletBattleAttr" instead.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SkillId {
      get { return skillId_; }
      set {
        skillId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Bullet);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Bullet other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BlState != other.BlState) return false;
      if (FramesInBlState != other.FramesInBlState) return false;
      if (Id != other.Id) return false;
      if (OriginatedRenderFrameId != other.OriginatedRenderFrameId) return false;
      if (OffenderUd != other.OffenderUd) return false;
      if (TeamId != other.TeamId) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(X, other.X)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Y, other.Y)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(DirX, other.DirX)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(DirY, other.DirY)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(VelX, other.VelX)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(VelY, other.VelY)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(OriginatedX, other.OriginatedX)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(OriginatedY, other.OriginatedY)) return false;
      if (RepeatQuotaLeft != other.RepeatQuotaLeft) return false;
      if (RemainingHardPushbackBounceQuota != other.RemainingHardPushbackBounceQuota) return false;
      if (TargetUd != other.TargetUd) return false;
      if (DamageDealed != other.DamageDealed) return false;
      if (ExplodedOnIfc != other.ExplodedOnIfc) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SpinCos, other.SpinCos)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SpinSin, other.SpinSin)) return false;
      if (ActiveSkillHit != other.ActiveSkillHit) return false;
      if (SkillId != other.SkillId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (BlState != 0) hash ^= BlState.GetHashCode();
      if (FramesInBlState != 0) hash ^= FramesInBlState.GetHashCode();
      if (Id != 0) hash ^= Id.GetHashCode();
      if (OriginatedRenderFrameId != 0) hash ^= OriginatedRenderFrameId.GetHashCode();
      if (OffenderUd != 0UL) hash ^= OffenderUd.GetHashCode();
      if (TeamId != 0) hash ^= TeamId.GetHashCode();
      if (X != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(X);
      if (Y != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Y);
      if (DirX != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(DirX);
      if (DirY != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(DirY);
      if (VelX != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(VelX);
      if (VelY != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(VelY);
      if (OriginatedX != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(OriginatedX);
      if (OriginatedY != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(OriginatedY);
      if (RepeatQuotaLeft != 0) hash ^= RepeatQuotaLeft.GetHashCode();
      if (RemainingHardPushbackBounceQuota != 0) hash ^= RemainingHardPushbackBounceQuota.GetHashCode();
      if (TargetUd != 0UL) hash ^= TargetUd.GetHashCode();
      if (DamageDealed != 0) hash ^= DamageDealed.GetHashCode();
      if (ExplodedOnIfc != 0) hash ^= ExplodedOnIfc.GetHashCode();
      if (SpinCos != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SpinCos);
      if (SpinSin != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SpinSin);
      if (ActiveSkillHit != 0) hash ^= ActiveSkillHit.GetHashCode();
      if (SkillId != 0) hash ^= SkillId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BlState != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) BlState);
      }
      if (FramesInBlState != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(FramesInBlState);
      }
      if (OriginatedRenderFrameId != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(OriginatedRenderFrameId);
      }
      if (OffenderUd != 0UL) {
        output.WriteRawTag(40);
        output.WriteUInt64(OffenderUd);
      }
      if (TeamId != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(TeamId);
      }
      if (X != 0F) {
        output.WriteRawTag(69);
        output.WriteFloat(X);
      }
      if (Y != 0F) {
        output.WriteRawTag(77);
        output.WriteFloat(Y);
      }
      if (DirX != 0F) {
        output.WriteRawTag(85);
        output.WriteFloat(DirX);
      }
      if (DirY != 0F) {
        output.WriteRawTag(93);
        output.WriteFloat(DirY);
      }
      if (VelX != 0F) {
        output.WriteRawTag(101);
        output.WriteFloat(VelX);
      }
      if (VelY != 0F) {
        output.WriteRawTag(109);
        output.WriteFloat(VelY);
      }
      if (OriginatedX != 0F) {
        output.WriteRawTag(117);
        output.WriteFloat(OriginatedX);
      }
      if (OriginatedY != 0F) {
        output.WriteRawTag(125);
        output.WriteFloat(OriginatedY);
      }
      if (RepeatQuotaLeft != 0) {
        output.WriteRawTag(128, 1);
        output.WriteInt32(RepeatQuotaLeft);
      }
      if (RemainingHardPushbackBounceQuota != 0) {
        output.WriteRawTag(136, 1);
        output.WriteInt32(RemainingHardPushbackBounceQuota);
      }
      if (TargetUd != 0UL) {
        output.WriteRawTag(144, 1);
        output.WriteUInt64(TargetUd);
      }
      if (DamageDealed != 0) {
        output.WriteRawTag(152, 1);
        output.WriteInt32(DamageDealed);
      }
      if (ExplodedOnIfc != 0) {
        output.WriteRawTag(160, 1);
        output.WriteEnum((int) ExplodedOnIfc);
      }
      if (SpinCos != 0F) {
        output.WriteRawTag(173, 1);
        output.WriteFloat(SpinCos);
      }
      if (SpinSin != 0F) {
        output.WriteRawTag(181, 1);
        output.WriteFloat(SpinSin);
      }
      if (ActiveSkillHit != 0) {
        output.WriteRawTag(184, 1);
        output.WriteInt32(ActiveSkillHit);
      }
      if (SkillId != 0) {
        output.WriteRawTag(192, 1);
        output.WriteUInt32(SkillId);
      }
      if (Id != 0) {
        output.WriteRawTag(200, 1);
        output.WriteUInt32(Id);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BlState != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) BlState);
      }
      if (FramesInBlState != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FramesInBlState);
      }
      if (Id != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Id);
      }
      if (OriginatedRenderFrameId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(OriginatedRenderFrameId);
      }
      if (OffenderUd != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(OffenderUd);
      }
      if (TeamId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TeamId);
      }
      if (X != 0F) {
        size += 1 + 4;
      }
      if (Y != 0F) {
        size += 1 + 4;
      }
      if (DirX != 0F) {
        size += 1 + 4;
      }
      if (DirY != 0F) {
        size += 1 + 4;
      }
      if (VelX != 0F) {
        size += 1 + 4;
      }
      if (VelY != 0F) {
        size += 1 + 4;
      }
      if (OriginatedX != 0F) {
        size += 1 + 4;
      }
      if (OriginatedY != 0F) {
        size += 1 + 4;
      }
      if (RepeatQuotaLeft != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RepeatQuotaLeft);
      }
      if (RemainingHardPushbackBounceQuota != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RemainingHardPushbackBounceQuota);
      }
      if (TargetUd != 0UL) {
        size += 2 + pb::CodedOutputStream.ComputeUInt64Size(TargetUd);
      }
      if (DamageDealed != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(DamageDealed);
      }
      if (ExplodedOnIfc != 0) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) ExplodedOnIfc);
      }
      if (SpinCos != 0F) {
        size += 2 + 4;
      }
      if (SpinSin != 0F) {
        size += 2 + 4;
      }
      if (ActiveSkillHit != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ActiveSkillHit);
      }
      if (SkillId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(SkillId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Bullet other) {
      if (other == null) {
        return;
      }
      if (other.BlState != 0) {
        BlState = other.BlState;
      }
      if (other.FramesInBlState != 0) {
        FramesInBlState = other.FramesInBlState;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.OriginatedRenderFrameId != 0) {
        OriginatedRenderFrameId = other.OriginatedRenderFrameId;
      }
      if (other.OffenderUd != 0UL) {
        OffenderUd = other.OffenderUd;
      }
      if (other.TeamId != 0) {
        TeamId = other.TeamId;
      }
      if (other.X != 0F) {
        X = other.X;
      }
      if (other.Y != 0F) {
        Y = other.Y;
      }
      if (other.DirX != 0F) {
        DirX = other.DirX;
      }
      if (other.DirY != 0F) {
        DirY = other.DirY;
      }
      if (other.VelX != 0F) {
        VelX = other.VelX;
      }
      if (other.VelY != 0F) {
        VelY = other.VelY;
      }
      if (other.OriginatedX != 0F) {
        OriginatedX = other.OriginatedX;
      }
      if (other.OriginatedY != 0F) {
        OriginatedY = other.OriginatedY;
      }
      if (other.RepeatQuotaLeft != 0) {
        RepeatQuotaLeft = other.RepeatQuotaLeft;
      }
      if (other.RemainingHardPushbackBounceQuota != 0) {
        RemainingHardPushbackBounceQuota = other.RemainingHardPushbackBounceQuota;
      }
      if (other.TargetUd != 0UL) {
        TargetUd = other.TargetUd;
      }
      if (other.DamageDealed != 0) {
        DamageDealed = other.DamageDealed;
      }
      if (other.ExplodedOnIfc != 0) {
        ExplodedOnIfc = other.ExplodedOnIfc;
      }
      if (other.SpinCos != 0F) {
        SpinCos = other.SpinCos;
      }
      if (other.SpinSin != 0F) {
        SpinSin = other.SpinSin;
      }
      if (other.ActiveSkillHit != 0) {
        ActiveSkillHit = other.ActiveSkillHit;
      }
      if (other.SkillId != 0) {
        SkillId = other.SkillId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            BlState = (global::jtshared.BulletState) input.ReadEnum();
            break;
          }
          case 16: {
            FramesInBlState = input.ReadInt32();
            break;
          }
          case 32: {
            OriginatedRenderFrameId = input.ReadInt32();
            break;
          }
          case 40: {
            OffenderUd = input.ReadUInt64();
            break;
          }
          case 56: {
            TeamId = input.ReadInt32();
            break;
          }
          case 69: {
            X = input.ReadFloat();
            break;
          }
          case 77: {
            Y = input.ReadFloat();
            break;
          }
          case 85: {
            DirX = input.ReadFloat();
            break;
          }
          case 93: {
            DirY = input.ReadFloat();
            break;
          }
          case 101: {
            VelX = input.ReadFloat();
            break;
          }
          case 109: {
            VelY = input.ReadFloat();
            break;
          }
          case 117: {
            OriginatedX = input.ReadFloat();
            break;
          }
          case 125: {
            OriginatedY = input.ReadFloat();
            break;
          }
          case 128: {
            RepeatQuotaLeft = input.ReadInt32();
            break;
          }
          case 136: {
            RemainingHardPushbackBounceQuota = input.ReadInt32();
            break;
          }
          case 144: {
            TargetUd = input.ReadUInt64();
            break;
          }
          case 152: {
            DamageDealed = input.ReadInt32();
            break;
          }
          case 160: {
            ExplodedOnIfc = (global::jtshared.IfaceCat) input.ReadEnum();
            break;
          }
          case 173: {
            SpinCos = input.ReadFloat();
            break;
          }
          case 181: {
            SpinSin = input.ReadFloat();
            break;
          }
          case 184: {
            ActiveSkillHit = input.ReadInt32();
            break;
          }
          case 192: {
            SkillId = input.ReadUInt32();
            break;
          }
          case 200: {
            Id = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class TrapConfig : pb::IMessage<TrapConfig> {
    private static readonly pb::MessageParser<TrapConfig> _parser = new pb::MessageParser<TrapConfig>(() => new TrapConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TrapConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::jtshared.SerializableDataReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TrapConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TrapConfig(TrapConfig other) : this() {
      speciesId_ = other.speciesId_;
      explosionSpeciesId_ = other.explosionSpeciesId_;
      explosionFrames_ = other.explosionFrames_;
      blowUp_ = other.blowUp_;
      damage_ = other.damage_;
      hitStunFrames_ = other.hitStunFrames_;
      hitInvinsibleFrames_ = other.hitInvinsibleFrames_;
      deactivatable_ = other.deactivatable_;
      hardness_ = other.hardness_;
      deactivateUponTriggered_ = other.deactivateUponTriggered_;
      constFrictionVelXTop_ = other.constFrictionVelXTop_;
      constFrictionVelXBottom_ = other.constFrictionVelXBottom_;
      constFrictionVelYLeft_ = other.constFrictionVelYLeft_;
      constFrictionVelYRight_ = other.constFrictionVelYRight_;
      patrolCueRequiresFullContain_ = other.patrolCueRequiresFullContain_;
      spinAnchorX_ = other.spinAnchorX_;
      spinAnchorY_ = other.spinAnchorY_;
      angularFrameVelCos_ = other.angularFrameVelCos_;
      angularFrameVelSin_ = other.angularFrameVelSin_;
      intrinsicSpinCos_ = other.intrinsicSpinCos_;
      intrinsicSpinSin_ = other.intrinsicSpinSin_;
      atk1UponTriggered_ = other.atk1UponTriggered_;
      atk1SkillId_ = other.atk1SkillId_;
      isRotary_ = other.isRotary_;
      noXFlipRendering_ = other.noXFlipRendering_;
      speciesName_ = other.speciesName_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TrapConfig Clone() {
      return new TrapConfig(this);
    }

    /// <summary>Field number for the "species_id" field.</summary>
    public const int SpeciesIdFieldNumber = 1;
    private int speciesId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SpeciesId {
      get { return speciesId_; }
      set {
        speciesId_ = value;
      }
    }

    /// <summary>Field number for the "explosion_species_id" field.</summary>
    public const int ExplosionSpeciesIdFieldNumber = 2;
    private int explosionSpeciesId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ExplosionSpeciesId {
      get { return explosionSpeciesId_; }
      set {
        explosionSpeciesId_ = value;
      }
    }

    /// <summary>Field number for the "explosion_frames" field.</summary>
    public const int ExplosionFramesFieldNumber = 3;
    private int explosionFrames_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ExplosionFrames {
      get { return explosionFrames_; }
      set {
        explosionFrames_ = value;
      }
    }

    /// <summary>Field number for the "blow_up" field.</summary>
    public const int BlowUpFieldNumber = 4;
    private bool blowUp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool BlowUp {
      get { return blowUp_; }
      set {
        blowUp_ = value;
      }
    }

    /// <summary>Field number for the "damage" field.</summary>
    public const int DamageFieldNumber = 5;
    private int damage_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Damage {
      get { return damage_; }
      set {
        damage_ = value;
      }
    }

    /// <summary>Field number for the "hit_stun_frames" field.</summary>
    public const int HitStunFramesFieldNumber = 6;
    private int hitStunFrames_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HitStunFrames {
      get { return hitStunFrames_; }
      set {
        hitStunFrames_ = value;
      }
    }

    /// <summary>Field number for the "hit_invinsible_frames" field.</summary>
    public const int HitInvinsibleFramesFieldNumber = 7;
    private int hitInvinsibleFrames_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HitInvinsibleFrames {
      get { return hitInvinsibleFrames_; }
      set {
        hitInvinsibleFrames_ = value;
      }
    }

    /// <summary>Field number for the "deactivatable" field.</summary>
    public const int DeactivatableFieldNumber = 8;
    private bool deactivatable_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Deactivatable {
      get { return deactivatable_; }
      set {
        deactivatable_ = value;
      }
    }

    /// <summary>Field number for the "hardness" field.</summary>
    public const int HardnessFieldNumber = 9;
    private int hardness_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Hardness {
      get { return hardness_; }
      set {
        hardness_ = value;
      }
    }

    /// <summary>Field number for the "deactivate_upon_triggered" field.</summary>
    public const int DeactivateUponTriggeredFieldNumber = 10;
    private bool deactivateUponTriggered_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool DeactivateUponTriggered {
      get { return deactivateUponTriggered_; }
      set {
        deactivateUponTriggered_ = value;
      }
    }

    /// <summary>Field number for the "const_friction_vel_x_top" field.</summary>
    public const int ConstFrictionVelXTopFieldNumber = 11;
    private float constFrictionVelXTop_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float ConstFrictionVelXTop {
      get { return constFrictionVelXTop_; }
      set {
        constFrictionVelXTop_ = value;
      }
    }

    /// <summary>Field number for the "const_friction_vel_x_bottom" field.</summary>
    public const int ConstFrictionVelXBottomFieldNumber = 12;
    private float constFrictionVelXBottom_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float ConstFrictionVelXBottom {
      get { return constFrictionVelXBottom_; }
      set {
        constFrictionVelXBottom_ = value;
      }
    }

    /// <summary>Field number for the "const_friction_vel_y_left" field.</summary>
    public const int ConstFrictionVelYLeftFieldNumber = 13;
    private float constFrictionVelYLeft_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float ConstFrictionVelYLeft {
      get { return constFrictionVelYLeft_; }
      set {
        constFrictionVelYLeft_ = value;
      }
    }

    /// <summary>Field number for the "const_friction_vel_y_right" field.</summary>
    public const int ConstFrictionVelYRightFieldNumber = 14;
    private float constFrictionVelYRight_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float ConstFrictionVelYRight {
      get { return constFrictionVelYRight_; }
      set {
        constFrictionVelYRight_ = value;
      }
    }

    /// <summary>Field number for the "patrol_cue_requires_full_contain" field.</summary>
    public const int PatrolCueRequiresFullContainFieldNumber = 15;
    private bool patrolCueRequiresFullContain_;
    /// <summary>
    /// For accurate positioning
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool PatrolCueRequiresFullContain {
      get { return patrolCueRequiresFullContain_; }
      set {
        patrolCueRequiresFullContain_ = value;
      }
    }

    /// <summary>Field number for the "spin_anchor_x" field.</summary>
    public const int SpinAnchorXFieldNumber = 16;
    private float spinAnchorX_;
    /// <summary>
    ///
    ///[WARNING]
    ///
    ///For a single "Trap", all of its "TrapColliderAttrs" respect the shared spin anchor &amp; angular velocity.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float SpinAnchorX {
      get { return spinAnchorX_; }
      set {
        spinAnchorX_ = value;
      }
    }

    /// <summary>Field number for the "spin_anchor_y" field.</summary>
    public const int SpinAnchorYFieldNumber = 17;
    private float spinAnchorY_;
    /// <summary>
    /// collision space translation from the original anchor of unrotated polygon
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float SpinAnchorY {
      get { return spinAnchorY_; }
      set {
        spinAnchorY_ = value;
      }
    }

    /// <summary>Field number for the "angular_frame_vel_cos" field.</summary>
    public const int AngularFrameVelCosFieldNumber = 18;
    private float angularFrameVelCos_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float AngularFrameVelCos {
      get { return angularFrameVelCos_; }
      set {
        angularFrameVelCos_ = value;
      }
    }

    /// <summary>Field number for the "angular_frame_vel_sin" field.</summary>
    public const int AngularFrameVelSinFieldNumber = 19;
    private float angularFrameVelSin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float AngularFrameVelSin {
      get { return angularFrameVelSin_; }
      set {
        angularFrameVelSin_ = value;
      }
    }

    /// <summary>Field number for the "intrinsic_spin_cos" field.</summary>
    public const int IntrinsicSpinCosFieldNumber = 20;
    private float intrinsicSpinCos_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float IntrinsicSpinCos {
      get { return intrinsicSpinCos_; }
      set {
        intrinsicSpinCos_ = value;
      }
    }

    /// <summary>Field number for the "intrinsic_spin_sin" field.</summary>
    public const int IntrinsicSpinSinFieldNumber = 21;
    private float intrinsicSpinSin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float IntrinsicSpinSin {
      get { return intrinsicSpinSin_; }
      set {
        intrinsicSpinSin_ = value;
      }
    }

    /// <summary>Field number for the "atk1_upon_triggered" field.</summary>
    public const int Atk1UponTriggeredFieldNumber = 22;
    private bool atk1UponTriggered_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Atk1UponTriggered {
      get { return atk1UponTriggered_; }
      set {
        atk1UponTriggered_ = value;
      }
    }

    /// <summary>Field number for the "atk1_skill_id" field.</summary>
    public const int Atk1SkillIdFieldNumber = 23;
    private uint atk1SkillId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Atk1SkillId {
      get { return atk1SkillId_; }
      set {
        atk1SkillId_ = value;
      }
    }

    /// <summary>Field number for the "is_rotary" field.</summary>
    public const int IsRotaryFieldNumber = 24;
    private bool isRotary_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsRotary {
      get { return isRotary_; }
      set {
        isRotary_ = value;
      }
    }

    /// <summary>Field number for the "no_x_flip_rendering" field.</summary>
    public const int NoXFlipRenderingFieldNumber = 25;
    private bool noXFlipRendering_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool NoXFlipRendering {
      get { return noXFlipRendering_; }
      set {
        noXFlipRendering_ = value;
      }
    }

    /// <summary>Field number for the "species_name" field.</summary>
    public const int SpeciesNameFieldNumber = 1024;
    private string speciesName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SpeciesName {
      get { return speciesName_; }
      set {
        speciesName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TrapConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TrapConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SpeciesId != other.SpeciesId) return false;
      if (ExplosionSpeciesId != other.ExplosionSpeciesId) return false;
      if (ExplosionFrames != other.ExplosionFrames) return false;
      if (BlowUp != other.BlowUp) return false;
      if (Damage != other.Damage) return false;
      if (HitStunFrames != other.HitStunFrames) return false;
      if (HitInvinsibleFrames != other.HitInvinsibleFrames) return false;
      if (Deactivatable != other.Deactivatable) return false;
      if (Hardness != other.Hardness) return false;
      if (DeactivateUponTriggered != other.DeactivateUponTriggered) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ConstFrictionVelXTop, other.ConstFrictionVelXTop)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ConstFrictionVelXBottom, other.ConstFrictionVelXBottom)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ConstFrictionVelYLeft, other.ConstFrictionVelYLeft)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ConstFrictionVelYRight, other.ConstFrictionVelYRight)) return false;
      if (PatrolCueRequiresFullContain != other.PatrolCueRequiresFullContain) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SpinAnchorX, other.SpinAnchorX)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SpinAnchorY, other.SpinAnchorY)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(AngularFrameVelCos, other.AngularFrameVelCos)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(AngularFrameVelSin, other.AngularFrameVelSin)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(IntrinsicSpinCos, other.IntrinsicSpinCos)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(IntrinsicSpinSin, other.IntrinsicSpinSin)) return false;
      if (Atk1UponTriggered != other.Atk1UponTriggered) return false;
      if (Atk1SkillId != other.Atk1SkillId) return false;
      if (IsRotary != other.IsRotary) return false;
      if (NoXFlipRendering != other.NoXFlipRendering) return false;
      if (SpeciesName != other.SpeciesName) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SpeciesId != 0) hash ^= SpeciesId.GetHashCode();
      if (ExplosionSpeciesId != 0) hash ^= ExplosionSpeciesId.GetHashCode();
      if (ExplosionFrames != 0) hash ^= ExplosionFrames.GetHashCode();
      if (BlowUp != false) hash ^= BlowUp.GetHashCode();
      if (Damage != 0) hash ^= Damage.GetHashCode();
      if (HitStunFrames != 0) hash ^= HitStunFrames.GetHashCode();
      if (HitInvinsibleFrames != 0) hash ^= HitInvinsibleFrames.GetHashCode();
      if (Deactivatable != false) hash ^= Deactivatable.GetHashCode();
      if (Hardness != 0) hash ^= Hardness.GetHashCode();
      if (DeactivateUponTriggered != false) hash ^= DeactivateUponTriggered.GetHashCode();
      if (ConstFrictionVelXTop != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ConstFrictionVelXTop);
      if (ConstFrictionVelXBottom != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ConstFrictionVelXBottom);
      if (ConstFrictionVelYLeft != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ConstFrictionVelYLeft);
      if (ConstFrictionVelYRight != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ConstFrictionVelYRight);
      if (PatrolCueRequiresFullContain != false) hash ^= PatrolCueRequiresFullContain.GetHashCode();
      if (SpinAnchorX != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SpinAnchorX);
      if (SpinAnchorY != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SpinAnchorY);
      if (AngularFrameVelCos != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(AngularFrameVelCos);
      if (AngularFrameVelSin != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(AngularFrameVelSin);
      if (IntrinsicSpinCos != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(IntrinsicSpinCos);
      if (IntrinsicSpinSin != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(IntrinsicSpinSin);
      if (Atk1UponTriggered != false) hash ^= Atk1UponTriggered.GetHashCode();
      if (Atk1SkillId != 0) hash ^= Atk1SkillId.GetHashCode();
      if (IsRotary != false) hash ^= IsRotary.GetHashCode();
      if (NoXFlipRendering != false) hash ^= NoXFlipRendering.GetHashCode();
      if (SpeciesName.Length != 0) hash ^= SpeciesName.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SpeciesId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(SpeciesId);
      }
      if (ExplosionSpeciesId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ExplosionSpeciesId);
      }
      if (ExplosionFrames != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(ExplosionFrames);
      }
      if (BlowUp != false) {
        output.WriteRawTag(32);
        output.WriteBool(BlowUp);
      }
      if (Damage != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Damage);
      }
      if (HitStunFrames != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(HitStunFrames);
      }
      if (HitInvinsibleFrames != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(HitInvinsibleFrames);
      }
      if (Deactivatable != false) {
        output.WriteRawTag(64);
        output.WriteBool(Deactivatable);
      }
      if (Hardness != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(Hardness);
      }
      if (DeactivateUponTriggered != false) {
        output.WriteRawTag(80);
        output.WriteBool(DeactivateUponTriggered);
      }
      if (ConstFrictionVelXTop != 0F) {
        output.WriteRawTag(93);
        output.WriteFloat(ConstFrictionVelXTop);
      }
      if (ConstFrictionVelXBottom != 0F) {
        output.WriteRawTag(101);
        output.WriteFloat(ConstFrictionVelXBottom);
      }
      if (ConstFrictionVelYLeft != 0F) {
        output.WriteRawTag(109);
        output.WriteFloat(ConstFrictionVelYLeft);
      }
      if (ConstFrictionVelYRight != 0F) {
        output.WriteRawTag(117);
        output.WriteFloat(ConstFrictionVelYRight);
      }
      if (PatrolCueRequiresFullContain != false) {
        output.WriteRawTag(120);
        output.WriteBool(PatrolCueRequiresFullContain);
      }
      if (SpinAnchorX != 0F) {
        output.WriteRawTag(133, 1);
        output.WriteFloat(SpinAnchorX);
      }
      if (SpinAnchorY != 0F) {
        output.WriteRawTag(141, 1);
        output.WriteFloat(SpinAnchorY);
      }
      if (AngularFrameVelCos != 0F) {
        output.WriteRawTag(149, 1);
        output.WriteFloat(AngularFrameVelCos);
      }
      if (AngularFrameVelSin != 0F) {
        output.WriteRawTag(157, 1);
        output.WriteFloat(AngularFrameVelSin);
      }
      if (IntrinsicSpinCos != 0F) {
        output.WriteRawTag(165, 1);
        output.WriteFloat(IntrinsicSpinCos);
      }
      if (IntrinsicSpinSin != 0F) {
        output.WriteRawTag(173, 1);
        output.WriteFloat(IntrinsicSpinSin);
      }
      if (Atk1UponTriggered != false) {
        output.WriteRawTag(176, 1);
        output.WriteBool(Atk1UponTriggered);
      }
      if (Atk1SkillId != 0) {
        output.WriteRawTag(184, 1);
        output.WriteUInt32(Atk1SkillId);
      }
      if (IsRotary != false) {
        output.WriteRawTag(192, 1);
        output.WriteBool(IsRotary);
      }
      if (NoXFlipRendering != false) {
        output.WriteRawTag(200, 1);
        output.WriteBool(NoXFlipRendering);
      }
      if (SpeciesName.Length != 0) {
        output.WriteRawTag(130, 64);
        output.WriteString(SpeciesName);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SpeciesId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SpeciesId);
      }
      if (ExplosionSpeciesId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ExplosionSpeciesId);
      }
      if (ExplosionFrames != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ExplosionFrames);
      }
      if (BlowUp != false) {
        size += 1 + 1;
      }
      if (Damage != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Damage);
      }
      if (HitStunFrames != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HitStunFrames);
      }
      if (HitInvinsibleFrames != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HitInvinsibleFrames);
      }
      if (Deactivatable != false) {
        size += 1 + 1;
      }
      if (Hardness != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Hardness);
      }
      if (DeactivateUponTriggered != false) {
        size += 1 + 1;
      }
      if (ConstFrictionVelXTop != 0F) {
        size += 1 + 4;
      }
      if (ConstFrictionVelXBottom != 0F) {
        size += 1 + 4;
      }
      if (ConstFrictionVelYLeft != 0F) {
        size += 1 + 4;
      }
      if (ConstFrictionVelYRight != 0F) {
        size += 1 + 4;
      }
      if (PatrolCueRequiresFullContain != false) {
        size += 1 + 1;
      }
      if (SpinAnchorX != 0F) {
        size += 2 + 4;
      }
      if (SpinAnchorY != 0F) {
        size += 2 + 4;
      }
      if (AngularFrameVelCos != 0F) {
        size += 2 + 4;
      }
      if (AngularFrameVelSin != 0F) {
        size += 2 + 4;
      }
      if (IntrinsicSpinCos != 0F) {
        size += 2 + 4;
      }
      if (IntrinsicSpinSin != 0F) {
        size += 2 + 4;
      }
      if (Atk1UponTriggered != false) {
        size += 2 + 1;
      }
      if (Atk1SkillId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Atk1SkillId);
      }
      if (IsRotary != false) {
        size += 2 + 1;
      }
      if (NoXFlipRendering != false) {
        size += 2 + 1;
      }
      if (SpeciesName.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(SpeciesName);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TrapConfig other) {
      if (other == null) {
        return;
      }
      if (other.SpeciesId != 0) {
        SpeciesId = other.SpeciesId;
      }
      if (other.ExplosionSpeciesId != 0) {
        ExplosionSpeciesId = other.ExplosionSpeciesId;
      }
      if (other.ExplosionFrames != 0) {
        ExplosionFrames = other.ExplosionFrames;
      }
      if (other.BlowUp != false) {
        BlowUp = other.BlowUp;
      }
      if (other.Damage != 0) {
        Damage = other.Damage;
      }
      if (other.HitStunFrames != 0) {
        HitStunFrames = other.HitStunFrames;
      }
      if (other.HitInvinsibleFrames != 0) {
        HitInvinsibleFrames = other.HitInvinsibleFrames;
      }
      if (other.Deactivatable != false) {
        Deactivatable = other.Deactivatable;
      }
      if (other.Hardness != 0) {
        Hardness = other.Hardness;
      }
      if (other.DeactivateUponTriggered != false) {
        DeactivateUponTriggered = other.DeactivateUponTriggered;
      }
      if (other.ConstFrictionVelXTop != 0F) {
        ConstFrictionVelXTop = other.ConstFrictionVelXTop;
      }
      if (other.ConstFrictionVelXBottom != 0F) {
        ConstFrictionVelXBottom = other.ConstFrictionVelXBottom;
      }
      if (other.ConstFrictionVelYLeft != 0F) {
        ConstFrictionVelYLeft = other.ConstFrictionVelYLeft;
      }
      if (other.ConstFrictionVelYRight != 0F) {
        ConstFrictionVelYRight = other.ConstFrictionVelYRight;
      }
      if (other.PatrolCueRequiresFullContain != false) {
        PatrolCueRequiresFullContain = other.PatrolCueRequiresFullContain;
      }
      if (other.SpinAnchorX != 0F) {
        SpinAnchorX = other.SpinAnchorX;
      }
      if (other.SpinAnchorY != 0F) {
        SpinAnchorY = other.SpinAnchorY;
      }
      if (other.AngularFrameVelCos != 0F) {
        AngularFrameVelCos = other.AngularFrameVelCos;
      }
      if (other.AngularFrameVelSin != 0F) {
        AngularFrameVelSin = other.AngularFrameVelSin;
      }
      if (other.IntrinsicSpinCos != 0F) {
        IntrinsicSpinCos = other.IntrinsicSpinCos;
      }
      if (other.IntrinsicSpinSin != 0F) {
        IntrinsicSpinSin = other.IntrinsicSpinSin;
      }
      if (other.Atk1UponTriggered != false) {
        Atk1UponTriggered = other.Atk1UponTriggered;
      }
      if (other.Atk1SkillId != 0) {
        Atk1SkillId = other.Atk1SkillId;
      }
      if (other.IsRotary != false) {
        IsRotary = other.IsRotary;
      }
      if (other.NoXFlipRendering != false) {
        NoXFlipRendering = other.NoXFlipRendering;
      }
      if (other.SpeciesName.Length != 0) {
        SpeciesName = other.SpeciesName;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            SpeciesId = input.ReadInt32();
            break;
          }
          case 16: {
            ExplosionSpeciesId = input.ReadInt32();
            break;
          }
          case 24: {
            ExplosionFrames = input.ReadInt32();
            break;
          }
          case 32: {
            BlowUp = input.ReadBool();
            break;
          }
          case 40: {
            Damage = input.ReadInt32();
            break;
          }
          case 48: {
            HitStunFrames = input.ReadInt32();
            break;
          }
          case 56: {
            HitInvinsibleFrames = input.ReadInt32();
            break;
          }
          case 64: {
            Deactivatable = input.ReadBool();
            break;
          }
          case 72: {
            Hardness = input.ReadInt32();
            break;
          }
          case 80: {
            DeactivateUponTriggered = input.ReadBool();
            break;
          }
          case 93: {
            ConstFrictionVelXTop = input.ReadFloat();
            break;
          }
          case 101: {
            ConstFrictionVelXBottom = input.ReadFloat();
            break;
          }
          case 109: {
            ConstFrictionVelYLeft = input.ReadFloat();
            break;
          }
          case 117: {
            ConstFrictionVelYRight = input.ReadFloat();
            break;
          }
          case 120: {
            PatrolCueRequiresFullContain = input.ReadBool();
            break;
          }
          case 133: {
            SpinAnchorX = input.ReadFloat();
            break;
          }
          case 141: {
            SpinAnchorY = input.ReadFloat();
            break;
          }
          case 149: {
            AngularFrameVelCos = input.ReadFloat();
            break;
          }
          case 157: {
            AngularFrameVelSin = input.ReadFloat();
            break;
          }
          case 165: {
            IntrinsicSpinCos = input.ReadFloat();
            break;
          }
          case 173: {
            IntrinsicSpinSin = input.ReadFloat();
            break;
          }
          case 176: {
            Atk1UponTriggered = input.ReadBool();
            break;
          }
          case 184: {
            Atk1SkillId = input.ReadUInt32();
            break;
          }
          case 192: {
            IsRotary = input.ReadBool();
            break;
          }
          case 200: {
            NoXFlipRendering = input.ReadBool();
            break;
          }
          case 8194: {
            SpeciesName = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class TrapConfigFromTiled : pb::IMessage<TrapConfigFromTiled> {
    private static readonly pb::MessageParser<TrapConfigFromTiled> _parser = new pb::MessageParser<TrapConfigFromTiled>(() => new TrapConfigFromTiled());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TrapConfigFromTiled> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::jtshared.SerializableDataReflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TrapConfigFromTiled() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TrapConfigFromTiled(TrapConfigFromTiled other) : this() {
      speciesId_ = other.speciesId_;
      quota_ = other.quota_;
      speed_ = other.speed_;
      dirX_ = other.dirX_;
      dirY_ = other.dirY_;
      subscribesToId_ = other.subscribesToId_;
      subscribesToIdAfterInitialFire_ = other.subscribesToIdAfterInitialFire_;
      subscribesToIdAlt_ = other.subscribesToIdAlt_;
      boxCw_ = other.boxCw_;
      boxCh_ = other.boxCh_;
      initNoAngularVel_ = other.initNoAngularVel_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TrapConfigFromTiled Clone() {
      return new TrapConfigFromTiled(this);
    }

    /// <summary>Field number for the "species_id" field.</summary>
    public const int SpeciesIdFieldNumber = 1;
    private int speciesId_;
    /// <summary>
    /// Will be used for the "dynamic trap" to locate its Prefab for animating, and used for all types of traps to locate their explosion animations.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SpeciesId {
      get { return speciesId_; }
      set {
        speciesId_ = value;
      }
    }

    /// <summary>Field number for the "quota" field.</summary>
    public const int QuotaFieldNumber = 2;
    private int quota_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Quota {
      get { return quota_; }
      set {
        quota_ = value;
      }
    }

    /// <summary>Field number for the "speed" field.</summary>
    public const int SpeedFieldNumber = 3;
    private float speed_;
    /// <summary>
    /// For speed varying bullets, this is the initial speed
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Speed {
      get { return speed_; }
      set {
        speed_ = value;
      }
    }

    /// <summary>Field number for the "dir_x" field.</summary>
    public const int DirXFieldNumber = 4;
    private int dirX_;
    /// <summary>
    /// the initial direction indicator for X-axis
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DirX {
      get { return dirX_; }
      set {
        dirX_ = value;
      }
    }

    /// <summary>Field number for the "dir_y" field.</summary>
    public const int DirYFieldNumber = 5;
    private int dirY_;
    /// <summary>
    /// the initial direction indicator for Y-axis
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DirY {
      get { return dirY_; }
      set {
        dirY_ = value;
      }
    }

    /// <summary>Field number for the "subscribes_to_id" field.</summary>
    public const int SubscribesToIdFieldNumber = 7;
    private int subscribesToId_;
    /// <summary>
    /// [WARNING] This is a "trigger editor id", I don't want to overcomplicated the config of traps, use an additional Trigger to bridge complicated subscription combination between other triggers and a trap
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SubscribesToId {
      get { return subscribesToId_; }
      set {
        subscribesToId_ = value;
      }
    }

    /// <summary>Field number for the "subscribes_to_id_after_initial_fire" field.</summary>
    public const int SubscribesToIdAfterInitialFireFieldNumber = 8;
    private int subscribesToIdAfterInitialFire_;
    /// <summary>
    /// [WARNING] For boss door only, couldn't coexist with "subscribes_to_id_after_initial_fire" 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SubscribesToIdAfterInitialFire {
      get { return subscribesToIdAfterInitialFire_; }
      set {
        subscribesToIdAfterInitialFire_ = value;
      }
    }

    /// <summary>Field number for the "subscribes_to_id_alt" field.</summary>
    public const int SubscribesToIdAltFieldNumber = 9;
    private int subscribesToIdAlt_;
    /// <summary>
    /// [WARNING] For elevator only, couldn't coexist with "subscribes_to_id_after_initial_fire"
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SubscribesToIdAlt {
      get { return subscribesToIdAlt_; }
      set {
        subscribesToIdAlt_ = value;
      }
    }

    /// <summary>Field number for the "box_cw" field.</summary>
    public const int BoxCwFieldNumber = 10;
    private float boxCw_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float BoxCw {
      get { return boxCw_; }
      set {
        boxCw_ = value;
      }
    }

    /// <summary>Field number for the "box_ch" field.</summary>
    public const int BoxChFieldNumber = 11;
    private float boxCh_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float BoxCh {
      get { return boxCh_; }
      set {
        boxCh_ = value;
      }
    }

    /// <summary>Field number for the "init_no_angular_vel" field.</summary>
    public const int InitNoAngularVelFieldNumber = 12;
    private float initNoAngularVel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float InitNoAngularVel {
      get { return initNoAngularVel_; }
      set {
        initNoAngularVel_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TrapConfigFromTiled);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TrapConfigFromTiled other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SpeciesId != other.SpeciesId) return false;
      if (Quota != other.Quota) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Speed, other.Speed)) return false;
      if (DirX != other.DirX) return false;
      if (DirY != other.DirY) return false;
      if (SubscribesToId != other.SubscribesToId) return false;
      if (SubscribesToIdAfterInitialFire != other.SubscribesToIdAfterInitialFire) return false;
      if (SubscribesToIdAlt != other.SubscribesToIdAlt) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(BoxCw, other.BoxCw)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(BoxCh, other.BoxCh)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(InitNoAngularVel, other.InitNoAngularVel)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SpeciesId != 0) hash ^= SpeciesId.GetHashCode();
      if (Quota != 0) hash ^= Quota.GetHashCode();
      if (Speed != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Speed);
      if (DirX != 0) hash ^= DirX.GetHashCode();
      if (DirY != 0) hash ^= DirY.GetHashCode();
      if (SubscribesToId != 0) hash ^= SubscribesToId.GetHashCode();
      if (SubscribesToIdAfterInitialFire != 0) hash ^= SubscribesToIdAfterInitialFire.GetHashCode();
      if (SubscribesToIdAlt != 0) hash ^= SubscribesToIdAlt.GetHashCode();
      if (BoxCw != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(BoxCw);
      if (BoxCh != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(BoxCh);
      if (InitNoAngularVel != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(InitNoAngularVel);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SpeciesId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(SpeciesId);
      }
      if (Quota != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Quota);
      }
      if (Speed != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Speed);
      }
      if (DirX != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(DirX);
      }
      if (DirY != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(DirY);
      }
      if (SubscribesToId != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(SubscribesToId);
      }
      if (SubscribesToIdAfterInitialFire != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(SubscribesToIdAfterInitialFire);
      }
      if (SubscribesToIdAlt != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(SubscribesToIdAlt);
      }
      if (BoxCw != 0F) {
        output.WriteRawTag(85);
        output.WriteFloat(BoxCw);
      }
      if (BoxCh != 0F) {
        output.WriteRawTag(93);
        output.WriteFloat(BoxCh);
      }
      if (InitNoAngularVel != 0F) {
        output.WriteRawTag(101);
        output.WriteFloat(InitNoAngularVel);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SpeciesId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SpeciesId);
      }
      if (Quota != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Quota);
      }
      if (Speed != 0F) {
        size += 1 + 4;
      }
      if (DirX != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DirX);
      }
      if (DirY != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DirY);
      }
      if (SubscribesToId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SubscribesToId);
      }
      if (SubscribesToIdAfterInitialFire != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SubscribesToIdAfterInitialFire);
      }
      if (SubscribesToIdAlt != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SubscribesToIdAlt);
      }
      if (BoxCw != 0F) {
        size += 1 + 4;
      }
      if (BoxCh != 0F) {
        size += 1 + 4;
      }
      if (InitNoAngularVel != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TrapConfigFromTiled other) {
      if (other == null) {
        return;
      }
      if (other.SpeciesId != 0) {
        SpeciesId = other.SpeciesId;
      }
      if (other.Quota != 0) {
        Quota = other.Quota;
      }
      if (other.Speed != 0F) {
        Speed = other.Speed;
      }
      if (other.DirX != 0) {
        DirX = other.DirX;
      }
      if (other.DirY != 0) {
        DirY = other.DirY;
      }
      if (other.SubscribesToId != 0) {
        SubscribesToId = other.SubscribesToId;
      }
      if (other.SubscribesToIdAfterInitialFire != 0) {
        SubscribesToIdAfterInitialFire = other.SubscribesToIdAfterInitialFire;
      }
      if (other.SubscribesToIdAlt != 0) {
        SubscribesToIdAlt = other.SubscribesToIdAlt;
      }
      if (other.BoxCw != 0F) {
        BoxCw = other.BoxCw;
      }
      if (other.BoxCh != 0F) {
        BoxCh = other.BoxCh;
      }
      if (other.InitNoAngularVel != 0F) {
        InitNoAngularVel = other.InitNoAngularVel;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            SpeciesId = input.ReadInt32();
            break;
          }
          case 16: {
            Quota = input.ReadInt32();
            break;
          }
          case 29: {
            Speed = input.ReadFloat();
            break;
          }
          case 32: {
            DirX = input.ReadInt32();
            break;
          }
          case 40: {
            DirY = input.ReadInt32();
            break;
          }
          case 56: {
            SubscribesToId = input.ReadInt32();
            break;
          }
          case 64: {
            SubscribesToIdAfterInitialFire = input.ReadInt32();
            break;
          }
          case 72: {
            SubscribesToIdAlt = input.ReadInt32();
            break;
          }
          case 85: {
            BoxCw = input.ReadFloat();
            break;
          }
          case 93: {
            BoxCh = input.ReadFloat();
            break;
          }
          case 101: {
            InitNoAngularVel = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class TrapColliderAttr : pb::IMessage<TrapColliderAttr> {
    private static readonly pb::MessageParser<TrapColliderAttr> _parser = new pb::MessageParser<TrapColliderAttr>(() => new TrapColliderAttr());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TrapColliderAttr> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::jtshared.SerializableDataReflection.Descriptor.MessageTypes[21]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TrapColliderAttr() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TrapColliderAttr(TrapColliderAttr other) : this() {
      hitboxOffsetX_ = other.hitboxOffsetX_;
      hitboxOffsetY_ = other.hitboxOffsetY_;
      hitboxSizeX_ = other.hitboxSizeX_;
      hitboxSizeY_ = other.hitboxSizeY_;
      providesHardPushback_ = other.providesHardPushback_;
      providesDamage_ = other.providesDamage_;
      providesEscape_ = other.providesEscape_;
      providesSlipJump_ = other.providesSlipJump_;
      prohibitsWallGrabbing_ = other.prohibitsWallGrabbing_;
      forcesCrouching_ = other.forcesCrouching_;
      speciesId_ = other.speciesId_;
      onlyAllowsAlignedVelX_ = other.onlyAllowsAlignedVelX_;
      onlyAllowsAlignedVelY_ = other.onlyAllowsAlignedVelY_;
      asPatrolCue_ = other.asPatrolCue_;
      tcPc_ = other.tcPc_ != null ? other.tcPc_.Clone() : null;
      id_ = other.id_;
      collisionTypeMask_ = other.collisionTypeMask_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TrapColliderAttr Clone() {
      return new TrapColliderAttr(this);
    }

    /// <summary>Field number for the "hitbox_offset_x" field.</summary>
    public const int HitboxOffsetXFieldNumber = 1;
    private int hitboxOffsetX_;
    /// <summary>
    /// In the case of a trap, it might own multiple hitboxes and each hitbox is drawn in Tiled and assigned after parsing the tmx file, thus not put in static config.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HitboxOffsetX {
      get { return hitboxOffsetX_; }
      set {
        hitboxOffsetX_ = value;
      }
    }

    /// <summary>Field number for the "hitbox_offset_y" field.</summary>
    public const int HitboxOffsetYFieldNumber = 2;
    private int hitboxOffsetY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HitboxOffsetY {
      get { return hitboxOffsetY_; }
      set {
        hitboxOffsetY_ = value;
      }
    }

    /// <summary>Field number for the "hitbox_size_x" field.</summary>
    public const int HitboxSizeXFieldNumber = 3;
    private int hitboxSizeX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HitboxSizeX {
      get { return hitboxSizeX_; }
      set {
        hitboxSizeX_ = value;
      }
    }

    /// <summary>Field number for the "hitbox_size_y" field.</summary>
    public const int HitboxSizeYFieldNumber = 4;
    private int hitboxSizeY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HitboxSizeY {
      get { return hitboxSizeY_; }
      set {
        hitboxSizeY_ = value;
      }
    }

    /// <summary>Field number for the "provides_hard_pushback" field.</summary>
    public const int ProvidesHardPushbackFieldNumber = 5;
    private bool providesHardPushback_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ProvidesHardPushback {
      get { return providesHardPushback_; }
      set {
        providesHardPushback_ = value;
      }
    }

    /// <summary>Field number for the "provides_damage" field.</summary>
    public const int ProvidesDamageFieldNumber = 6;
    private bool providesDamage_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ProvidesDamage {
      get { return providesDamage_; }
      set {
        providesDamage_ = value;
      }
    }

    /// <summary>Field number for the "provides_escape" field.</summary>
    public const int ProvidesEscapeFieldNumber = 7;
    private bool providesEscape_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ProvidesEscape {
      get { return providesEscape_; }
      set {
        providesEscape_ = value;
      }
    }

    /// <summary>Field number for the "provides_slip_jump" field.</summary>
    public const int ProvidesSlipJumpFieldNumber = 8;
    private bool providesSlipJump_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ProvidesSlipJump {
      get { return providesSlipJump_; }
      set {
        providesSlipJump_ = value;
      }
    }

    /// <summary>Field number for the "prohibits_wall_grabbing" field.</summary>
    public const int ProhibitsWallGrabbingFieldNumber = 9;
    private bool prohibitsWallGrabbing_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ProhibitsWallGrabbing {
      get { return prohibitsWallGrabbing_; }
      set {
        prohibitsWallGrabbing_ = value;
      }
    }

    /// <summary>Field number for the "forces_crouching" field.</summary>
    public const int ForcesCrouchingFieldNumber = 10;
    private bool forcesCrouching_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ForcesCrouching {
      get { return forcesCrouching_; }
      set {
        forcesCrouching_ = value;
      }
    }

    /// <summary>Field number for the "species_id" field.</summary>
    public const int SpeciesIdFieldNumber = 11;
    private int speciesId_;
    /// <summary>
    /// Redundancy for referencing "Trap_config"
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SpeciesId {
      get { return speciesId_; }
      set {
        speciesId_ = value;
      }
    }

    /// <summary>Field number for the "only_allows_aligned_vel_x" field.</summary>
    public const int OnlyAllowsAlignedVelXFieldNumber = 12;
    private int onlyAllowsAlignedVelX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OnlyAllowsAlignedVelX {
      get { return onlyAllowsAlignedVelX_; }
      set {
        onlyAllowsAlignedVelX_ = value;
      }
    }

    /// <summary>Field number for the "only_allows_aligned_vel_y" field.</summary>
    public const int OnlyAllowsAlignedVelYFieldNumber = 13;
    private int onlyAllowsAlignedVelY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OnlyAllowsAlignedVelY {
      get { return onlyAllowsAlignedVelY_; }
      set {
        onlyAllowsAlignedVelY_ = value;
      }
    }

    /// <summary>Field number for the "as_patrol_cue" field.</summary>
    public const int AsPatrolCueFieldNumber = 14;
    private bool asPatrolCue_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool AsPatrolCue {
      get { return asPatrolCue_; }
      set {
        asPatrolCue_ = value;
      }
    }

    /// <summary>Field number for the "tc_pc" field.</summary>
    public const int TcPcFieldNumber = 15;
    private global::jtshared.PatrolCue tcPc_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::jtshared.PatrolCue TcPc {
      get { return tcPc_; }
      set {
        tcPc_ = value;
      }
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1024;
    private uint id_;
    /// <summary>
    /// ref-back upon collision, for damage handling
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "collision_type_mask" field.</summary>
    public const int CollisionTypeMaskFieldNumber = 1029;
    private ulong collisionTypeMask_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong CollisionTypeMask {
      get { return collisionTypeMask_; }
      set {
        collisionTypeMask_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TrapColliderAttr);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TrapColliderAttr other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (HitboxOffsetX != other.HitboxOffsetX) return false;
      if (HitboxOffsetY != other.HitboxOffsetY) return false;
      if (HitboxSizeX != other.HitboxSizeX) return false;
      if (HitboxSizeY != other.HitboxSizeY) return false;
      if (ProvidesHardPushback != other.ProvidesHardPushback) return false;
      if (ProvidesDamage != other.ProvidesDamage) return false;
      if (ProvidesEscape != other.ProvidesEscape) return false;
      if (ProvidesSlipJump != other.ProvidesSlipJump) return false;
      if (ProhibitsWallGrabbing != other.ProhibitsWallGrabbing) return false;
      if (ForcesCrouching != other.ForcesCrouching) return false;
      if (SpeciesId != other.SpeciesId) return false;
      if (OnlyAllowsAlignedVelX != other.OnlyAllowsAlignedVelX) return false;
      if (OnlyAllowsAlignedVelY != other.OnlyAllowsAlignedVelY) return false;
      if (AsPatrolCue != other.AsPatrolCue) return false;
      if (!object.Equals(TcPc, other.TcPc)) return false;
      if (Id != other.Id) return false;
      if (CollisionTypeMask != other.CollisionTypeMask) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HitboxOffsetX != 0) hash ^= HitboxOffsetX.GetHashCode();
      if (HitboxOffsetY != 0) hash ^= HitboxOffsetY.GetHashCode();
      if (HitboxSizeX != 0) hash ^= HitboxSizeX.GetHashCode();
      if (HitboxSizeY != 0) hash ^= HitboxSizeY.GetHashCode();
      if (ProvidesHardPushback != false) hash ^= ProvidesHardPushback.GetHashCode();
      if (ProvidesDamage != false) hash ^= ProvidesDamage.GetHashCode();
      if (ProvidesEscape != false) hash ^= ProvidesEscape.GetHashCode();
      if (ProvidesSlipJump != false) hash ^= ProvidesSlipJump.GetHashCode();
      if (ProhibitsWallGrabbing != false) hash ^= ProhibitsWallGrabbing.GetHashCode();
      if (ForcesCrouching != false) hash ^= ForcesCrouching.GetHashCode();
      if (SpeciesId != 0) hash ^= SpeciesId.GetHashCode();
      if (OnlyAllowsAlignedVelX != 0) hash ^= OnlyAllowsAlignedVelX.GetHashCode();
      if (OnlyAllowsAlignedVelY != 0) hash ^= OnlyAllowsAlignedVelY.GetHashCode();
      if (AsPatrolCue != false) hash ^= AsPatrolCue.GetHashCode();
      if (tcPc_ != null) hash ^= TcPc.GetHashCode();
      if (Id != 0) hash ^= Id.GetHashCode();
      if (CollisionTypeMask != 0UL) hash ^= CollisionTypeMask.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HitboxOffsetX != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(HitboxOffsetX);
      }
      if (HitboxOffsetY != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(HitboxOffsetY);
      }
      if (HitboxSizeX != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(HitboxSizeX);
      }
      if (HitboxSizeY != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(HitboxSizeY);
      }
      if (ProvidesHardPushback != false) {
        output.WriteRawTag(40);
        output.WriteBool(ProvidesHardPushback);
      }
      if (ProvidesDamage != false) {
        output.WriteRawTag(48);
        output.WriteBool(ProvidesDamage);
      }
      if (ProvidesEscape != false) {
        output.WriteRawTag(56);
        output.WriteBool(ProvidesEscape);
      }
      if (ProvidesSlipJump != false) {
        output.WriteRawTag(64);
        output.WriteBool(ProvidesSlipJump);
      }
      if (ProhibitsWallGrabbing != false) {
        output.WriteRawTag(72);
        output.WriteBool(ProhibitsWallGrabbing);
      }
      if (ForcesCrouching != false) {
        output.WriteRawTag(80);
        output.WriteBool(ForcesCrouching);
      }
      if (SpeciesId != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(SpeciesId);
      }
      if (OnlyAllowsAlignedVelX != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(OnlyAllowsAlignedVelX);
      }
      if (OnlyAllowsAlignedVelY != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(OnlyAllowsAlignedVelY);
      }
      if (AsPatrolCue != false) {
        output.WriteRawTag(112);
        output.WriteBool(AsPatrolCue);
      }
      if (tcPc_ != null) {
        output.WriteRawTag(122);
        output.WriteMessage(TcPc);
      }
      if (Id != 0) {
        output.WriteRawTag(128, 64);
        output.WriteUInt32(Id);
      }
      if (CollisionTypeMask != 0UL) {
        output.WriteRawTag(168, 64);
        output.WriteUInt64(CollisionTypeMask);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HitboxOffsetX != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HitboxOffsetX);
      }
      if (HitboxOffsetY != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HitboxOffsetY);
      }
      if (HitboxSizeX != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HitboxSizeX);
      }
      if (HitboxSizeY != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HitboxSizeY);
      }
      if (ProvidesHardPushback != false) {
        size += 1 + 1;
      }
      if (ProvidesDamage != false) {
        size += 1 + 1;
      }
      if (ProvidesEscape != false) {
        size += 1 + 1;
      }
      if (ProvidesSlipJump != false) {
        size += 1 + 1;
      }
      if (ProhibitsWallGrabbing != false) {
        size += 1 + 1;
      }
      if (ForcesCrouching != false) {
        size += 1 + 1;
      }
      if (SpeciesId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SpeciesId);
      }
      if (OnlyAllowsAlignedVelX != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(OnlyAllowsAlignedVelX);
      }
      if (OnlyAllowsAlignedVelY != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(OnlyAllowsAlignedVelY);
      }
      if (AsPatrolCue != false) {
        size += 1 + 1;
      }
      if (tcPc_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TcPc);
      }
      if (Id != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Id);
      }
      if (CollisionTypeMask != 0UL) {
        size += 2 + pb::CodedOutputStream.ComputeUInt64Size(CollisionTypeMask);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TrapColliderAttr other) {
      if (other == null) {
        return;
      }
      if (other.HitboxOffsetX != 0) {
        HitboxOffsetX = other.HitboxOffsetX;
      }
      if (other.HitboxOffsetY != 0) {
        HitboxOffsetY = other.HitboxOffsetY;
      }
      if (other.HitboxSizeX != 0) {
        HitboxSizeX = other.HitboxSizeX;
      }
      if (other.HitboxSizeY != 0) {
        HitboxSizeY = other.HitboxSizeY;
      }
      if (other.ProvidesHardPushback != false) {
        ProvidesHardPushback = other.ProvidesHardPushback;
      }
      if (other.ProvidesDamage != false) {
        ProvidesDamage = other.ProvidesDamage;
      }
      if (other.ProvidesEscape != false) {
        ProvidesEscape = other.ProvidesEscape;
      }
      if (other.ProvidesSlipJump != false) {
        ProvidesSlipJump = other.ProvidesSlipJump;
      }
      if (other.ProhibitsWallGrabbing != false) {
        ProhibitsWallGrabbing = other.ProhibitsWallGrabbing;
      }
      if (other.ForcesCrouching != false) {
        ForcesCrouching = other.ForcesCrouching;
      }
      if (other.SpeciesId != 0) {
        SpeciesId = other.SpeciesId;
      }
      if (other.OnlyAllowsAlignedVelX != 0) {
        OnlyAllowsAlignedVelX = other.OnlyAllowsAlignedVelX;
      }
      if (other.OnlyAllowsAlignedVelY != 0) {
        OnlyAllowsAlignedVelY = other.OnlyAllowsAlignedVelY;
      }
      if (other.AsPatrolCue != false) {
        AsPatrolCue = other.AsPatrolCue;
      }
      if (other.tcPc_ != null) {
        if (tcPc_ == null) {
          TcPc = new global::jtshared.PatrolCue();
        }
        TcPc.MergeFrom(other.TcPc);
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.CollisionTypeMask != 0UL) {
        CollisionTypeMask = other.CollisionTypeMask;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            HitboxOffsetX = input.ReadInt32();
            break;
          }
          case 16: {
            HitboxOffsetY = input.ReadInt32();
            break;
          }
          case 24: {
            HitboxSizeX = input.ReadInt32();
            break;
          }
          case 32: {
            HitboxSizeY = input.ReadInt32();
            break;
          }
          case 40: {
            ProvidesHardPushback = input.ReadBool();
            break;
          }
          case 48: {
            ProvidesDamage = input.ReadBool();
            break;
          }
          case 56: {
            ProvidesEscape = input.ReadBool();
            break;
          }
          case 64: {
            ProvidesSlipJump = input.ReadBool();
            break;
          }
          case 72: {
            ProhibitsWallGrabbing = input.ReadBool();
            break;
          }
          case 80: {
            ForcesCrouching = input.ReadBool();
            break;
          }
          case 88: {
            SpeciesId = input.ReadInt32();
            break;
          }
          case 96: {
            OnlyAllowsAlignedVelX = input.ReadInt32();
            break;
          }
          case 104: {
            OnlyAllowsAlignedVelY = input.ReadInt32();
            break;
          }
          case 112: {
            AsPatrolCue = input.ReadBool();
            break;
          }
          case 122: {
            if (tcPc_ == null) {
              TcPc = new global::jtshared.PatrolCue();
            }
            input.ReadMessage(TcPc);
            break;
          }
          case 8192: {
            Id = input.ReadUInt32();
            break;
          }
          case 8232: {
            CollisionTypeMask = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///
  ///What distinguished "Trap" and "Npc(typed CharacterDownsync)" is that a "Trap" often has much simpler skillset, vision/patrol reaction -- yet more complicated boundaries and hard/soft pushback config.
  /// </summary>
  public sealed partial class Trap : pb::IMessage<Trap> {
    private static readonly pb::MessageParser<Trap> _parser = new pb::MessageParser<Trap>(() => new Trap());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Trap> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::jtshared.SerializableDataReflection.Descriptor.MessageTypes[22]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Trap() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Trap(Trap other) : this() {
      id_ = other.id_;
      patrolCueAngularVelFlipMark_ = other.patrolCueAngularVelFlipMark_;
      configFromTiled_ = other.configFromTiled_ != null ? other.configFromTiled_.Clone() : null;
      trapState_ = other.trapState_;
      framesInTrapState_ = other.framesInTrapState_;
      isCompletelyStatic_ = other.isCompletelyStatic_;
      capturedByPatrolCue_ = other.capturedByPatrolCue_;
      framesInPatrolCue_ = other.framesInPatrolCue_;
      waivingPatrolCueId_ = other.waivingPatrolCueId_;
      waivingSpontaneousPatrol_ = other.waivingSpontaneousPatrol_;
      subscribesToTriggerId_ = other.subscribesToTriggerId_;
      subscribesToTriggerIdAlt_ = other.subscribesToTriggerIdAlt_;
      spinCos_ = other.spinCos_;
      spinSin_ = other.spinSin_;
      angularFrameVelCos_ = other.angularFrameVelCos_;
      angularFrameVelSin_ = other.angularFrameVelSin_;
      x_ = other.x_;
      y_ = other.y_;
      dirX_ = other.dirX_;
      dirY_ = other.dirY_;
      velX_ = other.velX_;
      velY_ = other.velY_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Trap Clone() {
      return new Trap(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private uint id_;
    /// <summary>
    /// [WARNING] Used to look up proper "List&lt;TrapColliderAttr>" which is configured in Tiled Editor and remained static during the whole battle!
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "patrol_cue_angular_vel_flip_mark" field.</summary>
    public const int PatrolCueAngularVelFlipMarkFieldNumber = 2;
    private int patrolCueAngularVelFlipMark_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PatrolCueAngularVelFlipMark {
      get { return patrolCueAngularVelFlipMark_; }
      set {
        patrolCueAngularVelFlipMark_ = value;
      }
    }

    /// <summary>Field number for the "config_from_tiled" field.</summary>
    public const int ConfigFromTiledFieldNumber = 3;
    private global::jtshared.TrapConfigFromTiled configFromTiled_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::jtshared.TrapConfigFromTiled ConfigFromTiled {
      get { return configFromTiled_; }
      set {
        configFromTiled_ = value;
      }
    }

    /// <summary>Field number for the "trap_state" field.</summary>
    public const int TrapStateFieldNumber = 4;
    private global::jtshared.TrapState trapState_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::jtshared.TrapState TrapState {
      get { return trapState_; }
      set {
        trapState_ = value;
      }
    }

    /// <summary>Field number for the "frames_in_trap_state" field.</summary>
    public const int FramesInTrapStateFieldNumber = 5;
    private int framesInTrapState_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FramesInTrapState {
      get { return framesInTrapState_; }
      set {
        framesInTrapState_ = value;
      }
    }

    /// <summary>Field number for the "is_completely_static" field.</summary>
    public const int IsCompletelyStaticFieldNumber = 6;
    private bool isCompletelyStatic_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsCompletelyStatic {
      get { return isCompletelyStatic_; }
      set {
        isCompletelyStatic_ = value;
      }
    }

    /// <summary>Field number for the "captured_by_patrol_cue" field.</summary>
    public const int CapturedByPatrolCueFieldNumber = 7;
    private bool capturedByPatrolCue_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool CapturedByPatrolCue {
      get { return capturedByPatrolCue_; }
      set {
        capturedByPatrolCue_ = value;
      }
    }

    /// <summary>Field number for the "frames_in_patrol_cue" field.</summary>
    public const int FramesInPatrolCueFieldNumber = 8;
    private int framesInPatrolCue_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FramesInPatrolCue {
      get { return framesInPatrolCue_; }
      set {
        framesInPatrolCue_ = value;
      }
    }

    /// <summary>Field number for the "waiving_patrol_cue_id" field.</summary>
    public const int WaivingPatrolCueIdFieldNumber = 9;
    private int waivingPatrolCueId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int WaivingPatrolCueId {
      get { return waivingPatrolCueId_; }
      set {
        waivingPatrolCueId_ = value;
      }
    }

    /// <summary>Field number for the "waiving_spontaneous_patrol" field.</summary>
    public const int WaivingSpontaneousPatrolFieldNumber = 10;
    private bool waivingSpontaneousPatrol_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool WaivingSpontaneousPatrol {
      get { return waivingSpontaneousPatrol_; }
      set {
        waivingSpontaneousPatrol_ = value;
      }
    }

    /// <summary>Field number for the "subscribes_to_trigger_id" field.</summary>
    public const int SubscribesToTriggerIdFieldNumber = 11;
    private uint subscribesToTriggerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SubscribesToTriggerId {
      get { return subscribesToTriggerId_; }
      set {
        subscribesToTriggerId_ = value;
      }
    }

    /// <summary>Field number for the "subscribes_to_trigger_id_alt" field.</summary>
    public const int SubscribesToTriggerIdAltFieldNumber = 12;
    private uint subscribesToTriggerIdAlt_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SubscribesToTriggerIdAlt {
      get { return subscribesToTriggerIdAlt_; }
      set {
        subscribesToTriggerIdAlt_ = value;
      }
    }

    /// <summary>Field number for the "spin_cos" field.</summary>
    public const int SpinCosFieldNumber = 13;
    private float spinCos_;
    /// <summary>
    /// To be used after applying "dir_x (used for mirroring)"
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float SpinCos {
      get { return spinCos_; }
      set {
        spinCos_ = value;
      }
    }

    /// <summary>Field number for the "spin_sin" field.</summary>
    public const int SpinSinFieldNumber = 14;
    private float spinSin_;
    /// <summary>
    /// To be used after applying "dir_x (used for mirroring)"
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float SpinSin {
      get { return spinSin_; }
      set {
        spinSin_ = value;
      }
    }

    /// <summary>Field number for the "angular_frame_vel_cos" field.</summary>
    public const int AngularFrameVelCosFieldNumber = 15;
    private float angularFrameVelCos_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float AngularFrameVelCos {
      get { return angularFrameVelCos_; }
      set {
        angularFrameVelCos_ = value;
      }
    }

    /// <summary>Field number for the "angular_frame_vel_sin" field.</summary>
    public const int AngularFrameVelSinFieldNumber = 16;
    private float angularFrameVelSin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float AngularFrameVelSin {
      get { return angularFrameVelSin_; }
      set {
        angularFrameVelSin_ = value;
      }
    }

    /// <summary>Field number for the "x" field.</summary>
    public const int XFieldNumber = 17;
    private float x_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "y" field.</summary>
    public const int YFieldNumber = 18;
    private float y_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    /// <summary>Field number for the "dir_x" field.</summary>
    public const int DirXFieldNumber = 19;
    private int dirX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DirX {
      get { return dirX_; }
      set {
        dirX_ = value;
      }
    }

    /// <summary>Field number for the "dir_y" field.</summary>
    public const int DirYFieldNumber = 20;
    private int dirY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DirY {
      get { return dirY_; }
      set {
        dirY_ = value;
      }
    }

    /// <summary>Field number for the "vel_x" field.</summary>
    public const int VelXFieldNumber = 21;
    private float velX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float VelX {
      get { return velX_; }
      set {
        velX_ = value;
      }
    }

    /// <summary>Field number for the "vel_y" field.</summary>
    public const int VelYFieldNumber = 22;
    private float velY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float VelY {
      get { return velY_; }
      set {
        velY_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Trap);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Trap other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (PatrolCueAngularVelFlipMark != other.PatrolCueAngularVelFlipMark) return false;
      if (!object.Equals(ConfigFromTiled, other.ConfigFromTiled)) return false;
      if (TrapState != other.TrapState) return false;
      if (FramesInTrapState != other.FramesInTrapState) return false;
      if (IsCompletelyStatic != other.IsCompletelyStatic) return false;
      if (CapturedByPatrolCue != other.CapturedByPatrolCue) return false;
      if (FramesInPatrolCue != other.FramesInPatrolCue) return false;
      if (WaivingPatrolCueId != other.WaivingPatrolCueId) return false;
      if (WaivingSpontaneousPatrol != other.WaivingSpontaneousPatrol) return false;
      if (SubscribesToTriggerId != other.SubscribesToTriggerId) return false;
      if (SubscribesToTriggerIdAlt != other.SubscribesToTriggerIdAlt) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SpinCos, other.SpinCos)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SpinSin, other.SpinSin)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(AngularFrameVelCos, other.AngularFrameVelCos)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(AngularFrameVelSin, other.AngularFrameVelSin)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(X, other.X)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Y, other.Y)) return false;
      if (DirX != other.DirX) return false;
      if (DirY != other.DirY) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(VelX, other.VelX)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(VelY, other.VelY)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (PatrolCueAngularVelFlipMark != 0) hash ^= PatrolCueAngularVelFlipMark.GetHashCode();
      if (configFromTiled_ != null) hash ^= ConfigFromTiled.GetHashCode();
      if (TrapState != 0) hash ^= TrapState.GetHashCode();
      if (FramesInTrapState != 0) hash ^= FramesInTrapState.GetHashCode();
      if (IsCompletelyStatic != false) hash ^= IsCompletelyStatic.GetHashCode();
      if (CapturedByPatrolCue != false) hash ^= CapturedByPatrolCue.GetHashCode();
      if (FramesInPatrolCue != 0) hash ^= FramesInPatrolCue.GetHashCode();
      if (WaivingPatrolCueId != 0) hash ^= WaivingPatrolCueId.GetHashCode();
      if (WaivingSpontaneousPatrol != false) hash ^= WaivingSpontaneousPatrol.GetHashCode();
      if (SubscribesToTriggerId != 0) hash ^= SubscribesToTriggerId.GetHashCode();
      if (SubscribesToTriggerIdAlt != 0) hash ^= SubscribesToTriggerIdAlt.GetHashCode();
      if (SpinCos != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SpinCos);
      if (SpinSin != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SpinSin);
      if (AngularFrameVelCos != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(AngularFrameVelCos);
      if (AngularFrameVelSin != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(AngularFrameVelSin);
      if (X != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(X);
      if (Y != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Y);
      if (DirX != 0) hash ^= DirX.GetHashCode();
      if (DirY != 0) hash ^= DirY.GetHashCode();
      if (VelX != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(VelX);
      if (VelY != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(VelY);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Id);
      }
      if (PatrolCueAngularVelFlipMark != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(PatrolCueAngularVelFlipMark);
      }
      if (configFromTiled_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(ConfigFromTiled);
      }
      if (TrapState != 0) {
        output.WriteRawTag(32);
        output.WriteEnum((int) TrapState);
      }
      if (FramesInTrapState != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(FramesInTrapState);
      }
      if (IsCompletelyStatic != false) {
        output.WriteRawTag(48);
        output.WriteBool(IsCompletelyStatic);
      }
      if (CapturedByPatrolCue != false) {
        output.WriteRawTag(56);
        output.WriteBool(CapturedByPatrolCue);
      }
      if (FramesInPatrolCue != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(FramesInPatrolCue);
      }
      if (WaivingPatrolCueId != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(WaivingPatrolCueId);
      }
      if (WaivingSpontaneousPatrol != false) {
        output.WriteRawTag(80);
        output.WriteBool(WaivingSpontaneousPatrol);
      }
      if (SubscribesToTriggerId != 0) {
        output.WriteRawTag(88);
        output.WriteUInt32(SubscribesToTriggerId);
      }
      if (SubscribesToTriggerIdAlt != 0) {
        output.WriteRawTag(96);
        output.WriteUInt32(SubscribesToTriggerIdAlt);
      }
      if (SpinCos != 0F) {
        output.WriteRawTag(109);
        output.WriteFloat(SpinCos);
      }
      if (SpinSin != 0F) {
        output.WriteRawTag(117);
        output.WriteFloat(SpinSin);
      }
      if (AngularFrameVelCos != 0F) {
        output.WriteRawTag(125);
        output.WriteFloat(AngularFrameVelCos);
      }
      if (AngularFrameVelSin != 0F) {
        output.WriteRawTag(133, 1);
        output.WriteFloat(AngularFrameVelSin);
      }
      if (X != 0F) {
        output.WriteRawTag(141, 1);
        output.WriteFloat(X);
      }
      if (Y != 0F) {
        output.WriteRawTag(149, 1);
        output.WriteFloat(Y);
      }
      if (DirX != 0) {
        output.WriteRawTag(152, 1);
        output.WriteInt32(DirX);
      }
      if (DirY != 0) {
        output.WriteRawTag(160, 1);
        output.WriteInt32(DirY);
      }
      if (VelX != 0F) {
        output.WriteRawTag(173, 1);
        output.WriteFloat(VelX);
      }
      if (VelY != 0F) {
        output.WriteRawTag(181, 1);
        output.WriteFloat(VelY);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
      }
      if (PatrolCueAngularVelFlipMark != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PatrolCueAngularVelFlipMark);
      }
      if (configFromTiled_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ConfigFromTiled);
      }
      if (TrapState != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) TrapState);
      }
      if (FramesInTrapState != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FramesInTrapState);
      }
      if (IsCompletelyStatic != false) {
        size += 1 + 1;
      }
      if (CapturedByPatrolCue != false) {
        size += 1 + 1;
      }
      if (FramesInPatrolCue != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FramesInPatrolCue);
      }
      if (WaivingPatrolCueId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(WaivingPatrolCueId);
      }
      if (WaivingSpontaneousPatrol != false) {
        size += 1 + 1;
      }
      if (SubscribesToTriggerId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SubscribesToTriggerId);
      }
      if (SubscribesToTriggerIdAlt != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SubscribesToTriggerIdAlt);
      }
      if (SpinCos != 0F) {
        size += 1 + 4;
      }
      if (SpinSin != 0F) {
        size += 1 + 4;
      }
      if (AngularFrameVelCos != 0F) {
        size += 1 + 4;
      }
      if (AngularFrameVelSin != 0F) {
        size += 2 + 4;
      }
      if (X != 0F) {
        size += 2 + 4;
      }
      if (Y != 0F) {
        size += 2 + 4;
      }
      if (DirX != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(DirX);
      }
      if (DirY != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(DirY);
      }
      if (VelX != 0F) {
        size += 2 + 4;
      }
      if (VelY != 0F) {
        size += 2 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Trap other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.PatrolCueAngularVelFlipMark != 0) {
        PatrolCueAngularVelFlipMark = other.PatrolCueAngularVelFlipMark;
      }
      if (other.configFromTiled_ != null) {
        if (configFromTiled_ == null) {
          ConfigFromTiled = new global::jtshared.TrapConfigFromTiled();
        }
        ConfigFromTiled.MergeFrom(other.ConfigFromTiled);
      }
      if (other.TrapState != 0) {
        TrapState = other.TrapState;
      }
      if (other.FramesInTrapState != 0) {
        FramesInTrapState = other.FramesInTrapState;
      }
      if (other.IsCompletelyStatic != false) {
        IsCompletelyStatic = other.IsCompletelyStatic;
      }
      if (other.CapturedByPatrolCue != false) {
        CapturedByPatrolCue = other.CapturedByPatrolCue;
      }
      if (other.FramesInPatrolCue != 0) {
        FramesInPatrolCue = other.FramesInPatrolCue;
      }
      if (other.WaivingPatrolCueId != 0) {
        WaivingPatrolCueId = other.WaivingPatrolCueId;
      }
      if (other.WaivingSpontaneousPatrol != false) {
        WaivingSpontaneousPatrol = other.WaivingSpontaneousPatrol;
      }
      if (other.SubscribesToTriggerId != 0) {
        SubscribesToTriggerId = other.SubscribesToTriggerId;
      }
      if (other.SubscribesToTriggerIdAlt != 0) {
        SubscribesToTriggerIdAlt = other.SubscribesToTriggerIdAlt;
      }
      if (other.SpinCos != 0F) {
        SpinCos = other.SpinCos;
      }
      if (other.SpinSin != 0F) {
        SpinSin = other.SpinSin;
      }
      if (other.AngularFrameVelCos != 0F) {
        AngularFrameVelCos = other.AngularFrameVelCos;
      }
      if (other.AngularFrameVelSin != 0F) {
        AngularFrameVelSin = other.AngularFrameVelSin;
      }
      if (other.X != 0F) {
        X = other.X;
      }
      if (other.Y != 0F) {
        Y = other.Y;
      }
      if (other.DirX != 0) {
        DirX = other.DirX;
      }
      if (other.DirY != 0) {
        DirY = other.DirY;
      }
      if (other.VelX != 0F) {
        VelX = other.VelX;
      }
      if (other.VelY != 0F) {
        VelY = other.VelY;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadUInt32();
            break;
          }
          case 16: {
            PatrolCueAngularVelFlipMark = input.ReadInt32();
            break;
          }
          case 26: {
            if (configFromTiled_ == null) {
              ConfigFromTiled = new global::jtshared.TrapConfigFromTiled();
            }
            input.ReadMessage(ConfigFromTiled);
            break;
          }
          case 32: {
            TrapState = (global::jtshared.TrapState) input.ReadEnum();
            break;
          }
          case 40: {
            FramesInTrapState = input.ReadInt32();
            break;
          }
          case 48: {
            IsCompletelyStatic = input.ReadBool();
            break;
          }
          case 56: {
            CapturedByPatrolCue = input.ReadBool();
            break;
          }
          case 64: {
            FramesInPatrolCue = input.ReadInt32();
            break;
          }
          case 72: {
            WaivingPatrolCueId = input.ReadInt32();
            break;
          }
          case 80: {
            WaivingSpontaneousPatrol = input.ReadBool();
            break;
          }
          case 88: {
            SubscribesToTriggerId = input.ReadUInt32();
            break;
          }
          case 96: {
            SubscribesToTriggerIdAlt = input.ReadUInt32();
            break;
          }
          case 109: {
            SpinCos = input.ReadFloat();
            break;
          }
          case 117: {
            SpinSin = input.ReadFloat();
            break;
          }
          case 125: {
            AngularFrameVelCos = input.ReadFloat();
            break;
          }
          case 133: {
            AngularFrameVelSin = input.ReadFloat();
            break;
          }
          case 141: {
            X = input.ReadFloat();
            break;
          }
          case 149: {
            Y = input.ReadFloat();
            break;
          }
          case 152: {
            DirX = input.ReadInt32();
            break;
          }
          case 160: {
            DirY = input.ReadInt32();
            break;
          }
          case 173: {
            VelX = input.ReadFloat();
            break;
          }
          case 181: {
            VelY = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class TriggerConfig : pb::IMessage<TriggerConfig> {
    private static readonly pb::MessageParser<TriggerConfig> _parser = new pb::MessageParser<TriggerConfig>(() => new TriggerConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TriggerConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::jtshared.SerializableDataReflection.Descriptor.MessageTypes[23]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TriggerConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TriggerConfig(TriggerConfig other) : this() {
      speciesId_ = other.speciesId_;
      speciesName_ = other.speciesName_;
      triggerType_ = other.triggerType_;
      collisionTypeMask_ = other.collisionTypeMask_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TriggerConfig Clone() {
      return new TriggerConfig(this);
    }

    /// <summary>Field number for the "species_id" field.</summary>
    public const int SpeciesIdFieldNumber = 1;
    private int speciesId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SpeciesId {
      get { return speciesId_; }
      set {
        speciesId_ = value;
      }
    }

    /// <summary>Field number for the "species_name" field.</summary>
    public const int SpeciesNameFieldNumber = 2;
    private string speciesName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SpeciesName {
      get { return speciesName_; }
      set {
        speciesName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "trigger_type" field.</summary>
    public const int TriggerTypeFieldNumber = 3;
    private global::jtshared.TriggerType triggerType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::jtshared.TriggerType TriggerType {
      get { return triggerType_; }
      set {
        triggerType_ = value;
      }
    }

    /// <summary>Field number for the "collision_type_mask" field.</summary>
    public const int CollisionTypeMaskFieldNumber = 4;
    private ulong collisionTypeMask_;
    /// <summary>
    ///
    ///:repeats "quota" times
    ///|&lt;-------------------------------------- recoveryFrames ----------------------------->|&lt;-----------------recoveryFrames ---------->|.......
    ///:repeats "subCycleQuota" times                                                        :repeats "subCycleQuota" times
    ///|&lt;-delayedFrames->|&lt;-subCycleTriggerFrames->|&lt;-subCycleTriggerFrames->|&lt;-subCycleTriggerFrames->|       |.......
    ///|TReady           |TCoolingDown             |TCoolingDown(replay)     |TCoolingDown(replay)     |TReady |.......
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong CollisionTypeMask {
      get { return collisionTypeMask_; }
      set {
        collisionTypeMask_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TriggerConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TriggerConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SpeciesId != other.SpeciesId) return false;
      if (SpeciesName != other.SpeciesName) return false;
      if (TriggerType != other.TriggerType) return false;
      if (CollisionTypeMask != other.CollisionTypeMask) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SpeciesId != 0) hash ^= SpeciesId.GetHashCode();
      if (SpeciesName.Length != 0) hash ^= SpeciesName.GetHashCode();
      if (TriggerType != 0) hash ^= TriggerType.GetHashCode();
      if (CollisionTypeMask != 0UL) hash ^= CollisionTypeMask.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SpeciesId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(SpeciesId);
      }
      if (SpeciesName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(SpeciesName);
      }
      if (TriggerType != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) TriggerType);
      }
      if (CollisionTypeMask != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(CollisionTypeMask);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SpeciesId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SpeciesId);
      }
      if (SpeciesName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SpeciesName);
      }
      if (TriggerType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) TriggerType);
      }
      if (CollisionTypeMask != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(CollisionTypeMask);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TriggerConfig other) {
      if (other == null) {
        return;
      }
      if (other.SpeciesId != 0) {
        SpeciesId = other.SpeciesId;
      }
      if (other.SpeciesName.Length != 0) {
        SpeciesName = other.SpeciesName;
      }
      if (other.TriggerType != 0) {
        TriggerType = other.TriggerType;
      }
      if (other.CollisionTypeMask != 0UL) {
        CollisionTypeMask = other.CollisionTypeMask;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            SpeciesId = input.ReadInt32();
            break;
          }
          case 18: {
            SpeciesName = input.ReadString();
            break;
          }
          case 24: {
            TriggerType = (global::jtshared.TriggerType) input.ReadEnum();
            break;
          }
          case 32: {
            CollisionTypeMask = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PeerUdpAddr : pb::IMessage<PeerUdpAddr> {
    private static readonly pb::MessageParser<PeerUdpAddr> _parser = new pb::MessageParser<PeerUdpAddr>(() => new PeerUdpAddr());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PeerUdpAddr> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::jtshared.SerializableDataReflection.Descriptor.MessageTypes[24]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PeerUdpAddr() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PeerUdpAddr(PeerUdpAddr other) : this() {
      ip_ = other.ip_;
      port_ = other.port_;
      authKey_ = other.authKey_;
      seqNo_ = other.seqNo_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PeerUdpAddr Clone() {
      return new PeerUdpAddr(this);
    }

    /// <summary>Field number for the "ip" field.</summary>
    public const int IpFieldNumber = 1;
    private string ip_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Ip {
      get { return ip_; }
      set {
        ip_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "port" field.</summary>
    public const int PortFieldNumber = 2;
    private int port_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Port {
      get { return port_; }
      set {
        port_ = value;
      }
    }

    /// <summary>Field number for the "auth_key" field.</summary>
    public const int AuthKeyFieldNumber = 3;
    private int authKey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AuthKey {
      get { return authKey_; }
      set {
        authKey_ = value;
      }
    }

    /// <summary>Field number for the "seq_no" field.</summary>
    public const int SeqNoFieldNumber = 4;
    private uint seqNo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SeqNo {
      get { return seqNo_; }
      set {
        seqNo_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PeerUdpAddr);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PeerUdpAddr other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Ip != other.Ip) return false;
      if (Port != other.Port) return false;
      if (AuthKey != other.AuthKey) return false;
      if (SeqNo != other.SeqNo) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Ip.Length != 0) hash ^= Ip.GetHashCode();
      if (Port != 0) hash ^= Port.GetHashCode();
      if (AuthKey != 0) hash ^= AuthKey.GetHashCode();
      if (SeqNo != 0) hash ^= SeqNo.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Ip.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Ip);
      }
      if (Port != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Port);
      }
      if (AuthKey != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(AuthKey);
      }
      if (SeqNo != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(SeqNo);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ip.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Ip);
      }
      if (Port != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Port);
      }
      if (AuthKey != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AuthKey);
      }
      if (SeqNo != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SeqNo);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PeerUdpAddr other) {
      if (other == null) {
        return;
      }
      if (other.Ip.Length != 0) {
        Ip = other.Ip;
      }
      if (other.Port != 0) {
        Port = other.Port;
      }
      if (other.AuthKey != 0) {
        AuthKey = other.AuthKey;
      }
      if (other.SeqNo != 0) {
        SeqNo = other.SeqNo;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Ip = input.ReadString();
            break;
          }
          case 16: {
            Port = input.ReadInt32();
            break;
          }
          case 24: {
            AuthKey = input.ReadInt32();
            break;
          }
          case 32: {
            SeqNo = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class BattleColliderInfo : pb::IMessage<BattleColliderInfo> {
    private static readonly pb::MessageParser<BattleColliderInfo> _parser = new pb::MessageParser<BattleColliderInfo>(() => new BattleColliderInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BattleColliderInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::jtshared.SerializableDataReflection.Descriptor.MessageTypes[25]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleColliderInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleColliderInfo(BattleColliderInfo other) : this() {
      stageName_ = other.stageName_;
      boundRoomId_ = other.boundRoomId_;
      battleDurationFrames_ = other.battleDurationFrames_;
      inputFrameUpsyncDelayTolerance_ = other.inputFrameUpsyncDelayTolerance_;
      maxChasingRenderFramesPerUpdate_ = other.maxChasingRenderFramesPerUpdate_;
      rollbackEstimatedDtMillis_ = other.rollbackEstimatedDtMillis_;
      rollbackEstimatedDtNanos_ = other.rollbackEstimatedDtNanos_;
      renderBufferSize_ = other.renderBufferSize_;
      collisionMinStep_ = other.collisionMinStep_;
      boundRoomCapacity_ = other.boundRoomCapacity_;
      preallocNpcCapacity_ = other.preallocNpcCapacity_;
      preallocBulletCapacity_ = other.preallocBulletCapacity_;
      battleUdpTunnel_ = other.battleUdpTunnel_ != null ? other.battleUdpTunnel_.Clone() : null;
      frameLogEnabled_ = other.frameLogEnabled_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleColliderInfo Clone() {
      return new BattleColliderInfo(this);
    }

    /// <summary>Field number for the "stage_name" field.</summary>
    public const int StageNameFieldNumber = 1;
    private string stageName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string StageName {
      get { return stageName_; }
      set {
        stageName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "bound_room_id" field.</summary>
    public const int BoundRoomIdFieldNumber = 2;
    private int boundRoomId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BoundRoomId {
      get { return boundRoomId_; }
      set {
        boundRoomId_ = value;
      }
    }

    /// <summary>Field number for the "battle_duration_frames" field.</summary>
    public const int BattleDurationFramesFieldNumber = 3;
    private long battleDurationFrames_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long BattleDurationFrames {
      get { return battleDurationFrames_; }
      set {
        battleDurationFrames_ = value;
      }
    }

    /// <summary>Field number for the "input_frame_upsync_delay_tolerance" field.</summary>
    public const int InputFrameUpsyncDelayToleranceFieldNumber = 4;
    private int inputFrameUpsyncDelayTolerance_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int InputFrameUpsyncDelayTolerance {
      get { return inputFrameUpsyncDelayTolerance_; }
      set {
        inputFrameUpsyncDelayTolerance_ = value;
      }
    }

    /// <summary>Field number for the "max_chasing_render_frames_per_update" field.</summary>
    public const int MaxChasingRenderFramesPerUpdateFieldNumber = 5;
    private int maxChasingRenderFramesPerUpdate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxChasingRenderFramesPerUpdate {
      get { return maxChasingRenderFramesPerUpdate_; }
      set {
        maxChasingRenderFramesPerUpdate_ = value;
      }
    }

    /// <summary>Field number for the "rollback_estimated_dt_millis" field.</summary>
    public const int RollbackEstimatedDtMillisFieldNumber = 6;
    private double rollbackEstimatedDtMillis_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double RollbackEstimatedDtMillis {
      get { return rollbackEstimatedDtMillis_; }
      set {
        rollbackEstimatedDtMillis_ = value;
      }
    }

    /// <summary>Field number for the "rollback_estimated_dt_nanos" field.</summary>
    public const int RollbackEstimatedDtNanosFieldNumber = 7;
    private long rollbackEstimatedDtNanos_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long RollbackEstimatedDtNanos {
      get { return rollbackEstimatedDtNanos_; }
      set {
        rollbackEstimatedDtNanos_ = value;
      }
    }

    /// <summary>Field number for the "render_buffer_size" field.</summary>
    public const int RenderBufferSizeFieldNumber = 8;
    private int renderBufferSize_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RenderBufferSize {
      get { return renderBufferSize_; }
      set {
        renderBufferSize_ = value;
      }
    }

    /// <summary>Field number for the "collision_min_step" field.</summary>
    public const int CollisionMinStepFieldNumber = 9;
    private int collisionMinStep_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CollisionMinStep {
      get { return collisionMinStep_; }
      set {
        collisionMinStep_ = value;
      }
    }

    /// <summary>Field number for the "bound_room_capacity" field.</summary>
    public const int BoundRoomCapacityFieldNumber = 10;
    private int boundRoomCapacity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BoundRoomCapacity {
      get { return boundRoomCapacity_; }
      set {
        boundRoomCapacity_ = value;
      }
    }

    /// <summary>Field number for the "prealloc_npc_capacity" field.</summary>
    public const int PreallocNpcCapacityFieldNumber = 11;
    private int preallocNpcCapacity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PreallocNpcCapacity {
      get { return preallocNpcCapacity_; }
      set {
        preallocNpcCapacity_ = value;
      }
    }

    /// <summary>Field number for the "prealloc_bullet_capacity" field.</summary>
    public const int PreallocBulletCapacityFieldNumber = 12;
    private int preallocBulletCapacity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PreallocBulletCapacity {
      get { return preallocBulletCapacity_; }
      set {
        preallocBulletCapacity_ = value;
      }
    }

    /// <summary>Field number for the "battle_udp_tunnel" field.</summary>
    public const int BattleUdpTunnelFieldNumber = 1024;
    private global::jtshared.PeerUdpAddr battleUdpTunnel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::jtshared.PeerUdpAddr BattleUdpTunnel {
      get { return battleUdpTunnel_; }
      set {
        battleUdpTunnel_ = value;
      }
    }

    /// <summary>Field number for the "frame_log_enabled" field.</summary>
    public const int FrameLogEnabledFieldNumber = 1025;
    private bool frameLogEnabled_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool FrameLogEnabled {
      get { return frameLogEnabled_; }
      set {
        frameLogEnabled_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BattleColliderInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BattleColliderInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (StageName != other.StageName) return false;
      if (BoundRoomId != other.BoundRoomId) return false;
      if (BattleDurationFrames != other.BattleDurationFrames) return false;
      if (InputFrameUpsyncDelayTolerance != other.InputFrameUpsyncDelayTolerance) return false;
      if (MaxChasingRenderFramesPerUpdate != other.MaxChasingRenderFramesPerUpdate) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(RollbackEstimatedDtMillis, other.RollbackEstimatedDtMillis)) return false;
      if (RollbackEstimatedDtNanos != other.RollbackEstimatedDtNanos) return false;
      if (RenderBufferSize != other.RenderBufferSize) return false;
      if (CollisionMinStep != other.CollisionMinStep) return false;
      if (BoundRoomCapacity != other.BoundRoomCapacity) return false;
      if (PreallocNpcCapacity != other.PreallocNpcCapacity) return false;
      if (PreallocBulletCapacity != other.PreallocBulletCapacity) return false;
      if (!object.Equals(BattleUdpTunnel, other.BattleUdpTunnel)) return false;
      if (FrameLogEnabled != other.FrameLogEnabled) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (StageName.Length != 0) hash ^= StageName.GetHashCode();
      if (BoundRoomId != 0) hash ^= BoundRoomId.GetHashCode();
      if (BattleDurationFrames != 0L) hash ^= BattleDurationFrames.GetHashCode();
      if (InputFrameUpsyncDelayTolerance != 0) hash ^= InputFrameUpsyncDelayTolerance.GetHashCode();
      if (MaxChasingRenderFramesPerUpdate != 0) hash ^= MaxChasingRenderFramesPerUpdate.GetHashCode();
      if (RollbackEstimatedDtMillis != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(RollbackEstimatedDtMillis);
      if (RollbackEstimatedDtNanos != 0L) hash ^= RollbackEstimatedDtNanos.GetHashCode();
      if (RenderBufferSize != 0) hash ^= RenderBufferSize.GetHashCode();
      if (CollisionMinStep != 0) hash ^= CollisionMinStep.GetHashCode();
      if (BoundRoomCapacity != 0) hash ^= BoundRoomCapacity.GetHashCode();
      if (PreallocNpcCapacity != 0) hash ^= PreallocNpcCapacity.GetHashCode();
      if (PreallocBulletCapacity != 0) hash ^= PreallocBulletCapacity.GetHashCode();
      if (battleUdpTunnel_ != null) hash ^= BattleUdpTunnel.GetHashCode();
      if (FrameLogEnabled != false) hash ^= FrameLogEnabled.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (StageName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(StageName);
      }
      if (BoundRoomId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(BoundRoomId);
      }
      if (BattleDurationFrames != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(BattleDurationFrames);
      }
      if (InputFrameUpsyncDelayTolerance != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(InputFrameUpsyncDelayTolerance);
      }
      if (MaxChasingRenderFramesPerUpdate != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(MaxChasingRenderFramesPerUpdate);
      }
      if (RollbackEstimatedDtMillis != 0D) {
        output.WriteRawTag(49);
        output.WriteDouble(RollbackEstimatedDtMillis);
      }
      if (RollbackEstimatedDtNanos != 0L) {
        output.WriteRawTag(56);
        output.WriteInt64(RollbackEstimatedDtNanos);
      }
      if (RenderBufferSize != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(RenderBufferSize);
      }
      if (CollisionMinStep != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(CollisionMinStep);
      }
      if (BoundRoomCapacity != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(BoundRoomCapacity);
      }
      if (PreallocNpcCapacity != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(PreallocNpcCapacity);
      }
      if (PreallocBulletCapacity != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(PreallocBulletCapacity);
      }
      if (battleUdpTunnel_ != null) {
        output.WriteRawTag(130, 64);
        output.WriteMessage(BattleUdpTunnel);
      }
      if (FrameLogEnabled != false) {
        output.WriteRawTag(136, 64);
        output.WriteBool(FrameLogEnabled);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (StageName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(StageName);
      }
      if (BoundRoomId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BoundRoomId);
      }
      if (BattleDurationFrames != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(BattleDurationFrames);
      }
      if (InputFrameUpsyncDelayTolerance != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(InputFrameUpsyncDelayTolerance);
      }
      if (MaxChasingRenderFramesPerUpdate != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxChasingRenderFramesPerUpdate);
      }
      if (RollbackEstimatedDtMillis != 0D) {
        size += 1 + 8;
      }
      if (RollbackEstimatedDtNanos != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(RollbackEstimatedDtNanos);
      }
      if (RenderBufferSize != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RenderBufferSize);
      }
      if (CollisionMinStep != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CollisionMinStep);
      }
      if (BoundRoomCapacity != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BoundRoomCapacity);
      }
      if (PreallocNpcCapacity != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PreallocNpcCapacity);
      }
      if (PreallocBulletCapacity != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PreallocBulletCapacity);
      }
      if (battleUdpTunnel_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(BattleUdpTunnel);
      }
      if (FrameLogEnabled != false) {
        size += 2 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BattleColliderInfo other) {
      if (other == null) {
        return;
      }
      if (other.StageName.Length != 0) {
        StageName = other.StageName;
      }
      if (other.BoundRoomId != 0) {
        BoundRoomId = other.BoundRoomId;
      }
      if (other.BattleDurationFrames != 0L) {
        BattleDurationFrames = other.BattleDurationFrames;
      }
      if (other.InputFrameUpsyncDelayTolerance != 0) {
        InputFrameUpsyncDelayTolerance = other.InputFrameUpsyncDelayTolerance;
      }
      if (other.MaxChasingRenderFramesPerUpdate != 0) {
        MaxChasingRenderFramesPerUpdate = other.MaxChasingRenderFramesPerUpdate;
      }
      if (other.RollbackEstimatedDtMillis != 0D) {
        RollbackEstimatedDtMillis = other.RollbackEstimatedDtMillis;
      }
      if (other.RollbackEstimatedDtNanos != 0L) {
        RollbackEstimatedDtNanos = other.RollbackEstimatedDtNanos;
      }
      if (other.RenderBufferSize != 0) {
        RenderBufferSize = other.RenderBufferSize;
      }
      if (other.CollisionMinStep != 0) {
        CollisionMinStep = other.CollisionMinStep;
      }
      if (other.BoundRoomCapacity != 0) {
        BoundRoomCapacity = other.BoundRoomCapacity;
      }
      if (other.PreallocNpcCapacity != 0) {
        PreallocNpcCapacity = other.PreallocNpcCapacity;
      }
      if (other.PreallocBulletCapacity != 0) {
        PreallocBulletCapacity = other.PreallocBulletCapacity;
      }
      if (other.battleUdpTunnel_ != null) {
        if (battleUdpTunnel_ == null) {
          BattleUdpTunnel = new global::jtshared.PeerUdpAddr();
        }
        BattleUdpTunnel.MergeFrom(other.BattleUdpTunnel);
      }
      if (other.FrameLogEnabled != false) {
        FrameLogEnabled = other.FrameLogEnabled;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            StageName = input.ReadString();
            break;
          }
          case 16: {
            BoundRoomId = input.ReadInt32();
            break;
          }
          case 24: {
            BattleDurationFrames = input.ReadInt64();
            break;
          }
          case 32: {
            InputFrameUpsyncDelayTolerance = input.ReadInt32();
            break;
          }
          case 40: {
            MaxChasingRenderFramesPerUpdate = input.ReadInt32();
            break;
          }
          case 49: {
            RollbackEstimatedDtMillis = input.ReadDouble();
            break;
          }
          case 56: {
            RollbackEstimatedDtNanos = input.ReadInt64();
            break;
          }
          case 64: {
            RenderBufferSize = input.ReadInt32();
            break;
          }
          case 72: {
            CollisionMinStep = input.ReadInt32();
            break;
          }
          case 80: {
            BoundRoomCapacity = input.ReadInt32();
            break;
          }
          case 88: {
            PreallocNpcCapacity = input.ReadInt32();
            break;
          }
          case 96: {
            PreallocBulletCapacity = input.ReadInt32();
            break;
          }
          case 8194: {
            if (battleUdpTunnel_ == null) {
              BattleUdpTunnel = new global::jtshared.PeerUdpAddr();
            }
            input.ReadMessage(BattleUdpTunnel);
            break;
          }
          case 8200: {
            FrameLogEnabled = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class RenderFrame : pb::IMessage<RenderFrame> {
    private static readonly pb::MessageParser<RenderFrame> _parser = new pb::MessageParser<RenderFrame>(() => new RenderFrame());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RenderFrame> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::jtshared.SerializableDataReflection.Descriptor.MessageTypes[26]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RenderFrame() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RenderFrame(RenderFrame other) : this() {
      id_ = other.id_;
      playersArr_ = other.playersArr_.Clone();
      countdownNanos_ = other.countdownNanos_;
      bullets_ = other.bullets_.Clone();
      npcsArr_ = other.npcsArr_.Clone();
      trapsArr_ = other.trapsArr_.Clone();
      triggersArr_ = other.triggersArr_.Clone();
      pickables_ = other.pickables_.Clone();
      bulletIdCounter_ = other.bulletIdCounter_;
      npcIdCounter_ = other.npcIdCounter_;
      trapIdCounter_ = other.trapIdCounter_;
      pickableIdCounter_ = other.pickableIdCounter_;
      speciesIdList_ = other.speciesIdList_.Clone();
      shouldForceResync_ = other.shouldForceResync_;
      backendUnconfirmedMask_ = other.backendUnconfirmedMask_;
      participantChangeId_ = other.participantChangeId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RenderFrame Clone() {
      return new RenderFrame(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "players_arr" field.</summary>
    public const int PlayersArrFieldNumber = 2;
    private static readonly pb::FieldCodec<global::jtshared.PlayerCharacterDownsync> _repeated_playersArr_codec
        = pb::FieldCodec.ForMessage(18, global::jtshared.PlayerCharacterDownsync.Parser);
    private readonly pbc::RepeatedField<global::jtshared.PlayerCharacterDownsync> playersArr_ = new pbc::RepeatedField<global::jtshared.PlayerCharacterDownsync>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::jtshared.PlayerCharacterDownsync> PlayersArr {
      get { return playersArr_; }
    }

    /// <summary>Field number for the "countdown_nanos" field.</summary>
    public const int CountdownNanosFieldNumber = 3;
    private long countdownNanos_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long CountdownNanos {
      get { return countdownNanos_; }
      set {
        countdownNanos_ = value;
      }
    }

    /// <summary>Field number for the "bullets" field.</summary>
    public const int BulletsFieldNumber = 4;
    private static readonly pb::FieldCodec<global::jtshared.Bullet> _repeated_bullets_codec
        = pb::FieldCodec.ForMessage(34, global::jtshared.Bullet.Parser);
    private readonly pbc::RepeatedField<global::jtshared.Bullet> bullets_ = new pbc::RepeatedField<global::jtshared.Bullet>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::jtshared.Bullet> Bullets {
      get { return bullets_; }
    }

    /// <summary>Field number for the "npcs_arr" field.</summary>
    public const int NpcsArrFieldNumber = 5;
    private static readonly pb::FieldCodec<global::jtshared.NpcCharacterDownsync> _repeated_npcsArr_codec
        = pb::FieldCodec.ForMessage(42, global::jtshared.NpcCharacterDownsync.Parser);
    private readonly pbc::RepeatedField<global::jtshared.NpcCharacterDownsync> npcsArr_ = new pbc::RepeatedField<global::jtshared.NpcCharacterDownsync>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::jtshared.NpcCharacterDownsync> NpcsArr {
      get { return npcsArr_; }
    }

    /// <summary>Field number for the "traps_arr" field.</summary>
    public const int TrapsArrFieldNumber = 6;
    private static readonly pb::FieldCodec<global::jtshared.Trap> _repeated_trapsArr_codec
        = pb::FieldCodec.ForMessage(50, global::jtshared.Trap.Parser);
    private readonly pbc::RepeatedField<global::jtshared.Trap> trapsArr_ = new pbc::RepeatedField<global::jtshared.Trap>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::jtshared.Trap> TrapsArr {
      get { return trapsArr_; }
    }

    /// <summary>Field number for the "triggers_arr" field.</summary>
    public const int TriggersArrFieldNumber = 7;
    private static readonly pb::FieldCodec<global::jtshared.Trigger> _repeated_triggersArr_codec
        = pb::FieldCodec.ForMessage(58, global::jtshared.Trigger.Parser);
    private readonly pbc::RepeatedField<global::jtshared.Trigger> triggersArr_ = new pbc::RepeatedField<global::jtshared.Trigger>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::jtshared.Trigger> TriggersArr {
      get { return triggersArr_; }
    }

    /// <summary>Field number for the "pickables" field.</summary>
    public const int PickablesFieldNumber = 8;
    private static readonly pb::FieldCodec<global::jtshared.Pickable> _repeated_pickables_codec
        = pb::FieldCodec.ForMessage(66, global::jtshared.Pickable.Parser);
    private readonly pbc::RepeatedField<global::jtshared.Pickable> pickables_ = new pbc::RepeatedField<global::jtshared.Pickable>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::jtshared.Pickable> Pickables {
      get { return pickables_; }
    }

    /// <summary>Field number for the "bullet_id_counter" field.</summary>
    public const int BulletIdCounterFieldNumber = 9;
    private uint bulletIdCounter_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint BulletIdCounter {
      get { return bulletIdCounter_; }
      set {
        bulletIdCounter_ = value;
      }
    }

    /// <summary>Field number for the "npc_id_counter" field.</summary>
    public const int NpcIdCounterFieldNumber = 10;
    private uint npcIdCounter_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint NpcIdCounter {
      get { return npcIdCounter_; }
      set {
        npcIdCounter_ = value;
      }
    }

    /// <summary>Field number for the "trap_id_counter" field.</summary>
    public const int TrapIdCounterFieldNumber = 11;
    private uint trapIdCounter_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TrapIdCounter {
      get { return trapIdCounter_; }
      set {
        trapIdCounter_ = value;
      }
    }

    /// <summary>Field number for the "pickable_id_counter" field.</summary>
    public const int PickableIdCounterFieldNumber = 12;
    private uint pickableIdCounter_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PickableIdCounter {
      get { return pickableIdCounter_; }
      set {
        pickableIdCounter_ = value;
      }
    }

    /// <summary>Field number for the "species_id_list" field.</summary>
    public const int SpeciesIdListFieldNumber = 13;
    private static readonly pb::FieldCodec<uint> _repeated_speciesIdList_codec
        = pb::FieldCodec.ForUInt32(106);
    private readonly pbc::RepeatedField<uint> speciesIdList_ = new pbc::RepeatedField<uint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> SpeciesIdList {
      get { return speciesIdList_; }
    }

    /// <summary>Field number for the "should_force_resync" field.</summary>
    public const int ShouldForceResyncFieldNumber = 14;
    private bool shouldForceResync_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ShouldForceResync {
      get { return shouldForceResync_; }
      set {
        shouldForceResync_ = value;
      }
    }

    /// <summary>Field number for the "backend_unconfirmed_mask" field.</summary>
    public const int BackendUnconfirmedMaskFieldNumber = 15;
    private ulong backendUnconfirmedMask_;
    /// <summary>
    /// Indexed by "join_index", same compression concern as stated in InputFrameDownsync
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong BackendUnconfirmedMask {
      get { return backendUnconfirmedMask_; }
      set {
        backendUnconfirmedMask_ = value;
      }
    }

    /// <summary>Field number for the "participant_change_id" field.</summary>
    public const int ParticipantChangeIdFieldNumber = 16;
    private int participantChangeId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ParticipantChangeId {
      get { return participantChangeId_; }
      set {
        participantChangeId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RenderFrame);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RenderFrame other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if(!playersArr_.Equals(other.playersArr_)) return false;
      if (CountdownNanos != other.CountdownNanos) return false;
      if(!bullets_.Equals(other.bullets_)) return false;
      if(!npcsArr_.Equals(other.npcsArr_)) return false;
      if(!trapsArr_.Equals(other.trapsArr_)) return false;
      if(!triggersArr_.Equals(other.triggersArr_)) return false;
      if(!pickables_.Equals(other.pickables_)) return false;
      if (BulletIdCounter != other.BulletIdCounter) return false;
      if (NpcIdCounter != other.NpcIdCounter) return false;
      if (TrapIdCounter != other.TrapIdCounter) return false;
      if (PickableIdCounter != other.PickableIdCounter) return false;
      if(!speciesIdList_.Equals(other.speciesIdList_)) return false;
      if (ShouldForceResync != other.ShouldForceResync) return false;
      if (BackendUnconfirmedMask != other.BackendUnconfirmedMask) return false;
      if (ParticipantChangeId != other.ParticipantChangeId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      hash ^= playersArr_.GetHashCode();
      if (CountdownNanos != 0L) hash ^= CountdownNanos.GetHashCode();
      hash ^= bullets_.GetHashCode();
      hash ^= npcsArr_.GetHashCode();
      hash ^= trapsArr_.GetHashCode();
      hash ^= triggersArr_.GetHashCode();
      hash ^= pickables_.GetHashCode();
      if (BulletIdCounter != 0) hash ^= BulletIdCounter.GetHashCode();
      if (NpcIdCounter != 0) hash ^= NpcIdCounter.GetHashCode();
      if (TrapIdCounter != 0) hash ^= TrapIdCounter.GetHashCode();
      if (PickableIdCounter != 0) hash ^= PickableIdCounter.GetHashCode();
      hash ^= speciesIdList_.GetHashCode();
      if (ShouldForceResync != false) hash ^= ShouldForceResync.GetHashCode();
      if (BackendUnconfirmedMask != 0UL) hash ^= BackendUnconfirmedMask.GetHashCode();
      if (ParticipantChangeId != 0) hash ^= ParticipantChangeId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      playersArr_.WriteTo(output, _repeated_playersArr_codec);
      if (CountdownNanos != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(CountdownNanos);
      }
      bullets_.WriteTo(output, _repeated_bullets_codec);
      npcsArr_.WriteTo(output, _repeated_npcsArr_codec);
      trapsArr_.WriteTo(output, _repeated_trapsArr_codec);
      triggersArr_.WriteTo(output, _repeated_triggersArr_codec);
      pickables_.WriteTo(output, _repeated_pickables_codec);
      if (BulletIdCounter != 0) {
        output.WriteRawTag(72);
        output.WriteUInt32(BulletIdCounter);
      }
      if (NpcIdCounter != 0) {
        output.WriteRawTag(80);
        output.WriteUInt32(NpcIdCounter);
      }
      if (TrapIdCounter != 0) {
        output.WriteRawTag(88);
        output.WriteUInt32(TrapIdCounter);
      }
      if (PickableIdCounter != 0) {
        output.WriteRawTag(96);
        output.WriteUInt32(PickableIdCounter);
      }
      speciesIdList_.WriteTo(output, _repeated_speciesIdList_codec);
      if (ShouldForceResync != false) {
        output.WriteRawTag(112);
        output.WriteBool(ShouldForceResync);
      }
      if (BackendUnconfirmedMask != 0UL) {
        output.WriteRawTag(120);
        output.WriteUInt64(BackendUnconfirmedMask);
      }
      if (ParticipantChangeId != 0) {
        output.WriteRawTag(128, 1);
        output.WriteInt32(ParticipantChangeId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      size += playersArr_.CalculateSize(_repeated_playersArr_codec);
      if (CountdownNanos != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CountdownNanos);
      }
      size += bullets_.CalculateSize(_repeated_bullets_codec);
      size += npcsArr_.CalculateSize(_repeated_npcsArr_codec);
      size += trapsArr_.CalculateSize(_repeated_trapsArr_codec);
      size += triggersArr_.CalculateSize(_repeated_triggersArr_codec);
      size += pickables_.CalculateSize(_repeated_pickables_codec);
      if (BulletIdCounter != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BulletIdCounter);
      }
      if (NpcIdCounter != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NpcIdCounter);
      }
      if (TrapIdCounter != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TrapIdCounter);
      }
      if (PickableIdCounter != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PickableIdCounter);
      }
      size += speciesIdList_.CalculateSize(_repeated_speciesIdList_codec);
      if (ShouldForceResync != false) {
        size += 1 + 1;
      }
      if (BackendUnconfirmedMask != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(BackendUnconfirmedMask);
      }
      if (ParticipantChangeId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ParticipantChangeId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RenderFrame other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      playersArr_.Add(other.playersArr_);
      if (other.CountdownNanos != 0L) {
        CountdownNanos = other.CountdownNanos;
      }
      bullets_.Add(other.bullets_);
      npcsArr_.Add(other.npcsArr_);
      trapsArr_.Add(other.trapsArr_);
      triggersArr_.Add(other.triggersArr_);
      pickables_.Add(other.pickables_);
      if (other.BulletIdCounter != 0) {
        BulletIdCounter = other.BulletIdCounter;
      }
      if (other.NpcIdCounter != 0) {
        NpcIdCounter = other.NpcIdCounter;
      }
      if (other.TrapIdCounter != 0) {
        TrapIdCounter = other.TrapIdCounter;
      }
      if (other.PickableIdCounter != 0) {
        PickableIdCounter = other.PickableIdCounter;
      }
      speciesIdList_.Add(other.speciesIdList_);
      if (other.ShouldForceResync != false) {
        ShouldForceResync = other.ShouldForceResync;
      }
      if (other.BackendUnconfirmedMask != 0UL) {
        BackendUnconfirmedMask = other.BackendUnconfirmedMask;
      }
      if (other.ParticipantChangeId != 0) {
        ParticipantChangeId = other.ParticipantChangeId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 18: {
            playersArr_.AddEntriesFrom(input, _repeated_playersArr_codec);
            break;
          }
          case 24: {
            CountdownNanos = input.ReadInt64();
            break;
          }
          case 34: {
            bullets_.AddEntriesFrom(input, _repeated_bullets_codec);
            break;
          }
          case 42: {
            npcsArr_.AddEntriesFrom(input, _repeated_npcsArr_codec);
            break;
          }
          case 50: {
            trapsArr_.AddEntriesFrom(input, _repeated_trapsArr_codec);
            break;
          }
          case 58: {
            triggersArr_.AddEntriesFrom(input, _repeated_triggersArr_codec);
            break;
          }
          case 66: {
            pickables_.AddEntriesFrom(input, _repeated_pickables_codec);
            break;
          }
          case 72: {
            BulletIdCounter = input.ReadUInt32();
            break;
          }
          case 80: {
            NpcIdCounter = input.ReadUInt32();
            break;
          }
          case 88: {
            TrapIdCounter = input.ReadUInt32();
            break;
          }
          case 96: {
            PickableIdCounter = input.ReadUInt32();
            break;
          }
          case 106:
          case 104: {
            speciesIdList_.AddEntriesFrom(input, _repeated_speciesIdList_codec);
            break;
          }
          case 112: {
            ShouldForceResync = input.ReadBool();
            break;
          }
          case 120: {
            BackendUnconfirmedMask = input.ReadUInt64();
            break;
          }
          case 128: {
            ParticipantChangeId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class WsResp : pb::IMessage<WsResp> {
    private static readonly pb::MessageParser<WsResp> _parser = new pb::MessageParser<WsResp>(() => new WsResp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WsResp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::jtshared.SerializableDataReflection.Descriptor.MessageTypes[27]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WsResp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WsResp(WsResp other) : this() {
      ret_ = other.ret_;
      act_ = other.act_;
      rdf_ = other.rdf_ != null ? other.rdf_.Clone() : null;
      inputFrameDownsyncBatch_ = other.inputFrameDownsyncBatch_.Clone();
      bciFrame_ = other.bciFrame_ != null ? other.bciFrame_.Clone() : null;
      peerJoinIndex_ = other.peerJoinIndex_;
      peerUdpAddrList_ = other.peerUdpAddrList_.Clone();
      errMsg_ = other.errMsg_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WsResp Clone() {
      return new WsResp(this);
    }

    /// <summary>Field number for the "ret" field.</summary>
    public const int RetFieldNumber = 1;
    private int ret_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Ret {
      get { return ret_; }
      set {
        ret_ = value;
      }
    }

    /// <summary>Field number for the "act" field.</summary>
    public const int ActFieldNumber = 2;
    private int act_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Act {
      get { return act_; }
      set {
        act_ = value;
      }
    }

    /// <summary>Field number for the "rdf" field.</summary>
    public const int RdfFieldNumber = 3;
    private global::jtshared.RenderFrame rdf_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::jtshared.RenderFrame Rdf {
      get { return rdf_; }
      set {
        rdf_ = value;
      }
    }

    /// <summary>Field number for the "input_frame_downsync_batch" field.</summary>
    public const int InputFrameDownsyncBatchFieldNumber = 4;
    private static readonly pb::FieldCodec<global::jtshared.InputFrameDownsync> _repeated_inputFrameDownsyncBatch_codec
        = pb::FieldCodec.ForMessage(34, global::jtshared.InputFrameDownsync.Parser);
    private readonly pbc::RepeatedField<global::jtshared.InputFrameDownsync> inputFrameDownsyncBatch_ = new pbc::RepeatedField<global::jtshared.InputFrameDownsync>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::jtshared.InputFrameDownsync> InputFrameDownsyncBatch {
      get { return inputFrameDownsyncBatch_; }
    }

    /// <summary>Field number for the "bci_frame" field.</summary>
    public const int BciFrameFieldNumber = 5;
    private global::jtshared.BattleColliderInfo bciFrame_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::jtshared.BattleColliderInfo BciFrame {
      get { return bciFrame_; }
      set {
        bciFrame_ = value;
      }
    }

    /// <summary>Field number for the "peer_join_index" field.</summary>
    public const int PeerJoinIndexFieldNumber = 6;
    private uint peerJoinIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PeerJoinIndex {
      get { return peerJoinIndex_; }
      set {
        peerJoinIndex_ = value;
      }
    }

    /// <summary>Field number for the "peer_udp_addr_list" field.</summary>
    public const int PeerUdpAddrListFieldNumber = 7;
    private static readonly pb::FieldCodec<global::jtshared.PeerUdpAddr> _repeated_peerUdpAddrList_codec
        = pb::FieldCodec.ForMessage(58, global::jtshared.PeerUdpAddr.Parser);
    private readonly pbc::RepeatedField<global::jtshared.PeerUdpAddr> peerUdpAddrList_ = new pbc::RepeatedField<global::jtshared.PeerUdpAddr>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::jtshared.PeerUdpAddr> PeerUdpAddrList {
      get { return peerUdpAddrList_; }
    }

    /// <summary>Field number for the "err_msg" field.</summary>
    public const int ErrMsgFieldNumber = 2048;
    private string errMsg_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ErrMsg {
      get { return errMsg_; }
      set {
        errMsg_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WsResp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WsResp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Ret != other.Ret) return false;
      if (Act != other.Act) return false;
      if (!object.Equals(Rdf, other.Rdf)) return false;
      if(!inputFrameDownsyncBatch_.Equals(other.inputFrameDownsyncBatch_)) return false;
      if (!object.Equals(BciFrame, other.BciFrame)) return false;
      if (PeerJoinIndex != other.PeerJoinIndex) return false;
      if(!peerUdpAddrList_.Equals(other.peerUdpAddrList_)) return false;
      if (ErrMsg != other.ErrMsg) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Ret != 0) hash ^= Ret.GetHashCode();
      if (Act != 0) hash ^= Act.GetHashCode();
      if (rdf_ != null) hash ^= Rdf.GetHashCode();
      hash ^= inputFrameDownsyncBatch_.GetHashCode();
      if (bciFrame_ != null) hash ^= BciFrame.GetHashCode();
      if (PeerJoinIndex != 0) hash ^= PeerJoinIndex.GetHashCode();
      hash ^= peerUdpAddrList_.GetHashCode();
      if (ErrMsg.Length != 0) hash ^= ErrMsg.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Ret != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Ret);
      }
      if (Act != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Act);
      }
      if (rdf_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Rdf);
      }
      inputFrameDownsyncBatch_.WriteTo(output, _repeated_inputFrameDownsyncBatch_codec);
      if (bciFrame_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(BciFrame);
      }
      if (PeerJoinIndex != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(PeerJoinIndex);
      }
      peerUdpAddrList_.WriteTo(output, _repeated_peerUdpAddrList_codec);
      if (ErrMsg.Length != 0) {
        output.WriteRawTag(130, 128, 1);
        output.WriteString(ErrMsg);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ret != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Ret);
      }
      if (Act != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Act);
      }
      if (rdf_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Rdf);
      }
      size += inputFrameDownsyncBatch_.CalculateSize(_repeated_inputFrameDownsyncBatch_codec);
      if (bciFrame_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BciFrame);
      }
      if (PeerJoinIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PeerJoinIndex);
      }
      size += peerUdpAddrList_.CalculateSize(_repeated_peerUdpAddrList_codec);
      if (ErrMsg.Length != 0) {
        size += 3 + pb::CodedOutputStream.ComputeStringSize(ErrMsg);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WsResp other) {
      if (other == null) {
        return;
      }
      if (other.Ret != 0) {
        Ret = other.Ret;
      }
      if (other.Act != 0) {
        Act = other.Act;
      }
      if (other.rdf_ != null) {
        if (rdf_ == null) {
          Rdf = new global::jtshared.RenderFrame();
        }
        Rdf.MergeFrom(other.Rdf);
      }
      inputFrameDownsyncBatch_.Add(other.inputFrameDownsyncBatch_);
      if (other.bciFrame_ != null) {
        if (bciFrame_ == null) {
          BciFrame = new global::jtshared.BattleColliderInfo();
        }
        BciFrame.MergeFrom(other.BciFrame);
      }
      if (other.PeerJoinIndex != 0) {
        PeerJoinIndex = other.PeerJoinIndex;
      }
      peerUdpAddrList_.Add(other.peerUdpAddrList_);
      if (other.ErrMsg.Length != 0) {
        ErrMsg = other.ErrMsg;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Ret = input.ReadInt32();
            break;
          }
          case 16: {
            Act = input.ReadInt32();
            break;
          }
          case 26: {
            if (rdf_ == null) {
              Rdf = new global::jtshared.RenderFrame();
            }
            input.ReadMessage(Rdf);
            break;
          }
          case 34: {
            inputFrameDownsyncBatch_.AddEntriesFrom(input, _repeated_inputFrameDownsyncBatch_codec);
            break;
          }
          case 42: {
            if (bciFrame_ == null) {
              BciFrame = new global::jtshared.BattleColliderInfo();
            }
            input.ReadMessage(BciFrame);
            break;
          }
          case 48: {
            PeerJoinIndex = input.ReadUInt32();
            break;
          }
          case 58: {
            peerUdpAddrList_.AddEntriesFrom(input, _repeated_peerUdpAddrList_codec);
            break;
          }
          case 16386: {
            ErrMsg = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Skill : pb::IMessage<Skill> {
    private static readonly pb::MessageParser<Skill> _parser = new pb::MessageParser<Skill>(() => new Skill());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Skill> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::jtshared.SerializableDataReflection.Descriptor.MessageTypes[28]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Skill() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Skill(Skill other) : this() {
      recoveryFrames_ = other.recoveryFrames_;
      recoveryFramesOnBlock_ = other.recoveryFramesOnBlock_;
      recoveryFramesOnHit_ = other.recoveryFramesOnHit_;
      triggerType_ = other.triggerType_;
      boundChState_ = other.boundChState_;
      boundChStateOnHit_ = other.boundChStateOnHit_;
      mpDelta_ = other.mpDelta_;
      id_ = other.id_;
      hits_ = other.hits_.Clone();
      selfNonStockBuff_ = other.selfNonStockBuff_ != null ? other.selfNonStockBuff_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Skill Clone() {
      return new Skill(this);
    }

    /// <summary>Field number for the "recovery_frames" field.</summary>
    public const int RecoveryFramesFieldNumber = 2;
    private int recoveryFrames_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RecoveryFrames {
      get { return recoveryFrames_; }
      set {
        recoveryFrames_ = value;
      }
    }

    /// <summary>Field number for the "recovery_frames_on_block" field.</summary>
    public const int RecoveryFramesOnBlockFieldNumber = 3;
    private int recoveryFramesOnBlock_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RecoveryFramesOnBlock {
      get { return recoveryFramesOnBlock_; }
      set {
        recoveryFramesOnBlock_ = value;
      }
    }

    /// <summary>Field number for the "recovery_frames_on_hit" field.</summary>
    public const int RecoveryFramesOnHitFieldNumber = 4;
    private int recoveryFramesOnHit_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RecoveryFramesOnHit {
      get { return recoveryFramesOnHit_; }
      set {
        recoveryFramesOnHit_ = value;
      }
    }

    /// <summary>Field number for the "trigger_type" field.</summary>
    public const int TriggerTypeFieldNumber = 5;
    private global::jtshared.SkillTriggerType triggerType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::jtshared.SkillTriggerType TriggerType {
      get { return triggerType_; }
      set {
        triggerType_ = value;
      }
    }

    /// <summary>Field number for the "bound_ch_state" field.</summary>
    public const int BoundChStateFieldNumber = 6;
    private global::jtshared.CharacterState boundChState_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::jtshared.CharacterState BoundChState {
      get { return boundChState_; }
      set {
        boundChState_ = value;
      }
    }

    /// <summary>Field number for the "bound_ch_state_on_hit" field.</summary>
    public const int BoundChStateOnHitFieldNumber = 7;
    private global::jtshared.CharacterState boundChStateOnHit_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::jtshared.CharacterState BoundChStateOnHit {
      get { return boundChStateOnHit_; }
      set {
        boundChStateOnHit_ = value;
      }
    }

    /// <summary>Field number for the "mp_delta" field.</summary>
    public const int MpDeltaFieldNumber = 8;
    private int mpDelta_;
    /// <summary>
    /// Usually used as "mp consumption"
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MpDelta {
      get { return mpDelta_; }
      set {
        mpDelta_ = value;
      }
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 9;
    private uint id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "hits" field.</summary>
    public const int HitsFieldNumber = 1024;
    private static readonly pb::FieldCodec<global::jtshared.BulletConfig> _repeated_hits_codec
        = pb::FieldCodec.ForMessage(8194, global::jtshared.BulletConfig.Parser);
    private readonly pbc::RepeatedField<global::jtshared.BulletConfig> hits_ = new pbc::RepeatedField<global::jtshared.BulletConfig>();
    /// <summary>
    /// Hits within a "Skill" are automatically triggered
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::jtshared.BulletConfig> Hits {
      get { return hits_; }
    }

    /// <summary>Field number for the "self_non_stock_buff" field.</summary>
    public const int SelfNonStockBuffFieldNumber = 1025;
    private global::jtshared.BuffConfig selfNonStockBuff_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::jtshared.BuffConfig SelfNonStockBuff {
      get { return selfNonStockBuff_; }
      set {
        selfNonStockBuff_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Skill);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Skill other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RecoveryFrames != other.RecoveryFrames) return false;
      if (RecoveryFramesOnBlock != other.RecoveryFramesOnBlock) return false;
      if (RecoveryFramesOnHit != other.RecoveryFramesOnHit) return false;
      if (TriggerType != other.TriggerType) return false;
      if (BoundChState != other.BoundChState) return false;
      if (BoundChStateOnHit != other.BoundChStateOnHit) return false;
      if (MpDelta != other.MpDelta) return false;
      if (Id != other.Id) return false;
      if(!hits_.Equals(other.hits_)) return false;
      if (!object.Equals(SelfNonStockBuff, other.SelfNonStockBuff)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RecoveryFrames != 0) hash ^= RecoveryFrames.GetHashCode();
      if (RecoveryFramesOnBlock != 0) hash ^= RecoveryFramesOnBlock.GetHashCode();
      if (RecoveryFramesOnHit != 0) hash ^= RecoveryFramesOnHit.GetHashCode();
      if (TriggerType != 0) hash ^= TriggerType.GetHashCode();
      if (BoundChState != 0) hash ^= BoundChState.GetHashCode();
      if (BoundChStateOnHit != 0) hash ^= BoundChStateOnHit.GetHashCode();
      if (MpDelta != 0) hash ^= MpDelta.GetHashCode();
      if (Id != 0) hash ^= Id.GetHashCode();
      hash ^= hits_.GetHashCode();
      if (selfNonStockBuff_ != null) hash ^= SelfNonStockBuff.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RecoveryFrames != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(RecoveryFrames);
      }
      if (RecoveryFramesOnBlock != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(RecoveryFramesOnBlock);
      }
      if (RecoveryFramesOnHit != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(RecoveryFramesOnHit);
      }
      if (TriggerType != 0) {
        output.WriteRawTag(40);
        output.WriteEnum((int) TriggerType);
      }
      if (BoundChState != 0) {
        output.WriteRawTag(48);
        output.WriteEnum((int) BoundChState);
      }
      if (BoundChStateOnHit != 0) {
        output.WriteRawTag(56);
        output.WriteEnum((int) BoundChStateOnHit);
      }
      if (MpDelta != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(MpDelta);
      }
      if (Id != 0) {
        output.WriteRawTag(72);
        output.WriteUInt32(Id);
      }
      hits_.WriteTo(output, _repeated_hits_codec);
      if (selfNonStockBuff_ != null) {
        output.WriteRawTag(138, 64);
        output.WriteMessage(SelfNonStockBuff);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RecoveryFrames != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RecoveryFrames);
      }
      if (RecoveryFramesOnBlock != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RecoveryFramesOnBlock);
      }
      if (RecoveryFramesOnHit != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RecoveryFramesOnHit);
      }
      if (TriggerType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) TriggerType);
      }
      if (BoundChState != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) BoundChState);
      }
      if (BoundChStateOnHit != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) BoundChStateOnHit);
      }
      if (MpDelta != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MpDelta);
      }
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
      }
      size += hits_.CalculateSize(_repeated_hits_codec);
      if (selfNonStockBuff_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(SelfNonStockBuff);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Skill other) {
      if (other == null) {
        return;
      }
      if (other.RecoveryFrames != 0) {
        RecoveryFrames = other.RecoveryFrames;
      }
      if (other.RecoveryFramesOnBlock != 0) {
        RecoveryFramesOnBlock = other.RecoveryFramesOnBlock;
      }
      if (other.RecoveryFramesOnHit != 0) {
        RecoveryFramesOnHit = other.RecoveryFramesOnHit;
      }
      if (other.TriggerType != 0) {
        TriggerType = other.TriggerType;
      }
      if (other.BoundChState != 0) {
        BoundChState = other.BoundChState;
      }
      if (other.BoundChStateOnHit != 0) {
        BoundChStateOnHit = other.BoundChStateOnHit;
      }
      if (other.MpDelta != 0) {
        MpDelta = other.MpDelta;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      hits_.Add(other.hits_);
      if (other.selfNonStockBuff_ != null) {
        if (selfNonStockBuff_ == null) {
          SelfNonStockBuff = new global::jtshared.BuffConfig();
        }
        SelfNonStockBuff.MergeFrom(other.SelfNonStockBuff);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 16: {
            RecoveryFrames = input.ReadInt32();
            break;
          }
          case 24: {
            RecoveryFramesOnBlock = input.ReadInt32();
            break;
          }
          case 32: {
            RecoveryFramesOnHit = input.ReadInt32();
            break;
          }
          case 40: {
            TriggerType = (global::jtshared.SkillTriggerType) input.ReadEnum();
            break;
          }
          case 48: {
            BoundChState = (global::jtshared.CharacterState) input.ReadEnum();
            break;
          }
          case 56: {
            BoundChStateOnHit = (global::jtshared.CharacterState) input.ReadEnum();
            break;
          }
          case 64: {
            MpDelta = input.ReadInt32();
            break;
          }
          case 72: {
            Id = input.ReadUInt32();
            break;
          }
          case 8194: {
            hits_.AddEntriesFrom(input, _repeated_hits_codec);
            break;
          }
          case 8202: {
            if (selfNonStockBuff_ == null) {
              SelfNonStockBuff = new global::jtshared.BuffConfig();
            }
            input.ReadMessage(SelfNonStockBuff);
            break;
          }
        }
      }
    }

  }

  public sealed partial class FrameLog : pb::IMessage<FrameLog> {
    private static readonly pb::MessageParser<FrameLog> _parser = new pb::MessageParser<FrameLog>(() => new FrameLog());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FrameLog> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::jtshared.SerializableDataReflection.Descriptor.MessageTypes[29]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FrameLog() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FrameLog(FrameLog other) : this() {
      rdf_ = other.rdf_ != null ? other.rdf_.Clone() : null;
      actuallyUsedIdf_ = other.actuallyUsedIdf_ != null ? other.actuallyUsedIdf_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FrameLog Clone() {
      return new FrameLog(this);
    }

    /// <summary>Field number for the "rdf" field.</summary>
    public const int RdfFieldNumber = 1;
    private global::jtshared.RenderFrame rdf_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::jtshared.RenderFrame Rdf {
      get { return rdf_; }
      set {
        rdf_ = value;
      }
    }

    /// <summary>Field number for the "actually_used_idf" field.</summary>
    public const int ActuallyUsedIdfFieldNumber = 2;
    private global::jtshared.InputFrameDownsync actuallyUsedIdf_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::jtshared.InputFrameDownsync ActuallyUsedIdf {
      get { return actuallyUsedIdf_; }
      set {
        actuallyUsedIdf_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FrameLog);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FrameLog other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Rdf, other.Rdf)) return false;
      if (!object.Equals(ActuallyUsedIdf, other.ActuallyUsedIdf)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (rdf_ != null) hash ^= Rdf.GetHashCode();
      if (actuallyUsedIdf_ != null) hash ^= ActuallyUsedIdf.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (rdf_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Rdf);
      }
      if (actuallyUsedIdf_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(ActuallyUsedIdf);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (rdf_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Rdf);
      }
      if (actuallyUsedIdf_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ActuallyUsedIdf);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FrameLog other) {
      if (other == null) {
        return;
      }
      if (other.rdf_ != null) {
        if (rdf_ == null) {
          Rdf = new global::jtshared.RenderFrame();
        }
        Rdf.MergeFrom(other.Rdf);
      }
      if (other.actuallyUsedIdf_ != null) {
        if (actuallyUsedIdf_ == null) {
          ActuallyUsedIdf = new global::jtshared.InputFrameDownsync();
        }
        ActuallyUsedIdf.MergeFrom(other.ActuallyUsedIdf);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (rdf_ == null) {
              Rdf = new global::jtshared.RenderFrame();
            }
            input.ReadMessage(Rdf);
            break;
          }
          case 18: {
            if (actuallyUsedIdf_ == null) {
              ActuallyUsedIdf = new global::jtshared.InputFrameDownsync();
            }
            input.ReadMessage(ActuallyUsedIdf);
            break;
          }
        }
      }
    }

  }

  public sealed partial class BattleResult : pb::IMessage<BattleResult> {
    private static readonly pb::MessageParser<BattleResult> _parser = new pb::MessageParser<BattleResult>(() => new BattleResult());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BattleResult> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::jtshared.SerializableDataReflection.Descriptor.MessageTypes[30]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleResult() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleResult(BattleResult other) : this() {
      winnerJoinIndex_ = other.winnerJoinIndex_;
      winnerBulletTeamId_ = other.winnerBulletTeamId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleResult Clone() {
      return new BattleResult(this);
    }

    /// <summary>Field number for the "winner_join_index" field.</summary>
    public const int WinnerJoinIndexFieldNumber = 1;
    private uint winnerJoinIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint WinnerJoinIndex {
      get { return winnerJoinIndex_; }
      set {
        winnerJoinIndex_ = value;
      }
    }

    /// <summary>Field number for the "winner_bullet_team_id" field.</summary>
    public const int WinnerBulletTeamIdFieldNumber = 2;
    private int winnerBulletTeamId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int WinnerBulletTeamId {
      get { return winnerBulletTeamId_; }
      set {
        winnerBulletTeamId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BattleResult);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BattleResult other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (WinnerJoinIndex != other.WinnerJoinIndex) return false;
      if (WinnerBulletTeamId != other.WinnerBulletTeamId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (WinnerJoinIndex != 0) hash ^= WinnerJoinIndex.GetHashCode();
      if (WinnerBulletTeamId != 0) hash ^= WinnerBulletTeamId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (WinnerJoinIndex != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(WinnerJoinIndex);
      }
      if (WinnerBulletTeamId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(WinnerBulletTeamId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (WinnerJoinIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(WinnerJoinIndex);
      }
      if (WinnerBulletTeamId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(WinnerBulletTeamId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BattleResult other) {
      if (other == null) {
        return;
      }
      if (other.WinnerJoinIndex != 0) {
        WinnerJoinIndex = other.WinnerJoinIndex;
      }
      if (other.WinnerBulletTeamId != 0) {
        WinnerBulletTeamId = other.WinnerBulletTeamId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            WinnerJoinIndex = input.ReadUInt32();
            break;
          }
          case 16: {
            WinnerBulletTeamId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class DebuffConfig : pb::IMessage<DebuffConfig> {
    private static readonly pb::MessageParser<DebuffConfig> _parser = new pb::MessageParser<DebuffConfig>(() => new DebuffConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DebuffConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::jtshared.SerializableDataReflection.Descriptor.MessageTypes[31]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DebuffConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DebuffConfig(DebuffConfig other) : this() {
      speciesId_ = other.speciesId_;
      stockType_ = other.stockType_;
      stock_ = other.stock_;
      type_ = other.type_;
      arrIdx_ = other.arrIdx_;
      impactPerInterval_ = other.impactPerInterval_;
      impactInterval_ = other.impactInterval_;
      frictionVelX_ = other.frictionVelX_;
      frictionVelY_ = other.frictionVelY_;
      frictionAccX_ = other.frictionAccX_;
      frictionAccY_ = other.frictionAccY_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DebuffConfig Clone() {
      return new DebuffConfig(this);
    }

    /// <summary>Field number for the "species_id" field.</summary>
    public const int SpeciesIdFieldNumber = 1;
    private uint speciesId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SpeciesId {
      get { return speciesId_; }
      set {
        speciesId_ = value;
      }
    }

    /// <summary>Field number for the "stock_type" field.</summary>
    public const int StockTypeFieldNumber = 2;
    private global::jtshared.BuffStockType stockType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::jtshared.BuffStockType StockType {
      get { return stockType_; }
      set {
        stockType_ = value;
      }
    }

    /// <summary>Field number for the "stock" field.</summary>
    public const int StockFieldNumber = 3;
    private int stock_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Stock {
      get { return stock_; }
      set {
        stock_ = value;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 4;
    private global::jtshared.DebuffType type_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::jtshared.DebuffType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "arr_idx" field.</summary>
    public const int ArrIdxFieldNumber = 5;
    private int arrIdx_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ArrIdx {
      get { return arrIdx_; }
      set {
        arrIdx_ = value;
      }
    }

    /// <summary>Field number for the "impact_per_interval" field.</summary>
    public const int ImpactPerIntervalFieldNumber = 6;
    private int impactPerInterval_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ImpactPerInterval {
      get { return impactPerInterval_; }
      set {
        impactPerInterval_ = value;
      }
    }

    /// <summary>Field number for the "impact_interval" field.</summary>
    public const int ImpactIntervalFieldNumber = 7;
    private int impactInterval_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ImpactInterval {
      get { return impactInterval_; }
      set {
        impactInterval_ = value;
      }
    }

    /// <summary>Field number for the "friction_vel_x" field.</summary>
    public const int FrictionVelXFieldNumber = 8;
    private int frictionVelX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FrictionVelX {
      get { return frictionVelX_; }
      set {
        frictionVelX_ = value;
      }
    }

    /// <summary>Field number for the "friction_vel_y" field.</summary>
    public const int FrictionVelYFieldNumber = 9;
    private int frictionVelY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FrictionVelY {
      get { return frictionVelY_; }
      set {
        frictionVelY_ = value;
      }
    }

    /// <summary>Field number for the "friction_acc_x" field.</summary>
    public const int FrictionAccXFieldNumber = 10;
    private int frictionAccX_;
    /// <summary>
    /// "Acc" here means "acceleration"
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FrictionAccX {
      get { return frictionAccX_; }
      set {
        frictionAccX_ = value;
      }
    }

    /// <summary>Field number for the "friction_acc_y" field.</summary>
    public const int FrictionAccYFieldNumber = 11;
    private int frictionAccY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FrictionAccY {
      get { return frictionAccY_; }
      set {
        frictionAccY_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DebuffConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DebuffConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SpeciesId != other.SpeciesId) return false;
      if (StockType != other.StockType) return false;
      if (Stock != other.Stock) return false;
      if (Type != other.Type) return false;
      if (ArrIdx != other.ArrIdx) return false;
      if (ImpactPerInterval != other.ImpactPerInterval) return false;
      if (ImpactInterval != other.ImpactInterval) return false;
      if (FrictionVelX != other.FrictionVelX) return false;
      if (FrictionVelY != other.FrictionVelY) return false;
      if (FrictionAccX != other.FrictionAccX) return false;
      if (FrictionAccY != other.FrictionAccY) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SpeciesId != 0) hash ^= SpeciesId.GetHashCode();
      if (StockType != 0) hash ^= StockType.GetHashCode();
      if (Stock != 0) hash ^= Stock.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      if (ArrIdx != 0) hash ^= ArrIdx.GetHashCode();
      if (ImpactPerInterval != 0) hash ^= ImpactPerInterval.GetHashCode();
      if (ImpactInterval != 0) hash ^= ImpactInterval.GetHashCode();
      if (FrictionVelX != 0) hash ^= FrictionVelX.GetHashCode();
      if (FrictionVelY != 0) hash ^= FrictionVelY.GetHashCode();
      if (FrictionAccX != 0) hash ^= FrictionAccX.GetHashCode();
      if (FrictionAccY != 0) hash ^= FrictionAccY.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SpeciesId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(SpeciesId);
      }
      if (StockType != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) StockType);
      }
      if (Stock != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Stock);
      }
      if (Type != 0) {
        output.WriteRawTag(32);
        output.WriteEnum((int) Type);
      }
      if (ArrIdx != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(ArrIdx);
      }
      if (ImpactPerInterval != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(ImpactPerInterval);
      }
      if (ImpactInterval != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(ImpactInterval);
      }
      if (FrictionVelX != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(FrictionVelX);
      }
      if (FrictionVelY != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(FrictionVelY);
      }
      if (FrictionAccX != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(FrictionAccX);
      }
      if (FrictionAccY != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(FrictionAccY);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SpeciesId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SpeciesId);
      }
      if (StockType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) StockType);
      }
      if (Stock != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Stock);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (ArrIdx != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ArrIdx);
      }
      if (ImpactPerInterval != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ImpactPerInterval);
      }
      if (ImpactInterval != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ImpactInterval);
      }
      if (FrictionVelX != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FrictionVelX);
      }
      if (FrictionVelY != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FrictionVelY);
      }
      if (FrictionAccX != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FrictionAccX);
      }
      if (FrictionAccY != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FrictionAccY);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DebuffConfig other) {
      if (other == null) {
        return;
      }
      if (other.SpeciesId != 0) {
        SpeciesId = other.SpeciesId;
      }
      if (other.StockType != 0) {
        StockType = other.StockType;
      }
      if (other.Stock != 0) {
        Stock = other.Stock;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.ArrIdx != 0) {
        ArrIdx = other.ArrIdx;
      }
      if (other.ImpactPerInterval != 0) {
        ImpactPerInterval = other.ImpactPerInterval;
      }
      if (other.ImpactInterval != 0) {
        ImpactInterval = other.ImpactInterval;
      }
      if (other.FrictionVelX != 0) {
        FrictionVelX = other.FrictionVelX;
      }
      if (other.FrictionVelY != 0) {
        FrictionVelY = other.FrictionVelY;
      }
      if (other.FrictionAccX != 0) {
        FrictionAccX = other.FrictionAccX;
      }
      if (other.FrictionAccY != 0) {
        FrictionAccY = other.FrictionAccY;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            SpeciesId = input.ReadUInt32();
            break;
          }
          case 16: {
            StockType = (global::jtshared.BuffStockType) input.ReadEnum();
            break;
          }
          case 24: {
            Stock = input.ReadInt32();
            break;
          }
          case 32: {
            Type = (global::jtshared.DebuffType) input.ReadEnum();
            break;
          }
          case 40: {
            ArrIdx = input.ReadInt32();
            break;
          }
          case 48: {
            ImpactPerInterval = input.ReadInt32();
            break;
          }
          case 56: {
            ImpactInterval = input.ReadInt32();
            break;
          }
          case 64: {
            FrictionVelX = input.ReadInt32();
            break;
          }
          case 72: {
            FrictionVelY = input.ReadInt32();
            break;
          }
          case 80: {
            FrictionAccX = input.ReadInt32();
            break;
          }
          case 88: {
            FrictionAccY = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class BuffConfig : pb::IMessage<BuffConfig> {
    private static readonly pb::MessageParser<BuffConfig> _parser = new pb::MessageParser<BuffConfig>(() => new BuffConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BuffConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::jtshared.SerializableDataReflection.Descriptor.MessageTypes[32]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BuffConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BuffConfig(BuffConfig other) : this() {
      speciesId_ = other.speciesId_;
      stockType_ = other.stockType_;
      stock_ = other.stock_;
      speedDelta_ = other.speedDelta_;
      hitboxSizeXDelta_ = other.hitboxSizeXDelta_;
      hitboxSizeYDelta_ = other.hitboxSizeYDelta_;
      damageDelta_ = other.damageDelta_;
      damageDeltaByPercentage_ = other.damageDeltaByPercentage_;
      characterHardnessDelta_ = other.characterHardnessDelta_;
      meleeHardnessDelta_ = other.meleeHardnessDelta_;
      fireballHardnessDelta_ = other.fireballHardnessDelta_;
      invinsible_ = other.invinsible_;
      xformChSpeciesId_ = other.xformChSpeciesId_;
      repelSoftPushback_ = other.repelSoftPushback_;
      omitGravity_ = other.omitGravity_;
      autoDef1_ = other.autoDef1_;
      associatedDebuffs_ = other.associatedDebuffs_.Clone();
      characterVfxSpeciesId_ = other.characterVfxSpeciesId_;
      isPixelatedVfxOnCharacter_ = other.isPixelatedVfxOnCharacter_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BuffConfig Clone() {
      return new BuffConfig(this);
    }

    /// <summary>Field number for the "species_id" field.</summary>
    public const int SpeciesIdFieldNumber = 1;
    private uint speciesId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SpeciesId {
      get { return speciesId_; }
      set {
        speciesId_ = value;
      }
    }

    /// <summary>Field number for the "stock_type" field.</summary>
    public const int StockTypeFieldNumber = 2;
    private global::jtshared.BuffStockType stockType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::jtshared.BuffStockType StockType {
      get { return stockType_; }
      set {
        stockType_ = value;
      }
    }

    /// <summary>Field number for the "stock" field.</summary>
    public const int StockFieldNumber = 3;
    private int stock_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Stock {
      get { return stock_; }
      set {
        stock_ = value;
      }
    }

    /// <summary>Field number for the "speed_delta" field.</summary>
    public const int SpeedDeltaFieldNumber = 4;
    private float speedDelta_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float SpeedDelta {
      get { return speedDelta_; }
      set {
        speedDelta_ = value;
      }
    }

    /// <summary>Field number for the "hitbox_size_x_delta" field.</summary>
    public const int HitboxSizeXDeltaFieldNumber = 5;
    private float hitboxSizeXDelta_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float HitboxSizeXDelta {
      get { return hitboxSizeXDelta_; }
      set {
        hitboxSizeXDelta_ = value;
      }
    }

    /// <summary>Field number for the "hitbox_size_y_delta" field.</summary>
    public const int HitboxSizeYDeltaFieldNumber = 6;
    private float hitboxSizeYDelta_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float HitboxSizeYDelta {
      get { return hitboxSizeYDelta_; }
      set {
        hitboxSizeYDelta_ = value;
      }
    }

    /// <summary>Field number for the "damage_delta" field.</summary>
    public const int DamageDeltaFieldNumber = 7;
    private int damageDelta_;
    /// <summary>
    /// 
    ///It's not trivial to handle damage after the following sequence
    ///1. Pick up damage_delta=+10 for 600 frames
    ///2. Pick up damage_delta_by_percentage=+10% for 600 frames
    ///3. Buff "damage_delta=+10" expires 
    ///4. Buff "damage_delta_by_percentage=+10%" expires
    ///
    ///Pick a deterministic way :)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DamageDelta {
      get { return damageDelta_; }
      set {
        damageDelta_ = value;
      }
    }

    /// <summary>Field number for the "damage_delta_by_percentage" field.</summary>
    public const int DamageDeltaByPercentageFieldNumber = 8;
    private int damageDeltaByPercentage_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DamageDeltaByPercentage {
      get { return damageDeltaByPercentage_; }
      set {
        damageDeltaByPercentage_ = value;
      }
    }

    /// <summary>Field number for the "character_hardness_delta" field.</summary>
    public const int CharacterHardnessDeltaFieldNumber = 9;
    private int characterHardnessDelta_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CharacterHardnessDelta {
      get { return characterHardnessDelta_; }
      set {
        characterHardnessDelta_ = value;
      }
    }

    /// <summary>Field number for the "melee_hardness_delta" field.</summary>
    public const int MeleeHardnessDeltaFieldNumber = 10;
    private int meleeHardnessDelta_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MeleeHardnessDelta {
      get { return meleeHardnessDelta_; }
      set {
        meleeHardnessDelta_ = value;
      }
    }

    /// <summary>Field number for the "fireball_hardness_delta" field.</summary>
    public const int FireballHardnessDeltaFieldNumber = 11;
    private int fireballHardnessDelta_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FireballHardnessDelta {
      get { return fireballHardnessDelta_; }
      set {
        fireballHardnessDelta_ = value;
      }
    }

    /// <summary>Field number for the "invinsible" field.</summary>
    public const int InvinsibleFieldNumber = 12;
    private bool invinsible_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Invinsible {
      get { return invinsible_; }
      set {
        invinsible_ = value;
      }
    }

    /// <summary>Field number for the "xform_ch_species_id" field.</summary>
    public const int XformChSpeciesIdFieldNumber = 13;
    private uint xformChSpeciesId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint XformChSpeciesId {
      get { return xformChSpeciesId_; }
      set {
        xformChSpeciesId_ = value;
      }
    }

    /// <summary>Field number for the "repel_soft_pushback" field.</summary>
    public const int RepelSoftPushbackFieldNumber = 14;
    private bool repelSoftPushback_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool RepelSoftPushback {
      get { return repelSoftPushback_; }
      set {
        repelSoftPushback_ = value;
      }
    }

    /// <summary>Field number for the "omit_gravity" field.</summary>
    public const int OmitGravityFieldNumber = 15;
    private bool omitGravity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool OmitGravity {
      get { return omitGravity_; }
      set {
        omitGravity_ = value;
      }
    }

    /// <summary>Field number for the "auto_def1" field.</summary>
    public const int AutoDef1FieldNumber = 16;
    private bool autoDef1_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool AutoDef1 {
      get { return autoDef1_; }
      set {
        autoDef1_ = value;
      }
    }

    /// <summary>Field number for the "associated_debuffs" field.</summary>
    public const int AssociatedDebuffsFieldNumber = 17;
    private static readonly pb::FieldCodec<uint> _repeated_associatedDebuffs_codec
        = pb::FieldCodec.ForUInt32(138);
    private readonly pbc::RepeatedField<uint> associatedDebuffs_ = new pbc::RepeatedField<uint>();
    /// <summary>
    /// [WARNING] The following field previously had type "repeated DebuffConfig" and the reason given was "to reduce the count of heap-RAM access when stepping battle dynamics", it was not a bad reason yet such complicated type imposed a heavy burden on serialization/deserialization of "RenderFrame" which would be used frequently when we use "backend forceResync" for "active slow ticker" or "recovery upon reconnection". See "ConcerningEdgeCases.md" for details.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> AssociatedDebuffs {
      get { return associatedDebuffs_; }
    }

    /// <summary>Field number for the "character_vfx_species_id" field.</summary>
    public const int CharacterVfxSpeciesIdFieldNumber = 18;
    private int characterVfxSpeciesId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CharacterVfxSpeciesId {
      get { return characterVfxSpeciesId_; }
      set {
        characterVfxSpeciesId_ = value;
      }
    }

    /// <summary>Field number for the "is_pixelated_vfx_on_character" field.</summary>
    public const int IsPixelatedVfxOnCharacterFieldNumber = 19;
    private bool isPixelatedVfxOnCharacter_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsPixelatedVfxOnCharacter {
      get { return isPixelatedVfxOnCharacter_; }
      set {
        isPixelatedVfxOnCharacter_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BuffConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BuffConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SpeciesId != other.SpeciesId) return false;
      if (StockType != other.StockType) return false;
      if (Stock != other.Stock) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SpeedDelta, other.SpeedDelta)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(HitboxSizeXDelta, other.HitboxSizeXDelta)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(HitboxSizeYDelta, other.HitboxSizeYDelta)) return false;
      if (DamageDelta != other.DamageDelta) return false;
      if (DamageDeltaByPercentage != other.DamageDeltaByPercentage) return false;
      if (CharacterHardnessDelta != other.CharacterHardnessDelta) return false;
      if (MeleeHardnessDelta != other.MeleeHardnessDelta) return false;
      if (FireballHardnessDelta != other.FireballHardnessDelta) return false;
      if (Invinsible != other.Invinsible) return false;
      if (XformChSpeciesId != other.XformChSpeciesId) return false;
      if (RepelSoftPushback != other.RepelSoftPushback) return false;
      if (OmitGravity != other.OmitGravity) return false;
      if (AutoDef1 != other.AutoDef1) return false;
      if(!associatedDebuffs_.Equals(other.associatedDebuffs_)) return false;
      if (CharacterVfxSpeciesId != other.CharacterVfxSpeciesId) return false;
      if (IsPixelatedVfxOnCharacter != other.IsPixelatedVfxOnCharacter) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SpeciesId != 0) hash ^= SpeciesId.GetHashCode();
      if (StockType != 0) hash ^= StockType.GetHashCode();
      if (Stock != 0) hash ^= Stock.GetHashCode();
      if (SpeedDelta != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SpeedDelta);
      if (HitboxSizeXDelta != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(HitboxSizeXDelta);
      if (HitboxSizeYDelta != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(HitboxSizeYDelta);
      if (DamageDelta != 0) hash ^= DamageDelta.GetHashCode();
      if (DamageDeltaByPercentage != 0) hash ^= DamageDeltaByPercentage.GetHashCode();
      if (CharacterHardnessDelta != 0) hash ^= CharacterHardnessDelta.GetHashCode();
      if (MeleeHardnessDelta != 0) hash ^= MeleeHardnessDelta.GetHashCode();
      if (FireballHardnessDelta != 0) hash ^= FireballHardnessDelta.GetHashCode();
      if (Invinsible != false) hash ^= Invinsible.GetHashCode();
      if (XformChSpeciesId != 0) hash ^= XformChSpeciesId.GetHashCode();
      if (RepelSoftPushback != false) hash ^= RepelSoftPushback.GetHashCode();
      if (OmitGravity != false) hash ^= OmitGravity.GetHashCode();
      if (AutoDef1 != false) hash ^= AutoDef1.GetHashCode();
      hash ^= associatedDebuffs_.GetHashCode();
      if (CharacterVfxSpeciesId != 0) hash ^= CharacterVfxSpeciesId.GetHashCode();
      if (IsPixelatedVfxOnCharacter != false) hash ^= IsPixelatedVfxOnCharacter.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SpeciesId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(SpeciesId);
      }
      if (StockType != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) StockType);
      }
      if (Stock != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Stock);
      }
      if (SpeedDelta != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(SpeedDelta);
      }
      if (HitboxSizeXDelta != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(HitboxSizeXDelta);
      }
      if (HitboxSizeYDelta != 0F) {
        output.WriteRawTag(53);
        output.WriteFloat(HitboxSizeYDelta);
      }
      if (DamageDelta != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(DamageDelta);
      }
      if (DamageDeltaByPercentage != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(DamageDeltaByPercentage);
      }
      if (CharacterHardnessDelta != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(CharacterHardnessDelta);
      }
      if (MeleeHardnessDelta != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(MeleeHardnessDelta);
      }
      if (FireballHardnessDelta != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(FireballHardnessDelta);
      }
      if (Invinsible != false) {
        output.WriteRawTag(96);
        output.WriteBool(Invinsible);
      }
      if (XformChSpeciesId != 0) {
        output.WriteRawTag(104);
        output.WriteUInt32(XformChSpeciesId);
      }
      if (RepelSoftPushback != false) {
        output.WriteRawTag(112);
        output.WriteBool(RepelSoftPushback);
      }
      if (OmitGravity != false) {
        output.WriteRawTag(120);
        output.WriteBool(OmitGravity);
      }
      if (AutoDef1 != false) {
        output.WriteRawTag(128, 1);
        output.WriteBool(AutoDef1);
      }
      associatedDebuffs_.WriteTo(output, _repeated_associatedDebuffs_codec);
      if (CharacterVfxSpeciesId != 0) {
        output.WriteRawTag(144, 1);
        output.WriteInt32(CharacterVfxSpeciesId);
      }
      if (IsPixelatedVfxOnCharacter != false) {
        output.WriteRawTag(152, 1);
        output.WriteBool(IsPixelatedVfxOnCharacter);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SpeciesId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SpeciesId);
      }
      if (StockType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) StockType);
      }
      if (Stock != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Stock);
      }
      if (SpeedDelta != 0F) {
        size += 1 + 4;
      }
      if (HitboxSizeXDelta != 0F) {
        size += 1 + 4;
      }
      if (HitboxSizeYDelta != 0F) {
        size += 1 + 4;
      }
      if (DamageDelta != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DamageDelta);
      }
      if (DamageDeltaByPercentage != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DamageDeltaByPercentage);
      }
      if (CharacterHardnessDelta != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CharacterHardnessDelta);
      }
      if (MeleeHardnessDelta != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MeleeHardnessDelta);
      }
      if (FireballHardnessDelta != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FireballHardnessDelta);
      }
      if (Invinsible != false) {
        size += 1 + 1;
      }
      if (XformChSpeciesId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(XformChSpeciesId);
      }
      if (RepelSoftPushback != false) {
        size += 1 + 1;
      }
      if (OmitGravity != false) {
        size += 1 + 1;
      }
      if (AutoDef1 != false) {
        size += 2 + 1;
      }
      size += associatedDebuffs_.CalculateSize(_repeated_associatedDebuffs_codec);
      if (CharacterVfxSpeciesId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(CharacterVfxSpeciesId);
      }
      if (IsPixelatedVfxOnCharacter != false) {
        size += 2 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BuffConfig other) {
      if (other == null) {
        return;
      }
      if (other.SpeciesId != 0) {
        SpeciesId = other.SpeciesId;
      }
      if (other.StockType != 0) {
        StockType = other.StockType;
      }
      if (other.Stock != 0) {
        Stock = other.Stock;
      }
      if (other.SpeedDelta != 0F) {
        SpeedDelta = other.SpeedDelta;
      }
      if (other.HitboxSizeXDelta != 0F) {
        HitboxSizeXDelta = other.HitboxSizeXDelta;
      }
      if (other.HitboxSizeYDelta != 0F) {
        HitboxSizeYDelta = other.HitboxSizeYDelta;
      }
      if (other.DamageDelta != 0) {
        DamageDelta = other.DamageDelta;
      }
      if (other.DamageDeltaByPercentage != 0) {
        DamageDeltaByPercentage = other.DamageDeltaByPercentage;
      }
      if (other.CharacterHardnessDelta != 0) {
        CharacterHardnessDelta = other.CharacterHardnessDelta;
      }
      if (other.MeleeHardnessDelta != 0) {
        MeleeHardnessDelta = other.MeleeHardnessDelta;
      }
      if (other.FireballHardnessDelta != 0) {
        FireballHardnessDelta = other.FireballHardnessDelta;
      }
      if (other.Invinsible != false) {
        Invinsible = other.Invinsible;
      }
      if (other.XformChSpeciesId != 0) {
        XformChSpeciesId = other.XformChSpeciesId;
      }
      if (other.RepelSoftPushback != false) {
        RepelSoftPushback = other.RepelSoftPushback;
      }
      if (other.OmitGravity != false) {
        OmitGravity = other.OmitGravity;
      }
      if (other.AutoDef1 != false) {
        AutoDef1 = other.AutoDef1;
      }
      associatedDebuffs_.Add(other.associatedDebuffs_);
      if (other.CharacterVfxSpeciesId != 0) {
        CharacterVfxSpeciesId = other.CharacterVfxSpeciesId;
      }
      if (other.IsPixelatedVfxOnCharacter != false) {
        IsPixelatedVfxOnCharacter = other.IsPixelatedVfxOnCharacter;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            SpeciesId = input.ReadUInt32();
            break;
          }
          case 16: {
            StockType = (global::jtshared.BuffStockType) input.ReadEnum();
            break;
          }
          case 24: {
            Stock = input.ReadInt32();
            break;
          }
          case 37: {
            SpeedDelta = input.ReadFloat();
            break;
          }
          case 45: {
            HitboxSizeXDelta = input.ReadFloat();
            break;
          }
          case 53: {
            HitboxSizeYDelta = input.ReadFloat();
            break;
          }
          case 56: {
            DamageDelta = input.ReadInt32();
            break;
          }
          case 64: {
            DamageDeltaByPercentage = input.ReadInt32();
            break;
          }
          case 72: {
            CharacterHardnessDelta = input.ReadInt32();
            break;
          }
          case 80: {
            MeleeHardnessDelta = input.ReadInt32();
            break;
          }
          case 88: {
            FireballHardnessDelta = input.ReadInt32();
            break;
          }
          case 96: {
            Invinsible = input.ReadBool();
            break;
          }
          case 104: {
            XformChSpeciesId = input.ReadUInt32();
            break;
          }
          case 112: {
            RepelSoftPushback = input.ReadBool();
            break;
          }
          case 120: {
            OmitGravity = input.ReadBool();
            break;
          }
          case 128: {
            AutoDef1 = input.ReadBool();
            break;
          }
          case 138:
          case 136: {
            associatedDebuffs_.AddEntriesFrom(input, _repeated_associatedDebuffs_codec);
            break;
          }
          case 144: {
            CharacterVfxSpeciesId = input.ReadInt32();
            break;
          }
          case 152: {
            IsPixelatedVfxOnCharacter = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Buff : pb::IMessage<Buff> {
    private static readonly pb::MessageParser<Buff> _parser = new pb::MessageParser<Buff>(() => new Buff());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Buff> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::jtshared.SerializableDataReflection.Descriptor.MessageTypes[33]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Buff() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Buff(Buff other) : this() {
      speciesId_ = other.speciesId_;
      stock_ = other.stock_;
      originatedRenderFrameId_ = other.originatedRenderFrameId_;
      origChSpeciesId_ = other.origChSpeciesId_;
      origRepelSoftPushback_ = other.origRepelSoftPushback_;
      origOmitGravity_ = other.origOmitGravity_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Buff Clone() {
      return new Buff(this);
    }

    /// <summary>Field number for the "species_id" field.</summary>
    public const int SpeciesIdFieldNumber = 1;
    private uint speciesId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SpeciesId {
      get { return speciesId_; }
      set {
        speciesId_ = value;
      }
    }

    /// <summary>Field number for the "stock" field.</summary>
    public const int StockFieldNumber = 2;
    private int stock_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Stock {
      get { return stock_; }
      set {
        stock_ = value;
      }
    }

    /// <summary>Field number for the "originated_render_frame_id" field.</summary>
    public const int OriginatedRenderFrameIdFieldNumber = 3;
    private int originatedRenderFrameId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OriginatedRenderFrameId {
      get { return originatedRenderFrameId_; }
      set {
        originatedRenderFrameId_ = value;
      }
    }

    /// <summary>Field number for the "orig_ch_species_id" field.</summary>
    public const int OrigChSpeciesIdFieldNumber = 4;
    private uint origChSpeciesId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint OrigChSpeciesId {
      get { return origChSpeciesId_; }
      set {
        origChSpeciesId_ = value;
      }
    }

    /// <summary>Field number for the "orig_repel_soft_pushback" field.</summary>
    public const int OrigRepelSoftPushbackFieldNumber = 5;
    private bool origRepelSoftPushback_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool OrigRepelSoftPushback {
      get { return origRepelSoftPushback_; }
      set {
        origRepelSoftPushback_ = value;
      }
    }

    /// <summary>Field number for the "orig_omit_gravity" field.</summary>
    public const int OrigOmitGravityFieldNumber = 6;
    private bool origOmitGravity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool OrigOmitGravity {
      get { return origOmitGravity_; }
      set {
        origOmitGravity_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Buff);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Buff other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SpeciesId != other.SpeciesId) return false;
      if (Stock != other.Stock) return false;
      if (OriginatedRenderFrameId != other.OriginatedRenderFrameId) return false;
      if (OrigChSpeciesId != other.OrigChSpeciesId) return false;
      if (OrigRepelSoftPushback != other.OrigRepelSoftPushback) return false;
      if (OrigOmitGravity != other.OrigOmitGravity) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SpeciesId != 0) hash ^= SpeciesId.GetHashCode();
      if (Stock != 0) hash ^= Stock.GetHashCode();
      if (OriginatedRenderFrameId != 0) hash ^= OriginatedRenderFrameId.GetHashCode();
      if (OrigChSpeciesId != 0) hash ^= OrigChSpeciesId.GetHashCode();
      if (OrigRepelSoftPushback != false) hash ^= OrigRepelSoftPushback.GetHashCode();
      if (OrigOmitGravity != false) hash ^= OrigOmitGravity.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SpeciesId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(SpeciesId);
      }
      if (Stock != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Stock);
      }
      if (OriginatedRenderFrameId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(OriginatedRenderFrameId);
      }
      if (OrigChSpeciesId != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(OrigChSpeciesId);
      }
      if (OrigRepelSoftPushback != false) {
        output.WriteRawTag(40);
        output.WriteBool(OrigRepelSoftPushback);
      }
      if (OrigOmitGravity != false) {
        output.WriteRawTag(48);
        output.WriteBool(OrigOmitGravity);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SpeciesId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SpeciesId);
      }
      if (Stock != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Stock);
      }
      if (OriginatedRenderFrameId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(OriginatedRenderFrameId);
      }
      if (OrigChSpeciesId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(OrigChSpeciesId);
      }
      if (OrigRepelSoftPushback != false) {
        size += 1 + 1;
      }
      if (OrigOmitGravity != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Buff other) {
      if (other == null) {
        return;
      }
      if (other.SpeciesId != 0) {
        SpeciesId = other.SpeciesId;
      }
      if (other.Stock != 0) {
        Stock = other.Stock;
      }
      if (other.OriginatedRenderFrameId != 0) {
        OriginatedRenderFrameId = other.OriginatedRenderFrameId;
      }
      if (other.OrigChSpeciesId != 0) {
        OrigChSpeciesId = other.OrigChSpeciesId;
      }
      if (other.OrigRepelSoftPushback != false) {
        OrigRepelSoftPushback = other.OrigRepelSoftPushback;
      }
      if (other.OrigOmitGravity != false) {
        OrigOmitGravity = other.OrigOmitGravity;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            SpeciesId = input.ReadUInt32();
            break;
          }
          case 16: {
            Stock = input.ReadInt32();
            break;
          }
          case 24: {
            OriginatedRenderFrameId = input.ReadInt32();
            break;
          }
          case 32: {
            OrigChSpeciesId = input.ReadUInt32();
            break;
          }
          case 40: {
            OrigRepelSoftPushback = input.ReadBool();
            break;
          }
          case 48: {
            OrigOmitGravity = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Debuff : pb::IMessage<Debuff> {
    private static readonly pb::MessageParser<Debuff> _parser = new pb::MessageParser<Debuff>(() => new Debuff());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Debuff> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::jtshared.SerializableDataReflection.Descriptor.MessageTypes[34]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Debuff() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Debuff(Debuff other) : this() {
      speciesId_ = other.speciesId_;
      stock_ = other.stock_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Debuff Clone() {
      return new Debuff(this);
    }

    /// <summary>Field number for the "species_id" field.</summary>
    public const int SpeciesIdFieldNumber = 1;
    private uint speciesId_;
    /// <summary>
    /// A redundancy of "debuff_config" for easy termination detection 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SpeciesId {
      get { return speciesId_; }
      set {
        speciesId_ = value;
      }
    }

    /// <summary>Field number for the "stock" field.</summary>
    public const int StockFieldNumber = 2;
    private int stock_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Stock {
      get { return stock_; }
      set {
        stock_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Debuff);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Debuff other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SpeciesId != other.SpeciesId) return false;
      if (Stock != other.Stock) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SpeciesId != 0) hash ^= SpeciesId.GetHashCode();
      if (Stock != 0) hash ^= Stock.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SpeciesId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(SpeciesId);
      }
      if (Stock != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Stock);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SpeciesId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SpeciesId);
      }
      if (Stock != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Stock);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Debuff other) {
      if (other == null) {
        return;
      }
      if (other.SpeciesId != 0) {
        SpeciesId = other.SpeciesId;
      }
      if (other.Stock != 0) {
        Stock = other.Stock;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            SpeciesId = input.ReadUInt32();
            break;
          }
          case 16: {
            Stock = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class BulletImmuneRecord : pb::IMessage<BulletImmuneRecord> {
    private static readonly pb::MessageParser<BulletImmuneRecord> _parser = new pb::MessageParser<BulletImmuneRecord>(() => new BulletImmuneRecord());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BulletImmuneRecord> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::jtshared.SerializableDataReflection.Descriptor.MessageTypes[35]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BulletImmuneRecord() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BulletImmuneRecord(BulletImmuneRecord other) : this() {
      bulletId_ = other.bulletId_;
      remainingLifetimeRdfCount_ = other.remainingLifetimeRdfCount_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BulletImmuneRecord Clone() {
      return new BulletImmuneRecord(this);
    }

    /// <summary>Field number for the "bullet_id" field.</summary>
    public const int BulletIdFieldNumber = 1;
    private uint bulletId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint BulletId {
      get { return bulletId_; }
      set {
        bulletId_ = value;
      }
    }

    /// <summary>Field number for the "remaining_lifetime_rdf_count" field.</summary>
    public const int RemainingLifetimeRdfCountFieldNumber = 2;
    private int remainingLifetimeRdfCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RemainingLifetimeRdfCount {
      get { return remainingLifetimeRdfCount_; }
      set {
        remainingLifetimeRdfCount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BulletImmuneRecord);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BulletImmuneRecord other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BulletId != other.BulletId) return false;
      if (RemainingLifetimeRdfCount != other.RemainingLifetimeRdfCount) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (BulletId != 0) hash ^= BulletId.GetHashCode();
      if (RemainingLifetimeRdfCount != 0) hash ^= RemainingLifetimeRdfCount.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BulletId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(BulletId);
      }
      if (RemainingLifetimeRdfCount != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(RemainingLifetimeRdfCount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BulletId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BulletId);
      }
      if (RemainingLifetimeRdfCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RemainingLifetimeRdfCount);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BulletImmuneRecord other) {
      if (other == null) {
        return;
      }
      if (other.BulletId != 0) {
        BulletId = other.BulletId;
      }
      if (other.RemainingLifetimeRdfCount != 0) {
        RemainingLifetimeRdfCount = other.RemainingLifetimeRdfCount;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            BulletId = input.ReadUInt32();
            break;
          }
          case 16: {
            RemainingLifetimeRdfCount = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ConsumableConfig : pb::IMessage<ConsumableConfig> {
    private static readonly pb::MessageParser<ConsumableConfig> _parser = new pb::MessageParser<ConsumableConfig>(() => new ConsumableConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ConsumableConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::jtshared.SerializableDataReflection.Descriptor.MessageTypes[36]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConsumableConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConsumableConfig(ConsumableConfig other) : this() {
      speciesId_ = other.speciesId_;
      refillDelta_ = other.refillDelta_;
      vfxIdOnPicker_ = other.vfxIdOnPicker_;
      isPixelatedVfxOnPicker_ = other.isPixelatedVfxOnPicker_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConsumableConfig Clone() {
      return new ConsumableConfig(this);
    }

    /// <summary>Field number for the "species_id" field.</summary>
    public const int SpeciesIdFieldNumber = 1;
    private uint speciesId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SpeciesId {
      get { return speciesId_; }
      set {
        speciesId_ = value;
      }
    }

    /// <summary>Field number for the "refill_delta" field.</summary>
    public const int RefillDeltaFieldNumber = 2;
    private int refillDelta_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RefillDelta {
      get { return refillDelta_; }
      set {
        refillDelta_ = value;
      }
    }

    /// <summary>Field number for the "vfx_id_on_picker" field.</summary>
    public const int VfxIdOnPickerFieldNumber = 3;
    private int vfxIdOnPicker_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int VfxIdOnPicker {
      get { return vfxIdOnPicker_; }
      set {
        vfxIdOnPicker_ = value;
      }
    }

    /// <summary>Field number for the "is_pixelated_vfx_on_picker" field.</summary>
    public const int IsPixelatedVfxOnPickerFieldNumber = 4;
    private bool isPixelatedVfxOnPicker_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsPixelatedVfxOnPicker {
      get { return isPixelatedVfxOnPicker_; }
      set {
        isPixelatedVfxOnPicker_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ConsumableConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ConsumableConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SpeciesId != other.SpeciesId) return false;
      if (RefillDelta != other.RefillDelta) return false;
      if (VfxIdOnPicker != other.VfxIdOnPicker) return false;
      if (IsPixelatedVfxOnPicker != other.IsPixelatedVfxOnPicker) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SpeciesId != 0) hash ^= SpeciesId.GetHashCode();
      if (RefillDelta != 0) hash ^= RefillDelta.GetHashCode();
      if (VfxIdOnPicker != 0) hash ^= VfxIdOnPicker.GetHashCode();
      if (IsPixelatedVfxOnPicker != false) hash ^= IsPixelatedVfxOnPicker.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SpeciesId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(SpeciesId);
      }
      if (RefillDelta != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(RefillDelta);
      }
      if (VfxIdOnPicker != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(VfxIdOnPicker);
      }
      if (IsPixelatedVfxOnPicker != false) {
        output.WriteRawTag(32);
        output.WriteBool(IsPixelatedVfxOnPicker);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SpeciesId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SpeciesId);
      }
      if (RefillDelta != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RefillDelta);
      }
      if (VfxIdOnPicker != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(VfxIdOnPicker);
      }
      if (IsPixelatedVfxOnPicker != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ConsumableConfig other) {
      if (other == null) {
        return;
      }
      if (other.SpeciesId != 0) {
        SpeciesId = other.SpeciesId;
      }
      if (other.RefillDelta != 0) {
        RefillDelta = other.RefillDelta;
      }
      if (other.VfxIdOnPicker != 0) {
        VfxIdOnPicker = other.VfxIdOnPicker;
      }
      if (other.IsPixelatedVfxOnPicker != false) {
        IsPixelatedVfxOnPicker = other.IsPixelatedVfxOnPicker;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            SpeciesId = input.ReadUInt32();
            break;
          }
          case 16: {
            RefillDelta = input.ReadInt32();
            break;
          }
          case 24: {
            VfxIdOnPicker = input.ReadInt32();
            break;
          }
          case 32: {
            IsPixelatedVfxOnPicker = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PickableSkillConfig : pb::IMessage<PickableSkillConfig> {
    private static readonly pb::MessageParser<PickableSkillConfig> _parser = new pb::MessageParser<PickableSkillConfig>(() => new PickableSkillConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PickableSkillConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::jtshared.SerializableDataReflection.Descriptor.MessageTypes[37]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PickableSkillConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PickableSkillConfig(PickableSkillConfig other) : this() {
      skillId_ = other.skillId_;
      vfxIdOnPicker_ = other.vfxIdOnPicker_;
      isPixelatedVfxOnPicker_ = other.isPixelatedVfxOnPicker_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PickableSkillConfig Clone() {
      return new PickableSkillConfig(this);
    }

    /// <summary>Field number for the "skill_id" field.</summary>
    public const int SkillIdFieldNumber = 1;
    private uint skillId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SkillId {
      get { return skillId_; }
      set {
        skillId_ = value;
      }
    }

    /// <summary>Field number for the "vfx_id_on_picker" field.</summary>
    public const int VfxIdOnPickerFieldNumber = 2;
    private int vfxIdOnPicker_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int VfxIdOnPicker {
      get { return vfxIdOnPicker_; }
      set {
        vfxIdOnPicker_ = value;
      }
    }

    /// <summary>Field number for the "is_pixelated_vfx_on_picker" field.</summary>
    public const int IsPixelatedVfxOnPickerFieldNumber = 3;
    private bool isPixelatedVfxOnPicker_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsPixelatedVfxOnPicker {
      get { return isPixelatedVfxOnPicker_; }
      set {
        isPixelatedVfxOnPicker_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PickableSkillConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PickableSkillConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SkillId != other.SkillId) return false;
      if (VfxIdOnPicker != other.VfxIdOnPicker) return false;
      if (IsPixelatedVfxOnPicker != other.IsPixelatedVfxOnPicker) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SkillId != 0) hash ^= SkillId.GetHashCode();
      if (VfxIdOnPicker != 0) hash ^= VfxIdOnPicker.GetHashCode();
      if (IsPixelatedVfxOnPicker != false) hash ^= IsPixelatedVfxOnPicker.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SkillId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(SkillId);
      }
      if (VfxIdOnPicker != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(VfxIdOnPicker);
      }
      if (IsPixelatedVfxOnPicker != false) {
        output.WriteRawTag(24);
        output.WriteBool(IsPixelatedVfxOnPicker);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SkillId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SkillId);
      }
      if (VfxIdOnPicker != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(VfxIdOnPicker);
      }
      if (IsPixelatedVfxOnPicker != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PickableSkillConfig other) {
      if (other == null) {
        return;
      }
      if (other.SkillId != 0) {
        SkillId = other.SkillId;
      }
      if (other.VfxIdOnPicker != 0) {
        VfxIdOnPicker = other.VfxIdOnPicker;
      }
      if (other.IsPixelatedVfxOnPicker != false) {
        IsPixelatedVfxOnPicker = other.IsPixelatedVfxOnPicker;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            SkillId = input.ReadUInt32();
            break;
          }
          case 16: {
            VfxIdOnPicker = input.ReadInt32();
            break;
          }
          case 24: {
            IsPixelatedVfxOnPicker = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class InventorySlotConfig : pb::IMessage<InventorySlotConfig> {
    private static readonly pb::MessageParser<InventorySlotConfig> _parser = new pb::MessageParser<InventorySlotConfig>(() => new InventorySlotConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InventorySlotConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::jtshared.SerializableDataReflection.Descriptor.MessageTypes[38]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InventorySlotConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InventorySlotConfig(InventorySlotConfig other) : this() {
      stockType_ = other.stockType_;
      quota_ = other.quota_;
      framesToRecover_ = other.framesToRecover_;
      buffSpeciesId_ = other.buffSpeciesId_;
      skillId_ = other.skillId_;
      skillIdAir_ = other.skillIdAir_;
      gaugeRequired_ = other.gaugeRequired_;
      fullChargeBuffSpeciesId_ = other.fullChargeBuffSpeciesId_;
      fullChargeSkillId_ = other.fullChargeSkillId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InventorySlotConfig Clone() {
      return new InventorySlotConfig(this);
    }

    /// <summary>Field number for the "stock_type" field.</summary>
    public const int StockTypeFieldNumber = 1;
    private global::jtshared.InventorySlotStockType stockType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::jtshared.InventorySlotStockType StockType {
      get { return stockType_; }
      set {
        stockType_ = value;
      }
    }

    /// <summary>Field number for the "quota" field.</summary>
    public const int QuotaFieldNumber = 2;
    private uint quota_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Quota {
      get { return quota_; }
      set {
        quota_ = value;
      }
    }

    /// <summary>Field number for the "frames_to_recover" field.</summary>
    public const int FramesToRecoverFieldNumber = 3;
    private int framesToRecover_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FramesToRecover {
      get { return framesToRecover_; }
      set {
        framesToRecover_ = value;
      }
    }

    /// <summary>Field number for the "buff_species_id" field.</summary>
    public const int BuffSpeciesIdFieldNumber = 4;
    private uint buffSpeciesId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint BuffSpeciesId {
      get { return buffSpeciesId_; }
      set {
        buffSpeciesId_ = value;
      }
    }

    /// <summary>Field number for the "skill_id" field.</summary>
    public const int SkillIdFieldNumber = 5;
    private uint skillId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SkillId {
      get { return skillId_; }
      set {
        skillId_ = value;
      }
    }

    /// <summary>Field number for the "skill_id_air" field.</summary>
    public const int SkillIdAirFieldNumber = 6;
    private uint skillIdAir_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SkillIdAir {
      get { return skillIdAir_; }
      set {
        skillIdAir_ = value;
      }
    }

    /// <summary>Field number for the "gauge_required" field.</summary>
    public const int GaugeRequiredFieldNumber = 7;
    private int gaugeRequired_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GaugeRequired {
      get { return gaugeRequired_; }
      set {
        gaugeRequired_ = value;
      }
    }

    /// <summary>Field number for the "full_charge_buff_species_id" field.</summary>
    public const int FullChargeBuffSpeciesIdFieldNumber = 8;
    private uint fullChargeBuffSpeciesId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint FullChargeBuffSpeciesId {
      get { return fullChargeBuffSpeciesId_; }
      set {
        fullChargeBuffSpeciesId_ = value;
      }
    }

    /// <summary>Field number for the "full_charge_skill_id" field.</summary>
    public const int FullChargeSkillIdFieldNumber = 9;
    private uint fullChargeSkillId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint FullChargeSkillId {
      get { return fullChargeSkillId_; }
      set {
        fullChargeSkillId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as InventorySlotConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(InventorySlotConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (StockType != other.StockType) return false;
      if (Quota != other.Quota) return false;
      if (FramesToRecover != other.FramesToRecover) return false;
      if (BuffSpeciesId != other.BuffSpeciesId) return false;
      if (SkillId != other.SkillId) return false;
      if (SkillIdAir != other.SkillIdAir) return false;
      if (GaugeRequired != other.GaugeRequired) return false;
      if (FullChargeBuffSpeciesId != other.FullChargeBuffSpeciesId) return false;
      if (FullChargeSkillId != other.FullChargeSkillId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (StockType != 0) hash ^= StockType.GetHashCode();
      if (Quota != 0) hash ^= Quota.GetHashCode();
      if (FramesToRecover != 0) hash ^= FramesToRecover.GetHashCode();
      if (BuffSpeciesId != 0) hash ^= BuffSpeciesId.GetHashCode();
      if (SkillId != 0) hash ^= SkillId.GetHashCode();
      if (SkillIdAir != 0) hash ^= SkillIdAir.GetHashCode();
      if (GaugeRequired != 0) hash ^= GaugeRequired.GetHashCode();
      if (FullChargeBuffSpeciesId != 0) hash ^= FullChargeBuffSpeciesId.GetHashCode();
      if (FullChargeSkillId != 0) hash ^= FullChargeSkillId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (StockType != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) StockType);
      }
      if (Quota != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Quota);
      }
      if (FramesToRecover != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(FramesToRecover);
      }
      if (BuffSpeciesId != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(BuffSpeciesId);
      }
      if (SkillId != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(SkillId);
      }
      if (SkillIdAir != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(SkillIdAir);
      }
      if (GaugeRequired != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(GaugeRequired);
      }
      if (FullChargeBuffSpeciesId != 0) {
        output.WriteRawTag(64);
        output.WriteUInt32(FullChargeBuffSpeciesId);
      }
      if (FullChargeSkillId != 0) {
        output.WriteRawTag(72);
        output.WriteUInt32(FullChargeSkillId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (StockType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) StockType);
      }
      if (Quota != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Quota);
      }
      if (FramesToRecover != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FramesToRecover);
      }
      if (BuffSpeciesId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BuffSpeciesId);
      }
      if (SkillId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SkillId);
      }
      if (SkillIdAir != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SkillIdAir);
      }
      if (GaugeRequired != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GaugeRequired);
      }
      if (FullChargeBuffSpeciesId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(FullChargeBuffSpeciesId);
      }
      if (FullChargeSkillId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(FullChargeSkillId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(InventorySlotConfig other) {
      if (other == null) {
        return;
      }
      if (other.StockType != 0) {
        StockType = other.StockType;
      }
      if (other.Quota != 0) {
        Quota = other.Quota;
      }
      if (other.FramesToRecover != 0) {
        FramesToRecover = other.FramesToRecover;
      }
      if (other.BuffSpeciesId != 0) {
        BuffSpeciesId = other.BuffSpeciesId;
      }
      if (other.SkillId != 0) {
        SkillId = other.SkillId;
      }
      if (other.SkillIdAir != 0) {
        SkillIdAir = other.SkillIdAir;
      }
      if (other.GaugeRequired != 0) {
        GaugeRequired = other.GaugeRequired;
      }
      if (other.FullChargeBuffSpeciesId != 0) {
        FullChargeBuffSpeciesId = other.FullChargeBuffSpeciesId;
      }
      if (other.FullChargeSkillId != 0) {
        FullChargeSkillId = other.FullChargeSkillId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            StockType = (global::jtshared.InventorySlotStockType) input.ReadEnum();
            break;
          }
          case 16: {
            Quota = input.ReadUInt32();
            break;
          }
          case 24: {
            FramesToRecover = input.ReadInt32();
            break;
          }
          case 32: {
            BuffSpeciesId = input.ReadUInt32();
            break;
          }
          case 40: {
            SkillId = input.ReadUInt32();
            break;
          }
          case 48: {
            SkillIdAir = input.ReadUInt32();
            break;
          }
          case 56: {
            GaugeRequired = input.ReadInt32();
            break;
          }
          case 64: {
            FullChargeBuffSpeciesId = input.ReadUInt32();
            break;
          }
          case 72: {
            FullChargeSkillId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class InventorySlot : pb::IMessage<InventorySlot> {
    private static readonly pb::MessageParser<InventorySlot> _parser = new pb::MessageParser<InventorySlot>(() => new InventorySlot());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InventorySlot> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::jtshared.SerializableDataReflection.Descriptor.MessageTypes[39]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InventorySlot() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InventorySlot(InventorySlot other) : this() {
      stockType_ = other.stockType_;
      quota_ = other.quota_;
      framesToRecover_ = other.framesToRecover_;
      gaugeCharged_ = other.gaugeCharged_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InventorySlot Clone() {
      return new InventorySlot(this);
    }

    /// <summary>Field number for the "stock_type" field.</summary>
    public const int StockTypeFieldNumber = 1;
    private global::jtshared.InventorySlotStockType stockType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::jtshared.InventorySlotStockType StockType {
      get { return stockType_; }
      set {
        stockType_ = value;
      }
    }

    /// <summary>Field number for the "quota" field.</summary>
    public const int QuotaFieldNumber = 2;
    private uint quota_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Quota {
      get { return quota_; }
      set {
        quota_ = value;
      }
    }

    /// <summary>Field number for the "frames_to_recover" field.</summary>
    public const int FramesToRecoverFieldNumber = 3;
    private int framesToRecover_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FramesToRecover {
      get { return framesToRecover_; }
      set {
        framesToRecover_ = value;
      }
    }

    /// <summary>Field number for the "gauge_charged" field.</summary>
    public const int GaugeChargedFieldNumber = 4;
    private int gaugeCharged_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GaugeCharged {
      get { return gaugeCharged_; }
      set {
        gaugeCharged_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as InventorySlot);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(InventorySlot other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (StockType != other.StockType) return false;
      if (Quota != other.Quota) return false;
      if (FramesToRecover != other.FramesToRecover) return false;
      if (GaugeCharged != other.GaugeCharged) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (StockType != 0) hash ^= StockType.GetHashCode();
      if (Quota != 0) hash ^= Quota.GetHashCode();
      if (FramesToRecover != 0) hash ^= FramesToRecover.GetHashCode();
      if (GaugeCharged != 0) hash ^= GaugeCharged.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (StockType != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) StockType);
      }
      if (Quota != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Quota);
      }
      if (FramesToRecover != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(FramesToRecover);
      }
      if (GaugeCharged != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(GaugeCharged);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (StockType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) StockType);
      }
      if (Quota != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Quota);
      }
      if (FramesToRecover != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FramesToRecover);
      }
      if (GaugeCharged != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GaugeCharged);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(InventorySlot other) {
      if (other == null) {
        return;
      }
      if (other.StockType != 0) {
        StockType = other.StockType;
      }
      if (other.Quota != 0) {
        Quota = other.Quota;
      }
      if (other.FramesToRecover != 0) {
        FramesToRecover = other.FramesToRecover;
      }
      if (other.GaugeCharged != 0) {
        GaugeCharged = other.GaugeCharged;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            StockType = (global::jtshared.InventorySlotStockType) input.ReadEnum();
            break;
          }
          case 16: {
            Quota = input.ReadUInt32();
            break;
          }
          case 24: {
            FramesToRecover = input.ReadInt32();
            break;
          }
          case 32: {
            GaugeCharged = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Inventory : pb::IMessage<Inventory> {
    private static readonly pb::MessageParser<Inventory> _parser = new pb::MessageParser<Inventory>(() => new Inventory());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Inventory> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::jtshared.SerializableDataReflection.Descriptor.MessageTypes[40]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Inventory() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Inventory(Inventory other) : this() {
      slots_ = other.slots_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Inventory Clone() {
      return new Inventory(this);
    }

    /// <summary>Field number for the "slots" field.</summary>
    public const int SlotsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::jtshared.InventorySlot> _repeated_slots_codec
        = pb::FieldCodec.ForMessage(10, global::jtshared.InventorySlot.Parser);
    private readonly pbc::RepeatedField<global::jtshared.InventorySlot> slots_ = new pbc::RepeatedField<global::jtshared.InventorySlot>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::jtshared.InventorySlot> Slots {
      get { return slots_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Inventory);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Inventory other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!slots_.Equals(other.slots_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= slots_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      slots_.WriteTo(output, _repeated_slots_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += slots_.CalculateSize(_repeated_slots_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Inventory other) {
      if (other == null) {
        return;
      }
      slots_.Add(other.slots_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            slots_.AddEntriesFrom(input, _repeated_slots_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class BattleEquipment : pb::IMessage<BattleEquipment> {
    private static readonly pb::MessageParser<BattleEquipment> _parser = new pb::MessageParser<BattleEquipment>(() => new BattleEquipment());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BattleEquipment> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::jtshared.SerializableDataReflection.Descriptor.MessageTypes[41]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleEquipment() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleEquipment(BattleEquipment other) : this() {
      speciesId_ = other.speciesId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleEquipment Clone() {
      return new BattleEquipment(this);
    }

    /// <summary>Field number for the "species_id" field.</summary>
    public const int SpeciesIdFieldNumber = 1;
    private uint speciesId_;
    /// <summary>
    /// Unlike "InventorySlot", "BattleEquipment" has no varying state during a battle
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SpeciesId {
      get { return speciesId_; }
      set {
        speciesId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BattleEquipment);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BattleEquipment other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SpeciesId != other.SpeciesId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SpeciesId != 0) hash ^= SpeciesId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SpeciesId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(SpeciesId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SpeciesId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SpeciesId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BattleEquipment other) {
      if (other == null) {
        return;
      }
      if (other.SpeciesId != 0) {
        SpeciesId = other.SpeciesId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            SpeciesId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PlayerSettings : pb::IMessage<PlayerSettings> {
    private static readonly pb::MessageParser<PlayerSettings> _parser = new pb::MessageParser<PlayerSettings>(() => new PlayerSettings());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerSettings> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::jtshared.SerializableDataReflection.Descriptor.MessageTypes[42]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerSettings() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerSettings(PlayerSettings other) : this() {
      soundVolume_ = other.soundVolume_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerSettings Clone() {
      return new PlayerSettings(this);
    }

    /// <summary>Field number for the "sound_volume" field.</summary>
    public const int SoundVolumeFieldNumber = 1;
    private int soundVolume_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SoundVolume {
      get { return soundVolume_; }
      set {
        soundVolume_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayerSettings);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayerSettings other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SoundVolume != other.SoundVolume) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SoundVolume != 0) hash ^= SoundVolume.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SoundVolume != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(SoundVolume);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SoundVolume != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SoundVolume);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayerSettings other) {
      if (other == null) {
        return;
      }
      if (other.SoundVolume != 0) {
        SoundVolume = other.SoundVolume;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            SoundVolume = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PlayerRegionProgress : pb::IMessage<PlayerRegionProgress> {
    private static readonly pb::MessageParser<PlayerRegionProgress> _parser = new pb::MessageParser<PlayerRegionProgress>(() => new PlayerRegionProgress());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerRegionProgress> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::jtshared.SerializableDataReflection.Descriptor.MessageTypes[43]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerRegionProgress() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerRegionProgress(PlayerRegionProgress other) : this() {
      regionId_ = other.regionId_;
      completedLevelCount_ = other.completedLevelCount_;
      remainingDependencies_ = other.remainingDependencies_.Clone();
      removedDependencies_ = other.removedDependencies_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerRegionProgress Clone() {
      return new PlayerRegionProgress(this);
    }

    /// <summary>Field number for the "region_id" field.</summary>
    public const int RegionIdFieldNumber = 1;
    private int regionId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RegionId {
      get { return regionId_; }
      set {
        regionId_ = value;
      }
    }

    /// <summary>Field number for the "completed_level_count" field.</summary>
    public const int CompletedLevelCountFieldNumber = 2;
    private int completedLevelCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CompletedLevelCount {
      get { return completedLevelCount_; }
      set {
        completedLevelCount_ = value;
      }
    }

    /// <summary>Field number for the "remaining_dependencies" field.</summary>
    public const int RemainingDependenciesFieldNumber = 3;
    private static readonly pbc::MapField<int, bool>.Codec _map_remainingDependencies_codec
        = new pbc::MapField<int, bool>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForBool(16), 26);
    private readonly pbc::MapField<int, bool> remainingDependencies_ = new pbc::MapField<int, bool>();
    /// <summary>
    /// Any region can be in a state of "partially unlocked"
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, bool> RemainingDependencies {
      get { return remainingDependencies_; }
    }

    /// <summary>Field number for the "removed_dependencies" field.</summary>
    public const int RemovedDependenciesFieldNumber = 4;
    private static readonly pbc::MapField<int, bool>.Codec _map_removedDependencies_codec
        = new pbc::MapField<int, bool>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForBool(16), 34);
    private readonly pbc::MapField<int, bool> removedDependencies_ = new pbc::MapField<int, bool>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, bool> RemovedDependencies {
      get { return removedDependencies_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayerRegionProgress);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayerRegionProgress other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RegionId != other.RegionId) return false;
      if (CompletedLevelCount != other.CompletedLevelCount) return false;
      if (!RemainingDependencies.Equals(other.RemainingDependencies)) return false;
      if (!RemovedDependencies.Equals(other.RemovedDependencies)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RegionId != 0) hash ^= RegionId.GetHashCode();
      if (CompletedLevelCount != 0) hash ^= CompletedLevelCount.GetHashCode();
      hash ^= RemainingDependencies.GetHashCode();
      hash ^= RemovedDependencies.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RegionId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(RegionId);
      }
      if (CompletedLevelCount != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(CompletedLevelCount);
      }
      remainingDependencies_.WriteTo(output, _map_remainingDependencies_codec);
      removedDependencies_.WriteTo(output, _map_removedDependencies_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RegionId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RegionId);
      }
      if (CompletedLevelCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CompletedLevelCount);
      }
      size += remainingDependencies_.CalculateSize(_map_remainingDependencies_codec);
      size += removedDependencies_.CalculateSize(_map_removedDependencies_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayerRegionProgress other) {
      if (other == null) {
        return;
      }
      if (other.RegionId != 0) {
        RegionId = other.RegionId;
      }
      if (other.CompletedLevelCount != 0) {
        CompletedLevelCount = other.CompletedLevelCount;
      }
      remainingDependencies_.Add(other.remainingDependencies_);
      removedDependencies_.Add(other.removedDependencies_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            RegionId = input.ReadInt32();
            break;
          }
          case 16: {
            CompletedLevelCount = input.ReadInt32();
            break;
          }
          case 26: {
            remainingDependencies_.AddEntriesFrom(input, _map_remainingDependencies_codec);
            break;
          }
          case 34: {
            removedDependencies_.AddEntriesFrom(input, _map_removedDependencies_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class PlayerLevelProgress : pb::IMessage<PlayerLevelProgress> {
    private static readonly pb::MessageParser<PlayerLevelProgress> _parser = new pb::MessageParser<PlayerLevelProgress>(() => new PlayerLevelProgress());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerLevelProgress> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::jtshared.SerializableDataReflection.Descriptor.MessageTypes[44]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerLevelProgress() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerLevelProgress(PlayerLevelProgress other) : this() {
      regionId_ = other.regionId_;
      levelId_ = other.levelId_;
      highestScore_ = other.highestScore_;
      shortestFinishTimeAtHighestScore_ = other.shortestFinishTimeAtHighestScore_;
      characterSpeciesIdAtHighestScore_ = other.characterSpeciesIdAtHighestScore_;
      shortestFinishTime_ = other.shortestFinishTime_;
      scoreAtShortestFinishTime_ = other.scoreAtShortestFinishTime_;
      characterSpeciesIdAtShortestFinishTime_ = other.characterSpeciesIdAtShortestFinishTime_;
      remainingDependencies_ = other.remainingDependencies_.Clone();
      removedDependencies_ = other.removedDependencies_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerLevelProgress Clone() {
      return new PlayerLevelProgress(this);
    }

    /// <summary>Field number for the "region_id" field.</summary>
    public const int RegionIdFieldNumber = 1;
    private int regionId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RegionId {
      get { return regionId_; }
      set {
        regionId_ = value;
      }
    }

    /// <summary>Field number for the "level_id" field.</summary>
    public const int LevelIdFieldNumber = 2;
    private int levelId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LevelId {
      get { return levelId_; }
      set {
        levelId_ = value;
      }
    }

    /// <summary>Field number for the "highest_score" field.</summary>
    public const int HighestScoreFieldNumber = 3;
    private int highestScore_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HighestScore {
      get { return highestScore_; }
      set {
        highestScore_ = value;
      }
    }

    /// <summary>Field number for the "shortest_finish_time_at_highest_score" field.</summary>
    public const int ShortestFinishTimeAtHighestScoreFieldNumber = 4;
    private int shortestFinishTimeAtHighestScore_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ShortestFinishTimeAtHighestScore {
      get { return shortestFinishTimeAtHighestScore_; }
      set {
        shortestFinishTimeAtHighestScore_ = value;
      }
    }

    /// <summary>Field number for the "character_species_id_at_highest_score" field.</summary>
    public const int CharacterSpeciesIdAtHighestScoreFieldNumber = 5;
    private uint characterSpeciesIdAtHighestScore_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CharacterSpeciesIdAtHighestScore {
      get { return characterSpeciesIdAtHighestScore_; }
      set {
        characterSpeciesIdAtHighestScore_ = value;
      }
    }

    /// <summary>Field number for the "shortest_finish_time" field.</summary>
    public const int ShortestFinishTimeFieldNumber = 6;
    private int shortestFinishTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ShortestFinishTime {
      get { return shortestFinishTime_; }
      set {
        shortestFinishTime_ = value;
      }
    }

    /// <summary>Field number for the "score_at_shortest_finish_time" field.</summary>
    public const int ScoreAtShortestFinishTimeFieldNumber = 7;
    private int scoreAtShortestFinishTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ScoreAtShortestFinishTime {
      get { return scoreAtShortestFinishTime_; }
      set {
        scoreAtShortestFinishTime_ = value;
      }
    }

    /// <summary>Field number for the "character_species_id_at_shortest_finish_time" field.</summary>
    public const int CharacterSpeciesIdAtShortestFinishTimeFieldNumber = 8;
    private uint characterSpeciesIdAtShortestFinishTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CharacterSpeciesIdAtShortestFinishTime {
      get { return characterSpeciesIdAtShortestFinishTime_; }
      set {
        characterSpeciesIdAtShortestFinishTime_ = value;
      }
    }

    /// <summary>Field number for the "remaining_dependencies" field.</summary>
    public const int RemainingDependenciesFieldNumber = 9;
    private static readonly pbc::MapField<int, bool>.Codec _map_remainingDependencies_codec
        = new pbc::MapField<int, bool>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForBool(16), 74);
    private readonly pbc::MapField<int, bool> remainingDependencies_ = new pbc::MapField<int, bool>();
    /// <summary>
    /// Any level can be in a state of "partially unlocked", if a record exists in "PlayerStoryProgress.level_progress_dict" with non-empty "remaining_dependencies", then it's locked but visible
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, bool> RemainingDependencies {
      get { return remainingDependencies_; }
    }

    /// <summary>Field number for the "removed_dependencies" field.</summary>
    public const int RemovedDependenciesFieldNumber = 10;
    private static readonly pbc::MapField<int, bool>.Codec _map_removedDependencies_codec
        = new pbc::MapField<int, bool>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForBool(16), 82);
    private readonly pbc::MapField<int, bool> removedDependencies_ = new pbc::MapField<int, bool>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, bool> RemovedDependencies {
      get { return removedDependencies_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayerLevelProgress);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayerLevelProgress other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RegionId != other.RegionId) return false;
      if (LevelId != other.LevelId) return false;
      if (HighestScore != other.HighestScore) return false;
      if (ShortestFinishTimeAtHighestScore != other.ShortestFinishTimeAtHighestScore) return false;
      if (CharacterSpeciesIdAtHighestScore != other.CharacterSpeciesIdAtHighestScore) return false;
      if (ShortestFinishTime != other.ShortestFinishTime) return false;
      if (ScoreAtShortestFinishTime != other.ScoreAtShortestFinishTime) return false;
      if (CharacterSpeciesIdAtShortestFinishTime != other.CharacterSpeciesIdAtShortestFinishTime) return false;
      if (!RemainingDependencies.Equals(other.RemainingDependencies)) return false;
      if (!RemovedDependencies.Equals(other.RemovedDependencies)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RegionId != 0) hash ^= RegionId.GetHashCode();
      if (LevelId != 0) hash ^= LevelId.GetHashCode();
      if (HighestScore != 0) hash ^= HighestScore.GetHashCode();
      if (ShortestFinishTimeAtHighestScore != 0) hash ^= ShortestFinishTimeAtHighestScore.GetHashCode();
      if (CharacterSpeciesIdAtHighestScore != 0) hash ^= CharacterSpeciesIdAtHighestScore.GetHashCode();
      if (ShortestFinishTime != 0) hash ^= ShortestFinishTime.GetHashCode();
      if (ScoreAtShortestFinishTime != 0) hash ^= ScoreAtShortestFinishTime.GetHashCode();
      if (CharacterSpeciesIdAtShortestFinishTime != 0) hash ^= CharacterSpeciesIdAtShortestFinishTime.GetHashCode();
      hash ^= RemainingDependencies.GetHashCode();
      hash ^= RemovedDependencies.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RegionId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(RegionId);
      }
      if (LevelId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(LevelId);
      }
      if (HighestScore != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(HighestScore);
      }
      if (ShortestFinishTimeAtHighestScore != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(ShortestFinishTimeAtHighestScore);
      }
      if (CharacterSpeciesIdAtHighestScore != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(CharacterSpeciesIdAtHighestScore);
      }
      if (ShortestFinishTime != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(ShortestFinishTime);
      }
      if (ScoreAtShortestFinishTime != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(ScoreAtShortestFinishTime);
      }
      if (CharacterSpeciesIdAtShortestFinishTime != 0) {
        output.WriteRawTag(64);
        output.WriteUInt32(CharacterSpeciesIdAtShortestFinishTime);
      }
      remainingDependencies_.WriteTo(output, _map_remainingDependencies_codec);
      removedDependencies_.WriteTo(output, _map_removedDependencies_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RegionId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RegionId);
      }
      if (LevelId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LevelId);
      }
      if (HighestScore != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HighestScore);
      }
      if (ShortestFinishTimeAtHighestScore != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ShortestFinishTimeAtHighestScore);
      }
      if (CharacterSpeciesIdAtHighestScore != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CharacterSpeciesIdAtHighestScore);
      }
      if (ShortestFinishTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ShortestFinishTime);
      }
      if (ScoreAtShortestFinishTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ScoreAtShortestFinishTime);
      }
      if (CharacterSpeciesIdAtShortestFinishTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CharacterSpeciesIdAtShortestFinishTime);
      }
      size += remainingDependencies_.CalculateSize(_map_remainingDependencies_codec);
      size += removedDependencies_.CalculateSize(_map_removedDependencies_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayerLevelProgress other) {
      if (other == null) {
        return;
      }
      if (other.RegionId != 0) {
        RegionId = other.RegionId;
      }
      if (other.LevelId != 0) {
        LevelId = other.LevelId;
      }
      if (other.HighestScore != 0) {
        HighestScore = other.HighestScore;
      }
      if (other.ShortestFinishTimeAtHighestScore != 0) {
        ShortestFinishTimeAtHighestScore = other.ShortestFinishTimeAtHighestScore;
      }
      if (other.CharacterSpeciesIdAtHighestScore != 0) {
        CharacterSpeciesIdAtHighestScore = other.CharacterSpeciesIdAtHighestScore;
      }
      if (other.ShortestFinishTime != 0) {
        ShortestFinishTime = other.ShortestFinishTime;
      }
      if (other.ScoreAtShortestFinishTime != 0) {
        ScoreAtShortestFinishTime = other.ScoreAtShortestFinishTime;
      }
      if (other.CharacterSpeciesIdAtShortestFinishTime != 0) {
        CharacterSpeciesIdAtShortestFinishTime = other.CharacterSpeciesIdAtShortestFinishTime;
      }
      remainingDependencies_.Add(other.remainingDependencies_);
      removedDependencies_.Add(other.removedDependencies_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            RegionId = input.ReadInt32();
            break;
          }
          case 16: {
            LevelId = input.ReadInt32();
            break;
          }
          case 24: {
            HighestScore = input.ReadInt32();
            break;
          }
          case 32: {
            ShortestFinishTimeAtHighestScore = input.ReadInt32();
            break;
          }
          case 40: {
            CharacterSpeciesIdAtHighestScore = input.ReadUInt32();
            break;
          }
          case 48: {
            ShortestFinishTime = input.ReadInt32();
            break;
          }
          case 56: {
            ScoreAtShortestFinishTime = input.ReadInt32();
            break;
          }
          case 64: {
            CharacterSpeciesIdAtShortestFinishTime = input.ReadUInt32();
            break;
          }
          case 74: {
            remainingDependencies_.AddEntriesFrom(input, _map_remainingDependencies_codec);
            break;
          }
          case 82: {
            removedDependencies_.AddEntriesFrom(input, _map_removedDependencies_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class PlayerChUnlockProgress : pb::IMessage<PlayerChUnlockProgress> {
    private static readonly pb::MessageParser<PlayerChUnlockProgress> _parser = new pb::MessageParser<PlayerChUnlockProgress>(() => new PlayerChUnlockProgress());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerChUnlockProgress> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::jtshared.SerializableDataReflection.Descriptor.MessageTypes[45]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerChUnlockProgress() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerChUnlockProgress(PlayerChUnlockProgress other) : this() {
      speciesId_ = other.speciesId_;
      remainingDependencies_ = other.remainingDependencies_.Clone();
      removedDependencies_ = other.removedDependencies_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerChUnlockProgress Clone() {
      return new PlayerChUnlockProgress(this);
    }

    /// <summary>Field number for the "species_id" field.</summary>
    public const int SpeciesIdFieldNumber = 1;
    private uint speciesId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SpeciesId {
      get { return speciesId_; }
      set {
        speciesId_ = value;
      }
    }

    /// <summary>Field number for the "remaining_dependencies" field.</summary>
    public const int RemainingDependenciesFieldNumber = 2;
    private static readonly pbc::MapField<int, bool>.Codec _map_remainingDependencies_codec
        = new pbc::MapField<int, bool>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForBool(16), 18);
    private readonly pbc::MapField<int, bool> remainingDependencies_ = new pbc::MapField<int, bool>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, bool> RemainingDependencies {
      get { return remainingDependencies_; }
    }

    /// <summary>Field number for the "removed_dependencies" field.</summary>
    public const int RemovedDependenciesFieldNumber = 3;
    private static readonly pbc::MapField<int, bool>.Codec _map_removedDependencies_codec
        = new pbc::MapField<int, bool>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForBool(16), 26);
    private readonly pbc::MapField<int, bool> removedDependencies_ = new pbc::MapField<int, bool>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, bool> RemovedDependencies {
      get { return removedDependencies_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayerChUnlockProgress);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayerChUnlockProgress other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SpeciesId != other.SpeciesId) return false;
      if (!RemainingDependencies.Equals(other.RemainingDependencies)) return false;
      if (!RemovedDependencies.Equals(other.RemovedDependencies)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SpeciesId != 0) hash ^= SpeciesId.GetHashCode();
      hash ^= RemainingDependencies.GetHashCode();
      hash ^= RemovedDependencies.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SpeciesId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(SpeciesId);
      }
      remainingDependencies_.WriteTo(output, _map_remainingDependencies_codec);
      removedDependencies_.WriteTo(output, _map_removedDependencies_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SpeciesId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SpeciesId);
      }
      size += remainingDependencies_.CalculateSize(_map_remainingDependencies_codec);
      size += removedDependencies_.CalculateSize(_map_removedDependencies_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayerChUnlockProgress other) {
      if (other == null) {
        return;
      }
      if (other.SpeciesId != 0) {
        SpeciesId = other.SpeciesId;
      }
      remainingDependencies_.Add(other.remainingDependencies_);
      removedDependencies_.Add(other.removedDependencies_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            SpeciesId = input.ReadUInt32();
            break;
          }
          case 18: {
            remainingDependencies_.AddEntriesFrom(input, _map_remainingDependencies_codec);
            break;
          }
          case 26: {
            removedDependencies_.AddEntriesFrom(input, _map_removedDependencies_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class PlayerStoryProgress : pb::IMessage<PlayerStoryProgress> {
    private static readonly pb::MessageParser<PlayerStoryProgress> _parser = new pb::MessageParser<PlayerStoryProgress>(() => new PlayerStoryProgress());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerStoryProgress> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::jtshared.SerializableDataReflection.Descriptor.MessageTypes[46]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerStoryProgress() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerStoryProgress(PlayerStoryProgress other) : this() {
      regionProgressDict_ = other.regionProgressDict_.Clone();
      levelProgressDict_ = other.levelProgressDict_.Clone();
      cursorRegionId_ = other.cursorRegionId_;
      cursorLevelId_ = other.cursorLevelId_;
      view_ = other.view_;
      savedAtGmtMillis_ = other.savedAtGmtMillis_;
      chUnlockProgressDict_ = other.chUnlockProgressDict_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerStoryProgress Clone() {
      return new PlayerStoryProgress(this);
    }

    /// <summary>Field number for the "region_progress_dict" field.</summary>
    public const int RegionProgressDictFieldNumber = 1;
    private static readonly pbc::MapField<int, global::jtshared.PlayerRegionProgress>.Codec _map_regionProgressDict_codec
        = new pbc::MapField<int, global::jtshared.PlayerRegionProgress>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForMessage(18, global::jtshared.PlayerRegionProgress.Parser), 10);
    private readonly pbc::MapField<int, global::jtshared.PlayerRegionProgress> regionProgressDict_ = new pbc::MapField<int, global::jtshared.PlayerRegionProgress>();
    /// <summary>
    /// Including just unlocked regions with 0 progress
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, global::jtshared.PlayerRegionProgress> RegionProgressDict {
      get { return regionProgressDict_; }
    }

    /// <summary>Field number for the "level_progress_dict" field.</summary>
    public const int LevelProgressDictFieldNumber = 2;
    private static readonly pbc::MapField<int, global::jtshared.PlayerLevelProgress>.Codec _map_levelProgressDict_codec
        = new pbc::MapField<int, global::jtshared.PlayerLevelProgress>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForMessage(18, global::jtshared.PlayerLevelProgress.Parser), 18);
    private readonly pbc::MapField<int, global::jtshared.PlayerLevelProgress> levelProgressDict_ = new pbc::MapField<int, global::jtshared.PlayerLevelProgress>();
    /// <summary>
    /// Including just unlocked levels with 0 progress 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, global::jtshared.PlayerLevelProgress> LevelProgressDict {
      get { return levelProgressDict_; }
    }

    /// <summary>Field number for the "cursor_region_id" field.</summary>
    public const int CursorRegionIdFieldNumber = 3;
    private int cursorRegionId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CursorRegionId {
      get { return cursorRegionId_; }
      set {
        cursorRegionId_ = value;
      }
    }

    /// <summary>Field number for the "cursor_level_id" field.</summary>
    public const int CursorLevelIdFieldNumber = 4;
    private int cursorLevelId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CursorLevelId {
      get { return cursorLevelId_; }
      set {
        cursorLevelId_ = value;
      }
    }

    /// <summary>Field number for the "view" field.</summary>
    public const int ViewFieldNumber = 5;
    private global::jtshared.PlayerStoryModeSelectView view_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::jtshared.PlayerStoryModeSelectView View {
      get { return view_; }
      set {
        view_ = value;
      }
    }

    /// <summary>Field number for the "saved_at_gmt_millis" field.</summary>
    public const int SavedAtGmtMillisFieldNumber = 6;
    private ulong savedAtGmtMillis_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong SavedAtGmtMillis {
      get { return savedAtGmtMillis_; }
      set {
        savedAtGmtMillis_ = value;
      }
    }

    /// <summary>Field number for the "ch_unlock_progress_dict" field.</summary>
    public const int ChUnlockProgressDictFieldNumber = 7;
    private static readonly pbc::MapField<uint, global::jtshared.PlayerChUnlockProgress>.Codec _map_chUnlockProgressDict_codec
        = new pbc::MapField<uint, global::jtshared.PlayerChUnlockProgress>.Codec(pb::FieldCodec.ForUInt32(8), pb::FieldCodec.ForMessage(18, global::jtshared.PlayerChUnlockProgress.Parser), 58);
    private readonly pbc::MapField<uint, global::jtshared.PlayerChUnlockProgress> chUnlockProgressDict_ = new pbc::MapField<uint, global::jtshared.PlayerChUnlockProgress>();
    /// <summary>
    /// keyed by "species_id: uint32"
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<uint, global::jtshared.PlayerChUnlockProgress> ChUnlockProgressDict {
      get { return chUnlockProgressDict_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayerStoryProgress);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayerStoryProgress other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!RegionProgressDict.Equals(other.RegionProgressDict)) return false;
      if (!LevelProgressDict.Equals(other.LevelProgressDict)) return false;
      if (CursorRegionId != other.CursorRegionId) return false;
      if (CursorLevelId != other.CursorLevelId) return false;
      if (View != other.View) return false;
      if (SavedAtGmtMillis != other.SavedAtGmtMillis) return false;
      if (!ChUnlockProgressDict.Equals(other.ChUnlockProgressDict)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= RegionProgressDict.GetHashCode();
      hash ^= LevelProgressDict.GetHashCode();
      if (CursorRegionId != 0) hash ^= CursorRegionId.GetHashCode();
      if (CursorLevelId != 0) hash ^= CursorLevelId.GetHashCode();
      if (View != 0) hash ^= View.GetHashCode();
      if (SavedAtGmtMillis != 0UL) hash ^= SavedAtGmtMillis.GetHashCode();
      hash ^= ChUnlockProgressDict.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      regionProgressDict_.WriteTo(output, _map_regionProgressDict_codec);
      levelProgressDict_.WriteTo(output, _map_levelProgressDict_codec);
      if (CursorRegionId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(CursorRegionId);
      }
      if (CursorLevelId != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(CursorLevelId);
      }
      if (View != 0) {
        output.WriteRawTag(40);
        output.WriteEnum((int) View);
      }
      if (SavedAtGmtMillis != 0UL) {
        output.WriteRawTag(48);
        output.WriteUInt64(SavedAtGmtMillis);
      }
      chUnlockProgressDict_.WriteTo(output, _map_chUnlockProgressDict_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += regionProgressDict_.CalculateSize(_map_regionProgressDict_codec);
      size += levelProgressDict_.CalculateSize(_map_levelProgressDict_codec);
      if (CursorRegionId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CursorRegionId);
      }
      if (CursorLevelId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CursorLevelId);
      }
      if (View != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) View);
      }
      if (SavedAtGmtMillis != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(SavedAtGmtMillis);
      }
      size += chUnlockProgressDict_.CalculateSize(_map_chUnlockProgressDict_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayerStoryProgress other) {
      if (other == null) {
        return;
      }
      regionProgressDict_.Add(other.regionProgressDict_);
      levelProgressDict_.Add(other.levelProgressDict_);
      if (other.CursorRegionId != 0) {
        CursorRegionId = other.CursorRegionId;
      }
      if (other.CursorLevelId != 0) {
        CursorLevelId = other.CursorLevelId;
      }
      if (other.View != 0) {
        View = other.View;
      }
      if (other.SavedAtGmtMillis != 0UL) {
        SavedAtGmtMillis = other.SavedAtGmtMillis;
      }
      chUnlockProgressDict_.Add(other.chUnlockProgressDict_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            regionProgressDict_.AddEntriesFrom(input, _map_regionProgressDict_codec);
            break;
          }
          case 18: {
            levelProgressDict_.AddEntriesFrom(input, _map_levelProgressDict_codec);
            break;
          }
          case 24: {
            CursorRegionId = input.ReadInt32();
            break;
          }
          case 32: {
            CursorLevelId = input.ReadInt32();
            break;
          }
          case 40: {
            View = (global::jtshared.PlayerStoryModeSelectView) input.ReadEnum();
            break;
          }
          case 48: {
            SavedAtGmtMillis = input.ReadUInt64();
            break;
          }
          case 58: {
            chUnlockProgressDict_.AddEntriesFrom(input, _map_chUnlockProgressDict_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class PlayerOnlineArenaProgress : pb::IMessage<PlayerOnlineArenaProgress> {
    private static readonly pb::MessageParser<PlayerOnlineArenaProgress> _parser = new pb::MessageParser<PlayerOnlineArenaProgress>(() => new PlayerOnlineArenaProgress());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerOnlineArenaProgress> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::jtshared.SerializableDataReflection.Descriptor.MessageTypes[47]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerOnlineArenaProgress() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerOnlineArenaProgress(PlayerOnlineArenaProgress other) : this() {
      savedAtGmtMillis_ = other.savedAtGmtMillis_;
      playerId_ = other.playerId_;
      chUnlockProgressDict_ = other.chUnlockProgressDict_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerOnlineArenaProgress Clone() {
      return new PlayerOnlineArenaProgress(this);
    }

    /// <summary>Field number for the "saved_at_gmt_millis" field.</summary>
    public const int SavedAtGmtMillisFieldNumber = 1;
    private ulong savedAtGmtMillis_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong SavedAtGmtMillis {
      get { return savedAtGmtMillis_; }
      set {
        savedAtGmtMillis_ = value;
      }
    }

    /// <summary>Field number for the "player_id" field.</summary>
    public const int PlayerIdFieldNumber = 2;
    private string playerId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PlayerId {
      get { return playerId_; }
      set {
        playerId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ch_unlock_progress_dict" field.</summary>
    public const int ChUnlockProgressDictFieldNumber = 3;
    private static readonly pbc::MapField<uint, global::jtshared.PlayerChUnlockProgress>.Codec _map_chUnlockProgressDict_codec
        = new pbc::MapField<uint, global::jtshared.PlayerChUnlockProgress>.Codec(pb::FieldCodec.ForUInt32(8), pb::FieldCodec.ForMessage(18, global::jtshared.PlayerChUnlockProgress.Parser), 26);
    private readonly pbc::MapField<uint, global::jtshared.PlayerChUnlockProgress> chUnlockProgressDict_ = new pbc::MapField<uint, global::jtshared.PlayerChUnlockProgress>();
    /// <summary>
    /// keyed by "species_id: uint32"
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<uint, global::jtshared.PlayerChUnlockProgress> ChUnlockProgressDict {
      get { return chUnlockProgressDict_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayerOnlineArenaProgress);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayerOnlineArenaProgress other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SavedAtGmtMillis != other.SavedAtGmtMillis) return false;
      if (PlayerId != other.PlayerId) return false;
      if (!ChUnlockProgressDict.Equals(other.ChUnlockProgressDict)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SavedAtGmtMillis != 0UL) hash ^= SavedAtGmtMillis.GetHashCode();
      if (PlayerId.Length != 0) hash ^= PlayerId.GetHashCode();
      hash ^= ChUnlockProgressDict.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SavedAtGmtMillis != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(SavedAtGmtMillis);
      }
      if (PlayerId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(PlayerId);
      }
      chUnlockProgressDict_.WriteTo(output, _map_chUnlockProgressDict_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SavedAtGmtMillis != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(SavedAtGmtMillis);
      }
      if (PlayerId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PlayerId);
      }
      size += chUnlockProgressDict_.CalculateSize(_map_chUnlockProgressDict_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayerOnlineArenaProgress other) {
      if (other == null) {
        return;
      }
      if (other.SavedAtGmtMillis != 0UL) {
        SavedAtGmtMillis = other.SavedAtGmtMillis;
      }
      if (other.PlayerId.Length != 0) {
        PlayerId = other.PlayerId;
      }
      chUnlockProgressDict_.Add(other.chUnlockProgressDict_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            SavedAtGmtMillis = input.ReadUInt64();
            break;
          }
          case 18: {
            PlayerId = input.ReadString();
            break;
          }
          case 26: {
            chUnlockProgressDict_.AddEntriesFrom(input, _map_chUnlockProgressDict_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class StoryPointDialogLine : pb::IMessage<StoryPointDialogLine> {
    private static readonly pb::MessageParser<StoryPointDialogLine> _parser = new pb::MessageParser<StoryPointDialogLine>(() => new StoryPointDialogLine());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StoryPointDialogLine> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::jtshared.SerializableDataReflection.Descriptor.MessageTypes[48]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StoryPointDialogLine() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StoryPointDialogLine(StoryPointDialogLine other) : this() {
      narratorUd_ = other.narratorUd_;
      narratorSpeciesId_ = other.narratorSpeciesId_;
      content_ = other.content_;
      downOrNot_ = other.downOrNot_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StoryPointDialogLine Clone() {
      return new StoryPointDialogLine(this);
    }

    /// <summary>Field number for the "narrator_ud" field.</summary>
    public const int NarratorUdFieldNumber = 1;
    private ulong narratorUd_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong NarratorUd {
      get { return narratorUd_; }
      set {
        narratorUd_ = value;
      }
    }

    /// <summary>Field number for the "narrator_species_id" field.</summary>
    public const int NarratorSpeciesIdFieldNumber = 2;
    private uint narratorSpeciesId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint NarratorSpeciesId {
      get { return narratorSpeciesId_; }
      set {
        narratorSpeciesId_ = value;
      }
    }

    /// <summary>Field number for the "content" field.</summary>
    public const int ContentFieldNumber = 3;
    private string content_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Content {
      get { return content_; }
      set {
        content_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "down_or_not" field.</summary>
    public const int DownOrNotFieldNumber = 4;
    private bool downOrNot_;
    /// <summary>
    /// true is "down"
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool DownOrNot {
      get { return downOrNot_; }
      set {
        downOrNot_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StoryPointDialogLine);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StoryPointDialogLine other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (NarratorUd != other.NarratorUd) return false;
      if (NarratorSpeciesId != other.NarratorSpeciesId) return false;
      if (Content != other.Content) return false;
      if (DownOrNot != other.DownOrNot) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (NarratorUd != 0UL) hash ^= NarratorUd.GetHashCode();
      if (NarratorSpeciesId != 0) hash ^= NarratorSpeciesId.GetHashCode();
      if (Content.Length != 0) hash ^= Content.GetHashCode();
      if (DownOrNot != false) hash ^= DownOrNot.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (NarratorUd != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(NarratorUd);
      }
      if (NarratorSpeciesId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(NarratorSpeciesId);
      }
      if (Content.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Content);
      }
      if (DownOrNot != false) {
        output.WriteRawTag(32);
        output.WriteBool(DownOrNot);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (NarratorUd != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(NarratorUd);
      }
      if (NarratorSpeciesId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NarratorSpeciesId);
      }
      if (Content.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Content);
      }
      if (DownOrNot != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StoryPointDialogLine other) {
      if (other == null) {
        return;
      }
      if (other.NarratorUd != 0UL) {
        NarratorUd = other.NarratorUd;
      }
      if (other.NarratorSpeciesId != 0) {
        NarratorSpeciesId = other.NarratorSpeciesId;
      }
      if (other.Content.Length != 0) {
        Content = other.Content;
      }
      if (other.DownOrNot != false) {
        DownOrNot = other.DownOrNot;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            NarratorUd = input.ReadUInt64();
            break;
          }
          case 16: {
            NarratorSpeciesId = input.ReadUInt32();
            break;
          }
          case 26: {
            Content = input.ReadString();
            break;
          }
          case 32: {
            DownOrNot = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class StoryPointStep : pb::IMessage<StoryPointStep> {
    private static readonly pb::MessageParser<StoryPointStep> _parser = new pb::MessageParser<StoryPointStep>(() => new StoryPointStep());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StoryPointStep> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::jtshared.SerializableDataReflection.Descriptor.MessageTypes[49]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StoryPointStep() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StoryPointStep(StoryPointStep other) : this() {
      lines_ = other.lines_.Clone();
      nonctrlAliveRdfCount_ = other.nonctrlAliveRdfCount_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StoryPointStep Clone() {
      return new StoryPointStep(this);
    }

    /// <summary>Field number for the "lines" field.</summary>
    public const int LinesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::jtshared.StoryPointDialogLine> _repeated_lines_codec
        = pb::FieldCodec.ForMessage(10, global::jtshared.StoryPointDialogLine.Parser);
    private readonly pbc::RepeatedField<global::jtshared.StoryPointDialogLine> lines_ = new pbc::RepeatedField<global::jtshared.StoryPointDialogLine>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::jtshared.StoryPointDialogLine> Lines {
      get { return lines_; }
    }

    /// <summary>Field number for the "nonctrl_alive_rdf_count" field.</summary>
    public const int NonctrlAliveRdfCountFieldNumber = 2;
    private int nonctrlAliveRdfCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NonctrlAliveRdfCount {
      get { return nonctrlAliveRdfCount_; }
      set {
        nonctrlAliveRdfCount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StoryPointStep);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StoryPointStep other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!lines_.Equals(other.lines_)) return false;
      if (NonctrlAliveRdfCount != other.NonctrlAliveRdfCount) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= lines_.GetHashCode();
      if (NonctrlAliveRdfCount != 0) hash ^= NonctrlAliveRdfCount.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      lines_.WriteTo(output, _repeated_lines_codec);
      if (NonctrlAliveRdfCount != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(NonctrlAliveRdfCount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += lines_.CalculateSize(_repeated_lines_codec);
      if (NonctrlAliveRdfCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NonctrlAliveRdfCount);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StoryPointStep other) {
      if (other == null) {
        return;
      }
      lines_.Add(other.lines_);
      if (other.NonctrlAliveRdfCount != 0) {
        NonctrlAliveRdfCount = other.NonctrlAliveRdfCount;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            lines_.AddEntriesFrom(input, _repeated_lines_codec);
            break;
          }
          case 16: {
            NonctrlAliveRdfCount = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class StoryPoint : pb::IMessage<StoryPoint> {
    private static readonly pb::MessageParser<StoryPoint> _parser = new pb::MessageParser<StoryPoint>(() => new StoryPoint());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StoryPoint> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::jtshared.SerializableDataReflection.Descriptor.MessageTypes[50]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StoryPoint() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StoryPoint(StoryPoint other) : this() {
      steps_ = other.steps_.Clone();
      nonctrl_ = other.nonctrl_;
      cutsceneName_ = other.cutsceneName_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StoryPoint Clone() {
      return new StoryPoint(this);
    }

    /// <summary>Field number for the "steps" field.</summary>
    public const int StepsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::jtshared.StoryPointStep> _repeated_steps_codec
        = pb::FieldCodec.ForMessage(10, global::jtshared.StoryPointStep.Parser);
    private readonly pbc::RepeatedField<global::jtshared.StoryPointStep> steps_ = new pbc::RepeatedField<global::jtshared.StoryPointStep>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::jtshared.StoryPointStep> Steps {
      get { return steps_; }
    }

    /// <summary>Field number for the "nonctrl" field.</summary>
    public const int NonctrlFieldNumber = 2;
    private bool nonctrl_;
    /// <summary>
    /// not taking over control if true
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Nonctrl {
      get { return nonctrl_; }
      set {
        nonctrl_ = value;
      }
    }

    /// <summary>Field number for the "cutscene_name" field.</summary>
    public const int CutsceneNameFieldNumber = 3;
    private string cutsceneName_ = "";
    /// <summary>
    /// null for no cut scene
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CutsceneName {
      get { return cutsceneName_; }
      set {
        cutsceneName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StoryPoint);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StoryPoint other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!steps_.Equals(other.steps_)) return false;
      if (Nonctrl != other.Nonctrl) return false;
      if (CutsceneName != other.CutsceneName) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= steps_.GetHashCode();
      if (Nonctrl != false) hash ^= Nonctrl.GetHashCode();
      if (CutsceneName.Length != 0) hash ^= CutsceneName.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      steps_.WriteTo(output, _repeated_steps_codec);
      if (Nonctrl != false) {
        output.WriteRawTag(16);
        output.WriteBool(Nonctrl);
      }
      if (CutsceneName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(CutsceneName);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += steps_.CalculateSize(_repeated_steps_codec);
      if (Nonctrl != false) {
        size += 1 + 1;
      }
      if (CutsceneName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CutsceneName);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StoryPoint other) {
      if (other == null) {
        return;
      }
      steps_.Add(other.steps_);
      if (other.Nonctrl != false) {
        Nonctrl = other.Nonctrl;
      }
      if (other.CutsceneName.Length != 0) {
        CutsceneName = other.CutsceneName;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            steps_.AddEntriesFrom(input, _repeated_steps_codec);
            break;
          }
          case 16: {
            Nonctrl = input.ReadBool();
            break;
          }
          case 26: {
            CutsceneName = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class LevelStory : pb::IMessage<LevelStory> {
    private static readonly pb::MessageParser<LevelStory> _parser = new pb::MessageParser<LevelStory>(() => new LevelStory());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LevelStory> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::jtshared.SerializableDataReflection.Descriptor.MessageTypes[51]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LevelStory() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LevelStory(LevelStory other) : this() {
      points_ = other.points_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LevelStory Clone() {
      return new LevelStory(this);
    }

    /// <summary>Field number for the "points" field.</summary>
    public const int PointsFieldNumber = 1;
    private static readonly pbc::MapField<int, global::jtshared.StoryPoint>.Codec _map_points_codec
        = new pbc::MapField<int, global::jtshared.StoryPoint>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForMessage(18, global::jtshared.StoryPoint.Parser), 10);
    private readonly pbc::MapField<int, global::jtshared.StoryPoint> points_ = new pbc::MapField<int, global::jtshared.StoryPoint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, global::jtshared.StoryPoint> Points {
      get { return points_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LevelStory);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LevelStory other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!Points.Equals(other.Points)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= Points.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      points_.WriteTo(output, _map_points_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += points_.CalculateSize(_map_points_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LevelStory other) {
      if (other == null) {
        return;
      }
      points_.Add(other.points_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            points_.AddEntriesFrom(input, _map_points_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class SerializableConvexPolygon : pb::IMessage<SerializableConvexPolygon> {
    private static readonly pb::MessageParser<SerializableConvexPolygon> _parser = new pb::MessageParser<SerializableConvexPolygon>(() => new SerializableConvexPolygon());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SerializableConvexPolygon> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::jtshared.SerializableDataReflection.Descriptor.MessageTypes[52]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SerializableConvexPolygon() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SerializableConvexPolygon(SerializableConvexPolygon other) : this() {
      anchorX_ = other.anchorX_;
      anchorY_ = other.anchorY_;
      points_ = other.points_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SerializableConvexPolygon Clone() {
      return new SerializableConvexPolygon(this);
    }

    /// <summary>Field number for the "anchor_x" field.</summary>
    public const int AnchorXFieldNumber = 1;
    private float anchorX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float AnchorX {
      get { return anchorX_; }
      set {
        anchorX_ = value;
      }
    }

    /// <summary>Field number for the "anchor_y" field.</summary>
    public const int AnchorYFieldNumber = 2;
    private float anchorY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float AnchorY {
      get { return anchorY_; }
      set {
        anchorY_ = value;
      }
    }

    /// <summary>Field number for the "points" field.</summary>
    public const int PointsFieldNumber = 3;
    private static readonly pb::FieldCodec<float> _repeated_points_codec
        = pb::FieldCodec.ForFloat(26);
    private readonly pbc::RepeatedField<float> points_ = new pbc::RepeatedField<float>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> Points {
      get { return points_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SerializableConvexPolygon);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SerializableConvexPolygon other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(AnchorX, other.AnchorX)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(AnchorY, other.AnchorY)) return false;
      if(!points_.Equals(other.points_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AnchorX != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(AnchorX);
      if (AnchorY != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(AnchorY);
      hash ^= points_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AnchorX != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(AnchorX);
      }
      if (AnchorY != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(AnchorY);
      }
      points_.WriteTo(output, _repeated_points_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AnchorX != 0F) {
        size += 1 + 4;
      }
      if (AnchorY != 0F) {
        size += 1 + 4;
      }
      size += points_.CalculateSize(_repeated_points_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SerializableConvexPolygon other) {
      if (other == null) {
        return;
      }
      if (other.AnchorX != 0F) {
        AnchorX = other.AnchorX;
      }
      if (other.AnchorY != 0F) {
        AnchorY = other.AnchorY;
      }
      points_.Add(other.points_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            AnchorX = input.ReadFloat();
            break;
          }
          case 21: {
            AnchorY = input.ReadFloat();
            break;
          }
          case 26:
          case 29: {
            points_.AddEntriesFrom(input, _repeated_points_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class SerializedCompletelyStaticPatrolCueCollider : pb::IMessage<SerializedCompletelyStaticPatrolCueCollider> {
    private static readonly pb::MessageParser<SerializedCompletelyStaticPatrolCueCollider> _parser = new pb::MessageParser<SerializedCompletelyStaticPatrolCueCollider>(() => new SerializedCompletelyStaticPatrolCueCollider());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SerializedCompletelyStaticPatrolCueCollider> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::jtshared.SerializableDataReflection.Descriptor.MessageTypes[53]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SerializedCompletelyStaticPatrolCueCollider() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SerializedCompletelyStaticPatrolCueCollider(SerializedCompletelyStaticPatrolCueCollider other) : this() {
      attr_ = other.attr_ != null ? other.attr_.Clone() : null;
      polygon_ = other.polygon_ != null ? other.polygon_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SerializedCompletelyStaticPatrolCueCollider Clone() {
      return new SerializedCompletelyStaticPatrolCueCollider(this);
    }

    /// <summary>Field number for the "attr" field.</summary>
    public const int AttrFieldNumber = 1;
    private global::jtshared.PatrolCue attr_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::jtshared.PatrolCue Attr {
      get { return attr_; }
      set {
        attr_ = value;
      }
    }

    /// <summary>Field number for the "polygon" field.</summary>
    public const int PolygonFieldNumber = 2;
    private global::jtshared.SerializableConvexPolygon polygon_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::jtshared.SerializableConvexPolygon Polygon {
      get { return polygon_; }
      set {
        polygon_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SerializedCompletelyStaticPatrolCueCollider);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SerializedCompletelyStaticPatrolCueCollider other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Attr, other.Attr)) return false;
      if (!object.Equals(Polygon, other.Polygon)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (attr_ != null) hash ^= Attr.GetHashCode();
      if (polygon_ != null) hash ^= Polygon.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (attr_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Attr);
      }
      if (polygon_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Polygon);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (attr_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Attr);
      }
      if (polygon_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Polygon);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SerializedCompletelyStaticPatrolCueCollider other) {
      if (other == null) {
        return;
      }
      if (other.attr_ != null) {
        if (attr_ == null) {
          Attr = new global::jtshared.PatrolCue();
        }
        Attr.MergeFrom(other.Attr);
      }
      if (other.polygon_ != null) {
        if (polygon_ == null) {
          Polygon = new global::jtshared.SerializableConvexPolygon();
        }
        Polygon.MergeFrom(other.Polygon);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (attr_ == null) {
              Attr = new global::jtshared.PatrolCue();
            }
            input.ReadMessage(Attr);
            break;
          }
          case 18: {
            if (polygon_ == null) {
              Polygon = new global::jtshared.SerializableConvexPolygon();
            }
            input.ReadMessage(Polygon);
            break;
          }
        }
      }
    }

  }

  public sealed partial class SerializedCompletelyStaticTrapCollider : pb::IMessage<SerializedCompletelyStaticTrapCollider> {
    private static readonly pb::MessageParser<SerializedCompletelyStaticTrapCollider> _parser = new pb::MessageParser<SerializedCompletelyStaticTrapCollider>(() => new SerializedCompletelyStaticTrapCollider());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SerializedCompletelyStaticTrapCollider> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::jtshared.SerializableDataReflection.Descriptor.MessageTypes[54]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SerializedCompletelyStaticTrapCollider() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SerializedCompletelyStaticTrapCollider(SerializedCompletelyStaticTrapCollider other) : this() {
      attr_ = other.attr_ != null ? other.attr_.Clone() : null;
      polygon_ = other.polygon_ != null ? other.polygon_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SerializedCompletelyStaticTrapCollider Clone() {
      return new SerializedCompletelyStaticTrapCollider(this);
    }

    /// <summary>Field number for the "attr" field.</summary>
    public const int AttrFieldNumber = 1;
    private global::jtshared.TrapColliderAttr attr_;
    /// <summary>
    /// "TrapColliderAttr.collision_type_mask" is a little peculiar, it can be a composite of different COLLISION_*_INDEX_PREFIX, thus often NOT taken care of by the COLLIDABLE_PAIRS set 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::jtshared.TrapColliderAttr Attr {
      get { return attr_; }
      set {
        attr_ = value;
      }
    }

    /// <summary>Field number for the "polygon" field.</summary>
    public const int PolygonFieldNumber = 2;
    private global::jtshared.SerializableConvexPolygon polygon_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::jtshared.SerializableConvexPolygon Polygon {
      get { return polygon_; }
      set {
        polygon_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SerializedCompletelyStaticTrapCollider);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SerializedCompletelyStaticTrapCollider other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Attr, other.Attr)) return false;
      if (!object.Equals(Polygon, other.Polygon)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (attr_ != null) hash ^= Attr.GetHashCode();
      if (polygon_ != null) hash ^= Polygon.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (attr_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Attr);
      }
      if (polygon_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Polygon);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (attr_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Attr);
      }
      if (polygon_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Polygon);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SerializedCompletelyStaticTrapCollider other) {
      if (other == null) {
        return;
      }
      if (other.attr_ != null) {
        if (attr_ == null) {
          Attr = new global::jtshared.TrapColliderAttr();
        }
        Attr.MergeFrom(other.Attr);
      }
      if (other.polygon_ != null) {
        if (polygon_ == null) {
          Polygon = new global::jtshared.SerializableConvexPolygon();
        }
        Polygon.MergeFrom(other.Polygon);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (attr_ == null) {
              Attr = new global::jtshared.TrapColliderAttr();
            }
            input.ReadMessage(Attr);
            break;
          }
          case 18: {
            if (polygon_ == null) {
              Polygon = new global::jtshared.SerializableConvexPolygon();
            }
            input.ReadMessage(Polygon);
            break;
          }
        }
      }
    }

  }

  public sealed partial class SerializedCompletelyStaticTriggerCollider : pb::IMessage<SerializedCompletelyStaticTriggerCollider> {
    private static readonly pb::MessageParser<SerializedCompletelyStaticTriggerCollider> _parser = new pb::MessageParser<SerializedCompletelyStaticTriggerCollider>(() => new SerializedCompletelyStaticTriggerCollider());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SerializedCompletelyStaticTriggerCollider> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::jtshared.SerializableDataReflection.Descriptor.MessageTypes[55]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SerializedCompletelyStaticTriggerCollider() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SerializedCompletelyStaticTriggerCollider(SerializedCompletelyStaticTriggerCollider other) : this() {
      attr_ = other.attr_ != null ? other.attr_.Clone() : null;
      polygon_ = other.polygon_ != null ? other.polygon_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SerializedCompletelyStaticTriggerCollider Clone() {
      return new SerializedCompletelyStaticTriggerCollider(this);
    }

    /// <summary>Field number for the "attr" field.</summary>
    public const int AttrFieldNumber = 1;
    private global::jtshared.TriggerColliderAttr attr_;
    /// <summary>
    /// "collision_type_mask" can be derived from here
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::jtshared.TriggerColliderAttr Attr {
      get { return attr_; }
      set {
        attr_ = value;
      }
    }

    /// <summary>Field number for the "polygon" field.</summary>
    public const int PolygonFieldNumber = 2;
    private global::jtshared.SerializableConvexPolygon polygon_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::jtshared.SerializableConvexPolygon Polygon {
      get { return polygon_; }
      set {
        polygon_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SerializedCompletelyStaticTriggerCollider);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SerializedCompletelyStaticTriggerCollider other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Attr, other.Attr)) return false;
      if (!object.Equals(Polygon, other.Polygon)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (attr_ != null) hash ^= Attr.GetHashCode();
      if (polygon_ != null) hash ^= Polygon.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (attr_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Attr);
      }
      if (polygon_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Polygon);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (attr_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Attr);
      }
      if (polygon_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Polygon);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SerializedCompletelyStaticTriggerCollider other) {
      if (other == null) {
        return;
      }
      if (other.attr_ != null) {
        if (attr_ == null) {
          Attr = new global::jtshared.TriggerColliderAttr();
        }
        Attr.MergeFrom(other.Attr);
      }
      if (other.polygon_ != null) {
        if (polygon_ == null) {
          Polygon = new global::jtshared.SerializableConvexPolygon();
        }
        Polygon.MergeFrom(other.Polygon);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (attr_ == null) {
              Attr = new global::jtshared.TriggerColliderAttr();
            }
            input.ReadMessage(Attr);
            break;
          }
          case 18: {
            if (polygon_ == null) {
              Polygon = new global::jtshared.SerializableConvexPolygon();
            }
            input.ReadMessage(Polygon);
            break;
          }
        }
      }
    }

  }

  public sealed partial class TrapColliderAttrArray : pb::IMessage<TrapColliderAttrArray> {
    private static readonly pb::MessageParser<TrapColliderAttrArray> _parser = new pb::MessageParser<TrapColliderAttrArray>(() => new TrapColliderAttrArray());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TrapColliderAttrArray> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::jtshared.SerializableDataReflection.Descriptor.MessageTypes[56]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TrapColliderAttrArray() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TrapColliderAttrArray(TrapColliderAttrArray other) : this() {
      list_ = other.list_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TrapColliderAttrArray Clone() {
      return new TrapColliderAttrArray(this);
    }

    /// <summary>Field number for the "list" field.</summary>
    public const int ListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::jtshared.TrapColliderAttr> _repeated_list_codec
        = pb::FieldCodec.ForMessage(10, global::jtshared.TrapColliderAttr.Parser);
    private readonly pbc::RepeatedField<global::jtshared.TrapColliderAttr> list_ = new pbc::RepeatedField<global::jtshared.TrapColliderAttr>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::jtshared.TrapColliderAttr> List {
      get { return list_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TrapColliderAttrArray);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TrapColliderAttrArray other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!list_.Equals(other.list_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= list_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      list_.WriteTo(output, _repeated_list_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += list_.CalculateSize(_repeated_list_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TrapColliderAttrArray other) {
      if (other == null) {
        return;
      }
      list_.Add(other.list_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            list_.AddEntriesFrom(input, _repeated_list_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class SerializedTrapLocalIdToColliderAttrs : pb::IMessage<SerializedTrapLocalIdToColliderAttrs> {
    private static readonly pb::MessageParser<SerializedTrapLocalIdToColliderAttrs> _parser = new pb::MessageParser<SerializedTrapLocalIdToColliderAttrs>(() => new SerializedTrapLocalIdToColliderAttrs());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SerializedTrapLocalIdToColliderAttrs> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::jtshared.SerializableDataReflection.Descriptor.MessageTypes[57]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SerializedTrapLocalIdToColliderAttrs() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SerializedTrapLocalIdToColliderAttrs(SerializedTrapLocalIdToColliderAttrs other) : this() {
      dict_ = other.dict_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SerializedTrapLocalIdToColliderAttrs Clone() {
      return new SerializedTrapLocalIdToColliderAttrs(this);
    }

    /// <summary>Field number for the "dict" field.</summary>
    public const int DictFieldNumber = 1;
    private static readonly pbc::MapField<int, global::jtshared.TrapColliderAttrArray>.Codec _map_dict_codec
        = new pbc::MapField<int, global::jtshared.TrapColliderAttrArray>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForMessage(18, global::jtshared.TrapColliderAttrArray.Parser), 10);
    private readonly pbc::MapField<int, global::jtshared.TrapColliderAttrArray> dict_ = new pbc::MapField<int, global::jtshared.TrapColliderAttrArray>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, global::jtshared.TrapColliderAttrArray> Dict {
      get { return dict_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SerializedTrapLocalIdToColliderAttrs);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SerializedTrapLocalIdToColliderAttrs other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!Dict.Equals(other.Dict)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= Dict.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      dict_.WriteTo(output, _map_dict_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += dict_.CalculateSize(_map_dict_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SerializedTrapLocalIdToColliderAttrs other) {
      if (other == null) {
        return;
      }
      dict_.Add(other.dict_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            dict_.AddEntriesFrom(input, _map_dict_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class SerializedTriggerEditorIdToLocalId : pb::IMessage<SerializedTriggerEditorIdToLocalId> {
    private static readonly pb::MessageParser<SerializedTriggerEditorIdToLocalId> _parser = new pb::MessageParser<SerializedTriggerEditorIdToLocalId>(() => new SerializedTriggerEditorIdToLocalId());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SerializedTriggerEditorIdToLocalId> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::jtshared.SerializableDataReflection.Descriptor.MessageTypes[58]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SerializedTriggerEditorIdToLocalId() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SerializedTriggerEditorIdToLocalId(SerializedTriggerEditorIdToLocalId other) : this() {
      dict_ = other.dict_.Clone();
      dict2_ = other.dict2_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SerializedTriggerEditorIdToLocalId Clone() {
      return new SerializedTriggerEditorIdToLocalId(this);
    }

    /// <summary>Field number for the "dict" field.</summary>
    public const int DictFieldNumber = 1;
    private static readonly pbc::MapField<int, int>.Codec _map_dict_codec
        = new pbc::MapField<int, int>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForInt32(16), 10);
    private readonly pbc::MapField<int, int> dict_ = new pbc::MapField<int, int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, int> Dict {
      get { return dict_; }
    }

    /// <summary>Field number for the "dict2" field.</summary>
    public const int Dict2FieldNumber = 2;
    private static readonly pbc::MapField<int, global::jtshared.TriggerConfigFromTiled>.Codec _map_dict2_codec
        = new pbc::MapField<int, global::jtshared.TriggerConfigFromTiled>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForMessage(18, global::jtshared.TriggerConfigFromTiled.Parser), 18);
    private readonly pbc::MapField<int, global::jtshared.TriggerConfigFromTiled> dict2_ = new pbc::MapField<int, global::jtshared.TriggerConfigFromTiled>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, global::jtshared.TriggerConfigFromTiled> Dict2 {
      get { return dict2_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SerializedTriggerEditorIdToLocalId);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SerializedTriggerEditorIdToLocalId other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!Dict.Equals(other.Dict)) return false;
      if (!Dict2.Equals(other.Dict2)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= Dict.GetHashCode();
      hash ^= Dict2.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      dict_.WriteTo(output, _map_dict_codec);
      dict2_.WriteTo(output, _map_dict2_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += dict_.CalculateSize(_map_dict_codec);
      size += dict2_.CalculateSize(_map_dict2_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SerializedTriggerEditorIdToLocalId other) {
      if (other == null) {
        return;
      }
      dict_.Add(other.dict_);
      dict2_.Add(other.dict2_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            dict_.AddEntriesFrom(input, _map_dict_codec);
            break;
          }
          case 18: {
            dict2_.AddEntriesFrom(input, _map_dict2_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class PickableConfigFromTiled : pb::IMessage<PickableConfigFromTiled> {
    private static readonly pb::MessageParser<PickableConfigFromTiled> _parser = new pb::MessageParser<PickableConfigFromTiled>(() => new PickableConfigFromTiled());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PickableConfigFromTiled> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::jtshared.SerializableDataReflection.Descriptor.MessageTypes[59]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PickableConfigFromTiled() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PickableConfigFromTiled(PickableConfigFromTiled other) : this() {
      initVirtualGridX_ = other.initVirtualGridX_;
      initVirtualGridY_ = other.initVirtualGridY_;
      takesGravity_ = other.takesGravity_;
      firstShowRdfId_ = other.firstShowRdfId_;
      recurQuota_ = other.recurQuota_;
      recurIntervalRdfCount_ = other.recurIntervalRdfCount_;
      lifetimeRdfCountPerOccurrence_ = other.lifetimeRdfCountPerOccurrence_;
      pickupType_ = other.pickupType_;
      stockQuotaPerOccurrence_ = other.stockQuotaPerOccurrence_;
      subscriptionId_ = other.subscriptionId_;
      vfxSpeciesId_ = other.vfxSpeciesId_;
      consumableSpeciesId_ = other.consumableSpeciesId_;
      buffSpeciesId_ = other.buffSpeciesId_;
      skillId_ = other.skillId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PickableConfigFromTiled Clone() {
      return new PickableConfigFromTiled(this);
    }

    /// <summary>Field number for the "init_virtual_grid_x" field.</summary>
    public const int InitVirtualGridXFieldNumber = 1;
    private int initVirtualGridX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int InitVirtualGridX {
      get { return initVirtualGridX_; }
      set {
        initVirtualGridX_ = value;
      }
    }

    /// <summary>Field number for the "init_virtual_grid_y" field.</summary>
    public const int InitVirtualGridYFieldNumber = 2;
    private int initVirtualGridY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int InitVirtualGridY {
      get { return initVirtualGridY_; }
      set {
        initVirtualGridY_ = value;
      }
    }

    /// <summary>Field number for the "takes_gravity" field.</summary>
    public const int TakesGravityFieldNumber = 3;
    private bool takesGravity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool TakesGravity {
      get { return takesGravity_; }
      set {
        takesGravity_ = value;
      }
    }

    /// <summary>Field number for the "first_show_rdf_id" field.</summary>
    public const int FirstShowRdfIdFieldNumber = 4;
    private int firstShowRdfId_;
    /// <summary>
    /// If "MAGIC_EVTSUB_ID_NONE != subscription_id", then this field represents the "first_show_rdf_id" after subscription_id is fulfilled
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FirstShowRdfId {
      get { return firstShowRdfId_; }
      set {
        firstShowRdfId_ = value;
      }
    }

    /// <summary>Field number for the "recur_quota" field.</summary>
    public const int RecurQuotaFieldNumber = 5;
    private int recurQuota_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RecurQuota {
      get { return recurQuota_; }
      set {
        recurQuota_ = value;
      }
    }

    /// <summary>Field number for the "recur_interval_rdf_count" field.</summary>
    public const int RecurIntervalRdfCountFieldNumber = 6;
    private uint recurIntervalRdfCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RecurIntervalRdfCount {
      get { return recurIntervalRdfCount_; }
      set {
        recurIntervalRdfCount_ = value;
      }
    }

    /// <summary>Field number for the "lifetime_rdf_count_per_occurrence" field.</summary>
    public const int LifetimeRdfCountPerOccurrenceFieldNumber = 7;
    private uint lifetimeRdfCountPerOccurrence_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint LifetimeRdfCountPerOccurrence {
      get { return lifetimeRdfCountPerOccurrence_; }
      set {
        lifetimeRdfCountPerOccurrence_ = value;
      }
    }

    /// <summary>Field number for the "pickup_type" field.</summary>
    public const int PickupTypeFieldNumber = 8;
    private global::jtshared.PickupType pickupType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::jtshared.PickupType PickupType {
      get { return pickupType_; }
      set {
        pickupType_ = value;
      }
    }

    /// <summary>Field number for the "stock_quota_per_occurrence" field.</summary>
    public const int StockQuotaPerOccurrenceFieldNumber = 9;
    private uint stockQuotaPerOccurrence_;
    /// <summary>
    /// Only meaningful when "pickup_type == PutIntoInventory"
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint StockQuotaPerOccurrence {
      get { return stockQuotaPerOccurrence_; }
      set {
        stockQuotaPerOccurrence_ = value;
      }
    }

    /// <summary>Field number for the "subscription_id" field.</summary>
    public const int SubscriptionIdFieldNumber = 10;
    private int subscriptionId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SubscriptionId {
      get { return subscriptionId_; }
      set {
        subscriptionId_ = value;
      }
    }

    /// <summary>Field number for the "vfx_species_id" field.</summary>
    public const int VfxSpeciesIdFieldNumber = 11;
    private int vfxSpeciesId_;
    /// <summary>
    /// Always use pixelated vfx
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int VfxSpeciesId {
      get { return vfxSpeciesId_; }
      set {
        vfxSpeciesId_ = value;
      }
    }

    /// <summary>Field number for the "consumable_species_id" field.</summary>
    public const int ConsumableSpeciesIdFieldNumber = 1024;
    private uint consumableSpeciesId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ConsumableSpeciesId {
      get { return consumableSpeciesId_; }
      set {
        consumableSpeciesId_ = value;
      }
    }

    /// <summary>Field number for the "buff_species_id" field.</summary>
    public const int BuffSpeciesIdFieldNumber = 1025;
    private uint buffSpeciesId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint BuffSpeciesId {
      get { return buffSpeciesId_; }
      set {
        buffSpeciesId_ = value;
      }
    }

    /// <summary>Field number for the "skill_id" field.</summary>
    public const int SkillIdFieldNumber = 1026;
    private uint skillId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SkillId {
      get { return skillId_; }
      set {
        skillId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PickableConfigFromTiled);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PickableConfigFromTiled other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (InitVirtualGridX != other.InitVirtualGridX) return false;
      if (InitVirtualGridY != other.InitVirtualGridY) return false;
      if (TakesGravity != other.TakesGravity) return false;
      if (FirstShowRdfId != other.FirstShowRdfId) return false;
      if (RecurQuota != other.RecurQuota) return false;
      if (RecurIntervalRdfCount != other.RecurIntervalRdfCount) return false;
      if (LifetimeRdfCountPerOccurrence != other.LifetimeRdfCountPerOccurrence) return false;
      if (PickupType != other.PickupType) return false;
      if (StockQuotaPerOccurrence != other.StockQuotaPerOccurrence) return false;
      if (SubscriptionId != other.SubscriptionId) return false;
      if (VfxSpeciesId != other.VfxSpeciesId) return false;
      if (ConsumableSpeciesId != other.ConsumableSpeciesId) return false;
      if (BuffSpeciesId != other.BuffSpeciesId) return false;
      if (SkillId != other.SkillId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (InitVirtualGridX != 0) hash ^= InitVirtualGridX.GetHashCode();
      if (InitVirtualGridY != 0) hash ^= InitVirtualGridY.GetHashCode();
      if (TakesGravity != false) hash ^= TakesGravity.GetHashCode();
      if (FirstShowRdfId != 0) hash ^= FirstShowRdfId.GetHashCode();
      if (RecurQuota != 0) hash ^= RecurQuota.GetHashCode();
      if (RecurIntervalRdfCount != 0) hash ^= RecurIntervalRdfCount.GetHashCode();
      if (LifetimeRdfCountPerOccurrence != 0) hash ^= LifetimeRdfCountPerOccurrence.GetHashCode();
      if (PickupType != 0) hash ^= PickupType.GetHashCode();
      if (StockQuotaPerOccurrence != 0) hash ^= StockQuotaPerOccurrence.GetHashCode();
      if (SubscriptionId != 0) hash ^= SubscriptionId.GetHashCode();
      if (VfxSpeciesId != 0) hash ^= VfxSpeciesId.GetHashCode();
      if (ConsumableSpeciesId != 0) hash ^= ConsumableSpeciesId.GetHashCode();
      if (BuffSpeciesId != 0) hash ^= BuffSpeciesId.GetHashCode();
      if (SkillId != 0) hash ^= SkillId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (InitVirtualGridX != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(InitVirtualGridX);
      }
      if (InitVirtualGridY != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(InitVirtualGridY);
      }
      if (TakesGravity != false) {
        output.WriteRawTag(24);
        output.WriteBool(TakesGravity);
      }
      if (FirstShowRdfId != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(FirstShowRdfId);
      }
      if (RecurQuota != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(RecurQuota);
      }
      if (RecurIntervalRdfCount != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(RecurIntervalRdfCount);
      }
      if (LifetimeRdfCountPerOccurrence != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(LifetimeRdfCountPerOccurrence);
      }
      if (PickupType != 0) {
        output.WriteRawTag(64);
        output.WriteEnum((int) PickupType);
      }
      if (StockQuotaPerOccurrence != 0) {
        output.WriteRawTag(72);
        output.WriteUInt32(StockQuotaPerOccurrence);
      }
      if (SubscriptionId != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(SubscriptionId);
      }
      if (VfxSpeciesId != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(VfxSpeciesId);
      }
      if (ConsumableSpeciesId != 0) {
        output.WriteRawTag(128, 64);
        output.WriteUInt32(ConsumableSpeciesId);
      }
      if (BuffSpeciesId != 0) {
        output.WriteRawTag(136, 64);
        output.WriteUInt32(BuffSpeciesId);
      }
      if (SkillId != 0) {
        output.WriteRawTag(144, 64);
        output.WriteUInt32(SkillId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (InitVirtualGridX != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(InitVirtualGridX);
      }
      if (InitVirtualGridY != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(InitVirtualGridY);
      }
      if (TakesGravity != false) {
        size += 1 + 1;
      }
      if (FirstShowRdfId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FirstShowRdfId);
      }
      if (RecurQuota != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RecurQuota);
      }
      if (RecurIntervalRdfCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RecurIntervalRdfCount);
      }
      if (LifetimeRdfCountPerOccurrence != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LifetimeRdfCountPerOccurrence);
      }
      if (PickupType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PickupType);
      }
      if (StockQuotaPerOccurrence != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(StockQuotaPerOccurrence);
      }
      if (SubscriptionId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SubscriptionId);
      }
      if (VfxSpeciesId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(VfxSpeciesId);
      }
      if (ConsumableSpeciesId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(ConsumableSpeciesId);
      }
      if (BuffSpeciesId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(BuffSpeciesId);
      }
      if (SkillId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(SkillId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PickableConfigFromTiled other) {
      if (other == null) {
        return;
      }
      if (other.InitVirtualGridX != 0) {
        InitVirtualGridX = other.InitVirtualGridX;
      }
      if (other.InitVirtualGridY != 0) {
        InitVirtualGridY = other.InitVirtualGridY;
      }
      if (other.TakesGravity != false) {
        TakesGravity = other.TakesGravity;
      }
      if (other.FirstShowRdfId != 0) {
        FirstShowRdfId = other.FirstShowRdfId;
      }
      if (other.RecurQuota != 0) {
        RecurQuota = other.RecurQuota;
      }
      if (other.RecurIntervalRdfCount != 0) {
        RecurIntervalRdfCount = other.RecurIntervalRdfCount;
      }
      if (other.LifetimeRdfCountPerOccurrence != 0) {
        LifetimeRdfCountPerOccurrence = other.LifetimeRdfCountPerOccurrence;
      }
      if (other.PickupType != 0) {
        PickupType = other.PickupType;
      }
      if (other.StockQuotaPerOccurrence != 0) {
        StockQuotaPerOccurrence = other.StockQuotaPerOccurrence;
      }
      if (other.SubscriptionId != 0) {
        SubscriptionId = other.SubscriptionId;
      }
      if (other.VfxSpeciesId != 0) {
        VfxSpeciesId = other.VfxSpeciesId;
      }
      if (other.ConsumableSpeciesId != 0) {
        ConsumableSpeciesId = other.ConsumableSpeciesId;
      }
      if (other.BuffSpeciesId != 0) {
        BuffSpeciesId = other.BuffSpeciesId;
      }
      if (other.SkillId != 0) {
        SkillId = other.SkillId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            InitVirtualGridX = input.ReadInt32();
            break;
          }
          case 16: {
            InitVirtualGridY = input.ReadInt32();
            break;
          }
          case 24: {
            TakesGravity = input.ReadBool();
            break;
          }
          case 32: {
            FirstShowRdfId = input.ReadInt32();
            break;
          }
          case 40: {
            RecurQuota = input.ReadInt32();
            break;
          }
          case 48: {
            RecurIntervalRdfCount = input.ReadUInt32();
            break;
          }
          case 56: {
            LifetimeRdfCountPerOccurrence = input.ReadUInt32();
            break;
          }
          case 64: {
            PickupType = (global::jtshared.PickupType) input.ReadEnum();
            break;
          }
          case 72: {
            StockQuotaPerOccurrence = input.ReadUInt32();
            break;
          }
          case 80: {
            SubscriptionId = input.ReadInt32();
            break;
          }
          case 88: {
            VfxSpeciesId = input.ReadInt32();
            break;
          }
          case 8192: {
            ConsumableSpeciesId = input.ReadUInt32();
            break;
          }
          case 8200: {
            BuffSpeciesId = input.ReadUInt32();
            break;
          }
          case 8208: {
            SkillId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Pickable : pb::IMessage<Pickable> {
    private static readonly pb::MessageParser<Pickable> _parser = new pb::MessageParser<Pickable>(() => new Pickable());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Pickable> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::jtshared.SerializableDataReflection.Descriptor.MessageTypes[60]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Pickable() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Pickable(Pickable other) : this() {
      id_ = other.id_;
      x_ = other.x_;
      y_ = other.y_;
      configFromTiled_ = other.configFromTiled_ != null ? other.configFromTiled_.Clone() : null;
      remainingLifetimeRdfCount_ = other.remainingLifetimeRdfCount_;
      remainingRecurQuota_ = other.remainingRecurQuota_;
      velX_ = other.velX_;
      velY_ = other.velY_;
      pkState_ = other.pkState_;
      framesInPkState_ = other.framesInPkState_;
      pickerUd_ = other.pickerUd_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Pickable Clone() {
      return new Pickable(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private uint id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "x" field.</summary>
    public const int XFieldNumber = 2;
    private float x_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "y" field.</summary>
    public const int YFieldNumber = 3;
    private float y_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    /// <summary>Field number for the "config_from_tiled" field.</summary>
    public const int ConfigFromTiledFieldNumber = 4;
    private global::jtshared.PickableConfigFromTiled configFromTiled_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::jtshared.PickableConfigFromTiled ConfigFromTiled {
      get { return configFromTiled_; }
      set {
        configFromTiled_ = value;
      }
    }

    /// <summary>Field number for the "remaining_lifetime_rdf_count" field.</summary>
    public const int RemainingLifetimeRdfCountFieldNumber = 5;
    private int remainingLifetimeRdfCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RemainingLifetimeRdfCount {
      get { return remainingLifetimeRdfCount_; }
      set {
        remainingLifetimeRdfCount_ = value;
      }
    }

    /// <summary>Field number for the "remaining_recur_quota" field.</summary>
    public const int RemainingRecurQuotaFieldNumber = 6;
    private int remainingRecurQuota_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RemainingRecurQuota {
      get { return remainingRecurQuota_; }
      set {
        remainingRecurQuota_ = value;
      }
    }

    /// <summary>Field number for the "vel_x" field.</summary>
    public const int VelXFieldNumber = 7;
    private float velX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float VelX {
      get { return velX_; }
      set {
        velX_ = value;
      }
    }

    /// <summary>Field number for the "vel_y" field.</summary>
    public const int VelYFieldNumber = 8;
    private float velY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float VelY {
      get { return velY_; }
      set {
        velY_ = value;
      }
    }

    /// <summary>Field number for the "pk_state" field.</summary>
    public const int PkStateFieldNumber = 9;
    private global::jtshared.PickableState pkState_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::jtshared.PickableState PkState {
      get { return pkState_; }
      set {
        pkState_ = value;
      }
    }

    /// <summary>Field number for the "frames_in_pk_state" field.</summary>
    public const int FramesInPkStateFieldNumber = 10;
    private int framesInPkState_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FramesInPkState {
      get { return framesInPkState_; }
      set {
        framesInPkState_ = value;
      }
    }

    /// <summary>Field number for the "picker_ud" field.</summary>
    public const int PickerUdFieldNumber = 11;
    private ulong pickerUd_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong PickerUd {
      get { return pickerUd_; }
      set {
        pickerUd_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Pickable);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Pickable other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(X, other.X)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Y, other.Y)) return false;
      if (!object.Equals(ConfigFromTiled, other.ConfigFromTiled)) return false;
      if (RemainingLifetimeRdfCount != other.RemainingLifetimeRdfCount) return false;
      if (RemainingRecurQuota != other.RemainingRecurQuota) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(VelX, other.VelX)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(VelY, other.VelY)) return false;
      if (PkState != other.PkState) return false;
      if (FramesInPkState != other.FramesInPkState) return false;
      if (PickerUd != other.PickerUd) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (X != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(X);
      if (Y != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Y);
      if (configFromTiled_ != null) hash ^= ConfigFromTiled.GetHashCode();
      if (RemainingLifetimeRdfCount != 0) hash ^= RemainingLifetimeRdfCount.GetHashCode();
      if (RemainingRecurQuota != 0) hash ^= RemainingRecurQuota.GetHashCode();
      if (VelX != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(VelX);
      if (VelY != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(VelY);
      if (PkState != 0) hash ^= PkState.GetHashCode();
      if (FramesInPkState != 0) hash ^= FramesInPkState.GetHashCode();
      if (PickerUd != 0UL) hash ^= PickerUd.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Id);
      }
      if (X != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(X);
      }
      if (Y != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Y);
      }
      if (configFromTiled_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(ConfigFromTiled);
      }
      if (RemainingLifetimeRdfCount != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(RemainingLifetimeRdfCount);
      }
      if (RemainingRecurQuota != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(RemainingRecurQuota);
      }
      if (VelX != 0F) {
        output.WriteRawTag(61);
        output.WriteFloat(VelX);
      }
      if (VelY != 0F) {
        output.WriteRawTag(69);
        output.WriteFloat(VelY);
      }
      if (PkState != 0) {
        output.WriteRawTag(72);
        output.WriteEnum((int) PkState);
      }
      if (FramesInPkState != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(FramesInPkState);
      }
      if (PickerUd != 0UL) {
        output.WriteRawTag(88);
        output.WriteUInt64(PickerUd);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
      }
      if (X != 0F) {
        size += 1 + 4;
      }
      if (Y != 0F) {
        size += 1 + 4;
      }
      if (configFromTiled_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ConfigFromTiled);
      }
      if (RemainingLifetimeRdfCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RemainingLifetimeRdfCount);
      }
      if (RemainingRecurQuota != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RemainingRecurQuota);
      }
      if (VelX != 0F) {
        size += 1 + 4;
      }
      if (VelY != 0F) {
        size += 1 + 4;
      }
      if (PkState != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PkState);
      }
      if (FramesInPkState != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FramesInPkState);
      }
      if (PickerUd != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(PickerUd);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Pickable other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.X != 0F) {
        X = other.X;
      }
      if (other.Y != 0F) {
        Y = other.Y;
      }
      if (other.configFromTiled_ != null) {
        if (configFromTiled_ == null) {
          ConfigFromTiled = new global::jtshared.PickableConfigFromTiled();
        }
        ConfigFromTiled.MergeFrom(other.ConfigFromTiled);
      }
      if (other.RemainingLifetimeRdfCount != 0) {
        RemainingLifetimeRdfCount = other.RemainingLifetimeRdfCount;
      }
      if (other.RemainingRecurQuota != 0) {
        RemainingRecurQuota = other.RemainingRecurQuota;
      }
      if (other.VelX != 0F) {
        VelX = other.VelX;
      }
      if (other.VelY != 0F) {
        VelY = other.VelY;
      }
      if (other.PkState != 0) {
        PkState = other.PkState;
      }
      if (other.FramesInPkState != 0) {
        FramesInPkState = other.FramesInPkState;
      }
      if (other.PickerUd != 0UL) {
        PickerUd = other.PickerUd;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadUInt32();
            break;
          }
          case 21: {
            X = input.ReadFloat();
            break;
          }
          case 29: {
            Y = input.ReadFloat();
            break;
          }
          case 34: {
            if (configFromTiled_ == null) {
              ConfigFromTiled = new global::jtshared.PickableConfigFromTiled();
            }
            input.ReadMessage(ConfigFromTiled);
            break;
          }
          case 40: {
            RemainingLifetimeRdfCount = input.ReadInt32();
            break;
          }
          case 48: {
            RemainingRecurQuota = input.ReadInt32();
            break;
          }
          case 61: {
            VelX = input.ReadFloat();
            break;
          }
          case 69: {
            VelY = input.ReadFloat();
            break;
          }
          case 72: {
            PkState = (global::jtshared.PickableState) input.ReadEnum();
            break;
          }
          case 80: {
            FramesInPkState = input.ReadInt32();
            break;
          }
          case 88: {
            PickerUd = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class InjectedCmdConfig : pb::IMessage<InjectedCmdConfig> {
    private static readonly pb::MessageParser<InjectedCmdConfig> _parser = new pb::MessageParser<InjectedCmdConfig>(() => new InjectedCmdConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InjectedCmdConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::jtshared.SerializableDataReflection.Descriptor.MessageTypes[61]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InjectedCmdConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InjectedCmdConfig(InjectedCmdConfig other) : this() {
      cutoffRdfId_ = other.cutoffRdfId_;
      op_ = other.op_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InjectedCmdConfig Clone() {
      return new InjectedCmdConfig(this);
    }

    /// <summary>Field number for the "cutoff_rdf_id" field.</summary>
    public const int CutoffRdfIdFieldNumber = 1;
    private int cutoffRdfId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CutoffRdfId {
      get { return cutoffRdfId_; }
      set {
        cutoffRdfId_ = value;
      }
    }

    /// <summary>Field number for the "op" field.</summary>
    public const int OpFieldNumber = 2;
    private ulong op_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Op {
      get { return op_; }
      set {
        op_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as InjectedCmdConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(InjectedCmdConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CutoffRdfId != other.CutoffRdfId) return false;
      if (Op != other.Op) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CutoffRdfId != 0) hash ^= CutoffRdfId.GetHashCode();
      if (Op != 0UL) hash ^= Op.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CutoffRdfId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(CutoffRdfId);
      }
      if (Op != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(Op);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CutoffRdfId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CutoffRdfId);
      }
      if (Op != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Op);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(InjectedCmdConfig other) {
      if (other == null) {
        return;
      }
      if (other.CutoffRdfId != 0) {
        CutoffRdfId = other.CutoffRdfId;
      }
      if (other.Op != 0UL) {
        Op = other.Op;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            CutoffRdfId = input.ReadInt32();
            break;
          }
          case 16: {
            Op = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CharacterSpawnerConfig : pb::IMessage<CharacterSpawnerConfig> {
    private static readonly pb::MessageParser<CharacterSpawnerConfig> _parser = new pb::MessageParser<CharacterSpawnerConfig>(() => new CharacterSpawnerConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CharacterSpawnerConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::jtshared.SerializableDataReflection.Descriptor.MessageTypes[62]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CharacterSpawnerConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CharacterSpawnerConfig(CharacterSpawnerConfig other) : this() {
      cutoffRdfId_ = other.cutoffRdfId_;
      speciesIdList_ = other.speciesIdList_.Clone();
      initOpList_ = other.initOpList_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CharacterSpawnerConfig Clone() {
      return new CharacterSpawnerConfig(this);
    }

    /// <summary>Field number for the "cutoff_rdf_id" field.</summary>
    public const int CutoffRdfIdFieldNumber = 1;
    private int cutoffRdfId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CutoffRdfId {
      get { return cutoffRdfId_; }
      set {
        cutoffRdfId_ = value;
      }
    }

    /// <summary>Field number for the "species_id_list" field.</summary>
    public const int SpeciesIdListFieldNumber = 2;
    private static readonly pb::FieldCodec<uint> _repeated_speciesIdList_codec
        = pb::FieldCodec.ForUInt32(18);
    private readonly pbc::RepeatedField<uint> speciesIdList_ = new pbc::RepeatedField<uint>();
    /// <summary>
    /// the k-th subcycle tick corresponds to species_id_list[k]   
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> SpeciesIdList {
      get { return speciesIdList_; }
    }

    /// <summary>Field number for the "init_op_list" field.</summary>
    public const int InitOpListFieldNumber = 3;
    private static readonly pb::FieldCodec<ulong> _repeated_initOpList_codec
        = pb::FieldCodec.ForUInt64(26);
    private readonly pbc::RepeatedField<ulong> initOpList_ = new pbc::RepeatedField<ulong>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<ulong> InitOpList {
      get { return initOpList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CharacterSpawnerConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CharacterSpawnerConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CutoffRdfId != other.CutoffRdfId) return false;
      if(!speciesIdList_.Equals(other.speciesIdList_)) return false;
      if(!initOpList_.Equals(other.initOpList_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CutoffRdfId != 0) hash ^= CutoffRdfId.GetHashCode();
      hash ^= speciesIdList_.GetHashCode();
      hash ^= initOpList_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CutoffRdfId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(CutoffRdfId);
      }
      speciesIdList_.WriteTo(output, _repeated_speciesIdList_codec);
      initOpList_.WriteTo(output, _repeated_initOpList_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CutoffRdfId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CutoffRdfId);
      }
      size += speciesIdList_.CalculateSize(_repeated_speciesIdList_codec);
      size += initOpList_.CalculateSize(_repeated_initOpList_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CharacterSpawnerConfig other) {
      if (other == null) {
        return;
      }
      if (other.CutoffRdfId != 0) {
        CutoffRdfId = other.CutoffRdfId;
      }
      speciesIdList_.Add(other.speciesIdList_);
      initOpList_.Add(other.initOpList_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            CutoffRdfId = input.ReadInt32();
            break;
          }
          case 18:
          case 16: {
            speciesIdList_.AddEntriesFrom(input, _repeated_speciesIdList_codec);
            break;
          }
          case 26:
          case 24: {
            initOpList_.AddEntriesFrom(input, _repeated_initOpList_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class PickableSpawnerConfig : pb::IMessage<PickableSpawnerConfig> {
    private static readonly pb::MessageParser<PickableSpawnerConfig> _parser = new pb::MessageParser<PickableSpawnerConfig>(() => new PickableSpawnerConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PickableSpawnerConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::jtshared.SerializableDataReflection.Descriptor.MessageTypes[63]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PickableSpawnerConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PickableSpawnerConfig(PickableSpawnerConfig other) : this() {
      cutoffRdfId_ = other.cutoffRdfId_;
      speciesIdList_ = other.speciesIdList_.Clone();
      initOpList_ = other.initOpList_.Clone();
      pickupTypeList_ = other.pickupTypeList_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PickableSpawnerConfig Clone() {
      return new PickableSpawnerConfig(this);
    }

    /// <summary>Field number for the "cutoff_rdf_id" field.</summary>
    public const int CutoffRdfIdFieldNumber = 1;
    private int cutoffRdfId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CutoffRdfId {
      get { return cutoffRdfId_; }
      set {
        cutoffRdfId_ = value;
      }
    }

    /// <summary>Field number for the "species_id_list" field.</summary>
    public const int SpeciesIdListFieldNumber = 2;
    private static readonly pb::FieldCodec<uint> _repeated_speciesIdList_codec
        = pb::FieldCodec.ForUInt32(18);
    private readonly pbc::RepeatedField<uint> speciesIdList_ = new pbc::RepeatedField<uint>();
    /// <summary>
    /// the k-th subcycle tick corresponds to species_id_list[k]   
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> SpeciesIdList {
      get { return speciesIdList_; }
    }

    /// <summary>Field number for the "init_op_list" field.</summary>
    public const int InitOpListFieldNumber = 3;
    private static readonly pb::FieldCodec<ulong> _repeated_initOpList_codec
        = pb::FieldCodec.ForUInt64(26);
    private readonly pbc::RepeatedField<ulong> initOpList_ = new pbc::RepeatedField<ulong>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<ulong> InitOpList {
      get { return initOpList_; }
    }

    /// <summary>Field number for the "pickup_type_list" field.</summary>
    public const int PickupTypeListFieldNumber = 4;
    private static readonly pb::FieldCodec<global::jtshared.PickupType> _repeated_pickupTypeList_codec
        = pb::FieldCodec.ForEnum(34, x => (int) x, x => (global::jtshared.PickupType) x);
    private readonly pbc::RepeatedField<global::jtshared.PickupType> pickupTypeList_ = new pbc::RepeatedField<global::jtshared.PickupType>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::jtshared.PickupType> PickupTypeList {
      get { return pickupTypeList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PickableSpawnerConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PickableSpawnerConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CutoffRdfId != other.CutoffRdfId) return false;
      if(!speciesIdList_.Equals(other.speciesIdList_)) return false;
      if(!initOpList_.Equals(other.initOpList_)) return false;
      if(!pickupTypeList_.Equals(other.pickupTypeList_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CutoffRdfId != 0) hash ^= CutoffRdfId.GetHashCode();
      hash ^= speciesIdList_.GetHashCode();
      hash ^= initOpList_.GetHashCode();
      hash ^= pickupTypeList_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CutoffRdfId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(CutoffRdfId);
      }
      speciesIdList_.WriteTo(output, _repeated_speciesIdList_codec);
      initOpList_.WriteTo(output, _repeated_initOpList_codec);
      pickupTypeList_.WriteTo(output, _repeated_pickupTypeList_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CutoffRdfId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CutoffRdfId);
      }
      size += speciesIdList_.CalculateSize(_repeated_speciesIdList_codec);
      size += initOpList_.CalculateSize(_repeated_initOpList_codec);
      size += pickupTypeList_.CalculateSize(_repeated_pickupTypeList_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PickableSpawnerConfig other) {
      if (other == null) {
        return;
      }
      if (other.CutoffRdfId != 0) {
        CutoffRdfId = other.CutoffRdfId;
      }
      speciesIdList_.Add(other.speciesIdList_);
      initOpList_.Add(other.initOpList_);
      pickupTypeList_.Add(other.pickupTypeList_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            CutoffRdfId = input.ReadInt32();
            break;
          }
          case 18:
          case 16: {
            speciesIdList_.AddEntriesFrom(input, _repeated_speciesIdList_codec);
            break;
          }
          case 26:
          case 24: {
            initOpList_.AddEntriesFrom(input, _repeated_initOpList_codec);
            break;
          }
          case 34:
          case 32: {
            pickupTypeList_.AddEntriesFrom(input, _repeated_pickupTypeList_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class TriggerColliderAttr : pb::IMessage<TriggerColliderAttr> {
    private static readonly pb::MessageParser<TriggerColliderAttr> _parser = new pb::MessageParser<TriggerColliderAttr>(() => new TriggerColliderAttr());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TriggerColliderAttr> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::jtshared.SerializableDataReflection.Descriptor.MessageTypes[64]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TriggerColliderAttr() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TriggerColliderAttr(TriggerColliderAttr other) : this() {
      id_ = other.id_;
      speciesId_ = other.speciesId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TriggerColliderAttr Clone() {
      return new TriggerColliderAttr(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "species_id" field.</summary>
    public const int SpeciesIdFieldNumber = 2;
    private int speciesId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SpeciesId {
      get { return speciesId_; }
      set {
        speciesId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TriggerColliderAttr);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TriggerColliderAttr other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (SpeciesId != other.SpeciesId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (SpeciesId != 0) hash ^= SpeciesId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (SpeciesId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(SpeciesId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (SpeciesId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SpeciesId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TriggerColliderAttr other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.SpeciesId != 0) {
        SpeciesId = other.SpeciesId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            SpeciesId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class TriggerConfigFromTiled : pb::IMessage<TriggerConfigFromTiled> {
    private static readonly pb::MessageParser<TriggerConfigFromTiled> _parser = new pb::MessageParser<TriggerConfigFromTiled>(() => new TriggerConfigFromTiled());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TriggerConfigFromTiled> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::jtshared.SerializableDataReflection.Descriptor.MessageTypes[65]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TriggerConfigFromTiled() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TriggerConfigFromTiled(TriggerConfigFromTiled other) : this() {
      editorId_ = other.editorId_;
      speciesId_ = other.speciesId_;
      delayedFrames_ = other.delayedFrames_;
      recoveryFrames_ = other.recoveryFrames_;
      bulletTeamId_ = other.bulletTeamId_;
      subCycleTriggerFrames_ = other.subCycleTriggerFrames_;
      subCycleQuota_ = other.subCycleQuota_;
      quotaCap_ = other.quotaCap_;
      subscribesToIdList_ = other.subscribesToIdList_.Clone();
      subscribesToExhaustedIdList_ = other.subscribesToExhaustedIdList_.Clone();
      newRevivalX_ = other.newRevivalX_;
      newRevivalY_ = other.newRevivalY_;
      initDirX_ = other.initDirX_;
      initDirY_ = other.initDirY_;
      publishingEvtMaskUponExhausted_ = other.publishingEvtMaskUponExhausted_;
      characterSpawnerTimeSeq_ = other.characterSpawnerTimeSeq_.Clone();
      pickableSpawnerTimeSeq_ = other.pickableSpawnerTimeSeq_.Clone();
      forceCtrlRdfCount_ = other.forceCtrlRdfCount_;
      forceCtrlCmd_ = other.forceCtrlCmd_;
      reloadCollidersInNewPhase_ = other.reloadCollidersInNewPhase_;
      storyPointId_ = other.storyPointId_;
      bgmId_ = other.bgmId_;
      bossSpeciesSet_ = other.bossSpeciesSet_.Clone();
      isBossSavepoint_ = other.isBossSavepoint_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TriggerConfigFromTiled Clone() {
      return new TriggerConfigFromTiled(this);
    }

    /// <summary>Field number for the "editor_id" field.</summary>
    public const int EditorIdFieldNumber = 1;
    private int editorId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EditorId {
      get { return editorId_; }
      set {
        editorId_ = value;
      }
    }

    /// <summary>Field number for the "species_id" field.</summary>
    public const int SpeciesIdFieldNumber = 2;
    private int speciesId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SpeciesId {
      get { return speciesId_; }
      set {
        speciesId_ = value;
      }
    }

    /// <summary>Field number for the "delayed_frames" field.</summary>
    public const int DelayedFramesFieldNumber = 3;
    private int delayedFrames_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DelayedFrames {
      get { return delayedFrames_; }
      set {
        delayedFrames_ = value;
      }
    }

    /// <summary>Field number for the "recovery_frames" field.</summary>
    public const int RecoveryFramesFieldNumber = 4;
    private int recoveryFrames_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RecoveryFrames {
      get { return recoveryFrames_; }
      set {
        recoveryFrames_ = value;
      }
    }

    /// <summary>Field number for the "bullet_team_id" field.</summary>
    public const int BulletTeamIdFieldNumber = 5;
    private int bulletTeamId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BulletTeamId {
      get { return bulletTeamId_; }
      set {
        bulletTeamId_ = value;
      }
    }

    /// <summary>Field number for the "sub_cycle_trigger_frames" field.</summary>
    public const int SubCycleTriggerFramesFieldNumber = 6;
    private int subCycleTriggerFrames_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SubCycleTriggerFrames {
      get { return subCycleTriggerFrames_; }
      set {
        subCycleTriggerFrames_ = value;
      }
    }

    /// <summary>Field number for the "sub_cycle_quota" field.</summary>
    public const int SubCycleQuotaFieldNumber = 7;
    private int subCycleQuota_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SubCycleQuota {
      get { return subCycleQuota_; }
      set {
        subCycleQuota_ = value;
      }
    }

    /// <summary>Field number for the "quota_cap" field.</summary>
    public const int QuotaCapFieldNumber = 8;
    private int quotaCap_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int QuotaCap {
      get { return quotaCap_; }
      set {
        quotaCap_ = value;
      }
    }

    /// <summary>Field number for the "subscribes_to_id_list" field.</summary>
    public const int SubscribesToIdListFieldNumber = 9;
    private static readonly pb::FieldCodec<int> _repeated_subscribesToIdList_codec
        = pb::FieldCodec.ForInt32(74);
    private readonly pbc::RepeatedField<int> subscribesToIdList_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> SubscribesToIdList {
      get { return subscribesToIdList_; }
    }

    /// <summary>Field number for the "subscribes_to_exhausted_id_list" field.</summary>
    public const int SubscribesToExhaustedIdListFieldNumber = 10;
    private static readonly pb::FieldCodec<int> _repeated_subscribesToExhaustedIdList_codec
        = pb::FieldCodec.ForInt32(82);
    private readonly pbc::RepeatedField<int> subscribesToExhaustedIdList_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> SubscribesToExhaustedIdList {
      get { return subscribesToExhaustedIdList_; }
    }

    /// <summary>Field number for the "new_revival_x" field.</summary>
    public const int NewRevivalXFieldNumber = 11;
    private float newRevivalX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float NewRevivalX {
      get { return newRevivalX_; }
      set {
        newRevivalX_ = value;
      }
    }

    /// <summary>Field number for the "new_revival_y" field.</summary>
    public const int NewRevivalYFieldNumber = 12;
    private float newRevivalY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float NewRevivalY {
      get { return newRevivalY_; }
      set {
        newRevivalY_ = value;
      }
    }

    /// <summary>Field number for the "init_dir_x" field.</summary>
    public const int InitDirXFieldNumber = 13;
    private int initDirX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int InitDirX {
      get { return initDirX_; }
      set {
        initDirX_ = value;
      }
    }

    /// <summary>Field number for the "init_dir_y" field.</summary>
    public const int InitDirYFieldNumber = 14;
    private int initDirY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int InitDirY {
      get { return initDirY_; }
      set {
        initDirY_ = value;
      }
    }

    /// <summary>Field number for the "publishing_evt_mask_upon_exhausted" field.</summary>
    public const int PublishingEvtMaskUponExhaustedFieldNumber = 15;
    private ulong publishingEvtMaskUponExhausted_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong PublishingEvtMaskUponExhausted {
      get { return publishingEvtMaskUponExhausted_; }
      set {
        publishingEvtMaskUponExhausted_ = value;
      }
    }

    /// <summary>Field number for the "character_spawner_time_seq" field.</summary>
    public const int CharacterSpawnerTimeSeqFieldNumber = 16;
    private static readonly pb::FieldCodec<global::jtshared.CharacterSpawnerConfig> _repeated_characterSpawnerTimeSeq_codec
        = pb::FieldCodec.ForMessage(130, global::jtshared.CharacterSpawnerConfig.Parser);
    private readonly pbc::RepeatedField<global::jtshared.CharacterSpawnerConfig> characterSpawnerTimeSeq_ = new pbc::RepeatedField<global::jtshared.CharacterSpawnerConfig>();
    /// <summary>
    /// MUST Be configured by increasing "cutoff_rdf_id"!
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::jtshared.CharacterSpawnerConfig> CharacterSpawnerTimeSeq {
      get { return characterSpawnerTimeSeq_; }
    }

    /// <summary>Field number for the "pickable_spawner_time_seq" field.</summary>
    public const int PickableSpawnerTimeSeqFieldNumber = 17;
    private static readonly pb::FieldCodec<global::jtshared.PickableSpawnerConfig> _repeated_pickableSpawnerTimeSeq_codec
        = pb::FieldCodec.ForMessage(138, global::jtshared.PickableSpawnerConfig.Parser);
    private readonly pbc::RepeatedField<global::jtshared.PickableSpawnerConfig> pickableSpawnerTimeSeq_ = new pbc::RepeatedField<global::jtshared.PickableSpawnerConfig>();
    /// <summary>
    /// MUST Be configured by increasing "cutoff_rdf_id"!
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::jtshared.PickableSpawnerConfig> PickableSpawnerTimeSeq {
      get { return pickableSpawnerTimeSeq_; }
    }

    /// <summary>Field number for the "force_ctrl_rdf_count" field.</summary>
    public const int ForceCtrlRdfCountFieldNumber = 18;
    private int forceCtrlRdfCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ForceCtrlRdfCount {
      get { return forceCtrlRdfCount_; }
      set {
        forceCtrlRdfCount_ = value;
      }
    }

    /// <summary>Field number for the "force_ctrl_cmd" field.</summary>
    public const int ForceCtrlCmdFieldNumber = 19;
    private ulong forceCtrlCmd_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ForceCtrlCmd {
      get { return forceCtrlCmd_; }
      set {
        forceCtrlCmd_ = value;
      }
    }

    /// <summary>Field number for the "reload_colliders_in_new_phase" field.</summary>
    public const int ReloadCollidersInNewPhaseFieldNumber = 20;
    private bool reloadCollidersInNewPhase_;
    /// <summary>
    /// When set to "true", will (a.) remove all NPCs activated before current rdf_id (b.) remove all traps/pickables/barriers whose collision boxes not fully contained in this trigger's box
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ReloadCollidersInNewPhase {
      get { return reloadCollidersInNewPhase_; }
      set {
        reloadCollidersInNewPhase_ = value;
      }
    }

    /// <summary>Field number for the "story_point_id" field.</summary>
    public const int StoryPointIdFieldNumber = 1024;
    private int storyPointId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StoryPointId {
      get { return storyPointId_; }
      set {
        storyPointId_ = value;
      }
    }

    /// <summary>Field number for the "bgm_id" field.</summary>
    public const int BgmIdFieldNumber = 1025;
    private int bgmId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BgmId {
      get { return bgmId_; }
      set {
        bgmId_ = value;
      }
    }

    /// <summary>Field number for the "boss_species_set" field.</summary>
    public const int BossSpeciesSetFieldNumber = 1026;
    private static readonly pbc::MapField<uint, bool>.Codec _map_bossSpeciesSet_codec
        = new pbc::MapField<uint, bool>.Codec(pb::FieldCodec.ForUInt32(8), pb::FieldCodec.ForBool(16), 8210);
    private readonly pbc::MapField<uint, bool> bossSpeciesSet_ = new pbc::MapField<uint, bool>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<uint, bool> BossSpeciesSet {
      get { return bossSpeciesSet_; }
    }

    /// <summary>Field number for the "is_boss_savepoint" field.</summary>
    public const int IsBossSavepointFieldNumber = 1027;
    private bool isBossSavepoint_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsBossSavepoint {
      get { return isBossSavepoint_; }
      set {
        isBossSavepoint_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TriggerConfigFromTiled);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TriggerConfigFromTiled other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (EditorId != other.EditorId) return false;
      if (SpeciesId != other.SpeciesId) return false;
      if (DelayedFrames != other.DelayedFrames) return false;
      if (RecoveryFrames != other.RecoveryFrames) return false;
      if (BulletTeamId != other.BulletTeamId) return false;
      if (SubCycleTriggerFrames != other.SubCycleTriggerFrames) return false;
      if (SubCycleQuota != other.SubCycleQuota) return false;
      if (QuotaCap != other.QuotaCap) return false;
      if(!subscribesToIdList_.Equals(other.subscribesToIdList_)) return false;
      if(!subscribesToExhaustedIdList_.Equals(other.subscribesToExhaustedIdList_)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(NewRevivalX, other.NewRevivalX)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(NewRevivalY, other.NewRevivalY)) return false;
      if (InitDirX != other.InitDirX) return false;
      if (InitDirY != other.InitDirY) return false;
      if (PublishingEvtMaskUponExhausted != other.PublishingEvtMaskUponExhausted) return false;
      if(!characterSpawnerTimeSeq_.Equals(other.characterSpawnerTimeSeq_)) return false;
      if(!pickableSpawnerTimeSeq_.Equals(other.pickableSpawnerTimeSeq_)) return false;
      if (ForceCtrlRdfCount != other.ForceCtrlRdfCount) return false;
      if (ForceCtrlCmd != other.ForceCtrlCmd) return false;
      if (ReloadCollidersInNewPhase != other.ReloadCollidersInNewPhase) return false;
      if (StoryPointId != other.StoryPointId) return false;
      if (BgmId != other.BgmId) return false;
      if (!BossSpeciesSet.Equals(other.BossSpeciesSet)) return false;
      if (IsBossSavepoint != other.IsBossSavepoint) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (EditorId != 0) hash ^= EditorId.GetHashCode();
      if (SpeciesId != 0) hash ^= SpeciesId.GetHashCode();
      if (DelayedFrames != 0) hash ^= DelayedFrames.GetHashCode();
      if (RecoveryFrames != 0) hash ^= RecoveryFrames.GetHashCode();
      if (BulletTeamId != 0) hash ^= BulletTeamId.GetHashCode();
      if (SubCycleTriggerFrames != 0) hash ^= SubCycleTriggerFrames.GetHashCode();
      if (SubCycleQuota != 0) hash ^= SubCycleQuota.GetHashCode();
      if (QuotaCap != 0) hash ^= QuotaCap.GetHashCode();
      hash ^= subscribesToIdList_.GetHashCode();
      hash ^= subscribesToExhaustedIdList_.GetHashCode();
      if (NewRevivalX != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(NewRevivalX);
      if (NewRevivalY != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(NewRevivalY);
      if (InitDirX != 0) hash ^= InitDirX.GetHashCode();
      if (InitDirY != 0) hash ^= InitDirY.GetHashCode();
      if (PublishingEvtMaskUponExhausted != 0UL) hash ^= PublishingEvtMaskUponExhausted.GetHashCode();
      hash ^= characterSpawnerTimeSeq_.GetHashCode();
      hash ^= pickableSpawnerTimeSeq_.GetHashCode();
      if (ForceCtrlRdfCount != 0) hash ^= ForceCtrlRdfCount.GetHashCode();
      if (ForceCtrlCmd != 0UL) hash ^= ForceCtrlCmd.GetHashCode();
      if (ReloadCollidersInNewPhase != false) hash ^= ReloadCollidersInNewPhase.GetHashCode();
      if (StoryPointId != 0) hash ^= StoryPointId.GetHashCode();
      if (BgmId != 0) hash ^= BgmId.GetHashCode();
      hash ^= BossSpeciesSet.GetHashCode();
      if (IsBossSavepoint != false) hash ^= IsBossSavepoint.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (EditorId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(EditorId);
      }
      if (SpeciesId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(SpeciesId);
      }
      if (DelayedFrames != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(DelayedFrames);
      }
      if (RecoveryFrames != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(RecoveryFrames);
      }
      if (BulletTeamId != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(BulletTeamId);
      }
      if (SubCycleTriggerFrames != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(SubCycleTriggerFrames);
      }
      if (SubCycleQuota != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(SubCycleQuota);
      }
      if (QuotaCap != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(QuotaCap);
      }
      subscribesToIdList_.WriteTo(output, _repeated_subscribesToIdList_codec);
      subscribesToExhaustedIdList_.WriteTo(output, _repeated_subscribesToExhaustedIdList_codec);
      if (NewRevivalX != 0F) {
        output.WriteRawTag(93);
        output.WriteFloat(NewRevivalX);
      }
      if (NewRevivalY != 0F) {
        output.WriteRawTag(101);
        output.WriteFloat(NewRevivalY);
      }
      if (InitDirX != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(InitDirX);
      }
      if (InitDirY != 0) {
        output.WriteRawTag(112);
        output.WriteInt32(InitDirY);
      }
      if (PublishingEvtMaskUponExhausted != 0UL) {
        output.WriteRawTag(120);
        output.WriteUInt64(PublishingEvtMaskUponExhausted);
      }
      characterSpawnerTimeSeq_.WriteTo(output, _repeated_characterSpawnerTimeSeq_codec);
      pickableSpawnerTimeSeq_.WriteTo(output, _repeated_pickableSpawnerTimeSeq_codec);
      if (ForceCtrlRdfCount != 0) {
        output.WriteRawTag(144, 1);
        output.WriteInt32(ForceCtrlRdfCount);
      }
      if (ForceCtrlCmd != 0UL) {
        output.WriteRawTag(152, 1);
        output.WriteUInt64(ForceCtrlCmd);
      }
      if (ReloadCollidersInNewPhase != false) {
        output.WriteRawTag(160, 1);
        output.WriteBool(ReloadCollidersInNewPhase);
      }
      if (StoryPointId != 0) {
        output.WriteRawTag(128, 64);
        output.WriteInt32(StoryPointId);
      }
      if (BgmId != 0) {
        output.WriteRawTag(136, 64);
        output.WriteInt32(BgmId);
      }
      bossSpeciesSet_.WriteTo(output, _map_bossSpeciesSet_codec);
      if (IsBossSavepoint != false) {
        output.WriteRawTag(152, 64);
        output.WriteBool(IsBossSavepoint);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (EditorId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EditorId);
      }
      if (SpeciesId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SpeciesId);
      }
      if (DelayedFrames != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DelayedFrames);
      }
      if (RecoveryFrames != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RecoveryFrames);
      }
      if (BulletTeamId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BulletTeamId);
      }
      if (SubCycleTriggerFrames != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SubCycleTriggerFrames);
      }
      if (SubCycleQuota != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SubCycleQuota);
      }
      if (QuotaCap != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(QuotaCap);
      }
      size += subscribesToIdList_.CalculateSize(_repeated_subscribesToIdList_codec);
      size += subscribesToExhaustedIdList_.CalculateSize(_repeated_subscribesToExhaustedIdList_codec);
      if (NewRevivalX != 0F) {
        size += 1 + 4;
      }
      if (NewRevivalY != 0F) {
        size += 1 + 4;
      }
      if (InitDirX != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(InitDirX);
      }
      if (InitDirY != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(InitDirY);
      }
      if (PublishingEvtMaskUponExhausted != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(PublishingEvtMaskUponExhausted);
      }
      size += characterSpawnerTimeSeq_.CalculateSize(_repeated_characterSpawnerTimeSeq_codec);
      size += pickableSpawnerTimeSeq_.CalculateSize(_repeated_pickableSpawnerTimeSeq_codec);
      if (ForceCtrlRdfCount != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ForceCtrlRdfCount);
      }
      if (ForceCtrlCmd != 0UL) {
        size += 2 + pb::CodedOutputStream.ComputeUInt64Size(ForceCtrlCmd);
      }
      if (ReloadCollidersInNewPhase != false) {
        size += 2 + 1;
      }
      if (StoryPointId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(StoryPointId);
      }
      if (BgmId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(BgmId);
      }
      size += bossSpeciesSet_.CalculateSize(_map_bossSpeciesSet_codec);
      if (IsBossSavepoint != false) {
        size += 2 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TriggerConfigFromTiled other) {
      if (other == null) {
        return;
      }
      if (other.EditorId != 0) {
        EditorId = other.EditorId;
      }
      if (other.SpeciesId != 0) {
        SpeciesId = other.SpeciesId;
      }
      if (other.DelayedFrames != 0) {
        DelayedFrames = other.DelayedFrames;
      }
      if (other.RecoveryFrames != 0) {
        RecoveryFrames = other.RecoveryFrames;
      }
      if (other.BulletTeamId != 0) {
        BulletTeamId = other.BulletTeamId;
      }
      if (other.SubCycleTriggerFrames != 0) {
        SubCycleTriggerFrames = other.SubCycleTriggerFrames;
      }
      if (other.SubCycleQuota != 0) {
        SubCycleQuota = other.SubCycleQuota;
      }
      if (other.QuotaCap != 0) {
        QuotaCap = other.QuotaCap;
      }
      subscribesToIdList_.Add(other.subscribesToIdList_);
      subscribesToExhaustedIdList_.Add(other.subscribesToExhaustedIdList_);
      if (other.NewRevivalX != 0F) {
        NewRevivalX = other.NewRevivalX;
      }
      if (other.NewRevivalY != 0F) {
        NewRevivalY = other.NewRevivalY;
      }
      if (other.InitDirX != 0) {
        InitDirX = other.InitDirX;
      }
      if (other.InitDirY != 0) {
        InitDirY = other.InitDirY;
      }
      if (other.PublishingEvtMaskUponExhausted != 0UL) {
        PublishingEvtMaskUponExhausted = other.PublishingEvtMaskUponExhausted;
      }
      characterSpawnerTimeSeq_.Add(other.characterSpawnerTimeSeq_);
      pickableSpawnerTimeSeq_.Add(other.pickableSpawnerTimeSeq_);
      if (other.ForceCtrlRdfCount != 0) {
        ForceCtrlRdfCount = other.ForceCtrlRdfCount;
      }
      if (other.ForceCtrlCmd != 0UL) {
        ForceCtrlCmd = other.ForceCtrlCmd;
      }
      if (other.ReloadCollidersInNewPhase != false) {
        ReloadCollidersInNewPhase = other.ReloadCollidersInNewPhase;
      }
      if (other.StoryPointId != 0) {
        StoryPointId = other.StoryPointId;
      }
      if (other.BgmId != 0) {
        BgmId = other.BgmId;
      }
      bossSpeciesSet_.Add(other.bossSpeciesSet_);
      if (other.IsBossSavepoint != false) {
        IsBossSavepoint = other.IsBossSavepoint;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            EditorId = input.ReadInt32();
            break;
          }
          case 16: {
            SpeciesId = input.ReadInt32();
            break;
          }
          case 24: {
            DelayedFrames = input.ReadInt32();
            break;
          }
          case 32: {
            RecoveryFrames = input.ReadInt32();
            break;
          }
          case 40: {
            BulletTeamId = input.ReadInt32();
            break;
          }
          case 48: {
            SubCycleTriggerFrames = input.ReadInt32();
            break;
          }
          case 56: {
            SubCycleQuota = input.ReadInt32();
            break;
          }
          case 64: {
            QuotaCap = input.ReadInt32();
            break;
          }
          case 74:
          case 72: {
            subscribesToIdList_.AddEntriesFrom(input, _repeated_subscribesToIdList_codec);
            break;
          }
          case 82:
          case 80: {
            subscribesToExhaustedIdList_.AddEntriesFrom(input, _repeated_subscribesToExhaustedIdList_codec);
            break;
          }
          case 93: {
            NewRevivalX = input.ReadFloat();
            break;
          }
          case 101: {
            NewRevivalY = input.ReadFloat();
            break;
          }
          case 104: {
            InitDirX = input.ReadInt32();
            break;
          }
          case 112: {
            InitDirY = input.ReadInt32();
            break;
          }
          case 120: {
            PublishingEvtMaskUponExhausted = input.ReadUInt64();
            break;
          }
          case 130: {
            characterSpawnerTimeSeq_.AddEntriesFrom(input, _repeated_characterSpawnerTimeSeq_codec);
            break;
          }
          case 138: {
            pickableSpawnerTimeSeq_.AddEntriesFrom(input, _repeated_pickableSpawnerTimeSeq_codec);
            break;
          }
          case 144: {
            ForceCtrlRdfCount = input.ReadInt32();
            break;
          }
          case 152: {
            ForceCtrlCmd = input.ReadUInt64();
            break;
          }
          case 160: {
            ReloadCollidersInNewPhase = input.ReadBool();
            break;
          }
          case 8192: {
            StoryPointId = input.ReadInt32();
            break;
          }
          case 8200: {
            BgmId = input.ReadInt32();
            break;
          }
          case 8210: {
            bossSpeciesSet_.AddEntriesFrom(input, _map_bossSpeciesSet_codec);
            break;
          }
          case 8216: {
            IsBossSavepoint = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Trigger : pb::IMessage<Trigger> {
    private static readonly pb::MessageParser<Trigger> _parser = new pb::MessageParser<Trigger>(() => new Trigger());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Trigger> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::jtshared.SerializableDataReflection.Descriptor.MessageTypes[66]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Trigger() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Trigger(Trigger other) : this() {
      editorId_ = other.editorId_;
      id_ = other.id_;
      framesToFire_ = other.framesToFire_;
      framesToRecover_ = other.framesToRecover_;
      quota_ = other.quota_;
      bulletTeamId_ = other.bulletTeamId_;
      dirX_ = other.dirX_;
      subCycleQuotaLeft_ = other.subCycleQuotaLeft_;
      state_ = other.state_;
      framesInState_ = other.framesInState_;
      x_ = other.x_;
      y_ = other.y_;
      demandedEvtMask_ = other.demandedEvtMask_;
      fulfilledEvtMask_ = other.fulfilledEvtMask_;
      waveNpcKilledEvtMaskCounter_ = other.waveNpcKilledEvtMaskCounter_;
      subscriberIdsMask_ = other.subscriberIdsMask_;
      exhaustSubscriberIdsMask_ = other.exhaustSubscriberIdsMask_;
      offenderUd_ = other.offenderUd_;
      offenderBulletTeamId_ = other.offenderBulletTeamId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Trigger Clone() {
      return new Trigger(this);
    }

    /// <summary>Field number for the "editor_id" field.</summary>
    public const int EditorIdFieldNumber = 1;
    private int editorId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EditorId {
      get { return editorId_; }
      set {
        editorId_ = value;
      }
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 2;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "frames_to_fire" field.</summary>
    public const int FramesToFireFieldNumber = 3;
    private int framesToFire_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FramesToFire {
      get { return framesToFire_; }
      set {
        framesToFire_ = value;
      }
    }

    /// <summary>Field number for the "frames_to_recover" field.</summary>
    public const int FramesToRecoverFieldNumber = 4;
    private int framesToRecover_;
    /// <summary>
    /// if TRIGGER_MASK_BY_CYCLIC_TIMER, resets whenever "0 &lt; sub_cycle_quota_left" and itself becomes 0
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FramesToRecover {
      get { return framesToRecover_; }
      set {
        framesToRecover_ = value;
      }
    }

    /// <summary>Field number for the "quota" field.</summary>
    public const int QuotaFieldNumber = 5;
    private int quota_;
    /// <summary>
    /// the initial value is from static config, but decreases upon use 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Quota {
      get { return quota_; }
      set {
        quota_ = value;
      }
    }

    /// <summary>Field number for the "bullet_team_id" field.</summary>
    public const int BulletTeamIdFieldNumber = 6;
    private int bulletTeamId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BulletTeamId {
      get { return bulletTeamId_; }
      set {
        bulletTeamId_ = value;
      }
    }

    /// <summary>Field number for the "dir_x" field.</summary>
    public const int DirXFieldNumber = 7;
    private int dirX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DirX {
      get { return dirX_; }
      set {
        dirX_ = value;
      }
    }

    /// <summary>Field number for the "sub_cycle_quota_left" field.</summary>
    public const int SubCycleQuotaLeftFieldNumber = 9;
    private int subCycleQuotaLeft_;
    /// <summary>
    /// resets whenever "frames_to_recover" becomes 0; for TRIGGER_MASK_BY_WAVE, this field is repurposed as the "remaining NPC count of current wave" 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SubCycleQuotaLeft {
      get { return subCycleQuotaLeft_; }
      set {
        subCycleQuotaLeft_ = value;
      }
    }

    /// <summary>Field number for the "state" field.</summary>
    public const int StateFieldNumber = 10;
    private global::jtshared.TriggerState state_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::jtshared.TriggerState State {
      get { return state_; }
      set {
        state_ = value;
      }
    }

    /// <summary>Field number for the "frames_in_state" field.</summary>
    public const int FramesInStateFieldNumber = 11;
    private int framesInState_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FramesInState {
      get { return framesInState_; }
      set {
        framesInState_ = value;
      }
    }

    /// <summary>Field number for the "x" field.</summary>
    public const int XFieldNumber = 12;
    private float x_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "y" field.</summary>
    public const int YFieldNumber = 13;
    private float y_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    /// <summary>Field number for the "demanded_evt_mask" field.</summary>
    public const int DemandedEvtMaskFieldNumber = 14;
    private ulong demandedEvtMask_;
    /// <summary>
    /// Even the "demanded_evt_mask" changes with time/battle progress
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong DemandedEvtMask {
      get { return demandedEvtMask_; }
      set {
        demandedEvtMask_ = value;
      }
    }

    /// <summary>Field number for the "fulfilled_evt_mask" field.</summary>
    public const int FulfilledEvtMaskFieldNumber = 15;
    private ulong fulfilledEvtMask_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong FulfilledEvtMask {
      get { return fulfilledEvtMask_; }
      set {
        fulfilledEvtMask_ = value;
      }
    }

    /// <summary>Field number for the "wave_npc_killed_evt_mask_counter" field.</summary>
    public const int WaveNpcKilledEvtMaskCounterFieldNumber = 16;
    private ulong waveNpcKilledEvtMaskCounter_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong WaveNpcKilledEvtMaskCounter {
      get { return waveNpcKilledEvtMaskCounter_; }
      set {
        waveNpcKilledEvtMaskCounter_ = value;
      }
    }

    /// <summary>Field number for the "subscriber_ids_mask" field.</summary>
    public const int SubscriberIdsMaskFieldNumber = 17;
    private ulong subscriberIdsMask_;
    /// <summary>
    /// For fast reverse-referencing
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong SubscriberIdsMask {
      get { return subscriberIdsMask_; }
      set {
        subscriberIdsMask_ = value;
      }
    }

    /// <summary>Field number for the "exhaust_subscriber_ids_mask" field.</summary>
    public const int ExhaustSubscriberIdsMaskFieldNumber = 18;
    private ulong exhaustSubscriberIdsMask_;
    /// <summary>
    /// For fast reverse-referencing
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ExhaustSubscriberIdsMask {
      get { return exhaustSubscriberIdsMask_; }
      set {
        exhaustSubscriberIdsMask_ = value;
      }
    }

    /// <summary>Field number for the "offender_ud" field.</summary>
    public const int OffenderUdFieldNumber = 19;
    private ulong offenderUd_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong OffenderUd {
      get { return offenderUd_; }
      set {
        offenderUd_ = value;
      }
    }

    /// <summary>Field number for the "offender_bullet_team_id" field.</summary>
    public const int OffenderBulletTeamIdFieldNumber = 20;
    private int offenderBulletTeamId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OffenderBulletTeamId {
      get { return offenderBulletTeamId_; }
      set {
        offenderBulletTeamId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Trigger);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Trigger other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (EditorId != other.EditorId) return false;
      if (Id != other.Id) return false;
      if (FramesToFire != other.FramesToFire) return false;
      if (FramesToRecover != other.FramesToRecover) return false;
      if (Quota != other.Quota) return false;
      if (BulletTeamId != other.BulletTeamId) return false;
      if (DirX != other.DirX) return false;
      if (SubCycleQuotaLeft != other.SubCycleQuotaLeft) return false;
      if (State != other.State) return false;
      if (FramesInState != other.FramesInState) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(X, other.X)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Y, other.Y)) return false;
      if (DemandedEvtMask != other.DemandedEvtMask) return false;
      if (FulfilledEvtMask != other.FulfilledEvtMask) return false;
      if (WaveNpcKilledEvtMaskCounter != other.WaveNpcKilledEvtMaskCounter) return false;
      if (SubscriberIdsMask != other.SubscriberIdsMask) return false;
      if (ExhaustSubscriberIdsMask != other.ExhaustSubscriberIdsMask) return false;
      if (OffenderUd != other.OffenderUd) return false;
      if (OffenderBulletTeamId != other.OffenderBulletTeamId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (EditorId != 0) hash ^= EditorId.GetHashCode();
      if (Id != 0) hash ^= Id.GetHashCode();
      if (FramesToFire != 0) hash ^= FramesToFire.GetHashCode();
      if (FramesToRecover != 0) hash ^= FramesToRecover.GetHashCode();
      if (Quota != 0) hash ^= Quota.GetHashCode();
      if (BulletTeamId != 0) hash ^= BulletTeamId.GetHashCode();
      if (DirX != 0) hash ^= DirX.GetHashCode();
      if (SubCycleQuotaLeft != 0) hash ^= SubCycleQuotaLeft.GetHashCode();
      if (State != 0) hash ^= State.GetHashCode();
      if (FramesInState != 0) hash ^= FramesInState.GetHashCode();
      if (X != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(X);
      if (Y != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Y);
      if (DemandedEvtMask != 0UL) hash ^= DemandedEvtMask.GetHashCode();
      if (FulfilledEvtMask != 0UL) hash ^= FulfilledEvtMask.GetHashCode();
      if (WaveNpcKilledEvtMaskCounter != 0UL) hash ^= WaveNpcKilledEvtMaskCounter.GetHashCode();
      if (SubscriberIdsMask != 0UL) hash ^= SubscriberIdsMask.GetHashCode();
      if (ExhaustSubscriberIdsMask != 0UL) hash ^= ExhaustSubscriberIdsMask.GetHashCode();
      if (OffenderUd != 0UL) hash ^= OffenderUd.GetHashCode();
      if (OffenderBulletTeamId != 0) hash ^= OffenderBulletTeamId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (EditorId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(EditorId);
      }
      if (Id != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Id);
      }
      if (FramesToFire != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(FramesToFire);
      }
      if (FramesToRecover != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(FramesToRecover);
      }
      if (Quota != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Quota);
      }
      if (BulletTeamId != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(BulletTeamId);
      }
      if (DirX != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(DirX);
      }
      if (SubCycleQuotaLeft != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(SubCycleQuotaLeft);
      }
      if (State != 0) {
        output.WriteRawTag(80);
        output.WriteEnum((int) State);
      }
      if (FramesInState != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(FramesInState);
      }
      if (X != 0F) {
        output.WriteRawTag(101);
        output.WriteFloat(X);
      }
      if (Y != 0F) {
        output.WriteRawTag(109);
        output.WriteFloat(Y);
      }
      if (DemandedEvtMask != 0UL) {
        output.WriteRawTag(112);
        output.WriteUInt64(DemandedEvtMask);
      }
      if (FulfilledEvtMask != 0UL) {
        output.WriteRawTag(120);
        output.WriteUInt64(FulfilledEvtMask);
      }
      if (WaveNpcKilledEvtMaskCounter != 0UL) {
        output.WriteRawTag(128, 1);
        output.WriteUInt64(WaveNpcKilledEvtMaskCounter);
      }
      if (SubscriberIdsMask != 0UL) {
        output.WriteRawTag(136, 1);
        output.WriteUInt64(SubscriberIdsMask);
      }
      if (ExhaustSubscriberIdsMask != 0UL) {
        output.WriteRawTag(144, 1);
        output.WriteUInt64(ExhaustSubscriberIdsMask);
      }
      if (OffenderUd != 0UL) {
        output.WriteRawTag(152, 1);
        output.WriteUInt64(OffenderUd);
      }
      if (OffenderBulletTeamId != 0) {
        output.WriteRawTag(160, 1);
        output.WriteInt32(OffenderBulletTeamId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (EditorId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EditorId);
      }
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (FramesToFire != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FramesToFire);
      }
      if (FramesToRecover != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FramesToRecover);
      }
      if (Quota != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Quota);
      }
      if (BulletTeamId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BulletTeamId);
      }
      if (DirX != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DirX);
      }
      if (SubCycleQuotaLeft != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SubCycleQuotaLeft);
      }
      if (State != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) State);
      }
      if (FramesInState != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FramesInState);
      }
      if (X != 0F) {
        size += 1 + 4;
      }
      if (Y != 0F) {
        size += 1 + 4;
      }
      if (DemandedEvtMask != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(DemandedEvtMask);
      }
      if (FulfilledEvtMask != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(FulfilledEvtMask);
      }
      if (WaveNpcKilledEvtMaskCounter != 0UL) {
        size += 2 + pb::CodedOutputStream.ComputeUInt64Size(WaveNpcKilledEvtMaskCounter);
      }
      if (SubscriberIdsMask != 0UL) {
        size += 2 + pb::CodedOutputStream.ComputeUInt64Size(SubscriberIdsMask);
      }
      if (ExhaustSubscriberIdsMask != 0UL) {
        size += 2 + pb::CodedOutputStream.ComputeUInt64Size(ExhaustSubscriberIdsMask);
      }
      if (OffenderUd != 0UL) {
        size += 2 + pb::CodedOutputStream.ComputeUInt64Size(OffenderUd);
      }
      if (OffenderBulletTeamId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(OffenderBulletTeamId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Trigger other) {
      if (other == null) {
        return;
      }
      if (other.EditorId != 0) {
        EditorId = other.EditorId;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.FramesToFire != 0) {
        FramesToFire = other.FramesToFire;
      }
      if (other.FramesToRecover != 0) {
        FramesToRecover = other.FramesToRecover;
      }
      if (other.Quota != 0) {
        Quota = other.Quota;
      }
      if (other.BulletTeamId != 0) {
        BulletTeamId = other.BulletTeamId;
      }
      if (other.DirX != 0) {
        DirX = other.DirX;
      }
      if (other.SubCycleQuotaLeft != 0) {
        SubCycleQuotaLeft = other.SubCycleQuotaLeft;
      }
      if (other.State != 0) {
        State = other.State;
      }
      if (other.FramesInState != 0) {
        FramesInState = other.FramesInState;
      }
      if (other.X != 0F) {
        X = other.X;
      }
      if (other.Y != 0F) {
        Y = other.Y;
      }
      if (other.DemandedEvtMask != 0UL) {
        DemandedEvtMask = other.DemandedEvtMask;
      }
      if (other.FulfilledEvtMask != 0UL) {
        FulfilledEvtMask = other.FulfilledEvtMask;
      }
      if (other.WaveNpcKilledEvtMaskCounter != 0UL) {
        WaveNpcKilledEvtMaskCounter = other.WaveNpcKilledEvtMaskCounter;
      }
      if (other.SubscriberIdsMask != 0UL) {
        SubscriberIdsMask = other.SubscriberIdsMask;
      }
      if (other.ExhaustSubscriberIdsMask != 0UL) {
        ExhaustSubscriberIdsMask = other.ExhaustSubscriberIdsMask;
      }
      if (other.OffenderUd != 0UL) {
        OffenderUd = other.OffenderUd;
      }
      if (other.OffenderBulletTeamId != 0) {
        OffenderBulletTeamId = other.OffenderBulletTeamId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            EditorId = input.ReadInt32();
            break;
          }
          case 16: {
            Id = input.ReadInt32();
            break;
          }
          case 24: {
            FramesToFire = input.ReadInt32();
            break;
          }
          case 32: {
            FramesToRecover = input.ReadInt32();
            break;
          }
          case 40: {
            Quota = input.ReadInt32();
            break;
          }
          case 48: {
            BulletTeamId = input.ReadInt32();
            break;
          }
          case 56: {
            DirX = input.ReadInt32();
            break;
          }
          case 72: {
            SubCycleQuotaLeft = input.ReadInt32();
            break;
          }
          case 80: {
            State = (global::jtshared.TriggerState) input.ReadEnum();
            break;
          }
          case 88: {
            FramesInState = input.ReadInt32();
            break;
          }
          case 101: {
            X = input.ReadFloat();
            break;
          }
          case 109: {
            Y = input.ReadFloat();
            break;
          }
          case 112: {
            DemandedEvtMask = input.ReadUInt64();
            break;
          }
          case 120: {
            FulfilledEvtMask = input.ReadUInt64();
            break;
          }
          case 128: {
            WaveNpcKilledEvtMaskCounter = input.ReadUInt64();
            break;
          }
          case 136: {
            SubscriberIdsMask = input.ReadUInt64();
            break;
          }
          case 144: {
            ExhaustSubscriberIdsMask = input.ReadUInt64();
            break;
          }
          case 152: {
            OffenderUd = input.ReadUInt64();
            break;
          }
          case 160: {
            OffenderBulletTeamId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PlayerMetaInfo : pb::IMessage<PlayerMetaInfo> {
    private static readonly pb::MessageParser<PlayerMetaInfo> _parser = new pb::MessageParser<PlayerMetaInfo>(() => new PlayerMetaInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerMetaInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::jtshared.SerializableDataReflection.Descriptor.MessageTypes[67]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerMetaInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerMetaInfo(PlayerMetaInfo other) : this() {
      playerId_ = other.playerId_;
      joinIndex_ = other.joinIndex_;
      bulletTeamId_ = other.bulletTeamId_;
      speciesId_ = other.speciesId_;
      roomId_ = other.roomId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerMetaInfo Clone() {
      return new PlayerMetaInfo(this);
    }

    /// <summary>Field number for the "player_id" field.</summary>
    public const int PlayerIdFieldNumber = 1;
    private string playerId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PlayerId {
      get { return playerId_; }
      set {
        playerId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "join_index" field.</summary>
    public const int JoinIndexFieldNumber = 2;
    private uint joinIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint JoinIndex {
      get { return joinIndex_; }
      set {
        joinIndex_ = value;
      }
    }

    /// <summary>Field number for the "bullet_team_id" field.</summary>
    public const int BulletTeamIdFieldNumber = 3;
    private int bulletTeamId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BulletTeamId {
      get { return bulletTeamId_; }
      set {
        bulletTeamId_ = value;
      }
    }

    /// <summary>Field number for the "species_id" field.</summary>
    public const int SpeciesIdFieldNumber = 4;
    private uint speciesId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SpeciesId {
      get { return speciesId_; }
      set {
        speciesId_ = value;
      }
    }

    /// <summary>Field number for the "room_id" field.</summary>
    public const int RoomIdFieldNumber = 5;
    private int roomId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RoomId {
      get { return roomId_; }
      set {
        roomId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayerMetaInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayerMetaInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlayerId != other.PlayerId) return false;
      if (JoinIndex != other.JoinIndex) return false;
      if (BulletTeamId != other.BulletTeamId) return false;
      if (SpeciesId != other.SpeciesId) return false;
      if (RoomId != other.RoomId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PlayerId.Length != 0) hash ^= PlayerId.GetHashCode();
      if (JoinIndex != 0) hash ^= JoinIndex.GetHashCode();
      if (BulletTeamId != 0) hash ^= BulletTeamId.GetHashCode();
      if (SpeciesId != 0) hash ^= SpeciesId.GetHashCode();
      if (RoomId != 0) hash ^= RoomId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PlayerId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(PlayerId);
      }
      if (JoinIndex != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(JoinIndex);
      }
      if (BulletTeamId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(BulletTeamId);
      }
      if (SpeciesId != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(SpeciesId);
      }
      if (RoomId != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(RoomId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlayerId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PlayerId);
      }
      if (JoinIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(JoinIndex);
      }
      if (BulletTeamId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BulletTeamId);
      }
      if (SpeciesId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SpeciesId);
      }
      if (RoomId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoomId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayerMetaInfo other) {
      if (other == null) {
        return;
      }
      if (other.PlayerId.Length != 0) {
        PlayerId = other.PlayerId;
      }
      if (other.JoinIndex != 0) {
        JoinIndex = other.JoinIndex;
      }
      if (other.BulletTeamId != 0) {
        BulletTeamId = other.BulletTeamId;
      }
      if (other.SpeciesId != 0) {
        SpeciesId = other.SpeciesId;
      }
      if (other.RoomId != 0) {
        RoomId = other.RoomId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            PlayerId = input.ReadString();
            break;
          }
          case 16: {
            JoinIndex = input.ReadUInt32();
            break;
          }
          case 24: {
            BulletTeamId = input.ReadInt32();
            break;
          }
          case 32: {
            SpeciesId = input.ReadUInt32();
            break;
          }
          case 40: {
            RoomId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class RpcEndpointHolder : pb::IMessage<RpcEndpointHolder> {
    private static readonly pb::MessageParser<RpcEndpointHolder> _parser = new pb::MessageParser<RpcEndpointHolder>(() => new RpcEndpointHolder());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RpcEndpointHolder> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::jtshared.SerializableDataReflection.Descriptor.MessageTypes[68]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RpcEndpointHolder() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RpcEndpointHolder(RpcEndpointHolder other) : this() {
      id_ = other.id_;
      externalAddrHost_ = other.externalAddrHost_;
      externalAddrPort_ = other.externalAddrPort_;
      internalAddrHost_ = other.internalAddrHost_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RpcEndpointHolder Clone() {
      return new RpcEndpointHolder(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private uint id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "external_addr_host" field.</summary>
    public const int ExternalAddrHostFieldNumber = 2;
    private string externalAddrHost_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ExternalAddrHost {
      get { return externalAddrHost_; }
      set {
        externalAddrHost_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "external_addr_port" field.</summary>
    public const int ExternalAddrPortFieldNumber = 3;
    private uint externalAddrPort_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ExternalAddrPort {
      get { return externalAddrPort_; }
      set {
        externalAddrPort_ = value;
      }
    }

    /// <summary>Field number for the "internal_addr_host" field.</summary>
    public const int InternalAddrHostFieldNumber = 4;
    private string internalAddrHost_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string InternalAddrHost {
      get { return internalAddrHost_; }
      set {
        internalAddrHost_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RpcEndpointHolder);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RpcEndpointHolder other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (ExternalAddrHost != other.ExternalAddrHost) return false;
      if (ExternalAddrPort != other.ExternalAddrPort) return false;
      if (InternalAddrHost != other.InternalAddrHost) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (ExternalAddrHost.Length != 0) hash ^= ExternalAddrHost.GetHashCode();
      if (ExternalAddrPort != 0) hash ^= ExternalAddrPort.GetHashCode();
      if (InternalAddrHost.Length != 0) hash ^= InternalAddrHost.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Id);
      }
      if (ExternalAddrHost.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ExternalAddrHost);
      }
      if (ExternalAddrPort != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(ExternalAddrPort);
      }
      if (InternalAddrHost.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(InternalAddrHost);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
      }
      if (ExternalAddrHost.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ExternalAddrHost);
      }
      if (ExternalAddrPort != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ExternalAddrPort);
      }
      if (InternalAddrHost.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(InternalAddrHost);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RpcEndpointHolder other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.ExternalAddrHost.Length != 0) {
        ExternalAddrHost = other.ExternalAddrHost;
      }
      if (other.ExternalAddrPort != 0) {
        ExternalAddrPort = other.ExternalAddrPort;
      }
      if (other.InternalAddrHost.Length != 0) {
        InternalAddrHost = other.InternalAddrHost;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadUInt32();
            break;
          }
          case 18: {
            ExternalAddrHost = input.ReadString();
            break;
          }
          case 24: {
            ExternalAddrPort = input.ReadUInt32();
            break;
          }
          case 34: {
            InternalAddrHost = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PrimitiveConsts : pb::IMessage<PrimitiveConsts> {
    private static readonly pb::MessageParser<PrimitiveConsts> _parser = new pb::MessageParser<PrimitiveConsts>(() => new PrimitiveConsts());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PrimitiveConsts> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::jtshared.SerializableDataReflection.Descriptor.MessageTypes[69]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PrimitiveConsts() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PrimitiveConsts(PrimitiveConsts other) : this() {
      battleDynamicsFps_ = other.battleDynamicsFps_;
      defaultTimeoutForLastAllConfirmedIfd_ = other.defaultTimeoutForLastAllConfirmedIfd_;
      roomIdNone_ = other.roomIdNone_;
      roomStateImpossible_ = other.roomStateImpossible_;
      roomStateIdle_ = other.roomStateIdle_;
      roomStateWaiting_ = other.roomStateWaiting_;
      roomStatePrepare_ = other.roomStatePrepare_;
      roomStateInBattle_ = other.roomStateInBattle_;
      roomStateInSettlement_ = other.roomStateInSettlement_;
      roomStateStopped_ = other.roomStateStopped_;
      roomStateFrontendAwaitingAutoRejoin_ = other.roomStateFrontendAwaitingAutoRejoin_;
      roomStateFrontendAwaitingManualRejoin_ = other.roomStateFrontendAwaitingManualRejoin_;
      roomStateFrontendRejoining_ = other.roomStateFrontendRejoining_;
      playerBattleStateImpossible_ = other.playerBattleStateImpossible_;
      playerBattleStateAddedPendingBattleColliderAck_ = other.playerBattleStateAddedPendingBattleColliderAck_;
      playerBattleStateReaddedPendingForceResync_ = other.playerBattleStateReaddedPendingForceResync_;
      playerBattleStateActive_ = other.playerBattleStateActive_;
      playerBattleStateDisconnected_ = other.playerBattleStateDisconnected_;
      playerBattleStateLost_ = other.playerBattleStateLost_;
      playerBattleStateExpelledDuringGame_ = other.playerBattleStateExpelledDuringGame_;
      playerBattleStateExpelledInDismissal_ = other.playerBattleStateExpelledInDismissal_;
      upsyncMsgActPlayerColliderAck_ = other.upsyncMsgActPlayerColliderAck_;
      upsyncMsgActPlayerCmd_ = other.upsyncMsgActPlayerCmd_;
      upsyncMsgActHolepunchBackendUdpTunnel_ = other.upsyncMsgActHolepunchBackendUdpTunnel_;
      upsyncMsgActHolepunchPeerUdpAddr_ = other.upsyncMsgActHolepunchPeerUdpAddr_;
      downsyncMsgActBattleColliderInfo_ = other.downsyncMsgActBattleColliderInfo_;
      downsyncMsgActInputBatch_ = other.downsyncMsgActInputBatch_;
      downsyncMsgActBattleStopped_ = other.downsyncMsgActBattleStopped_;
      downsyncMsgActForcedResync_ = other.downsyncMsgActForcedResync_;
      downsyncMsgActPeerInputBatch_ = other.downsyncMsgActPeerInputBatch_;
      downsyncMsgActPeerUdpAddr_ = other.downsyncMsgActPeerUdpAddr_;
      downsyncMsgActBattleReadyToStart_ = other.downsyncMsgActBattleReadyToStart_;
      downsyncMsgActBattleStart_ = other.downsyncMsgActBattleStart_;
      downsyncMsgActPlayerDisconnected_ = other.downsyncMsgActPlayerDisconnected_;
      downsyncMsgActPlayerReaddedAndAcked_ = other.downsyncMsgActPlayerReaddedAndAcked_;
      downsyncMsgActPlayerAddedAndAcked_ = other.downsyncMsgActPlayerAddedAndAcked_;
      downsyncMsgWsClosed_ = other.downsyncMsgWsClosed_;
      downsyncMsgWsOpen_ = other.downsyncMsgWsOpen_;
      magicJoinIndexInvalid_ = other.magicJoinIndexInvalid_;
      magicJoinIndexSrvUdpTunnel_ = other.magicJoinIndexSrvUdpTunnel_;
      magicQuotaInfinite_ = other.magicQuotaInfinite_;
      npcFleeGracePeriodRdfCnt_ = other.npcFleeGracePeriodRdfCnt_;
      magicLastSentInputFrameIdNormalAdded_ = other.magicLastSentInputFrameIdNormalAdded_;
      magicLastSentInputFrameIdReadded_ = other.magicLastSentInputFrameIdReadded_;
      bgmNoChange_ = other.bgmNoChange_;
      invalidDefaultPlayerId_ = other.invalidDefaultPlayerId_;
      estimatedSecondsPerRdf_ = other.estimatedSecondsPerRdf_;
      maxBtnHoldingRdfCnt_ = other.maxBtnHoldingRdfCnt_;
      maxFlyingRdfCnt_ = other.maxFlyingRdfCnt_;
      maxReversePushbackFramesToRecover_ = other.maxReversePushbackFramesToRecover_;
      terminatingEvtsubId_ = other.terminatingEvtsubId_;
      magicEvtsubIdDummy_ = other.magicEvtsubIdDummy_;
      speedNotHitNotSpecified_ = other.speedNotHitNotSpecified_;
      defaultPreallocNpcCapacity_ = other.defaultPreallocNpcCapacity_;
      defaultPreallocBulletCapacity_ = other.defaultPreallocBulletCapacity_;
      defaultPreallocTrapCapacity_ = other.defaultPreallocTrapCapacity_;
      defaultPreallocTriggerCapacity_ = other.defaultPreallocTriggerCapacity_;
      defaultPreallocPickableCapacity_ = other.defaultPreallocPickableCapacity_;
      defaultPerCharacterBuffCapacity_ = other.defaultPerCharacterBuffCapacity_;
      defaultPerCharacterDebuffCapacity_ = other.defaultPerCharacterDebuffCapacity_;
      defaultPerCharacterInventoryCapacity_ = other.defaultPerCharacterInventoryCapacity_;
      defaultPerCharacterImmuneBulletRecordCapacity_ = other.defaultPerCharacterImmuneBulletRecordCapacity_;
      gravityY_ = other.gravityY_;
      gravityYJumpHolding_ = other.gravityYJumpHolding_;
      defaultPatrolCueWaivingFrames_ = other.defaultPatrolCueWaivingFrames_;
      noPatrolCueId_ = other.noPatrolCueId_;
      noVfxId_ = other.noVfxId_;
      defaultPickableHitboxSizeX_ = other.defaultPickableHitboxSizeX_;
      defaultPickableHitboxSizeY_ = other.defaultPickableHitboxSizeY_;
      defaultPickableDisappearingAnimFrames_ = other.defaultPickableDisappearingAnimFrames_;
      defaultPickableConsumedAnimFrames_ = other.defaultPickableConsumedAnimFrames_;
      defaultPickableRisingVelY_ = other.defaultPickableRisingVelY_;
      defaultPickableNonpickableStartupFrames_ = other.defaultPickableNonpickableStartupFrames_;
      defaultFramesToShowDamaged_ = other.defaultFramesToShowDamaged_;
      defaultFramesToContinueCombo_ = other.defaultFramesToContinueCombo_;
      defaultBlockStunFrames_ = other.defaultBlockStunFrames_;
      defaultBlownupFramesForFlying_ = other.defaultBlownupFramesForFlying_;
      defaultGaugeIncByHit_ = other.defaultGaugeIncByHit_;
      defaultFramesDelayedOfBossSavepoint_ = other.defaultFramesDelayedOfBossSavepoint_;
      inputScaleFrames_ = other.inputScaleFrames_;
      inputScale_ = other.inputScale_;
      inputDelayFrames_ = other.inputDelayFrames_;
      defaultBackendInputBufferSize_ = other.defaultBackendInputBufferSize_;
      magicFramesToBeOnWall_ = other.magicFramesToBeOnWall_;
      dyingFramesToRecover_ = other.dyingFramesToRecover_;
      parriedFramesToRecover_ = other.parriedFramesToRecover_;
      parriedFramesToStartCancellable_ = other.parriedFramesToStartCancellable_;
      noSkill_ = other.noSkill_;
      noSkillHit_ = other.noSkillHit_;
      noLockVel_ = other.noLockVel_;
      debuffArrIdxElemental_ = other.debuffArrIdxElemental_;
      terminatingRenderFrameId_ = other.terminatingRenderFrameId_;
      terminatingInputFrameId_ = other.terminatingInputFrameId_;
      terminatingCharacterId_ = other.terminatingCharacterId_;
      terminatingTrapId_ = other.terminatingTrapId_;
      terminatingTriggerId_ = other.terminatingTriggerId_;
      terminatingPickableId_ = other.terminatingPickableId_;
      terminatingBulletId_ = other.terminatingBulletId_;
      terminatingBulletTeamId_ = other.terminatingBulletTeamId_;
      terminatingBuffSpeciesId_ = other.terminatingBuffSpeciesId_;
      terminatingDebuffSpeciesId_ = other.terminatingDebuffSpeciesId_;
      terminatingConsumableSpeciesId_ = other.terminatingConsumableSpeciesId_;
      frontendWsRecvBytelength_ = other.frontendWsRecvBytelength_;
      backendWsRecvBytelength_ = other.backendWsRecvBytelength_;
      jammedBtnHoldingRdfCnt_ = other.jammedBtnHoldingRdfCnt_;
      btnBHoldingRdfCntThreshold2_ = other.btnBHoldingRdfCntThreshold2_;
      btnBHoldingRdfCntThreshold1_ = other.btnBHoldingRdfCntThreshold1_;
      jumpHoldingRdfCntThreshold1_ = other.jumpHoldingRdfCntThreshold1_;
      jumpHoldingIfdCntThreshold1_ = other.jumpHoldingIfdCntThreshold1_;
      jumpHoldingRdfCntThreshold2_ = other.jumpHoldingRdfCntThreshold2_;
      jumpHoldingIfdCntThreshold2_ = other.jumpHoldingIfdCntThreshold2_;
      inAirDashGracePeriodRdfCnt_ = other.inAirDashGracePeriodRdfCnt_;
      inAirJumpGracePeriodRdfCnt_ = other.inAirJumpGracePeriodRdfCnt_;
      btnEHoldingRdfCntThreshold1_ = other.btnEHoldingRdfCntThreshold1_;
      btnEHoldingIfdCntThreshold1_ = other.btnEHoldingIfdCntThreshold1_;
      spAtkLookupFrames_ = other.spAtkLookupFrames_;
      patternIdUnableToOp_ = other.patternIdUnableToOp_;
      patternIdNoOp_ = other.patternIdNoOp_;
      patternB_ = other.patternB_;
      patternUpB_ = other.patternUpB_;
      patternDownB_ = other.patternDownB_;
      patternHoldB_ = other.patternHoldB_;
      patternDownA_ = other.patternDownA_;
      patternReleasedB_ = other.patternReleasedB_;
      patternE_ = other.patternE_;
      patternFrontE_ = other.patternFrontE_;
      patternBackE_ = other.patternBackE_;
      patternUpE_ = other.patternUpE_;
      patternDownE_ = other.patternDownE_;
      patternHoldE_ = other.patternHoldE_;
      patternEHoldB_ = other.patternEHoldB_;
      patternFrontEHoldB_ = other.patternFrontEHoldB_;
      patternBackEHoldB_ = other.patternBackEHoldB_;
      patternUpEHoldB_ = other.patternUpEHoldB_;
      patternDownEHoldB_ = other.patternDownEHoldB_;
      patternHoldEHoldB_ = other.patternHoldEHoldB_;
      patternInventorySlotC_ = other.patternInventorySlotC_;
      patternInventorySlotD_ = other.patternInventorySlotD_;
      patternInventorySlotBc_ = other.patternInventorySlotBc_;
      patternHoldInventorySlotC_ = other.patternHoldInventorySlotC_;
      patternHoldInventorySlotD_ = other.patternHoldInventorySlotD_;
      eleNone_ = other.eleNone_;
      eleFire_ = other.eleFire_;
      eleWater_ = other.eleWater_;
      eleThunder_ = other.eleThunder_;
      eleRock_ = other.eleRock_;
      eleWind_ = other.eleWind_;
      eleIce_ = other.eleIce_;
      eleWeaknessDefaultYield_ = other.eleWeaknessDefaultYield_;
      eleResistanceDefaultYield_ = other.eleResistanceDefaultYield_;
      startingRenderFrameId_ = other.startingRenderFrameId_;
      startingInputFrameId_ = other.startingInputFrameId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PrimitiveConsts Clone() {
      return new PrimitiveConsts(this);
    }

    /// <summary>Field number for the "battle_dynamics_fps" field.</summary>
    public const int BattleDynamicsFpsFieldNumber = 1;
    private int battleDynamicsFps_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BattleDynamicsFps {
      get { return battleDynamicsFps_; }
      set {
        battleDynamicsFps_ = value;
      }
    }

    /// <summary>Field number for the "default_timeout_for_last_all_confirmed_ifd" field.</summary>
    public const int DefaultTimeoutForLastAllConfirmedIfdFieldNumber = 2;
    private int defaultTimeoutForLastAllConfirmedIfd_;
    /// <summary>
    /// in milliseconds
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DefaultTimeoutForLastAllConfirmedIfd {
      get { return defaultTimeoutForLastAllConfirmedIfd_; }
      set {
        defaultTimeoutForLastAllConfirmedIfd_ = value;
      }
    }

    /// <summary>Field number for the "room_id_none" field.</summary>
    public const int RoomIdNoneFieldNumber = 3;
    private int roomIdNone_;
    /// <summary>
    /// Deliberately NOT using enum for "room states" to make use of "C# CompareAndExchange" 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RoomIdNone {
      get { return roomIdNone_; }
      set {
        roomIdNone_ = value;
      }
    }

    /// <summary>Field number for the "room_state_impossible" field.</summary>
    public const int RoomStateImpossibleFieldNumber = 4;
    private int roomStateImpossible_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RoomStateImpossible {
      get { return roomStateImpossible_; }
      set {
        roomStateImpossible_ = value;
      }
    }

    /// <summary>Field number for the "room_state_idle" field.</summary>
    public const int RoomStateIdleFieldNumber = 5;
    private int roomStateIdle_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RoomStateIdle {
      get { return roomStateIdle_; }
      set {
        roomStateIdle_ = value;
      }
    }

    /// <summary>Field number for the "room_state_waiting" field.</summary>
    public const int RoomStateWaitingFieldNumber = 6;
    private int roomStateWaiting_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RoomStateWaiting {
      get { return roomStateWaiting_; }
      set {
        roomStateWaiting_ = value;
      }
    }

    /// <summary>Field number for the "room_state_prepare" field.</summary>
    public const int RoomStatePrepareFieldNumber = 7;
    private int roomStatePrepare_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RoomStatePrepare {
      get { return roomStatePrepare_; }
      set {
        roomStatePrepare_ = value;
      }
    }

    /// <summary>Field number for the "room_state_in_battle" field.</summary>
    public const int RoomStateInBattleFieldNumber = 8;
    private int roomStateInBattle_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RoomStateInBattle {
      get { return roomStateInBattle_; }
      set {
        roomStateInBattle_ = value;
      }
    }

    /// <summary>Field number for the "room_state_in_settlement" field.</summary>
    public const int RoomStateInSettlementFieldNumber = 9;
    private int roomStateInSettlement_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RoomStateInSettlement {
      get { return roomStateInSettlement_; }
      set {
        roomStateInSettlement_ = value;
      }
    }

    /// <summary>Field number for the "room_state_stopped" field.</summary>
    public const int RoomStateStoppedFieldNumber = 10;
    private int roomStateStopped_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RoomStateStopped {
      get { return roomStateStopped_; }
      set {
        roomStateStopped_ = value;
      }
    }

    /// <summary>Field number for the "room_state_frontend_awaiting_auto_rejoin" field.</summary>
    public const int RoomStateFrontendAwaitingAutoRejoinFieldNumber = 11;
    private int roomStateFrontendAwaitingAutoRejoin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RoomStateFrontendAwaitingAutoRejoin {
      get { return roomStateFrontendAwaitingAutoRejoin_; }
      set {
        roomStateFrontendAwaitingAutoRejoin_ = value;
      }
    }

    /// <summary>Field number for the "room_state_frontend_awaiting_manual_rejoin" field.</summary>
    public const int RoomStateFrontendAwaitingManualRejoinFieldNumber = 12;
    private int roomStateFrontendAwaitingManualRejoin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RoomStateFrontendAwaitingManualRejoin {
      get { return roomStateFrontendAwaitingManualRejoin_; }
      set {
        roomStateFrontendAwaitingManualRejoin_ = value;
      }
    }

    /// <summary>Field number for the "room_state_frontend_rejoining" field.</summary>
    public const int RoomStateFrontendRejoiningFieldNumber = 13;
    private int roomStateFrontendRejoining_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RoomStateFrontendRejoining {
      get { return roomStateFrontendRejoining_; }
      set {
        roomStateFrontendRejoining_ = value;
      }
    }

    /// <summary>Field number for the "player_battle_state_impossible" field.</summary>
    public const int PlayerBattleStateImpossibleFieldNumber = 14;
    private int playerBattleStateImpossible_;
    /// <summary>
    /// Deliberately NOT using enum for "player battle states" to make use of "C# CompareAndExchange" 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlayerBattleStateImpossible {
      get { return playerBattleStateImpossible_; }
      set {
        playerBattleStateImpossible_ = value;
      }
    }

    /// <summary>Field number for the "player_battle_state_added_pending_battle_collider_ack" field.</summary>
    public const int PlayerBattleStateAddedPendingBattleColliderAckFieldNumber = 15;
    private int playerBattleStateAddedPendingBattleColliderAck_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlayerBattleStateAddedPendingBattleColliderAck {
      get { return playerBattleStateAddedPendingBattleColliderAck_; }
      set {
        playerBattleStateAddedPendingBattleColliderAck_ = value;
      }
    }

    /// <summary>Field number for the "player_battle_state_readded_pending_force_resync" field.</summary>
    public const int PlayerBattleStateReaddedPendingForceResyncFieldNumber = 16;
    private int playerBattleStateReaddedPendingForceResync_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlayerBattleStateReaddedPendingForceResync {
      get { return playerBattleStateReaddedPendingForceResync_; }
      set {
        playerBattleStateReaddedPendingForceResync_ = value;
      }
    }

    /// <summary>Field number for the "player_battle_state_active" field.</summary>
    public const int PlayerBattleStateActiveFieldNumber = 17;
    private int playerBattleStateActive_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlayerBattleStateActive {
      get { return playerBattleStateActive_; }
      set {
        playerBattleStateActive_ = value;
      }
    }

    /// <summary>Field number for the "player_battle_state_disconnected" field.</summary>
    public const int PlayerBattleStateDisconnectedFieldNumber = 18;
    private int playerBattleStateDisconnected_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlayerBattleStateDisconnected {
      get { return playerBattleStateDisconnected_; }
      set {
        playerBattleStateDisconnected_ = value;
      }
    }

    /// <summary>Field number for the "player_battle_state_lost" field.</summary>
    public const int PlayerBattleStateLostFieldNumber = 19;
    private int playerBattleStateLost_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlayerBattleStateLost {
      get { return playerBattleStateLost_; }
      set {
        playerBattleStateLost_ = value;
      }
    }

    /// <summary>Field number for the "player_battle_state_expelled_during_game" field.</summary>
    public const int PlayerBattleStateExpelledDuringGameFieldNumber = 20;
    private int playerBattleStateExpelledDuringGame_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlayerBattleStateExpelledDuringGame {
      get { return playerBattleStateExpelledDuringGame_; }
      set {
        playerBattleStateExpelledDuringGame_ = value;
      }
    }

    /// <summary>Field number for the "player_battle_state_expelled_in_dismissal" field.</summary>
    public const int PlayerBattleStateExpelledInDismissalFieldNumber = 21;
    private int playerBattleStateExpelledInDismissal_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlayerBattleStateExpelledInDismissal {
      get { return playerBattleStateExpelledInDismissal_; }
      set {
        playerBattleStateExpelledInDismissal_ = value;
      }
    }

    /// <summary>Field number for the "upsync_msg_act_player_collider_ack" field.</summary>
    public const int UpsyncMsgActPlayerColliderAckFieldNumber = 22;
    private int upsyncMsgActPlayerColliderAck_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UpsyncMsgActPlayerColliderAck {
      get { return upsyncMsgActPlayerColliderAck_; }
      set {
        upsyncMsgActPlayerColliderAck_ = value;
      }
    }

    /// <summary>Field number for the "upsync_msg_act_player_cmd" field.</summary>
    public const int UpsyncMsgActPlayerCmdFieldNumber = 23;
    private int upsyncMsgActPlayerCmd_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UpsyncMsgActPlayerCmd {
      get { return upsyncMsgActPlayerCmd_; }
      set {
        upsyncMsgActPlayerCmd_ = value;
      }
    }

    /// <summary>Field number for the "upsync_msg_act_holepunch_backend_udp_tunnel" field.</summary>
    public const int UpsyncMsgActHolepunchBackendUdpTunnelFieldNumber = 24;
    private int upsyncMsgActHolepunchBackendUdpTunnel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UpsyncMsgActHolepunchBackendUdpTunnel {
      get { return upsyncMsgActHolepunchBackendUdpTunnel_; }
      set {
        upsyncMsgActHolepunchBackendUdpTunnel_ = value;
      }
    }

    /// <summary>Field number for the "upsync_msg_act_holepunch_peer_udp_addr" field.</summary>
    public const int UpsyncMsgActHolepunchPeerUdpAddrFieldNumber = 25;
    private int upsyncMsgActHolepunchPeerUdpAddr_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UpsyncMsgActHolepunchPeerUdpAddr {
      get { return upsyncMsgActHolepunchPeerUdpAddr_; }
      set {
        upsyncMsgActHolepunchPeerUdpAddr_ = value;
      }
    }

    /// <summary>Field number for the "downsync_msg_act_battle_collider_info" field.</summary>
    public const int DownsyncMsgActBattleColliderInfoFieldNumber = 26;
    private int downsyncMsgActBattleColliderInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DownsyncMsgActBattleColliderInfo {
      get { return downsyncMsgActBattleColliderInfo_; }
      set {
        downsyncMsgActBattleColliderInfo_ = value;
      }
    }

    /// <summary>Field number for the "downsync_msg_act_input_batch" field.</summary>
    public const int DownsyncMsgActInputBatchFieldNumber = 27;
    private int downsyncMsgActInputBatch_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DownsyncMsgActInputBatch {
      get { return downsyncMsgActInputBatch_; }
      set {
        downsyncMsgActInputBatch_ = value;
      }
    }

    /// <summary>Field number for the "downsync_msg_act_battle_stopped" field.</summary>
    public const int DownsyncMsgActBattleStoppedFieldNumber = 28;
    private int downsyncMsgActBattleStopped_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DownsyncMsgActBattleStopped {
      get { return downsyncMsgActBattleStopped_; }
      set {
        downsyncMsgActBattleStopped_ = value;
      }
    }

    /// <summary>Field number for the "downsync_msg_act_forced_resync" field.</summary>
    public const int DownsyncMsgActForcedResyncFieldNumber = 29;
    private int downsyncMsgActForcedResync_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DownsyncMsgActForcedResync {
      get { return downsyncMsgActForcedResync_; }
      set {
        downsyncMsgActForcedResync_ = value;
      }
    }

    /// <summary>Field number for the "downsync_msg_act_peer_input_batch" field.</summary>
    public const int DownsyncMsgActPeerInputBatchFieldNumber = 30;
    private int downsyncMsgActPeerInputBatch_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DownsyncMsgActPeerInputBatch {
      get { return downsyncMsgActPeerInputBatch_; }
      set {
        downsyncMsgActPeerInputBatch_ = value;
      }
    }

    /// <summary>Field number for the "downsync_msg_act_peer_udp_addr" field.</summary>
    public const int DownsyncMsgActPeerUdpAddrFieldNumber = 31;
    private int downsyncMsgActPeerUdpAddr_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DownsyncMsgActPeerUdpAddr {
      get { return downsyncMsgActPeerUdpAddr_; }
      set {
        downsyncMsgActPeerUdpAddr_ = value;
      }
    }

    /// <summary>Field number for the "downsync_msg_act_battle_ready_to_start" field.</summary>
    public const int DownsyncMsgActBattleReadyToStartFieldNumber = 32;
    private int downsyncMsgActBattleReadyToStart_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DownsyncMsgActBattleReadyToStart {
      get { return downsyncMsgActBattleReadyToStart_; }
      set {
        downsyncMsgActBattleReadyToStart_ = value;
      }
    }

    /// <summary>Field number for the "downsync_msg_act_battle_start" field.</summary>
    public const int DownsyncMsgActBattleStartFieldNumber = 33;
    private int downsyncMsgActBattleStart_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DownsyncMsgActBattleStart {
      get { return downsyncMsgActBattleStart_; }
      set {
        downsyncMsgActBattleStart_ = value;
      }
    }

    /// <summary>Field number for the "downsync_msg_act_player_disconnected" field.</summary>
    public const int DownsyncMsgActPlayerDisconnectedFieldNumber = 34;
    private int downsyncMsgActPlayerDisconnected_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DownsyncMsgActPlayerDisconnected {
      get { return downsyncMsgActPlayerDisconnected_; }
      set {
        downsyncMsgActPlayerDisconnected_ = value;
      }
    }

    /// <summary>Field number for the "downsync_msg_act_player_readded_and_acked" field.</summary>
    public const int DownsyncMsgActPlayerReaddedAndAckedFieldNumber = 35;
    private int downsyncMsgActPlayerReaddedAndAcked_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DownsyncMsgActPlayerReaddedAndAcked {
      get { return downsyncMsgActPlayerReaddedAndAcked_; }
      set {
        downsyncMsgActPlayerReaddedAndAcked_ = value;
      }
    }

    /// <summary>Field number for the "downsync_msg_act_player_added_and_acked" field.</summary>
    public const int DownsyncMsgActPlayerAddedAndAckedFieldNumber = 36;
    private int downsyncMsgActPlayerAddedAndAcked_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DownsyncMsgActPlayerAddedAndAcked {
      get { return downsyncMsgActPlayerAddedAndAcked_; }
      set {
        downsyncMsgActPlayerAddedAndAcked_ = value;
      }
    }

    /// <summary>Field number for the "downsync_msg_ws_closed" field.</summary>
    public const int DownsyncMsgWsClosedFieldNumber = 37;
    private int downsyncMsgWsClosed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DownsyncMsgWsClosed {
      get { return downsyncMsgWsClosed_; }
      set {
        downsyncMsgWsClosed_ = value;
      }
    }

    /// <summary>Field number for the "downsync_msg_ws_open" field.</summary>
    public const int DownsyncMsgWsOpenFieldNumber = 38;
    private int downsyncMsgWsOpen_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DownsyncMsgWsOpen {
      get { return downsyncMsgWsOpen_; }
      set {
        downsyncMsgWsOpen_ = value;
      }
    }

    /// <summary>Field number for the "magic_join_index_invalid" field.</summary>
    public const int MagicJoinIndexInvalidFieldNumber = 39;
    private uint magicJoinIndexInvalid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MagicJoinIndexInvalid {
      get { return magicJoinIndexInvalid_; }
      set {
        magicJoinIndexInvalid_ = value;
      }
    }

    /// <summary>Field number for the "magic_join_index_srv_udp_tunnel" field.</summary>
    public const int MagicJoinIndexSrvUdpTunnelFieldNumber = 40;
    private uint magicJoinIndexSrvUdpTunnel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MagicJoinIndexSrvUdpTunnel {
      get { return magicJoinIndexSrvUdpTunnel_; }
      set {
        magicJoinIndexSrvUdpTunnel_ = value;
      }
    }

    /// <summary>Field number for the "magic_quota_infinite" field.</summary>
    public const int MagicQuotaInfiniteFieldNumber = 41;
    private int magicQuotaInfinite_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MagicQuotaInfinite {
      get { return magicQuotaInfinite_; }
      set {
        magicQuotaInfinite_ = value;
      }
    }

    /// <summary>Field number for the "npc_flee_grace_period_rdf_cnt" field.</summary>
    public const int NpcFleeGracePeriodRdfCntFieldNumber = 42;
    private int npcFleeGracePeriodRdfCnt_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NpcFleeGracePeriodRdfCnt {
      get { return npcFleeGracePeriodRdfCnt_; }
      set {
        npcFleeGracePeriodRdfCnt_ = value;
      }
    }

    /// <summary>Field number for the "magic_last_sent_input_frame_id_normal_added" field.</summary>
    public const int MagicLastSentInputFrameIdNormalAddedFieldNumber = 43;
    private int magicLastSentInputFrameIdNormalAdded_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MagicLastSentInputFrameIdNormalAdded {
      get { return magicLastSentInputFrameIdNormalAdded_; }
      set {
        magicLastSentInputFrameIdNormalAdded_ = value;
      }
    }

    /// <summary>Field number for the "magic_last_sent_input_frame_id_readded" field.</summary>
    public const int MagicLastSentInputFrameIdReaddedFieldNumber = 44;
    private int magicLastSentInputFrameIdReadded_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MagicLastSentInputFrameIdReadded {
      get { return magicLastSentInputFrameIdReadded_; }
      set {
        magicLastSentInputFrameIdReadded_ = value;
      }
    }

    /// <summary>Field number for the "bgm_no_change" field.</summary>
    public const int BgmNoChangeFieldNumber = 45;
    private int bgmNoChange_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BgmNoChange {
      get { return bgmNoChange_; }
      set {
        bgmNoChange_ = value;
      }
    }

    /// <summary>Field number for the "invalid_default_player_id" field.</summary>
    public const int InvalidDefaultPlayerIdFieldNumber = 46;
    private int invalidDefaultPlayerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int InvalidDefaultPlayerId {
      get { return invalidDefaultPlayerId_; }
      set {
        invalidDefaultPlayerId_ = value;
      }
    }

    /// <summary>Field number for the "estimated_seconds_per_rdf" field.</summary>
    public const int EstimatedSecondsPerRdfFieldNumber = 47;
    private float estimatedSecondsPerRdf_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float EstimatedSecondsPerRdf {
      get { return estimatedSecondsPerRdf_; }
      set {
        estimatedSecondsPerRdf_ = value;
      }
    }

    /// <summary>Field number for the "max_btn_holding_rdf_cnt" field.</summary>
    public const int MaxBtnHoldingRdfCntFieldNumber = 48;
    private int maxBtnHoldingRdfCnt_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxBtnHoldingRdfCnt {
      get { return maxBtnHoldingRdfCnt_; }
      set {
        maxBtnHoldingRdfCnt_ = value;
      }
    }

    /// <summary>Field number for the "max_flying_rdf_cnt" field.</summary>
    public const int MaxFlyingRdfCntFieldNumber = 49;
    private int maxFlyingRdfCnt_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxFlyingRdfCnt {
      get { return maxFlyingRdfCnt_; }
      set {
        maxFlyingRdfCnt_ = value;
      }
    }

    /// <summary>Field number for the "max_reverse_pushback_frames_to_recover" field.</summary>
    public const int MaxReversePushbackFramesToRecoverFieldNumber = 50;
    private int maxReversePushbackFramesToRecover_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxReversePushbackFramesToRecover {
      get { return maxReversePushbackFramesToRecover_; }
      set {
        maxReversePushbackFramesToRecover_ = value;
      }
    }

    /// <summary>Field number for the "terminating_evtsub_id" field.</summary>
    public const int TerminatingEvtsubIdFieldNumber = 51;
    private int terminatingEvtsubId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TerminatingEvtsubId {
      get { return terminatingEvtsubId_; }
      set {
        terminatingEvtsubId_ = value;
      }
    }

    /// <summary>Field number for the "magic_evtsub_id_dummy" field.</summary>
    public const int MagicEvtsubIdDummyFieldNumber = 52;
    private int magicEvtsubIdDummy_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MagicEvtsubIdDummy {
      get { return magicEvtsubIdDummy_; }
      set {
        magicEvtsubIdDummy_ = value;
      }
    }

    /// <summary>Field number for the "speed_not_hit_not_specified" field.</summary>
    public const int SpeedNotHitNotSpecifiedFieldNumber = 53;
    private int speedNotHitNotSpecified_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SpeedNotHitNotSpecified {
      get { return speedNotHitNotSpecified_; }
      set {
        speedNotHitNotSpecified_ = value;
      }
    }

    /// <summary>Field number for the "default_prealloc_npc_capacity" field.</summary>
    public const int DefaultPreallocNpcCapacityFieldNumber = 54;
    private int defaultPreallocNpcCapacity_;
    /// <summary>
    /// 1 serialized "CharacterDownsync" is around 112 bytes per experiment, (7465 - 7017)/(28-24) 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DefaultPreallocNpcCapacity {
      get { return defaultPreallocNpcCapacity_; }
      set {
        defaultPreallocNpcCapacity_ = value;
      }
    }

    /// <summary>Field number for the "default_prealloc_bullet_capacity" field.</summary>
    public const int DefaultPreallocBulletCapacityFieldNumber = 55;
    private int defaultPreallocBulletCapacity_;
    /// <summary>
    /// 1 serialized "Bullet" is around 18.5 bytes per experiment, (7465 - 7317)/(56 - 48)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DefaultPreallocBulletCapacity {
      get { return defaultPreallocBulletCapacity_; }
      set {
        defaultPreallocBulletCapacity_ = value;
      }
    }

    /// <summary>Field number for the "default_prealloc_trap_capacity" field.</summary>
    public const int DefaultPreallocTrapCapacityFieldNumber = 56;
    private int defaultPreallocTrapCapacity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DefaultPreallocTrapCapacity {
      get { return defaultPreallocTrapCapacity_; }
      set {
        defaultPreallocTrapCapacity_ = value;
      }
    }

    /// <summary>Field number for the "default_prealloc_trigger_capacity" field.</summary>
    public const int DefaultPreallocTriggerCapacityFieldNumber = 57;
    private int defaultPreallocTriggerCapacity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DefaultPreallocTriggerCapacity {
      get { return defaultPreallocTriggerCapacity_; }
      set {
        defaultPreallocTriggerCapacity_ = value;
      }
    }

    /// <summary>Field number for the "default_prealloc_pickable_capacity" field.</summary>
    public const int DefaultPreallocPickableCapacityFieldNumber = 58;
    private int defaultPreallocPickableCapacity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DefaultPreallocPickableCapacity {
      get { return defaultPreallocPickableCapacity_; }
      set {
        defaultPreallocPickableCapacity_ = value;
      }
    }

    /// <summary>Field number for the "default_per_character_buff_capacity" field.</summary>
    public const int DefaultPerCharacterBuffCapacityFieldNumber = 59;
    private int defaultPerCharacterBuffCapacity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DefaultPerCharacterBuffCapacity {
      get { return defaultPerCharacterBuffCapacity_; }
      set {
        defaultPerCharacterBuffCapacity_ = value;
      }
    }

    /// <summary>Field number for the "default_per_character_debuff_capacity" field.</summary>
    public const int DefaultPerCharacterDebuffCapacityFieldNumber = 60;
    private int defaultPerCharacterDebuffCapacity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DefaultPerCharacterDebuffCapacity {
      get { return defaultPerCharacterDebuffCapacity_; }
      set {
        defaultPerCharacterDebuffCapacity_ = value;
      }
    }

    /// <summary>Field number for the "default_per_character_inventory_capacity" field.</summary>
    public const int DefaultPerCharacterInventoryCapacityFieldNumber = 61;
    private int defaultPerCharacterInventoryCapacity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DefaultPerCharacterInventoryCapacity {
      get { return defaultPerCharacterInventoryCapacity_; }
      set {
        defaultPerCharacterInventoryCapacity_ = value;
      }
    }

    /// <summary>Field number for the "default_per_character_immune_bullet_record_capacity" field.</summary>
    public const int DefaultPerCharacterImmuneBulletRecordCapacityFieldNumber = 62;
    private int defaultPerCharacterImmuneBulletRecordCapacity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DefaultPerCharacterImmuneBulletRecordCapacity {
      get { return defaultPerCharacterImmuneBulletRecordCapacity_; }
      set {
        defaultPerCharacterImmuneBulletRecordCapacity_ = value;
      }
    }

    /// <summary>Field number for the "gravity_y" field.</summary>
    public const int GravityYFieldNumber = 63;
    private float gravityY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float GravityY {
      get { return gravityY_; }
      set {
        gravityY_ = value;
      }
    }

    /// <summary>Field number for the "gravity_y_jump_holding" field.</summary>
    public const int GravityYJumpHoldingFieldNumber = 64;
    private float gravityYJumpHolding_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float GravityYJumpHolding {
      get { return gravityYJumpHolding_; }
      set {
        gravityYJumpHolding_ = value;
      }
    }

    /// <summary>Field number for the "default_patrol_cue_waiving_frames" field.</summary>
    public const int DefaultPatrolCueWaivingFramesFieldNumber = 65;
    private int defaultPatrolCueWaivingFrames_;
    /// <summary>
    /// in the count of render frames, should be big enough for any NPC to move across the largest patrol cue
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DefaultPatrolCueWaivingFrames {
      get { return defaultPatrolCueWaivingFrames_; }
      set {
        defaultPatrolCueWaivingFrames_ = value;
      }
    }

    /// <summary>Field number for the "no_patrol_cue_id" field.</summary>
    public const int NoPatrolCueIdFieldNumber = 66;
    private int noPatrolCueId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NoPatrolCueId {
      get { return noPatrolCueId_; }
      set {
        noPatrolCueId_ = value;
      }
    }

    /// <summary>Field number for the "no_vfx_id" field.</summary>
    public const int NoVfxIdFieldNumber = 67;
    private int noVfxId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NoVfxId {
      get { return noVfxId_; }
      set {
        noVfxId_ = value;
      }
    }

    /// <summary>Field number for the "default_pickable_hitbox_size_x" field.</summary>
    public const int DefaultPickableHitboxSizeXFieldNumber = 68;
    private float defaultPickableHitboxSizeX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float DefaultPickableHitboxSizeX {
      get { return defaultPickableHitboxSizeX_; }
      set {
        defaultPickableHitboxSizeX_ = value;
      }
    }

    /// <summary>Field number for the "default_pickable_hitbox_size_y" field.</summary>
    public const int DefaultPickableHitboxSizeYFieldNumber = 69;
    private float defaultPickableHitboxSizeY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float DefaultPickableHitboxSizeY {
      get { return defaultPickableHitboxSizeY_; }
      set {
        defaultPickableHitboxSizeY_ = value;
      }
    }

    /// <summary>Field number for the "default_pickable_disappearing_anim_frames" field.</summary>
    public const int DefaultPickableDisappearingAnimFramesFieldNumber = 70;
    private int defaultPickableDisappearingAnimFrames_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DefaultPickableDisappearingAnimFrames {
      get { return defaultPickableDisappearingAnimFrames_; }
      set {
        defaultPickableDisappearingAnimFrames_ = value;
      }
    }

    /// <summary>Field number for the "default_pickable_consumed_anim_frames" field.</summary>
    public const int DefaultPickableConsumedAnimFramesFieldNumber = 71;
    private int defaultPickableConsumedAnimFrames_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DefaultPickableConsumedAnimFrames {
      get { return defaultPickableConsumedAnimFrames_; }
      set {
        defaultPickableConsumedAnimFrames_ = value;
      }
    }

    /// <summary>Field number for the "default_pickable_rising_vel_y" field.</summary>
    public const int DefaultPickableRisingVelYFieldNumber = 72;
    private float defaultPickableRisingVelY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float DefaultPickableRisingVelY {
      get { return defaultPickableRisingVelY_; }
      set {
        defaultPickableRisingVelY_ = value;
      }
    }

    /// <summary>Field number for the "default_pickable_nonpickable_startup_frames" field.</summary>
    public const int DefaultPickableNonpickableStartupFramesFieldNumber = 73;
    private int defaultPickableNonpickableStartupFrames_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DefaultPickableNonpickableStartupFrames {
      get { return defaultPickableNonpickableStartupFrames_; }
      set {
        defaultPickableNonpickableStartupFrames_ = value;
      }
    }

    /// <summary>Field number for the "default_frames_to_show_damaged" field.</summary>
    public const int DefaultFramesToShowDamagedFieldNumber = 74;
    private int defaultFramesToShowDamaged_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DefaultFramesToShowDamaged {
      get { return defaultFramesToShowDamaged_; }
      set {
        defaultFramesToShowDamaged_ = value;
      }
    }

    /// <summary>Field number for the "default_frames_to_continue_combo" field.</summary>
    public const int DefaultFramesToContinueComboFieldNumber = 75;
    private int defaultFramesToContinueCombo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DefaultFramesToContinueCombo {
      get { return defaultFramesToContinueCombo_; }
      set {
        defaultFramesToContinueCombo_ = value;
      }
    }

    /// <summary>Field number for the "default_block_stun_frames" field.</summary>
    public const int DefaultBlockStunFramesFieldNumber = 76;
    private int defaultBlockStunFrames_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DefaultBlockStunFrames {
      get { return defaultBlockStunFrames_; }
      set {
        defaultBlockStunFrames_ = value;
      }
    }

    /// <summary>Field number for the "default_blownup_frames_for_flying" field.</summary>
    public const int DefaultBlownupFramesForFlyingFieldNumber = 77;
    private int defaultBlownupFramesForFlying_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DefaultBlownupFramesForFlying {
      get { return defaultBlownupFramesForFlying_; }
      set {
        defaultBlownupFramesForFlying_ = value;
      }
    }

    /// <summary>Field number for the "default_gauge_inc_by_hit" field.</summary>
    public const int DefaultGaugeIncByHitFieldNumber = 78;
    private int defaultGaugeIncByHit_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DefaultGaugeIncByHit {
      get { return defaultGaugeIncByHit_; }
      set {
        defaultGaugeIncByHit_ = value;
      }
    }

    /// <summary>Field number for the "default_frames_delayed_of_boss_savepoint" field.</summary>
    public const int DefaultFramesDelayedOfBossSavepointFieldNumber = 79;
    private int defaultFramesDelayedOfBossSavepoint_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DefaultFramesDelayedOfBossSavepoint {
      get { return defaultFramesDelayedOfBossSavepoint_; }
      set {
        defaultFramesDelayedOfBossSavepoint_ = value;
      }
    }

    /// <summary>Field number for the "input_scale_frames" field.</summary>
    public const int InputScaleFramesFieldNumber = 80;
    private int inputScaleFrames_;
    /// <summary>
    /// [WARNING] Experimentally having an input rate > 15 (e.g., 60 >> 2) doesn't improve multiplayer smoothness, in fact higher input rate often results in higher packet loss (both TCP and UDP) thus higher wrong prediction rate!
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int InputScaleFrames {
      get { return inputScaleFrames_; }
      set {
        inputScaleFrames_ = value;
      }
    }

    /// <summary>Field number for the "input_scale" field.</summary>
    public const int InputScaleFieldNumber = 81;
    private int inputScale_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int InputScale {
      get { return inputScale_; }
      set {
        inputScale_ = value;
      }
    }

    /// <summary>Field number for the "input_delay_frames" field.</summary>
    public const int InputDelayFramesFieldNumber = 82;
    private int inputDelayFrames_;
    /// <summary>
    /// in the count of render frames
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int InputDelayFrames {
      get { return inputDelayFrames_; }
      set {
        inputDelayFrames_ = value;
      }
    }

    /// <summary>Field number for the "default_backend_input_buffer_size" field.</summary>
    public const int DefaultBackendInputBufferSizeFieldNumber = 83;
    private int defaultBackendInputBufferSize_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DefaultBackendInputBufferSize {
      get { return defaultBackendInputBufferSize_; }
      set {
        defaultBackendInputBufferSize_ = value;
      }
    }

    /// <summary>Field number for the "magic_frames_to_be_on_wall" field.</summary>
    public const int MagicFramesToBeOnWallFieldNumber = 86;
    private int magicFramesToBeOnWall_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MagicFramesToBeOnWall {
      get { return magicFramesToBeOnWall_; }
      set {
        magicFramesToBeOnWall_ = value;
      }
    }

    /// <summary>Field number for the "dying_frames_to_recover" field.</summary>
    public const int DyingFramesToRecoverFieldNumber = 87;
    private int dyingFramesToRecover_;
    /// <summary>
    /// MUST BE SAME FOR EVERY CHARACTER FOR FAIRNESS!
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DyingFramesToRecover {
      get { return dyingFramesToRecover_; }
      set {
        dyingFramesToRecover_ = value;
      }
    }

    /// <summary>Field number for the "parried_frames_to_recover" field.</summary>
    public const int ParriedFramesToRecoverFieldNumber = 88;
    private int parriedFramesToRecover_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ParriedFramesToRecover {
      get { return parriedFramesToRecover_; }
      set {
        parriedFramesToRecover_ = value;
      }
    }

    /// <summary>Field number for the "parried_frames_to_start_cancellable" field.</summary>
    public const int ParriedFramesToStartCancellableFieldNumber = 89;
    private int parriedFramesToStartCancellable_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ParriedFramesToStartCancellable {
      get { return parriedFramesToStartCancellable_; }
      set {
        parriedFramesToStartCancellable_ = value;
      }
    }

    /// <summary>Field number for the "no_skill" field.</summary>
    public const int NoSkillFieldNumber = 90;
    private uint noSkill_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint NoSkill {
      get { return noSkill_; }
      set {
        noSkill_ = value;
      }
    }

    /// <summary>Field number for the "no_skill_hit" field.</summary>
    public const int NoSkillHitFieldNumber = 91;
    private int noSkillHit_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NoSkillHit {
      get { return noSkillHit_; }
      set {
        noSkillHit_ = value;
      }
    }

    /// <summary>Field number for the "no_lock_vel" field.</summary>
    public const int NoLockVelFieldNumber = 94;
    private float noLockVel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float NoLockVel {
      get { return noLockVel_; }
      set {
        noLockVel_ = value;
      }
    }

    /// <summary>Field number for the "debuff_arr_idx_elemental" field.</summary>
    public const int DebuffArrIdxElementalFieldNumber = 95;
    private int debuffArrIdxElemental_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DebuffArrIdxElemental {
      get { return debuffArrIdxElemental_; }
      set {
        debuffArrIdxElemental_ = value;
      }
    }

    /// <summary>Field number for the "terminating_render_frame_id" field.</summary>
    public const int TerminatingRenderFrameIdFieldNumber = 96;
    private int terminatingRenderFrameId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TerminatingRenderFrameId {
      get { return terminatingRenderFrameId_; }
      set {
        terminatingRenderFrameId_ = value;
      }
    }

    /// <summary>Field number for the "terminating_input_frame_id" field.</summary>
    public const int TerminatingInputFrameIdFieldNumber = 97;
    private int terminatingInputFrameId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TerminatingInputFrameId {
      get { return terminatingInputFrameId_; }
      set {
        terminatingInputFrameId_ = value;
      }
    }

    /// <summary>Field number for the "terminating_character_id" field.</summary>
    public const int TerminatingCharacterIdFieldNumber = 98;
    private uint terminatingCharacterId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TerminatingCharacterId {
      get { return terminatingCharacterId_; }
      set {
        terminatingCharacterId_ = value;
      }
    }

    /// <summary>Field number for the "terminating_trap_id" field.</summary>
    public const int TerminatingTrapIdFieldNumber = 99;
    private uint terminatingTrapId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TerminatingTrapId {
      get { return terminatingTrapId_; }
      set {
        terminatingTrapId_ = value;
      }
    }

    /// <summary>Field number for the "terminating_trigger_id" field.</summary>
    public const int TerminatingTriggerIdFieldNumber = 100;
    private uint terminatingTriggerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TerminatingTriggerId {
      get { return terminatingTriggerId_; }
      set {
        terminatingTriggerId_ = value;
      }
    }

    /// <summary>Field number for the "terminating_pickable_id" field.</summary>
    public const int TerminatingPickableIdFieldNumber = 101;
    private uint terminatingPickableId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TerminatingPickableId {
      get { return terminatingPickableId_; }
      set {
        terminatingPickableId_ = value;
      }
    }

    /// <summary>Field number for the "terminating_bullet_id" field.</summary>
    public const int TerminatingBulletIdFieldNumber = 102;
    private uint terminatingBulletId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TerminatingBulletId {
      get { return terminatingBulletId_; }
      set {
        terminatingBulletId_ = value;
      }
    }

    /// <summary>Field number for the "terminating_bullet_team_id" field.</summary>
    public const int TerminatingBulletTeamIdFieldNumber = 103;
    private int terminatingBulletTeamId_;
    /// <summary>
    /// Default for proto int32 to save space
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TerminatingBulletTeamId {
      get { return terminatingBulletTeamId_; }
      set {
        terminatingBulletTeamId_ = value;
      }
    }

    /// <summary>Field number for the "terminating_buff_species_id" field.</summary>
    public const int TerminatingBuffSpeciesIdFieldNumber = 104;
    private uint terminatingBuffSpeciesId_;
    /// <summary>
    /// Default for proto int32 to save space in "CharacterDownsync.killedToDropBuffSpeciesId"
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TerminatingBuffSpeciesId {
      get { return terminatingBuffSpeciesId_; }
      set {
        terminatingBuffSpeciesId_ = value;
      }
    }

    /// <summary>Field number for the "terminating_debuff_species_id" field.</summary>
    public const int TerminatingDebuffSpeciesIdFieldNumber = 105;
    private uint terminatingDebuffSpeciesId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TerminatingDebuffSpeciesId {
      get { return terminatingDebuffSpeciesId_; }
      set {
        terminatingDebuffSpeciesId_ = value;
      }
    }

    /// <summary>Field number for the "terminating_consumable_species_id" field.</summary>
    public const int TerminatingConsumableSpeciesIdFieldNumber = 106;
    private uint terminatingConsumableSpeciesId_;
    /// <summary>
    /// Default for proto int32 to save space in "CharacterDownsync.killedToDropConsumableSpeciesId"
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TerminatingConsumableSpeciesId {
      get { return terminatingConsumableSpeciesId_; }
      set {
        terminatingConsumableSpeciesId_ = value;
      }
    }

    /// <summary>Field number for the "frontend_ws_recv_bytelength" field.</summary>
    public const int FrontendWsRecvBytelengthFieldNumber = 107;
    private int frontendWsRecvBytelength_;
    /// <summary>
    /// Expirically enough and not too big to have a graphic smoothness impact when receiving
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FrontendWsRecvBytelength {
      get { return frontendWsRecvBytelength_; }
      set {
        frontendWsRecvBytelength_ = value;
      }
    }

    /// <summary>Field number for the "backend_ws_recv_bytelength" field.</summary>
    public const int BackendWsRecvBytelengthFieldNumber = 108;
    private int backendWsRecvBytelength_;
    /// <summary>
    /// Slightly larger than FRONTEND_WS_RECV_BYTELENGTH because it has to receive some initial collider information
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BackendWsRecvBytelength {
      get { return backendWsRecvBytelength_; }
      set {
        backendWsRecvBytelength_ = value;
      }
    }

    /// <summary>Field number for the "jammed_btn_holding_rdf_cnt" field.</summary>
    public const int JammedBtnHoldingRdfCntFieldNumber = 109;
    private int jammedBtnHoldingRdfCnt_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int JammedBtnHoldingRdfCnt {
      get { return jammedBtnHoldingRdfCnt_; }
      set {
        jammedBtnHoldingRdfCnt_ = value;
      }
    }

    /// <summary>Field number for the "btn_b_holding_rdf_cnt_threshold_2" field.</summary>
    public const int BtnBHoldingRdfCntThreshold2FieldNumber = 110;
    private int btnBHoldingRdfCntThreshold2_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BtnBHoldingRdfCntThreshold2 {
      get { return btnBHoldingRdfCntThreshold2_; }
      set {
        btnBHoldingRdfCntThreshold2_ = value;
      }
    }

    /// <summary>Field number for the "btn_b_holding_rdf_cnt_threshold_1" field.</summary>
    public const int BtnBHoldingRdfCntThreshold1FieldNumber = 111;
    private int btnBHoldingRdfCntThreshold1_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BtnBHoldingRdfCntThreshold1 {
      get { return btnBHoldingRdfCntThreshold1_; }
      set {
        btnBHoldingRdfCntThreshold1_ = value;
      }
    }

    /// <summary>Field number for the "jump_holding_rdf_cnt_threshold_1" field.</summary>
    public const int JumpHoldingRdfCntThreshold1FieldNumber = 112;
    private int jumpHoldingRdfCntThreshold1_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int JumpHoldingRdfCntThreshold1 {
      get { return jumpHoldingRdfCntThreshold1_; }
      set {
        jumpHoldingRdfCntThreshold1_ = value;
      }
    }

    /// <summary>Field number for the "jump_holding_ifd_cnt_threshold_1" field.</summary>
    public const int JumpHoldingIfdCntThreshold1FieldNumber = 113;
    private int jumpHoldingIfdCntThreshold1_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int JumpHoldingIfdCntThreshold1 {
      get { return jumpHoldingIfdCntThreshold1_; }
      set {
        jumpHoldingIfdCntThreshold1_ = value;
      }
    }

    /// <summary>Field number for the "jump_holding_rdf_cnt_threshold_2" field.</summary>
    public const int JumpHoldingRdfCntThreshold2FieldNumber = 114;
    private int jumpHoldingRdfCntThreshold2_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int JumpHoldingRdfCntThreshold2 {
      get { return jumpHoldingRdfCntThreshold2_; }
      set {
        jumpHoldingRdfCntThreshold2_ = value;
      }
    }

    /// <summary>Field number for the "jump_holding_ifd_cnt_threshold_2" field.</summary>
    public const int JumpHoldingIfdCntThreshold2FieldNumber = 115;
    private int jumpHoldingIfdCntThreshold2_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int JumpHoldingIfdCntThreshold2 {
      get { return jumpHoldingIfdCntThreshold2_; }
      set {
        jumpHoldingIfdCntThreshold2_ = value;
      }
    }

    /// <summary>Field number for the "in_air_dash_grace_period_rdf_cnt" field.</summary>
    public const int InAirDashGracePeriodRdfCntFieldNumber = 116;
    private int inAirDashGracePeriodRdfCnt_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int InAirDashGracePeriodRdfCnt {
      get { return inAirDashGracePeriodRdfCnt_; }
      set {
        inAirDashGracePeriodRdfCnt_ = value;
      }
    }

    /// <summary>Field number for the "in_air_jump_grace_period_rdf_cnt" field.</summary>
    public const int InAirJumpGracePeriodRdfCntFieldNumber = 117;
    private int inAirJumpGracePeriodRdfCnt_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int InAirJumpGracePeriodRdfCnt {
      get { return inAirJumpGracePeriodRdfCnt_; }
      set {
        inAirJumpGracePeriodRdfCnt_ = value;
      }
    }

    /// <summary>Field number for the "btn_e_holding_rdf_cnt_threshold_1" field.</summary>
    public const int BtnEHoldingRdfCntThreshold1FieldNumber = 118;
    private int btnEHoldingRdfCntThreshold1_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BtnEHoldingRdfCntThreshold1 {
      get { return btnEHoldingRdfCntThreshold1_; }
      set {
        btnEHoldingRdfCntThreshold1_ = value;
      }
    }

    /// <summary>Field number for the "btn_e_holding_ifd_cnt_threshold_1" field.</summary>
    public const int BtnEHoldingIfdCntThreshold1FieldNumber = 119;
    private int btnEHoldingIfdCntThreshold1_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BtnEHoldingIfdCntThreshold1 {
      get { return btnEHoldingIfdCntThreshold1_; }
      set {
        btnEHoldingIfdCntThreshold1_ = value;
      }
    }

    /// <summary>Field number for the "sp_atk_lookup_frames" field.</summary>
    public const int SpAtkLookupFramesFieldNumber = 120;
    private int spAtkLookupFrames_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SpAtkLookupFrames {
      get { return spAtkLookupFrames_; }
      set {
        spAtkLookupFrames_ = value;
      }
    }

    /// <summary>Field number for the "pattern_id_unable_to_op" field.</summary>
    public const int PatternIdUnableToOpFieldNumber = 121;
    private int patternIdUnableToOp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PatternIdUnableToOp {
      get { return patternIdUnableToOp_; }
      set {
        patternIdUnableToOp_ = value;
      }
    }

    /// <summary>Field number for the "pattern_id_no_op" field.</summary>
    public const int PatternIdNoOpFieldNumber = 122;
    private int patternIdNoOp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PatternIdNoOp {
      get { return patternIdNoOp_; }
      set {
        patternIdNoOp_ = value;
      }
    }

    /// <summary>Field number for the "pattern_b" field.</summary>
    public const int PatternBFieldNumber = 123;
    private int patternB_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PatternB {
      get { return patternB_; }
      set {
        patternB_ = value;
      }
    }

    /// <summary>Field number for the "pattern_up_b" field.</summary>
    public const int PatternUpBFieldNumber = 124;
    private int patternUpB_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PatternUpB {
      get { return patternUpB_; }
      set {
        patternUpB_ = value;
      }
    }

    /// <summary>Field number for the "pattern_down_b" field.</summary>
    public const int PatternDownBFieldNumber = 125;
    private int patternDownB_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PatternDownB {
      get { return patternDownB_; }
      set {
        patternDownB_ = value;
      }
    }

    /// <summary>Field number for the "pattern_hold_b" field.</summary>
    public const int PatternHoldBFieldNumber = 126;
    private int patternHoldB_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PatternHoldB {
      get { return patternHoldB_; }
      set {
        patternHoldB_ = value;
      }
    }

    /// <summary>Field number for the "pattern_down_a" field.</summary>
    public const int PatternDownAFieldNumber = 127;
    private int patternDownA_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PatternDownA {
      get { return patternDownA_; }
      set {
        patternDownA_ = value;
      }
    }

    /// <summary>Field number for the "pattern_released_b" field.</summary>
    public const int PatternReleasedBFieldNumber = 128;
    private int patternReleasedB_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PatternReleasedB {
      get { return patternReleasedB_; }
      set {
        patternReleasedB_ = value;
      }
    }

    /// <summary>Field number for the "pattern_e" field.</summary>
    public const int PatternEFieldNumber = 129;
    private int patternE_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PatternE {
      get { return patternE_; }
      set {
        patternE_ = value;
      }
    }

    /// <summary>Field number for the "pattern_front_e" field.</summary>
    public const int PatternFrontEFieldNumber = 130;
    private int patternFrontE_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PatternFrontE {
      get { return patternFrontE_; }
      set {
        patternFrontE_ = value;
      }
    }

    /// <summary>Field number for the "pattern_back_e" field.</summary>
    public const int PatternBackEFieldNumber = 131;
    private int patternBackE_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PatternBackE {
      get { return patternBackE_; }
      set {
        patternBackE_ = value;
      }
    }

    /// <summary>Field number for the "pattern_up_e" field.</summary>
    public const int PatternUpEFieldNumber = 132;
    private int patternUpE_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PatternUpE {
      get { return patternUpE_; }
      set {
        patternUpE_ = value;
      }
    }

    /// <summary>Field number for the "pattern_down_e" field.</summary>
    public const int PatternDownEFieldNumber = 133;
    private int patternDownE_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PatternDownE {
      get { return patternDownE_; }
      set {
        patternDownE_ = value;
      }
    }

    /// <summary>Field number for the "pattern_hold_e" field.</summary>
    public const int PatternHoldEFieldNumber = 134;
    private int patternHoldE_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PatternHoldE {
      get { return patternHoldE_; }
      set {
        patternHoldE_ = value;
      }
    }

    /// <summary>Field number for the "pattern_e_hold_b" field.</summary>
    public const int PatternEHoldBFieldNumber = 135;
    private int patternEHoldB_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PatternEHoldB {
      get { return patternEHoldB_; }
      set {
        patternEHoldB_ = value;
      }
    }

    /// <summary>Field number for the "pattern_front_e_hold_b" field.</summary>
    public const int PatternFrontEHoldBFieldNumber = 136;
    private int patternFrontEHoldB_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PatternFrontEHoldB {
      get { return patternFrontEHoldB_; }
      set {
        patternFrontEHoldB_ = value;
      }
    }

    /// <summary>Field number for the "pattern_back_e_hold_b" field.</summary>
    public const int PatternBackEHoldBFieldNumber = 137;
    private int patternBackEHoldB_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PatternBackEHoldB {
      get { return patternBackEHoldB_; }
      set {
        patternBackEHoldB_ = value;
      }
    }

    /// <summary>Field number for the "pattern_up_e_hold_b" field.</summary>
    public const int PatternUpEHoldBFieldNumber = 138;
    private int patternUpEHoldB_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PatternUpEHoldB {
      get { return patternUpEHoldB_; }
      set {
        patternUpEHoldB_ = value;
      }
    }

    /// <summary>Field number for the "pattern_down_e_hold_b" field.</summary>
    public const int PatternDownEHoldBFieldNumber = 139;
    private int patternDownEHoldB_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PatternDownEHoldB {
      get { return patternDownEHoldB_; }
      set {
        patternDownEHoldB_ = value;
      }
    }

    /// <summary>Field number for the "pattern_hold_e_hold_b" field.</summary>
    public const int PatternHoldEHoldBFieldNumber = 140;
    private int patternHoldEHoldB_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PatternHoldEHoldB {
      get { return patternHoldEHoldB_; }
      set {
        patternHoldEHoldB_ = value;
      }
    }

    /// <summary>Field number for the "pattern_inventory_slot_c" field.</summary>
    public const int PatternInventorySlotCFieldNumber = 141;
    private int patternInventorySlotC_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PatternInventorySlotC {
      get { return patternInventorySlotC_; }
      set {
        patternInventorySlotC_ = value;
      }
    }

    /// <summary>Field number for the "pattern_inventory_slot_d" field.</summary>
    public const int PatternInventorySlotDFieldNumber = 142;
    private int patternInventorySlotD_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PatternInventorySlotD {
      get { return patternInventorySlotD_; }
      set {
        patternInventorySlotD_ = value;
      }
    }

    /// <summary>Field number for the "pattern_inventory_slot_bc" field.</summary>
    public const int PatternInventorySlotBcFieldNumber = 143;
    private int patternInventorySlotBc_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PatternInventorySlotBc {
      get { return patternInventorySlotBc_; }
      set {
        patternInventorySlotBc_ = value;
      }
    }

    /// <summary>Field number for the "pattern_hold_inventory_slot_c" field.</summary>
    public const int PatternHoldInventorySlotCFieldNumber = 144;
    private int patternHoldInventorySlotC_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PatternHoldInventorySlotC {
      get { return patternHoldInventorySlotC_; }
      set {
        patternHoldInventorySlotC_ = value;
      }
    }

    /// <summary>Field number for the "pattern_hold_inventory_slot_d" field.</summary>
    public const int PatternHoldInventorySlotDFieldNumber = 145;
    private int patternHoldInventorySlotD_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PatternHoldInventorySlotD {
      get { return patternHoldInventorySlotD_; }
      set {
        patternHoldInventorySlotD_ = value;
      }
    }

    /// <summary>Field number for the "ele_none" field.</summary>
    public const int EleNoneFieldNumber = 146;
    private uint eleNone_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint EleNone {
      get { return eleNone_; }
      set {
        eleNone_ = value;
      }
    }

    /// <summary>Field number for the "ele_fire" field.</summary>
    public const int EleFireFieldNumber = 147;
    private uint eleFire_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint EleFire {
      get { return eleFire_; }
      set {
        eleFire_ = value;
      }
    }

    /// <summary>Field number for the "ele_water" field.</summary>
    public const int EleWaterFieldNumber = 148;
    private uint eleWater_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint EleWater {
      get { return eleWater_; }
      set {
        eleWater_ = value;
      }
    }

    /// <summary>Field number for the "ele_thunder" field.</summary>
    public const int EleThunderFieldNumber = 149;
    private uint eleThunder_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint EleThunder {
      get { return eleThunder_; }
      set {
        eleThunder_ = value;
      }
    }

    /// <summary>Field number for the "ele_rock" field.</summary>
    public const int EleRockFieldNumber = 150;
    private uint eleRock_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint EleRock {
      get { return eleRock_; }
      set {
        eleRock_ = value;
      }
    }

    /// <summary>Field number for the "ele_wind" field.</summary>
    public const int EleWindFieldNumber = 151;
    private uint eleWind_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint EleWind {
      get { return eleWind_; }
      set {
        eleWind_ = value;
      }
    }

    /// <summary>Field number for the "ele_ice" field.</summary>
    public const int EleIceFieldNumber = 152;
    private uint eleIce_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint EleIce {
      get { return eleIce_; }
      set {
        eleIce_ = value;
      }
    }

    /// <summary>Field number for the "ele_weakness_default_yield" field.</summary>
    public const int EleWeaknessDefaultYieldFieldNumber = 153;
    private float eleWeaknessDefaultYield_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float EleWeaknessDefaultYield {
      get { return eleWeaknessDefaultYield_; }
      set {
        eleWeaknessDefaultYield_ = value;
      }
    }

    /// <summary>Field number for the "ele_resistance_default_yield" field.</summary>
    public const int EleResistanceDefaultYieldFieldNumber = 154;
    private float eleResistanceDefaultYield_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float EleResistanceDefaultYield {
      get { return eleResistanceDefaultYield_; }
      set {
        eleResistanceDefaultYield_ = value;
      }
    }

    /// <summary>Field number for the "starting_render_frame_id" field.</summary>
    public const int StartingRenderFrameIdFieldNumber = 155;
    private int startingRenderFrameId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StartingRenderFrameId {
      get { return startingRenderFrameId_; }
      set {
        startingRenderFrameId_ = value;
      }
    }

    /// <summary>Field number for the "starting_input_frame_id" field.</summary>
    public const int StartingInputFrameIdFieldNumber = 156;
    private int startingInputFrameId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StartingInputFrameId {
      get { return startingInputFrameId_; }
      set {
        startingInputFrameId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PrimitiveConsts);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PrimitiveConsts other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BattleDynamicsFps != other.BattleDynamicsFps) return false;
      if (DefaultTimeoutForLastAllConfirmedIfd != other.DefaultTimeoutForLastAllConfirmedIfd) return false;
      if (RoomIdNone != other.RoomIdNone) return false;
      if (RoomStateImpossible != other.RoomStateImpossible) return false;
      if (RoomStateIdle != other.RoomStateIdle) return false;
      if (RoomStateWaiting != other.RoomStateWaiting) return false;
      if (RoomStatePrepare != other.RoomStatePrepare) return false;
      if (RoomStateInBattle != other.RoomStateInBattle) return false;
      if (RoomStateInSettlement != other.RoomStateInSettlement) return false;
      if (RoomStateStopped != other.RoomStateStopped) return false;
      if (RoomStateFrontendAwaitingAutoRejoin != other.RoomStateFrontendAwaitingAutoRejoin) return false;
      if (RoomStateFrontendAwaitingManualRejoin != other.RoomStateFrontendAwaitingManualRejoin) return false;
      if (RoomStateFrontendRejoining != other.RoomStateFrontendRejoining) return false;
      if (PlayerBattleStateImpossible != other.PlayerBattleStateImpossible) return false;
      if (PlayerBattleStateAddedPendingBattleColliderAck != other.PlayerBattleStateAddedPendingBattleColliderAck) return false;
      if (PlayerBattleStateReaddedPendingForceResync != other.PlayerBattleStateReaddedPendingForceResync) return false;
      if (PlayerBattleStateActive != other.PlayerBattleStateActive) return false;
      if (PlayerBattleStateDisconnected != other.PlayerBattleStateDisconnected) return false;
      if (PlayerBattleStateLost != other.PlayerBattleStateLost) return false;
      if (PlayerBattleStateExpelledDuringGame != other.PlayerBattleStateExpelledDuringGame) return false;
      if (PlayerBattleStateExpelledInDismissal != other.PlayerBattleStateExpelledInDismissal) return false;
      if (UpsyncMsgActPlayerColliderAck != other.UpsyncMsgActPlayerColliderAck) return false;
      if (UpsyncMsgActPlayerCmd != other.UpsyncMsgActPlayerCmd) return false;
      if (UpsyncMsgActHolepunchBackendUdpTunnel != other.UpsyncMsgActHolepunchBackendUdpTunnel) return false;
      if (UpsyncMsgActHolepunchPeerUdpAddr != other.UpsyncMsgActHolepunchPeerUdpAddr) return false;
      if (DownsyncMsgActBattleColliderInfo != other.DownsyncMsgActBattleColliderInfo) return false;
      if (DownsyncMsgActInputBatch != other.DownsyncMsgActInputBatch) return false;
      if (DownsyncMsgActBattleStopped != other.DownsyncMsgActBattleStopped) return false;
      if (DownsyncMsgActForcedResync != other.DownsyncMsgActForcedResync) return false;
      if (DownsyncMsgActPeerInputBatch != other.DownsyncMsgActPeerInputBatch) return false;
      if (DownsyncMsgActPeerUdpAddr != other.DownsyncMsgActPeerUdpAddr) return false;
      if (DownsyncMsgActBattleReadyToStart != other.DownsyncMsgActBattleReadyToStart) return false;
      if (DownsyncMsgActBattleStart != other.DownsyncMsgActBattleStart) return false;
      if (DownsyncMsgActPlayerDisconnected != other.DownsyncMsgActPlayerDisconnected) return false;
      if (DownsyncMsgActPlayerReaddedAndAcked != other.DownsyncMsgActPlayerReaddedAndAcked) return false;
      if (DownsyncMsgActPlayerAddedAndAcked != other.DownsyncMsgActPlayerAddedAndAcked) return false;
      if (DownsyncMsgWsClosed != other.DownsyncMsgWsClosed) return false;
      if (DownsyncMsgWsOpen != other.DownsyncMsgWsOpen) return false;
      if (MagicJoinIndexInvalid != other.MagicJoinIndexInvalid) return false;
      if (MagicJoinIndexSrvUdpTunnel != other.MagicJoinIndexSrvUdpTunnel) return false;
      if (MagicQuotaInfinite != other.MagicQuotaInfinite) return false;
      if (NpcFleeGracePeriodRdfCnt != other.NpcFleeGracePeriodRdfCnt) return false;
      if (MagicLastSentInputFrameIdNormalAdded != other.MagicLastSentInputFrameIdNormalAdded) return false;
      if (MagicLastSentInputFrameIdReadded != other.MagicLastSentInputFrameIdReadded) return false;
      if (BgmNoChange != other.BgmNoChange) return false;
      if (InvalidDefaultPlayerId != other.InvalidDefaultPlayerId) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(EstimatedSecondsPerRdf, other.EstimatedSecondsPerRdf)) return false;
      if (MaxBtnHoldingRdfCnt != other.MaxBtnHoldingRdfCnt) return false;
      if (MaxFlyingRdfCnt != other.MaxFlyingRdfCnt) return false;
      if (MaxReversePushbackFramesToRecover != other.MaxReversePushbackFramesToRecover) return false;
      if (TerminatingEvtsubId != other.TerminatingEvtsubId) return false;
      if (MagicEvtsubIdDummy != other.MagicEvtsubIdDummy) return false;
      if (SpeedNotHitNotSpecified != other.SpeedNotHitNotSpecified) return false;
      if (DefaultPreallocNpcCapacity != other.DefaultPreallocNpcCapacity) return false;
      if (DefaultPreallocBulletCapacity != other.DefaultPreallocBulletCapacity) return false;
      if (DefaultPreallocTrapCapacity != other.DefaultPreallocTrapCapacity) return false;
      if (DefaultPreallocTriggerCapacity != other.DefaultPreallocTriggerCapacity) return false;
      if (DefaultPreallocPickableCapacity != other.DefaultPreallocPickableCapacity) return false;
      if (DefaultPerCharacterBuffCapacity != other.DefaultPerCharacterBuffCapacity) return false;
      if (DefaultPerCharacterDebuffCapacity != other.DefaultPerCharacterDebuffCapacity) return false;
      if (DefaultPerCharacterInventoryCapacity != other.DefaultPerCharacterInventoryCapacity) return false;
      if (DefaultPerCharacterImmuneBulletRecordCapacity != other.DefaultPerCharacterImmuneBulletRecordCapacity) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(GravityY, other.GravityY)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(GravityYJumpHolding, other.GravityYJumpHolding)) return false;
      if (DefaultPatrolCueWaivingFrames != other.DefaultPatrolCueWaivingFrames) return false;
      if (NoPatrolCueId != other.NoPatrolCueId) return false;
      if (NoVfxId != other.NoVfxId) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(DefaultPickableHitboxSizeX, other.DefaultPickableHitboxSizeX)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(DefaultPickableHitboxSizeY, other.DefaultPickableHitboxSizeY)) return false;
      if (DefaultPickableDisappearingAnimFrames != other.DefaultPickableDisappearingAnimFrames) return false;
      if (DefaultPickableConsumedAnimFrames != other.DefaultPickableConsumedAnimFrames) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(DefaultPickableRisingVelY, other.DefaultPickableRisingVelY)) return false;
      if (DefaultPickableNonpickableStartupFrames != other.DefaultPickableNonpickableStartupFrames) return false;
      if (DefaultFramesToShowDamaged != other.DefaultFramesToShowDamaged) return false;
      if (DefaultFramesToContinueCombo != other.DefaultFramesToContinueCombo) return false;
      if (DefaultBlockStunFrames != other.DefaultBlockStunFrames) return false;
      if (DefaultBlownupFramesForFlying != other.DefaultBlownupFramesForFlying) return false;
      if (DefaultGaugeIncByHit != other.DefaultGaugeIncByHit) return false;
      if (DefaultFramesDelayedOfBossSavepoint != other.DefaultFramesDelayedOfBossSavepoint) return false;
      if (InputScaleFrames != other.InputScaleFrames) return false;
      if (InputScale != other.InputScale) return false;
      if (InputDelayFrames != other.InputDelayFrames) return false;
      if (DefaultBackendInputBufferSize != other.DefaultBackendInputBufferSize) return false;
      if (MagicFramesToBeOnWall != other.MagicFramesToBeOnWall) return false;
      if (DyingFramesToRecover != other.DyingFramesToRecover) return false;
      if (ParriedFramesToRecover != other.ParriedFramesToRecover) return false;
      if (ParriedFramesToStartCancellable != other.ParriedFramesToStartCancellable) return false;
      if (NoSkill != other.NoSkill) return false;
      if (NoSkillHit != other.NoSkillHit) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(NoLockVel, other.NoLockVel)) return false;
      if (DebuffArrIdxElemental != other.DebuffArrIdxElemental) return false;
      if (TerminatingRenderFrameId != other.TerminatingRenderFrameId) return false;
      if (TerminatingInputFrameId != other.TerminatingInputFrameId) return false;
      if (TerminatingCharacterId != other.TerminatingCharacterId) return false;
      if (TerminatingTrapId != other.TerminatingTrapId) return false;
      if (TerminatingTriggerId != other.TerminatingTriggerId) return false;
      if (TerminatingPickableId != other.TerminatingPickableId) return false;
      if (TerminatingBulletId != other.TerminatingBulletId) return false;
      if (TerminatingBulletTeamId != other.TerminatingBulletTeamId) return false;
      if (TerminatingBuffSpeciesId != other.TerminatingBuffSpeciesId) return false;
      if (TerminatingDebuffSpeciesId != other.TerminatingDebuffSpeciesId) return false;
      if (TerminatingConsumableSpeciesId != other.TerminatingConsumableSpeciesId) return false;
      if (FrontendWsRecvBytelength != other.FrontendWsRecvBytelength) return false;
      if (BackendWsRecvBytelength != other.BackendWsRecvBytelength) return false;
      if (JammedBtnHoldingRdfCnt != other.JammedBtnHoldingRdfCnt) return false;
      if (BtnBHoldingRdfCntThreshold2 != other.BtnBHoldingRdfCntThreshold2) return false;
      if (BtnBHoldingRdfCntThreshold1 != other.BtnBHoldingRdfCntThreshold1) return false;
      if (JumpHoldingRdfCntThreshold1 != other.JumpHoldingRdfCntThreshold1) return false;
      if (JumpHoldingIfdCntThreshold1 != other.JumpHoldingIfdCntThreshold1) return false;
      if (JumpHoldingRdfCntThreshold2 != other.JumpHoldingRdfCntThreshold2) return false;
      if (JumpHoldingIfdCntThreshold2 != other.JumpHoldingIfdCntThreshold2) return false;
      if (InAirDashGracePeriodRdfCnt != other.InAirDashGracePeriodRdfCnt) return false;
      if (InAirJumpGracePeriodRdfCnt != other.InAirJumpGracePeriodRdfCnt) return false;
      if (BtnEHoldingRdfCntThreshold1 != other.BtnEHoldingRdfCntThreshold1) return false;
      if (BtnEHoldingIfdCntThreshold1 != other.BtnEHoldingIfdCntThreshold1) return false;
      if (SpAtkLookupFrames != other.SpAtkLookupFrames) return false;
      if (PatternIdUnableToOp != other.PatternIdUnableToOp) return false;
      if (PatternIdNoOp != other.PatternIdNoOp) return false;
      if (PatternB != other.PatternB) return false;
      if (PatternUpB != other.PatternUpB) return false;
      if (PatternDownB != other.PatternDownB) return false;
      if (PatternHoldB != other.PatternHoldB) return false;
      if (PatternDownA != other.PatternDownA) return false;
      if (PatternReleasedB != other.PatternReleasedB) return false;
      if (PatternE != other.PatternE) return false;
      if (PatternFrontE != other.PatternFrontE) return false;
      if (PatternBackE != other.PatternBackE) return false;
      if (PatternUpE != other.PatternUpE) return false;
      if (PatternDownE != other.PatternDownE) return false;
      if (PatternHoldE != other.PatternHoldE) return false;
      if (PatternEHoldB != other.PatternEHoldB) return false;
      if (PatternFrontEHoldB != other.PatternFrontEHoldB) return false;
      if (PatternBackEHoldB != other.PatternBackEHoldB) return false;
      if (PatternUpEHoldB != other.PatternUpEHoldB) return false;
      if (PatternDownEHoldB != other.PatternDownEHoldB) return false;
      if (PatternHoldEHoldB != other.PatternHoldEHoldB) return false;
      if (PatternInventorySlotC != other.PatternInventorySlotC) return false;
      if (PatternInventorySlotD != other.PatternInventorySlotD) return false;
      if (PatternInventorySlotBc != other.PatternInventorySlotBc) return false;
      if (PatternHoldInventorySlotC != other.PatternHoldInventorySlotC) return false;
      if (PatternHoldInventorySlotD != other.PatternHoldInventorySlotD) return false;
      if (EleNone != other.EleNone) return false;
      if (EleFire != other.EleFire) return false;
      if (EleWater != other.EleWater) return false;
      if (EleThunder != other.EleThunder) return false;
      if (EleRock != other.EleRock) return false;
      if (EleWind != other.EleWind) return false;
      if (EleIce != other.EleIce) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(EleWeaknessDefaultYield, other.EleWeaknessDefaultYield)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(EleResistanceDefaultYield, other.EleResistanceDefaultYield)) return false;
      if (StartingRenderFrameId != other.StartingRenderFrameId) return false;
      if (StartingInputFrameId != other.StartingInputFrameId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (BattleDynamicsFps != 0) hash ^= BattleDynamicsFps.GetHashCode();
      if (DefaultTimeoutForLastAllConfirmedIfd != 0) hash ^= DefaultTimeoutForLastAllConfirmedIfd.GetHashCode();
      if (RoomIdNone != 0) hash ^= RoomIdNone.GetHashCode();
      if (RoomStateImpossible != 0) hash ^= RoomStateImpossible.GetHashCode();
      if (RoomStateIdle != 0) hash ^= RoomStateIdle.GetHashCode();
      if (RoomStateWaiting != 0) hash ^= RoomStateWaiting.GetHashCode();
      if (RoomStatePrepare != 0) hash ^= RoomStatePrepare.GetHashCode();
      if (RoomStateInBattle != 0) hash ^= RoomStateInBattle.GetHashCode();
      if (RoomStateInSettlement != 0) hash ^= RoomStateInSettlement.GetHashCode();
      if (RoomStateStopped != 0) hash ^= RoomStateStopped.GetHashCode();
      if (RoomStateFrontendAwaitingAutoRejoin != 0) hash ^= RoomStateFrontendAwaitingAutoRejoin.GetHashCode();
      if (RoomStateFrontendAwaitingManualRejoin != 0) hash ^= RoomStateFrontendAwaitingManualRejoin.GetHashCode();
      if (RoomStateFrontendRejoining != 0) hash ^= RoomStateFrontendRejoining.GetHashCode();
      if (PlayerBattleStateImpossible != 0) hash ^= PlayerBattleStateImpossible.GetHashCode();
      if (PlayerBattleStateAddedPendingBattleColliderAck != 0) hash ^= PlayerBattleStateAddedPendingBattleColliderAck.GetHashCode();
      if (PlayerBattleStateReaddedPendingForceResync != 0) hash ^= PlayerBattleStateReaddedPendingForceResync.GetHashCode();
      if (PlayerBattleStateActive != 0) hash ^= PlayerBattleStateActive.GetHashCode();
      if (PlayerBattleStateDisconnected != 0) hash ^= PlayerBattleStateDisconnected.GetHashCode();
      if (PlayerBattleStateLost != 0) hash ^= PlayerBattleStateLost.GetHashCode();
      if (PlayerBattleStateExpelledDuringGame != 0) hash ^= PlayerBattleStateExpelledDuringGame.GetHashCode();
      if (PlayerBattleStateExpelledInDismissal != 0) hash ^= PlayerBattleStateExpelledInDismissal.GetHashCode();
      if (UpsyncMsgActPlayerColliderAck != 0) hash ^= UpsyncMsgActPlayerColliderAck.GetHashCode();
      if (UpsyncMsgActPlayerCmd != 0) hash ^= UpsyncMsgActPlayerCmd.GetHashCode();
      if (UpsyncMsgActHolepunchBackendUdpTunnel != 0) hash ^= UpsyncMsgActHolepunchBackendUdpTunnel.GetHashCode();
      if (UpsyncMsgActHolepunchPeerUdpAddr != 0) hash ^= UpsyncMsgActHolepunchPeerUdpAddr.GetHashCode();
      if (DownsyncMsgActBattleColliderInfo != 0) hash ^= DownsyncMsgActBattleColliderInfo.GetHashCode();
      if (DownsyncMsgActInputBatch != 0) hash ^= DownsyncMsgActInputBatch.GetHashCode();
      if (DownsyncMsgActBattleStopped != 0) hash ^= DownsyncMsgActBattleStopped.GetHashCode();
      if (DownsyncMsgActForcedResync != 0) hash ^= DownsyncMsgActForcedResync.GetHashCode();
      if (DownsyncMsgActPeerInputBatch != 0) hash ^= DownsyncMsgActPeerInputBatch.GetHashCode();
      if (DownsyncMsgActPeerUdpAddr != 0) hash ^= DownsyncMsgActPeerUdpAddr.GetHashCode();
      if (DownsyncMsgActBattleReadyToStart != 0) hash ^= DownsyncMsgActBattleReadyToStart.GetHashCode();
      if (DownsyncMsgActBattleStart != 0) hash ^= DownsyncMsgActBattleStart.GetHashCode();
      if (DownsyncMsgActPlayerDisconnected != 0) hash ^= DownsyncMsgActPlayerDisconnected.GetHashCode();
      if (DownsyncMsgActPlayerReaddedAndAcked != 0) hash ^= DownsyncMsgActPlayerReaddedAndAcked.GetHashCode();
      if (DownsyncMsgActPlayerAddedAndAcked != 0) hash ^= DownsyncMsgActPlayerAddedAndAcked.GetHashCode();
      if (DownsyncMsgWsClosed != 0) hash ^= DownsyncMsgWsClosed.GetHashCode();
      if (DownsyncMsgWsOpen != 0) hash ^= DownsyncMsgWsOpen.GetHashCode();
      if (MagicJoinIndexInvalid != 0) hash ^= MagicJoinIndexInvalid.GetHashCode();
      if (MagicJoinIndexSrvUdpTunnel != 0) hash ^= MagicJoinIndexSrvUdpTunnel.GetHashCode();
      if (MagicQuotaInfinite != 0) hash ^= MagicQuotaInfinite.GetHashCode();
      if (NpcFleeGracePeriodRdfCnt != 0) hash ^= NpcFleeGracePeriodRdfCnt.GetHashCode();
      if (MagicLastSentInputFrameIdNormalAdded != 0) hash ^= MagicLastSentInputFrameIdNormalAdded.GetHashCode();
      if (MagicLastSentInputFrameIdReadded != 0) hash ^= MagicLastSentInputFrameIdReadded.GetHashCode();
      if (BgmNoChange != 0) hash ^= BgmNoChange.GetHashCode();
      if (InvalidDefaultPlayerId != 0) hash ^= InvalidDefaultPlayerId.GetHashCode();
      if (EstimatedSecondsPerRdf != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(EstimatedSecondsPerRdf);
      if (MaxBtnHoldingRdfCnt != 0) hash ^= MaxBtnHoldingRdfCnt.GetHashCode();
      if (MaxFlyingRdfCnt != 0) hash ^= MaxFlyingRdfCnt.GetHashCode();
      if (MaxReversePushbackFramesToRecover != 0) hash ^= MaxReversePushbackFramesToRecover.GetHashCode();
      if (TerminatingEvtsubId != 0) hash ^= TerminatingEvtsubId.GetHashCode();
      if (MagicEvtsubIdDummy != 0) hash ^= MagicEvtsubIdDummy.GetHashCode();
      if (SpeedNotHitNotSpecified != 0) hash ^= SpeedNotHitNotSpecified.GetHashCode();
      if (DefaultPreallocNpcCapacity != 0) hash ^= DefaultPreallocNpcCapacity.GetHashCode();
      if (DefaultPreallocBulletCapacity != 0) hash ^= DefaultPreallocBulletCapacity.GetHashCode();
      if (DefaultPreallocTrapCapacity != 0) hash ^= DefaultPreallocTrapCapacity.GetHashCode();
      if (DefaultPreallocTriggerCapacity != 0) hash ^= DefaultPreallocTriggerCapacity.GetHashCode();
      if (DefaultPreallocPickableCapacity != 0) hash ^= DefaultPreallocPickableCapacity.GetHashCode();
      if (DefaultPerCharacterBuffCapacity != 0) hash ^= DefaultPerCharacterBuffCapacity.GetHashCode();
      if (DefaultPerCharacterDebuffCapacity != 0) hash ^= DefaultPerCharacterDebuffCapacity.GetHashCode();
      if (DefaultPerCharacterInventoryCapacity != 0) hash ^= DefaultPerCharacterInventoryCapacity.GetHashCode();
      if (DefaultPerCharacterImmuneBulletRecordCapacity != 0) hash ^= DefaultPerCharacterImmuneBulletRecordCapacity.GetHashCode();
      if (GravityY != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(GravityY);
      if (GravityYJumpHolding != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(GravityYJumpHolding);
      if (DefaultPatrolCueWaivingFrames != 0) hash ^= DefaultPatrolCueWaivingFrames.GetHashCode();
      if (NoPatrolCueId != 0) hash ^= NoPatrolCueId.GetHashCode();
      if (NoVfxId != 0) hash ^= NoVfxId.GetHashCode();
      if (DefaultPickableHitboxSizeX != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(DefaultPickableHitboxSizeX);
      if (DefaultPickableHitboxSizeY != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(DefaultPickableHitboxSizeY);
      if (DefaultPickableDisappearingAnimFrames != 0) hash ^= DefaultPickableDisappearingAnimFrames.GetHashCode();
      if (DefaultPickableConsumedAnimFrames != 0) hash ^= DefaultPickableConsumedAnimFrames.GetHashCode();
      if (DefaultPickableRisingVelY != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(DefaultPickableRisingVelY);
      if (DefaultPickableNonpickableStartupFrames != 0) hash ^= DefaultPickableNonpickableStartupFrames.GetHashCode();
      if (DefaultFramesToShowDamaged != 0) hash ^= DefaultFramesToShowDamaged.GetHashCode();
      if (DefaultFramesToContinueCombo != 0) hash ^= DefaultFramesToContinueCombo.GetHashCode();
      if (DefaultBlockStunFrames != 0) hash ^= DefaultBlockStunFrames.GetHashCode();
      if (DefaultBlownupFramesForFlying != 0) hash ^= DefaultBlownupFramesForFlying.GetHashCode();
      if (DefaultGaugeIncByHit != 0) hash ^= DefaultGaugeIncByHit.GetHashCode();
      if (DefaultFramesDelayedOfBossSavepoint != 0) hash ^= DefaultFramesDelayedOfBossSavepoint.GetHashCode();
      if (InputScaleFrames != 0) hash ^= InputScaleFrames.GetHashCode();
      if (InputScale != 0) hash ^= InputScale.GetHashCode();
      if (InputDelayFrames != 0) hash ^= InputDelayFrames.GetHashCode();
      if (DefaultBackendInputBufferSize != 0) hash ^= DefaultBackendInputBufferSize.GetHashCode();
      if (MagicFramesToBeOnWall != 0) hash ^= MagicFramesToBeOnWall.GetHashCode();
      if (DyingFramesToRecover != 0) hash ^= DyingFramesToRecover.GetHashCode();
      if (ParriedFramesToRecover != 0) hash ^= ParriedFramesToRecover.GetHashCode();
      if (ParriedFramesToStartCancellable != 0) hash ^= ParriedFramesToStartCancellable.GetHashCode();
      if (NoSkill != 0) hash ^= NoSkill.GetHashCode();
      if (NoSkillHit != 0) hash ^= NoSkillHit.GetHashCode();
      if (NoLockVel != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(NoLockVel);
      if (DebuffArrIdxElemental != 0) hash ^= DebuffArrIdxElemental.GetHashCode();
      if (TerminatingRenderFrameId != 0) hash ^= TerminatingRenderFrameId.GetHashCode();
      if (TerminatingInputFrameId != 0) hash ^= TerminatingInputFrameId.GetHashCode();
      if (TerminatingCharacterId != 0) hash ^= TerminatingCharacterId.GetHashCode();
      if (TerminatingTrapId != 0) hash ^= TerminatingTrapId.GetHashCode();
      if (TerminatingTriggerId != 0) hash ^= TerminatingTriggerId.GetHashCode();
      if (TerminatingPickableId != 0) hash ^= TerminatingPickableId.GetHashCode();
      if (TerminatingBulletId != 0) hash ^= TerminatingBulletId.GetHashCode();
      if (TerminatingBulletTeamId != 0) hash ^= TerminatingBulletTeamId.GetHashCode();
      if (TerminatingBuffSpeciesId != 0) hash ^= TerminatingBuffSpeciesId.GetHashCode();
      if (TerminatingDebuffSpeciesId != 0) hash ^= TerminatingDebuffSpeciesId.GetHashCode();
      if (TerminatingConsumableSpeciesId != 0) hash ^= TerminatingConsumableSpeciesId.GetHashCode();
      if (FrontendWsRecvBytelength != 0) hash ^= FrontendWsRecvBytelength.GetHashCode();
      if (BackendWsRecvBytelength != 0) hash ^= BackendWsRecvBytelength.GetHashCode();
      if (JammedBtnHoldingRdfCnt != 0) hash ^= JammedBtnHoldingRdfCnt.GetHashCode();
      if (BtnBHoldingRdfCntThreshold2 != 0) hash ^= BtnBHoldingRdfCntThreshold2.GetHashCode();
      if (BtnBHoldingRdfCntThreshold1 != 0) hash ^= BtnBHoldingRdfCntThreshold1.GetHashCode();
      if (JumpHoldingRdfCntThreshold1 != 0) hash ^= JumpHoldingRdfCntThreshold1.GetHashCode();
      if (JumpHoldingIfdCntThreshold1 != 0) hash ^= JumpHoldingIfdCntThreshold1.GetHashCode();
      if (JumpHoldingRdfCntThreshold2 != 0) hash ^= JumpHoldingRdfCntThreshold2.GetHashCode();
      if (JumpHoldingIfdCntThreshold2 != 0) hash ^= JumpHoldingIfdCntThreshold2.GetHashCode();
      if (InAirDashGracePeriodRdfCnt != 0) hash ^= InAirDashGracePeriodRdfCnt.GetHashCode();
      if (InAirJumpGracePeriodRdfCnt != 0) hash ^= InAirJumpGracePeriodRdfCnt.GetHashCode();
      if (BtnEHoldingRdfCntThreshold1 != 0) hash ^= BtnEHoldingRdfCntThreshold1.GetHashCode();
      if (BtnEHoldingIfdCntThreshold1 != 0) hash ^= BtnEHoldingIfdCntThreshold1.GetHashCode();
      if (SpAtkLookupFrames != 0) hash ^= SpAtkLookupFrames.GetHashCode();
      if (PatternIdUnableToOp != 0) hash ^= PatternIdUnableToOp.GetHashCode();
      if (PatternIdNoOp != 0) hash ^= PatternIdNoOp.GetHashCode();
      if (PatternB != 0) hash ^= PatternB.GetHashCode();
      if (PatternUpB != 0) hash ^= PatternUpB.GetHashCode();
      if (PatternDownB != 0) hash ^= PatternDownB.GetHashCode();
      if (PatternHoldB != 0) hash ^= PatternHoldB.GetHashCode();
      if (PatternDownA != 0) hash ^= PatternDownA.GetHashCode();
      if (PatternReleasedB != 0) hash ^= PatternReleasedB.GetHashCode();
      if (PatternE != 0) hash ^= PatternE.GetHashCode();
      if (PatternFrontE != 0) hash ^= PatternFrontE.GetHashCode();
      if (PatternBackE != 0) hash ^= PatternBackE.GetHashCode();
      if (PatternUpE != 0) hash ^= PatternUpE.GetHashCode();
      if (PatternDownE != 0) hash ^= PatternDownE.GetHashCode();
      if (PatternHoldE != 0) hash ^= PatternHoldE.GetHashCode();
      if (PatternEHoldB != 0) hash ^= PatternEHoldB.GetHashCode();
      if (PatternFrontEHoldB != 0) hash ^= PatternFrontEHoldB.GetHashCode();
      if (PatternBackEHoldB != 0) hash ^= PatternBackEHoldB.GetHashCode();
      if (PatternUpEHoldB != 0) hash ^= PatternUpEHoldB.GetHashCode();
      if (PatternDownEHoldB != 0) hash ^= PatternDownEHoldB.GetHashCode();
      if (PatternHoldEHoldB != 0) hash ^= PatternHoldEHoldB.GetHashCode();
      if (PatternInventorySlotC != 0) hash ^= PatternInventorySlotC.GetHashCode();
      if (PatternInventorySlotD != 0) hash ^= PatternInventorySlotD.GetHashCode();
      if (PatternInventorySlotBc != 0) hash ^= PatternInventorySlotBc.GetHashCode();
      if (PatternHoldInventorySlotC != 0) hash ^= PatternHoldInventorySlotC.GetHashCode();
      if (PatternHoldInventorySlotD != 0) hash ^= PatternHoldInventorySlotD.GetHashCode();
      if (EleNone != 0) hash ^= EleNone.GetHashCode();
      if (EleFire != 0) hash ^= EleFire.GetHashCode();
      if (EleWater != 0) hash ^= EleWater.GetHashCode();
      if (EleThunder != 0) hash ^= EleThunder.GetHashCode();
      if (EleRock != 0) hash ^= EleRock.GetHashCode();
      if (EleWind != 0) hash ^= EleWind.GetHashCode();
      if (EleIce != 0) hash ^= EleIce.GetHashCode();
      if (EleWeaknessDefaultYield != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(EleWeaknessDefaultYield);
      if (EleResistanceDefaultYield != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(EleResistanceDefaultYield);
      if (StartingRenderFrameId != 0) hash ^= StartingRenderFrameId.GetHashCode();
      if (StartingInputFrameId != 0) hash ^= StartingInputFrameId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BattleDynamicsFps != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(BattleDynamicsFps);
      }
      if (DefaultTimeoutForLastAllConfirmedIfd != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(DefaultTimeoutForLastAllConfirmedIfd);
      }
      if (RoomIdNone != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(RoomIdNone);
      }
      if (RoomStateImpossible != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(RoomStateImpossible);
      }
      if (RoomStateIdle != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(RoomStateIdle);
      }
      if (RoomStateWaiting != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(RoomStateWaiting);
      }
      if (RoomStatePrepare != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(RoomStatePrepare);
      }
      if (RoomStateInBattle != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(RoomStateInBattle);
      }
      if (RoomStateInSettlement != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(RoomStateInSettlement);
      }
      if (RoomStateStopped != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(RoomStateStopped);
      }
      if (RoomStateFrontendAwaitingAutoRejoin != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(RoomStateFrontendAwaitingAutoRejoin);
      }
      if (RoomStateFrontendAwaitingManualRejoin != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(RoomStateFrontendAwaitingManualRejoin);
      }
      if (RoomStateFrontendRejoining != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(RoomStateFrontendRejoining);
      }
      if (PlayerBattleStateImpossible != 0) {
        output.WriteRawTag(112);
        output.WriteInt32(PlayerBattleStateImpossible);
      }
      if (PlayerBattleStateAddedPendingBattleColliderAck != 0) {
        output.WriteRawTag(120);
        output.WriteInt32(PlayerBattleStateAddedPendingBattleColliderAck);
      }
      if (PlayerBattleStateReaddedPendingForceResync != 0) {
        output.WriteRawTag(128, 1);
        output.WriteInt32(PlayerBattleStateReaddedPendingForceResync);
      }
      if (PlayerBattleStateActive != 0) {
        output.WriteRawTag(136, 1);
        output.WriteInt32(PlayerBattleStateActive);
      }
      if (PlayerBattleStateDisconnected != 0) {
        output.WriteRawTag(144, 1);
        output.WriteInt32(PlayerBattleStateDisconnected);
      }
      if (PlayerBattleStateLost != 0) {
        output.WriteRawTag(152, 1);
        output.WriteInt32(PlayerBattleStateLost);
      }
      if (PlayerBattleStateExpelledDuringGame != 0) {
        output.WriteRawTag(160, 1);
        output.WriteInt32(PlayerBattleStateExpelledDuringGame);
      }
      if (PlayerBattleStateExpelledInDismissal != 0) {
        output.WriteRawTag(168, 1);
        output.WriteInt32(PlayerBattleStateExpelledInDismissal);
      }
      if (UpsyncMsgActPlayerColliderAck != 0) {
        output.WriteRawTag(176, 1);
        output.WriteInt32(UpsyncMsgActPlayerColliderAck);
      }
      if (UpsyncMsgActPlayerCmd != 0) {
        output.WriteRawTag(184, 1);
        output.WriteInt32(UpsyncMsgActPlayerCmd);
      }
      if (UpsyncMsgActHolepunchBackendUdpTunnel != 0) {
        output.WriteRawTag(192, 1);
        output.WriteInt32(UpsyncMsgActHolepunchBackendUdpTunnel);
      }
      if (UpsyncMsgActHolepunchPeerUdpAddr != 0) {
        output.WriteRawTag(200, 1);
        output.WriteInt32(UpsyncMsgActHolepunchPeerUdpAddr);
      }
      if (DownsyncMsgActBattleColliderInfo != 0) {
        output.WriteRawTag(208, 1);
        output.WriteInt32(DownsyncMsgActBattleColliderInfo);
      }
      if (DownsyncMsgActInputBatch != 0) {
        output.WriteRawTag(216, 1);
        output.WriteInt32(DownsyncMsgActInputBatch);
      }
      if (DownsyncMsgActBattleStopped != 0) {
        output.WriteRawTag(224, 1);
        output.WriteInt32(DownsyncMsgActBattleStopped);
      }
      if (DownsyncMsgActForcedResync != 0) {
        output.WriteRawTag(232, 1);
        output.WriteInt32(DownsyncMsgActForcedResync);
      }
      if (DownsyncMsgActPeerInputBatch != 0) {
        output.WriteRawTag(240, 1);
        output.WriteInt32(DownsyncMsgActPeerInputBatch);
      }
      if (DownsyncMsgActPeerUdpAddr != 0) {
        output.WriteRawTag(248, 1);
        output.WriteInt32(DownsyncMsgActPeerUdpAddr);
      }
      if (DownsyncMsgActBattleReadyToStart != 0) {
        output.WriteRawTag(128, 2);
        output.WriteInt32(DownsyncMsgActBattleReadyToStart);
      }
      if (DownsyncMsgActBattleStart != 0) {
        output.WriteRawTag(136, 2);
        output.WriteInt32(DownsyncMsgActBattleStart);
      }
      if (DownsyncMsgActPlayerDisconnected != 0) {
        output.WriteRawTag(144, 2);
        output.WriteInt32(DownsyncMsgActPlayerDisconnected);
      }
      if (DownsyncMsgActPlayerReaddedAndAcked != 0) {
        output.WriteRawTag(152, 2);
        output.WriteInt32(DownsyncMsgActPlayerReaddedAndAcked);
      }
      if (DownsyncMsgActPlayerAddedAndAcked != 0) {
        output.WriteRawTag(160, 2);
        output.WriteInt32(DownsyncMsgActPlayerAddedAndAcked);
      }
      if (DownsyncMsgWsClosed != 0) {
        output.WriteRawTag(168, 2);
        output.WriteInt32(DownsyncMsgWsClosed);
      }
      if (DownsyncMsgWsOpen != 0) {
        output.WriteRawTag(176, 2);
        output.WriteInt32(DownsyncMsgWsOpen);
      }
      if (MagicJoinIndexInvalid != 0) {
        output.WriteRawTag(184, 2);
        output.WriteUInt32(MagicJoinIndexInvalid);
      }
      if (MagicJoinIndexSrvUdpTunnel != 0) {
        output.WriteRawTag(192, 2);
        output.WriteUInt32(MagicJoinIndexSrvUdpTunnel);
      }
      if (MagicQuotaInfinite != 0) {
        output.WriteRawTag(200, 2);
        output.WriteInt32(MagicQuotaInfinite);
      }
      if (NpcFleeGracePeriodRdfCnt != 0) {
        output.WriteRawTag(208, 2);
        output.WriteInt32(NpcFleeGracePeriodRdfCnt);
      }
      if (MagicLastSentInputFrameIdNormalAdded != 0) {
        output.WriteRawTag(216, 2);
        output.WriteInt32(MagicLastSentInputFrameIdNormalAdded);
      }
      if (MagicLastSentInputFrameIdReadded != 0) {
        output.WriteRawTag(224, 2);
        output.WriteInt32(MagicLastSentInputFrameIdReadded);
      }
      if (BgmNoChange != 0) {
        output.WriteRawTag(232, 2);
        output.WriteInt32(BgmNoChange);
      }
      if (InvalidDefaultPlayerId != 0) {
        output.WriteRawTag(240, 2);
        output.WriteInt32(InvalidDefaultPlayerId);
      }
      if (EstimatedSecondsPerRdf != 0F) {
        output.WriteRawTag(253, 2);
        output.WriteFloat(EstimatedSecondsPerRdf);
      }
      if (MaxBtnHoldingRdfCnt != 0) {
        output.WriteRawTag(128, 3);
        output.WriteInt32(MaxBtnHoldingRdfCnt);
      }
      if (MaxFlyingRdfCnt != 0) {
        output.WriteRawTag(136, 3);
        output.WriteInt32(MaxFlyingRdfCnt);
      }
      if (MaxReversePushbackFramesToRecover != 0) {
        output.WriteRawTag(144, 3);
        output.WriteInt32(MaxReversePushbackFramesToRecover);
      }
      if (TerminatingEvtsubId != 0) {
        output.WriteRawTag(152, 3);
        output.WriteInt32(TerminatingEvtsubId);
      }
      if (MagicEvtsubIdDummy != 0) {
        output.WriteRawTag(160, 3);
        output.WriteInt32(MagicEvtsubIdDummy);
      }
      if (SpeedNotHitNotSpecified != 0) {
        output.WriteRawTag(168, 3);
        output.WriteInt32(SpeedNotHitNotSpecified);
      }
      if (DefaultPreallocNpcCapacity != 0) {
        output.WriteRawTag(176, 3);
        output.WriteInt32(DefaultPreallocNpcCapacity);
      }
      if (DefaultPreallocBulletCapacity != 0) {
        output.WriteRawTag(184, 3);
        output.WriteInt32(DefaultPreallocBulletCapacity);
      }
      if (DefaultPreallocTrapCapacity != 0) {
        output.WriteRawTag(192, 3);
        output.WriteInt32(DefaultPreallocTrapCapacity);
      }
      if (DefaultPreallocTriggerCapacity != 0) {
        output.WriteRawTag(200, 3);
        output.WriteInt32(DefaultPreallocTriggerCapacity);
      }
      if (DefaultPreallocPickableCapacity != 0) {
        output.WriteRawTag(208, 3);
        output.WriteInt32(DefaultPreallocPickableCapacity);
      }
      if (DefaultPerCharacterBuffCapacity != 0) {
        output.WriteRawTag(216, 3);
        output.WriteInt32(DefaultPerCharacterBuffCapacity);
      }
      if (DefaultPerCharacterDebuffCapacity != 0) {
        output.WriteRawTag(224, 3);
        output.WriteInt32(DefaultPerCharacterDebuffCapacity);
      }
      if (DefaultPerCharacterInventoryCapacity != 0) {
        output.WriteRawTag(232, 3);
        output.WriteInt32(DefaultPerCharacterInventoryCapacity);
      }
      if (DefaultPerCharacterImmuneBulletRecordCapacity != 0) {
        output.WriteRawTag(240, 3);
        output.WriteInt32(DefaultPerCharacterImmuneBulletRecordCapacity);
      }
      if (GravityY != 0F) {
        output.WriteRawTag(253, 3);
        output.WriteFloat(GravityY);
      }
      if (GravityYJumpHolding != 0F) {
        output.WriteRawTag(133, 4);
        output.WriteFloat(GravityYJumpHolding);
      }
      if (DefaultPatrolCueWaivingFrames != 0) {
        output.WriteRawTag(136, 4);
        output.WriteInt32(DefaultPatrolCueWaivingFrames);
      }
      if (NoPatrolCueId != 0) {
        output.WriteRawTag(144, 4);
        output.WriteInt32(NoPatrolCueId);
      }
      if (NoVfxId != 0) {
        output.WriteRawTag(152, 4);
        output.WriteInt32(NoVfxId);
      }
      if (DefaultPickableHitboxSizeX != 0F) {
        output.WriteRawTag(165, 4);
        output.WriteFloat(DefaultPickableHitboxSizeX);
      }
      if (DefaultPickableHitboxSizeY != 0F) {
        output.WriteRawTag(173, 4);
        output.WriteFloat(DefaultPickableHitboxSizeY);
      }
      if (DefaultPickableDisappearingAnimFrames != 0) {
        output.WriteRawTag(176, 4);
        output.WriteInt32(DefaultPickableDisappearingAnimFrames);
      }
      if (DefaultPickableConsumedAnimFrames != 0) {
        output.WriteRawTag(184, 4);
        output.WriteInt32(DefaultPickableConsumedAnimFrames);
      }
      if (DefaultPickableRisingVelY != 0F) {
        output.WriteRawTag(197, 4);
        output.WriteFloat(DefaultPickableRisingVelY);
      }
      if (DefaultPickableNonpickableStartupFrames != 0) {
        output.WriteRawTag(200, 4);
        output.WriteInt32(DefaultPickableNonpickableStartupFrames);
      }
      if (DefaultFramesToShowDamaged != 0) {
        output.WriteRawTag(208, 4);
        output.WriteInt32(DefaultFramesToShowDamaged);
      }
      if (DefaultFramesToContinueCombo != 0) {
        output.WriteRawTag(216, 4);
        output.WriteInt32(DefaultFramesToContinueCombo);
      }
      if (DefaultBlockStunFrames != 0) {
        output.WriteRawTag(224, 4);
        output.WriteInt32(DefaultBlockStunFrames);
      }
      if (DefaultBlownupFramesForFlying != 0) {
        output.WriteRawTag(232, 4);
        output.WriteInt32(DefaultBlownupFramesForFlying);
      }
      if (DefaultGaugeIncByHit != 0) {
        output.WriteRawTag(240, 4);
        output.WriteInt32(DefaultGaugeIncByHit);
      }
      if (DefaultFramesDelayedOfBossSavepoint != 0) {
        output.WriteRawTag(248, 4);
        output.WriteInt32(DefaultFramesDelayedOfBossSavepoint);
      }
      if (InputScaleFrames != 0) {
        output.WriteRawTag(128, 5);
        output.WriteInt32(InputScaleFrames);
      }
      if (InputScale != 0) {
        output.WriteRawTag(136, 5);
        output.WriteInt32(InputScale);
      }
      if (InputDelayFrames != 0) {
        output.WriteRawTag(144, 5);
        output.WriteInt32(InputDelayFrames);
      }
      if (DefaultBackendInputBufferSize != 0) {
        output.WriteRawTag(152, 5);
        output.WriteInt32(DefaultBackendInputBufferSize);
      }
      if (MagicFramesToBeOnWall != 0) {
        output.WriteRawTag(176, 5);
        output.WriteInt32(MagicFramesToBeOnWall);
      }
      if (DyingFramesToRecover != 0) {
        output.WriteRawTag(184, 5);
        output.WriteInt32(DyingFramesToRecover);
      }
      if (ParriedFramesToRecover != 0) {
        output.WriteRawTag(192, 5);
        output.WriteInt32(ParriedFramesToRecover);
      }
      if (ParriedFramesToStartCancellable != 0) {
        output.WriteRawTag(200, 5);
        output.WriteInt32(ParriedFramesToStartCancellable);
      }
      if (NoSkill != 0) {
        output.WriteRawTag(208, 5);
        output.WriteUInt32(NoSkill);
      }
      if (NoSkillHit != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(NoSkillHit);
      }
      if (NoLockVel != 0F) {
        output.WriteRawTag(245, 5);
        output.WriteFloat(NoLockVel);
      }
      if (DebuffArrIdxElemental != 0) {
        output.WriteRawTag(248, 5);
        output.WriteInt32(DebuffArrIdxElemental);
      }
      if (TerminatingRenderFrameId != 0) {
        output.WriteRawTag(128, 6);
        output.WriteInt32(TerminatingRenderFrameId);
      }
      if (TerminatingInputFrameId != 0) {
        output.WriteRawTag(136, 6);
        output.WriteInt32(TerminatingInputFrameId);
      }
      if (TerminatingCharacterId != 0) {
        output.WriteRawTag(144, 6);
        output.WriteUInt32(TerminatingCharacterId);
      }
      if (TerminatingTrapId != 0) {
        output.WriteRawTag(152, 6);
        output.WriteUInt32(TerminatingTrapId);
      }
      if (TerminatingTriggerId != 0) {
        output.WriteRawTag(160, 6);
        output.WriteUInt32(TerminatingTriggerId);
      }
      if (TerminatingPickableId != 0) {
        output.WriteRawTag(168, 6);
        output.WriteUInt32(TerminatingPickableId);
      }
      if (TerminatingBulletId != 0) {
        output.WriteRawTag(176, 6);
        output.WriteUInt32(TerminatingBulletId);
      }
      if (TerminatingBulletTeamId != 0) {
        output.WriteRawTag(184, 6);
        output.WriteInt32(TerminatingBulletTeamId);
      }
      if (TerminatingBuffSpeciesId != 0) {
        output.WriteRawTag(192, 6);
        output.WriteUInt32(TerminatingBuffSpeciesId);
      }
      if (TerminatingDebuffSpeciesId != 0) {
        output.WriteRawTag(200, 6);
        output.WriteUInt32(TerminatingDebuffSpeciesId);
      }
      if (TerminatingConsumableSpeciesId != 0) {
        output.WriteRawTag(208, 6);
        output.WriteUInt32(TerminatingConsumableSpeciesId);
      }
      if (FrontendWsRecvBytelength != 0) {
        output.WriteRawTag(216, 6);
        output.WriteInt32(FrontendWsRecvBytelength);
      }
      if (BackendWsRecvBytelength != 0) {
        output.WriteRawTag(224, 6);
        output.WriteInt32(BackendWsRecvBytelength);
      }
      if (JammedBtnHoldingRdfCnt != 0) {
        output.WriteRawTag(232, 6);
        output.WriteInt32(JammedBtnHoldingRdfCnt);
      }
      if (BtnBHoldingRdfCntThreshold2 != 0) {
        output.WriteRawTag(240, 6);
        output.WriteInt32(BtnBHoldingRdfCntThreshold2);
      }
      if (BtnBHoldingRdfCntThreshold1 != 0) {
        output.WriteRawTag(248, 6);
        output.WriteInt32(BtnBHoldingRdfCntThreshold1);
      }
      if (JumpHoldingRdfCntThreshold1 != 0) {
        output.WriteRawTag(128, 7);
        output.WriteInt32(JumpHoldingRdfCntThreshold1);
      }
      if (JumpHoldingIfdCntThreshold1 != 0) {
        output.WriteRawTag(136, 7);
        output.WriteInt32(JumpHoldingIfdCntThreshold1);
      }
      if (JumpHoldingRdfCntThreshold2 != 0) {
        output.WriteRawTag(144, 7);
        output.WriteInt32(JumpHoldingRdfCntThreshold2);
      }
      if (JumpHoldingIfdCntThreshold2 != 0) {
        output.WriteRawTag(152, 7);
        output.WriteInt32(JumpHoldingIfdCntThreshold2);
      }
      if (InAirDashGracePeriodRdfCnt != 0) {
        output.WriteRawTag(160, 7);
        output.WriteInt32(InAirDashGracePeriodRdfCnt);
      }
      if (InAirJumpGracePeriodRdfCnt != 0) {
        output.WriteRawTag(168, 7);
        output.WriteInt32(InAirJumpGracePeriodRdfCnt);
      }
      if (BtnEHoldingRdfCntThreshold1 != 0) {
        output.WriteRawTag(176, 7);
        output.WriteInt32(BtnEHoldingRdfCntThreshold1);
      }
      if (BtnEHoldingIfdCntThreshold1 != 0) {
        output.WriteRawTag(184, 7);
        output.WriteInt32(BtnEHoldingIfdCntThreshold1);
      }
      if (SpAtkLookupFrames != 0) {
        output.WriteRawTag(192, 7);
        output.WriteInt32(SpAtkLookupFrames);
      }
      if (PatternIdUnableToOp != 0) {
        output.WriteRawTag(200, 7);
        output.WriteInt32(PatternIdUnableToOp);
      }
      if (PatternIdNoOp != 0) {
        output.WriteRawTag(208, 7);
        output.WriteInt32(PatternIdNoOp);
      }
      if (PatternB != 0) {
        output.WriteRawTag(216, 7);
        output.WriteInt32(PatternB);
      }
      if (PatternUpB != 0) {
        output.WriteRawTag(224, 7);
        output.WriteInt32(PatternUpB);
      }
      if (PatternDownB != 0) {
        output.WriteRawTag(232, 7);
        output.WriteInt32(PatternDownB);
      }
      if (PatternHoldB != 0) {
        output.WriteRawTag(240, 7);
        output.WriteInt32(PatternHoldB);
      }
      if (PatternDownA != 0) {
        output.WriteRawTag(248, 7);
        output.WriteInt32(PatternDownA);
      }
      if (PatternReleasedB != 0) {
        output.WriteRawTag(128, 8);
        output.WriteInt32(PatternReleasedB);
      }
      if (PatternE != 0) {
        output.WriteRawTag(136, 8);
        output.WriteInt32(PatternE);
      }
      if (PatternFrontE != 0) {
        output.WriteRawTag(144, 8);
        output.WriteInt32(PatternFrontE);
      }
      if (PatternBackE != 0) {
        output.WriteRawTag(152, 8);
        output.WriteInt32(PatternBackE);
      }
      if (PatternUpE != 0) {
        output.WriteRawTag(160, 8);
        output.WriteInt32(PatternUpE);
      }
      if (PatternDownE != 0) {
        output.WriteRawTag(168, 8);
        output.WriteInt32(PatternDownE);
      }
      if (PatternHoldE != 0) {
        output.WriteRawTag(176, 8);
        output.WriteInt32(PatternHoldE);
      }
      if (PatternEHoldB != 0) {
        output.WriteRawTag(184, 8);
        output.WriteInt32(PatternEHoldB);
      }
      if (PatternFrontEHoldB != 0) {
        output.WriteRawTag(192, 8);
        output.WriteInt32(PatternFrontEHoldB);
      }
      if (PatternBackEHoldB != 0) {
        output.WriteRawTag(200, 8);
        output.WriteInt32(PatternBackEHoldB);
      }
      if (PatternUpEHoldB != 0) {
        output.WriteRawTag(208, 8);
        output.WriteInt32(PatternUpEHoldB);
      }
      if (PatternDownEHoldB != 0) {
        output.WriteRawTag(216, 8);
        output.WriteInt32(PatternDownEHoldB);
      }
      if (PatternHoldEHoldB != 0) {
        output.WriteRawTag(224, 8);
        output.WriteInt32(PatternHoldEHoldB);
      }
      if (PatternInventorySlotC != 0) {
        output.WriteRawTag(232, 8);
        output.WriteInt32(PatternInventorySlotC);
      }
      if (PatternInventorySlotD != 0) {
        output.WriteRawTag(240, 8);
        output.WriteInt32(PatternInventorySlotD);
      }
      if (PatternInventorySlotBc != 0) {
        output.WriteRawTag(248, 8);
        output.WriteInt32(PatternInventorySlotBc);
      }
      if (PatternHoldInventorySlotC != 0) {
        output.WriteRawTag(128, 9);
        output.WriteInt32(PatternHoldInventorySlotC);
      }
      if (PatternHoldInventorySlotD != 0) {
        output.WriteRawTag(136, 9);
        output.WriteInt32(PatternHoldInventorySlotD);
      }
      if (EleNone != 0) {
        output.WriteRawTag(144, 9);
        output.WriteUInt32(EleNone);
      }
      if (EleFire != 0) {
        output.WriteRawTag(152, 9);
        output.WriteUInt32(EleFire);
      }
      if (EleWater != 0) {
        output.WriteRawTag(160, 9);
        output.WriteUInt32(EleWater);
      }
      if (EleThunder != 0) {
        output.WriteRawTag(168, 9);
        output.WriteUInt32(EleThunder);
      }
      if (EleRock != 0) {
        output.WriteRawTag(176, 9);
        output.WriteUInt32(EleRock);
      }
      if (EleWind != 0) {
        output.WriteRawTag(184, 9);
        output.WriteUInt32(EleWind);
      }
      if (EleIce != 0) {
        output.WriteRawTag(192, 9);
        output.WriteUInt32(EleIce);
      }
      if (EleWeaknessDefaultYield != 0F) {
        output.WriteRawTag(205, 9);
        output.WriteFloat(EleWeaknessDefaultYield);
      }
      if (EleResistanceDefaultYield != 0F) {
        output.WriteRawTag(213, 9);
        output.WriteFloat(EleResistanceDefaultYield);
      }
      if (StartingRenderFrameId != 0) {
        output.WriteRawTag(216, 9);
        output.WriteInt32(StartingRenderFrameId);
      }
      if (StartingInputFrameId != 0) {
        output.WriteRawTag(224, 9);
        output.WriteInt32(StartingInputFrameId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BattleDynamicsFps != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BattleDynamicsFps);
      }
      if (DefaultTimeoutForLastAllConfirmedIfd != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DefaultTimeoutForLastAllConfirmedIfd);
      }
      if (RoomIdNone != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoomIdNone);
      }
      if (RoomStateImpossible != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoomStateImpossible);
      }
      if (RoomStateIdle != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoomStateIdle);
      }
      if (RoomStateWaiting != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoomStateWaiting);
      }
      if (RoomStatePrepare != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoomStatePrepare);
      }
      if (RoomStateInBattle != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoomStateInBattle);
      }
      if (RoomStateInSettlement != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoomStateInSettlement);
      }
      if (RoomStateStopped != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoomStateStopped);
      }
      if (RoomStateFrontendAwaitingAutoRejoin != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoomStateFrontendAwaitingAutoRejoin);
      }
      if (RoomStateFrontendAwaitingManualRejoin != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoomStateFrontendAwaitingManualRejoin);
      }
      if (RoomStateFrontendRejoining != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoomStateFrontendRejoining);
      }
      if (PlayerBattleStateImpossible != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerBattleStateImpossible);
      }
      if (PlayerBattleStateAddedPendingBattleColliderAck != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerBattleStateAddedPendingBattleColliderAck);
      }
      if (PlayerBattleStateReaddedPendingForceResync != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(PlayerBattleStateReaddedPendingForceResync);
      }
      if (PlayerBattleStateActive != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(PlayerBattleStateActive);
      }
      if (PlayerBattleStateDisconnected != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(PlayerBattleStateDisconnected);
      }
      if (PlayerBattleStateLost != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(PlayerBattleStateLost);
      }
      if (PlayerBattleStateExpelledDuringGame != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(PlayerBattleStateExpelledDuringGame);
      }
      if (PlayerBattleStateExpelledInDismissal != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(PlayerBattleStateExpelledInDismissal);
      }
      if (UpsyncMsgActPlayerColliderAck != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(UpsyncMsgActPlayerColliderAck);
      }
      if (UpsyncMsgActPlayerCmd != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(UpsyncMsgActPlayerCmd);
      }
      if (UpsyncMsgActHolepunchBackendUdpTunnel != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(UpsyncMsgActHolepunchBackendUdpTunnel);
      }
      if (UpsyncMsgActHolepunchPeerUdpAddr != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(UpsyncMsgActHolepunchPeerUdpAddr);
      }
      if (DownsyncMsgActBattleColliderInfo != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(DownsyncMsgActBattleColliderInfo);
      }
      if (DownsyncMsgActInputBatch != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(DownsyncMsgActInputBatch);
      }
      if (DownsyncMsgActBattleStopped != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(DownsyncMsgActBattleStopped);
      }
      if (DownsyncMsgActForcedResync != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(DownsyncMsgActForcedResync);
      }
      if (DownsyncMsgActPeerInputBatch != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(DownsyncMsgActPeerInputBatch);
      }
      if (DownsyncMsgActPeerUdpAddr != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(DownsyncMsgActPeerUdpAddr);
      }
      if (DownsyncMsgActBattleReadyToStart != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(DownsyncMsgActBattleReadyToStart);
      }
      if (DownsyncMsgActBattleStart != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(DownsyncMsgActBattleStart);
      }
      if (DownsyncMsgActPlayerDisconnected != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(DownsyncMsgActPlayerDisconnected);
      }
      if (DownsyncMsgActPlayerReaddedAndAcked != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(DownsyncMsgActPlayerReaddedAndAcked);
      }
      if (DownsyncMsgActPlayerAddedAndAcked != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(DownsyncMsgActPlayerAddedAndAcked);
      }
      if (DownsyncMsgWsClosed != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(DownsyncMsgWsClosed);
      }
      if (DownsyncMsgWsOpen != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(DownsyncMsgWsOpen);
      }
      if (MagicJoinIndexInvalid != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(MagicJoinIndexInvalid);
      }
      if (MagicJoinIndexSrvUdpTunnel != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(MagicJoinIndexSrvUdpTunnel);
      }
      if (MagicQuotaInfinite != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(MagicQuotaInfinite);
      }
      if (NpcFleeGracePeriodRdfCnt != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(NpcFleeGracePeriodRdfCnt);
      }
      if (MagicLastSentInputFrameIdNormalAdded != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(MagicLastSentInputFrameIdNormalAdded);
      }
      if (MagicLastSentInputFrameIdReadded != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(MagicLastSentInputFrameIdReadded);
      }
      if (BgmNoChange != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(BgmNoChange);
      }
      if (InvalidDefaultPlayerId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(InvalidDefaultPlayerId);
      }
      if (EstimatedSecondsPerRdf != 0F) {
        size += 2 + 4;
      }
      if (MaxBtnHoldingRdfCnt != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(MaxBtnHoldingRdfCnt);
      }
      if (MaxFlyingRdfCnt != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(MaxFlyingRdfCnt);
      }
      if (MaxReversePushbackFramesToRecover != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(MaxReversePushbackFramesToRecover);
      }
      if (TerminatingEvtsubId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(TerminatingEvtsubId);
      }
      if (MagicEvtsubIdDummy != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(MagicEvtsubIdDummy);
      }
      if (SpeedNotHitNotSpecified != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(SpeedNotHitNotSpecified);
      }
      if (DefaultPreallocNpcCapacity != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(DefaultPreallocNpcCapacity);
      }
      if (DefaultPreallocBulletCapacity != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(DefaultPreallocBulletCapacity);
      }
      if (DefaultPreallocTrapCapacity != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(DefaultPreallocTrapCapacity);
      }
      if (DefaultPreallocTriggerCapacity != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(DefaultPreallocTriggerCapacity);
      }
      if (DefaultPreallocPickableCapacity != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(DefaultPreallocPickableCapacity);
      }
      if (DefaultPerCharacterBuffCapacity != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(DefaultPerCharacterBuffCapacity);
      }
      if (DefaultPerCharacterDebuffCapacity != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(DefaultPerCharacterDebuffCapacity);
      }
      if (DefaultPerCharacterInventoryCapacity != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(DefaultPerCharacterInventoryCapacity);
      }
      if (DefaultPerCharacterImmuneBulletRecordCapacity != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(DefaultPerCharacterImmuneBulletRecordCapacity);
      }
      if (GravityY != 0F) {
        size += 2 + 4;
      }
      if (GravityYJumpHolding != 0F) {
        size += 2 + 4;
      }
      if (DefaultPatrolCueWaivingFrames != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(DefaultPatrolCueWaivingFrames);
      }
      if (NoPatrolCueId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(NoPatrolCueId);
      }
      if (NoVfxId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(NoVfxId);
      }
      if (DefaultPickableHitboxSizeX != 0F) {
        size += 2 + 4;
      }
      if (DefaultPickableHitboxSizeY != 0F) {
        size += 2 + 4;
      }
      if (DefaultPickableDisappearingAnimFrames != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(DefaultPickableDisappearingAnimFrames);
      }
      if (DefaultPickableConsumedAnimFrames != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(DefaultPickableConsumedAnimFrames);
      }
      if (DefaultPickableRisingVelY != 0F) {
        size += 2 + 4;
      }
      if (DefaultPickableNonpickableStartupFrames != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(DefaultPickableNonpickableStartupFrames);
      }
      if (DefaultFramesToShowDamaged != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(DefaultFramesToShowDamaged);
      }
      if (DefaultFramesToContinueCombo != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(DefaultFramesToContinueCombo);
      }
      if (DefaultBlockStunFrames != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(DefaultBlockStunFrames);
      }
      if (DefaultBlownupFramesForFlying != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(DefaultBlownupFramesForFlying);
      }
      if (DefaultGaugeIncByHit != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(DefaultGaugeIncByHit);
      }
      if (DefaultFramesDelayedOfBossSavepoint != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(DefaultFramesDelayedOfBossSavepoint);
      }
      if (InputScaleFrames != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(InputScaleFrames);
      }
      if (InputScale != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(InputScale);
      }
      if (InputDelayFrames != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(InputDelayFrames);
      }
      if (DefaultBackendInputBufferSize != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(DefaultBackendInputBufferSize);
      }
      if (MagicFramesToBeOnWall != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(MagicFramesToBeOnWall);
      }
      if (DyingFramesToRecover != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(DyingFramesToRecover);
      }
      if (ParriedFramesToRecover != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ParriedFramesToRecover);
      }
      if (ParriedFramesToStartCancellable != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ParriedFramesToStartCancellable);
      }
      if (NoSkill != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(NoSkill);
      }
      if (NoSkillHit != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(NoSkillHit);
      }
      if (NoLockVel != 0F) {
        size += 2 + 4;
      }
      if (DebuffArrIdxElemental != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(DebuffArrIdxElemental);
      }
      if (TerminatingRenderFrameId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(TerminatingRenderFrameId);
      }
      if (TerminatingInputFrameId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(TerminatingInputFrameId);
      }
      if (TerminatingCharacterId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(TerminatingCharacterId);
      }
      if (TerminatingTrapId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(TerminatingTrapId);
      }
      if (TerminatingTriggerId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(TerminatingTriggerId);
      }
      if (TerminatingPickableId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(TerminatingPickableId);
      }
      if (TerminatingBulletId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(TerminatingBulletId);
      }
      if (TerminatingBulletTeamId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(TerminatingBulletTeamId);
      }
      if (TerminatingBuffSpeciesId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(TerminatingBuffSpeciesId);
      }
      if (TerminatingDebuffSpeciesId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(TerminatingDebuffSpeciesId);
      }
      if (TerminatingConsumableSpeciesId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(TerminatingConsumableSpeciesId);
      }
      if (FrontendWsRecvBytelength != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(FrontendWsRecvBytelength);
      }
      if (BackendWsRecvBytelength != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(BackendWsRecvBytelength);
      }
      if (JammedBtnHoldingRdfCnt != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(JammedBtnHoldingRdfCnt);
      }
      if (BtnBHoldingRdfCntThreshold2 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(BtnBHoldingRdfCntThreshold2);
      }
      if (BtnBHoldingRdfCntThreshold1 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(BtnBHoldingRdfCntThreshold1);
      }
      if (JumpHoldingRdfCntThreshold1 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(JumpHoldingRdfCntThreshold1);
      }
      if (JumpHoldingIfdCntThreshold1 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(JumpHoldingIfdCntThreshold1);
      }
      if (JumpHoldingRdfCntThreshold2 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(JumpHoldingRdfCntThreshold2);
      }
      if (JumpHoldingIfdCntThreshold2 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(JumpHoldingIfdCntThreshold2);
      }
      if (InAirDashGracePeriodRdfCnt != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(InAirDashGracePeriodRdfCnt);
      }
      if (InAirJumpGracePeriodRdfCnt != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(InAirJumpGracePeriodRdfCnt);
      }
      if (BtnEHoldingRdfCntThreshold1 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(BtnEHoldingRdfCntThreshold1);
      }
      if (BtnEHoldingIfdCntThreshold1 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(BtnEHoldingIfdCntThreshold1);
      }
      if (SpAtkLookupFrames != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(SpAtkLookupFrames);
      }
      if (PatternIdUnableToOp != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(PatternIdUnableToOp);
      }
      if (PatternIdNoOp != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(PatternIdNoOp);
      }
      if (PatternB != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(PatternB);
      }
      if (PatternUpB != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(PatternUpB);
      }
      if (PatternDownB != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(PatternDownB);
      }
      if (PatternHoldB != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(PatternHoldB);
      }
      if (PatternDownA != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(PatternDownA);
      }
      if (PatternReleasedB != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(PatternReleasedB);
      }
      if (PatternE != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(PatternE);
      }
      if (PatternFrontE != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(PatternFrontE);
      }
      if (PatternBackE != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(PatternBackE);
      }
      if (PatternUpE != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(PatternUpE);
      }
      if (PatternDownE != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(PatternDownE);
      }
      if (PatternHoldE != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(PatternHoldE);
      }
      if (PatternEHoldB != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(PatternEHoldB);
      }
      if (PatternFrontEHoldB != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(PatternFrontEHoldB);
      }
      if (PatternBackEHoldB != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(PatternBackEHoldB);
      }
      if (PatternUpEHoldB != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(PatternUpEHoldB);
      }
      if (PatternDownEHoldB != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(PatternDownEHoldB);
      }
      if (PatternHoldEHoldB != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(PatternHoldEHoldB);
      }
      if (PatternInventorySlotC != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(PatternInventorySlotC);
      }
      if (PatternInventorySlotD != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(PatternInventorySlotD);
      }
      if (PatternInventorySlotBc != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(PatternInventorySlotBc);
      }
      if (PatternHoldInventorySlotC != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(PatternHoldInventorySlotC);
      }
      if (PatternHoldInventorySlotD != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(PatternHoldInventorySlotD);
      }
      if (EleNone != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(EleNone);
      }
      if (EleFire != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(EleFire);
      }
      if (EleWater != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(EleWater);
      }
      if (EleThunder != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(EleThunder);
      }
      if (EleRock != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(EleRock);
      }
      if (EleWind != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(EleWind);
      }
      if (EleIce != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(EleIce);
      }
      if (EleWeaknessDefaultYield != 0F) {
        size += 2 + 4;
      }
      if (EleResistanceDefaultYield != 0F) {
        size += 2 + 4;
      }
      if (StartingRenderFrameId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(StartingRenderFrameId);
      }
      if (StartingInputFrameId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(StartingInputFrameId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PrimitiveConsts other) {
      if (other == null) {
        return;
      }
      if (other.BattleDynamicsFps != 0) {
        BattleDynamicsFps = other.BattleDynamicsFps;
      }
      if (other.DefaultTimeoutForLastAllConfirmedIfd != 0) {
        DefaultTimeoutForLastAllConfirmedIfd = other.DefaultTimeoutForLastAllConfirmedIfd;
      }
      if (other.RoomIdNone != 0) {
        RoomIdNone = other.RoomIdNone;
      }
      if (other.RoomStateImpossible != 0) {
        RoomStateImpossible = other.RoomStateImpossible;
      }
      if (other.RoomStateIdle != 0) {
        RoomStateIdle = other.RoomStateIdle;
      }
      if (other.RoomStateWaiting != 0) {
        RoomStateWaiting = other.RoomStateWaiting;
      }
      if (other.RoomStatePrepare != 0) {
        RoomStatePrepare = other.RoomStatePrepare;
      }
      if (other.RoomStateInBattle != 0) {
        RoomStateInBattle = other.RoomStateInBattle;
      }
      if (other.RoomStateInSettlement != 0) {
        RoomStateInSettlement = other.RoomStateInSettlement;
      }
      if (other.RoomStateStopped != 0) {
        RoomStateStopped = other.RoomStateStopped;
      }
      if (other.RoomStateFrontendAwaitingAutoRejoin != 0) {
        RoomStateFrontendAwaitingAutoRejoin = other.RoomStateFrontendAwaitingAutoRejoin;
      }
      if (other.RoomStateFrontendAwaitingManualRejoin != 0) {
        RoomStateFrontendAwaitingManualRejoin = other.RoomStateFrontendAwaitingManualRejoin;
      }
      if (other.RoomStateFrontendRejoining != 0) {
        RoomStateFrontendRejoining = other.RoomStateFrontendRejoining;
      }
      if (other.PlayerBattleStateImpossible != 0) {
        PlayerBattleStateImpossible = other.PlayerBattleStateImpossible;
      }
      if (other.PlayerBattleStateAddedPendingBattleColliderAck != 0) {
        PlayerBattleStateAddedPendingBattleColliderAck = other.PlayerBattleStateAddedPendingBattleColliderAck;
      }
      if (other.PlayerBattleStateReaddedPendingForceResync != 0) {
        PlayerBattleStateReaddedPendingForceResync = other.PlayerBattleStateReaddedPendingForceResync;
      }
      if (other.PlayerBattleStateActive != 0) {
        PlayerBattleStateActive = other.PlayerBattleStateActive;
      }
      if (other.PlayerBattleStateDisconnected != 0) {
        PlayerBattleStateDisconnected = other.PlayerBattleStateDisconnected;
      }
      if (other.PlayerBattleStateLost != 0) {
        PlayerBattleStateLost = other.PlayerBattleStateLost;
      }
      if (other.PlayerBattleStateExpelledDuringGame != 0) {
        PlayerBattleStateExpelledDuringGame = other.PlayerBattleStateExpelledDuringGame;
      }
      if (other.PlayerBattleStateExpelledInDismissal != 0) {
        PlayerBattleStateExpelledInDismissal = other.PlayerBattleStateExpelledInDismissal;
      }
      if (other.UpsyncMsgActPlayerColliderAck != 0) {
        UpsyncMsgActPlayerColliderAck = other.UpsyncMsgActPlayerColliderAck;
      }
      if (other.UpsyncMsgActPlayerCmd != 0) {
        UpsyncMsgActPlayerCmd = other.UpsyncMsgActPlayerCmd;
      }
      if (other.UpsyncMsgActHolepunchBackendUdpTunnel != 0) {
        UpsyncMsgActHolepunchBackendUdpTunnel = other.UpsyncMsgActHolepunchBackendUdpTunnel;
      }
      if (other.UpsyncMsgActHolepunchPeerUdpAddr != 0) {
        UpsyncMsgActHolepunchPeerUdpAddr = other.UpsyncMsgActHolepunchPeerUdpAddr;
      }
      if (other.DownsyncMsgActBattleColliderInfo != 0) {
        DownsyncMsgActBattleColliderInfo = other.DownsyncMsgActBattleColliderInfo;
      }
      if (other.DownsyncMsgActInputBatch != 0) {
        DownsyncMsgActInputBatch = other.DownsyncMsgActInputBatch;
      }
      if (other.DownsyncMsgActBattleStopped != 0) {
        DownsyncMsgActBattleStopped = other.DownsyncMsgActBattleStopped;
      }
      if (other.DownsyncMsgActForcedResync != 0) {
        DownsyncMsgActForcedResync = other.DownsyncMsgActForcedResync;
      }
      if (other.DownsyncMsgActPeerInputBatch != 0) {
        DownsyncMsgActPeerInputBatch = other.DownsyncMsgActPeerInputBatch;
      }
      if (other.DownsyncMsgActPeerUdpAddr != 0) {
        DownsyncMsgActPeerUdpAddr = other.DownsyncMsgActPeerUdpAddr;
      }
      if (other.DownsyncMsgActBattleReadyToStart != 0) {
        DownsyncMsgActBattleReadyToStart = other.DownsyncMsgActBattleReadyToStart;
      }
      if (other.DownsyncMsgActBattleStart != 0) {
        DownsyncMsgActBattleStart = other.DownsyncMsgActBattleStart;
      }
      if (other.DownsyncMsgActPlayerDisconnected != 0) {
        DownsyncMsgActPlayerDisconnected = other.DownsyncMsgActPlayerDisconnected;
      }
      if (other.DownsyncMsgActPlayerReaddedAndAcked != 0) {
        DownsyncMsgActPlayerReaddedAndAcked = other.DownsyncMsgActPlayerReaddedAndAcked;
      }
      if (other.DownsyncMsgActPlayerAddedAndAcked != 0) {
        DownsyncMsgActPlayerAddedAndAcked = other.DownsyncMsgActPlayerAddedAndAcked;
      }
      if (other.DownsyncMsgWsClosed != 0) {
        DownsyncMsgWsClosed = other.DownsyncMsgWsClosed;
      }
      if (other.DownsyncMsgWsOpen != 0) {
        DownsyncMsgWsOpen = other.DownsyncMsgWsOpen;
      }
      if (other.MagicJoinIndexInvalid != 0) {
        MagicJoinIndexInvalid = other.MagicJoinIndexInvalid;
      }
      if (other.MagicJoinIndexSrvUdpTunnel != 0) {
        MagicJoinIndexSrvUdpTunnel = other.MagicJoinIndexSrvUdpTunnel;
      }
      if (other.MagicQuotaInfinite != 0) {
        MagicQuotaInfinite = other.MagicQuotaInfinite;
      }
      if (other.NpcFleeGracePeriodRdfCnt != 0) {
        NpcFleeGracePeriodRdfCnt = other.NpcFleeGracePeriodRdfCnt;
      }
      if (other.MagicLastSentInputFrameIdNormalAdded != 0) {
        MagicLastSentInputFrameIdNormalAdded = other.MagicLastSentInputFrameIdNormalAdded;
      }
      if (other.MagicLastSentInputFrameIdReadded != 0) {
        MagicLastSentInputFrameIdReadded = other.MagicLastSentInputFrameIdReadded;
      }
      if (other.BgmNoChange != 0) {
        BgmNoChange = other.BgmNoChange;
      }
      if (other.InvalidDefaultPlayerId != 0) {
        InvalidDefaultPlayerId = other.InvalidDefaultPlayerId;
      }
      if (other.EstimatedSecondsPerRdf != 0F) {
        EstimatedSecondsPerRdf = other.EstimatedSecondsPerRdf;
      }
      if (other.MaxBtnHoldingRdfCnt != 0) {
        MaxBtnHoldingRdfCnt = other.MaxBtnHoldingRdfCnt;
      }
      if (other.MaxFlyingRdfCnt != 0) {
        MaxFlyingRdfCnt = other.MaxFlyingRdfCnt;
      }
      if (other.MaxReversePushbackFramesToRecover != 0) {
        MaxReversePushbackFramesToRecover = other.MaxReversePushbackFramesToRecover;
      }
      if (other.TerminatingEvtsubId != 0) {
        TerminatingEvtsubId = other.TerminatingEvtsubId;
      }
      if (other.MagicEvtsubIdDummy != 0) {
        MagicEvtsubIdDummy = other.MagicEvtsubIdDummy;
      }
      if (other.SpeedNotHitNotSpecified != 0) {
        SpeedNotHitNotSpecified = other.SpeedNotHitNotSpecified;
      }
      if (other.DefaultPreallocNpcCapacity != 0) {
        DefaultPreallocNpcCapacity = other.DefaultPreallocNpcCapacity;
      }
      if (other.DefaultPreallocBulletCapacity != 0) {
        DefaultPreallocBulletCapacity = other.DefaultPreallocBulletCapacity;
      }
      if (other.DefaultPreallocTrapCapacity != 0) {
        DefaultPreallocTrapCapacity = other.DefaultPreallocTrapCapacity;
      }
      if (other.DefaultPreallocTriggerCapacity != 0) {
        DefaultPreallocTriggerCapacity = other.DefaultPreallocTriggerCapacity;
      }
      if (other.DefaultPreallocPickableCapacity != 0) {
        DefaultPreallocPickableCapacity = other.DefaultPreallocPickableCapacity;
      }
      if (other.DefaultPerCharacterBuffCapacity != 0) {
        DefaultPerCharacterBuffCapacity = other.DefaultPerCharacterBuffCapacity;
      }
      if (other.DefaultPerCharacterDebuffCapacity != 0) {
        DefaultPerCharacterDebuffCapacity = other.DefaultPerCharacterDebuffCapacity;
      }
      if (other.DefaultPerCharacterInventoryCapacity != 0) {
        DefaultPerCharacterInventoryCapacity = other.DefaultPerCharacterInventoryCapacity;
      }
      if (other.DefaultPerCharacterImmuneBulletRecordCapacity != 0) {
        DefaultPerCharacterImmuneBulletRecordCapacity = other.DefaultPerCharacterImmuneBulletRecordCapacity;
      }
      if (other.GravityY != 0F) {
        GravityY = other.GravityY;
      }
      if (other.GravityYJumpHolding != 0F) {
        GravityYJumpHolding = other.GravityYJumpHolding;
      }
      if (other.DefaultPatrolCueWaivingFrames != 0) {
        DefaultPatrolCueWaivingFrames = other.DefaultPatrolCueWaivingFrames;
      }
      if (other.NoPatrolCueId != 0) {
        NoPatrolCueId = other.NoPatrolCueId;
      }
      if (other.NoVfxId != 0) {
        NoVfxId = other.NoVfxId;
      }
      if (other.DefaultPickableHitboxSizeX != 0F) {
        DefaultPickableHitboxSizeX = other.DefaultPickableHitboxSizeX;
      }
      if (other.DefaultPickableHitboxSizeY != 0F) {
        DefaultPickableHitboxSizeY = other.DefaultPickableHitboxSizeY;
      }
      if (other.DefaultPickableDisappearingAnimFrames != 0) {
        DefaultPickableDisappearingAnimFrames = other.DefaultPickableDisappearingAnimFrames;
      }
      if (other.DefaultPickableConsumedAnimFrames != 0) {
        DefaultPickableConsumedAnimFrames = other.DefaultPickableConsumedAnimFrames;
      }
      if (other.DefaultPickableRisingVelY != 0F) {
        DefaultPickableRisingVelY = other.DefaultPickableRisingVelY;
      }
      if (other.DefaultPickableNonpickableStartupFrames != 0) {
        DefaultPickableNonpickableStartupFrames = other.DefaultPickableNonpickableStartupFrames;
      }
      if (other.DefaultFramesToShowDamaged != 0) {
        DefaultFramesToShowDamaged = other.DefaultFramesToShowDamaged;
      }
      if (other.DefaultFramesToContinueCombo != 0) {
        DefaultFramesToContinueCombo = other.DefaultFramesToContinueCombo;
      }
      if (other.DefaultBlockStunFrames != 0) {
        DefaultBlockStunFrames = other.DefaultBlockStunFrames;
      }
      if (other.DefaultBlownupFramesForFlying != 0) {
        DefaultBlownupFramesForFlying = other.DefaultBlownupFramesForFlying;
      }
      if (other.DefaultGaugeIncByHit != 0) {
        DefaultGaugeIncByHit = other.DefaultGaugeIncByHit;
      }
      if (other.DefaultFramesDelayedOfBossSavepoint != 0) {
        DefaultFramesDelayedOfBossSavepoint = other.DefaultFramesDelayedOfBossSavepoint;
      }
      if (other.InputScaleFrames != 0) {
        InputScaleFrames = other.InputScaleFrames;
      }
      if (other.InputScale != 0) {
        InputScale = other.InputScale;
      }
      if (other.InputDelayFrames != 0) {
        InputDelayFrames = other.InputDelayFrames;
      }
      if (other.DefaultBackendInputBufferSize != 0) {
        DefaultBackendInputBufferSize = other.DefaultBackendInputBufferSize;
      }
      if (other.MagicFramesToBeOnWall != 0) {
        MagicFramesToBeOnWall = other.MagicFramesToBeOnWall;
      }
      if (other.DyingFramesToRecover != 0) {
        DyingFramesToRecover = other.DyingFramesToRecover;
      }
      if (other.ParriedFramesToRecover != 0) {
        ParriedFramesToRecover = other.ParriedFramesToRecover;
      }
      if (other.ParriedFramesToStartCancellable != 0) {
        ParriedFramesToStartCancellable = other.ParriedFramesToStartCancellable;
      }
      if (other.NoSkill != 0) {
        NoSkill = other.NoSkill;
      }
      if (other.NoSkillHit != 0) {
        NoSkillHit = other.NoSkillHit;
      }
      if (other.NoLockVel != 0F) {
        NoLockVel = other.NoLockVel;
      }
      if (other.DebuffArrIdxElemental != 0) {
        DebuffArrIdxElemental = other.DebuffArrIdxElemental;
      }
      if (other.TerminatingRenderFrameId != 0) {
        TerminatingRenderFrameId = other.TerminatingRenderFrameId;
      }
      if (other.TerminatingInputFrameId != 0) {
        TerminatingInputFrameId = other.TerminatingInputFrameId;
      }
      if (other.TerminatingCharacterId != 0) {
        TerminatingCharacterId = other.TerminatingCharacterId;
      }
      if (other.TerminatingTrapId != 0) {
        TerminatingTrapId = other.TerminatingTrapId;
      }
      if (other.TerminatingTriggerId != 0) {
        TerminatingTriggerId = other.TerminatingTriggerId;
      }
      if (other.TerminatingPickableId != 0) {
        TerminatingPickableId = other.TerminatingPickableId;
      }
      if (other.TerminatingBulletId != 0) {
        TerminatingBulletId = other.TerminatingBulletId;
      }
      if (other.TerminatingBulletTeamId != 0) {
        TerminatingBulletTeamId = other.TerminatingBulletTeamId;
      }
      if (other.TerminatingBuffSpeciesId != 0) {
        TerminatingBuffSpeciesId = other.TerminatingBuffSpeciesId;
      }
      if (other.TerminatingDebuffSpeciesId != 0) {
        TerminatingDebuffSpeciesId = other.TerminatingDebuffSpeciesId;
      }
      if (other.TerminatingConsumableSpeciesId != 0) {
        TerminatingConsumableSpeciesId = other.TerminatingConsumableSpeciesId;
      }
      if (other.FrontendWsRecvBytelength != 0) {
        FrontendWsRecvBytelength = other.FrontendWsRecvBytelength;
      }
      if (other.BackendWsRecvBytelength != 0) {
        BackendWsRecvBytelength = other.BackendWsRecvBytelength;
      }
      if (other.JammedBtnHoldingRdfCnt != 0) {
        JammedBtnHoldingRdfCnt = other.JammedBtnHoldingRdfCnt;
      }
      if (other.BtnBHoldingRdfCntThreshold2 != 0) {
        BtnBHoldingRdfCntThreshold2 = other.BtnBHoldingRdfCntThreshold2;
      }
      if (other.BtnBHoldingRdfCntThreshold1 != 0) {
        BtnBHoldingRdfCntThreshold1 = other.BtnBHoldingRdfCntThreshold1;
      }
      if (other.JumpHoldingRdfCntThreshold1 != 0) {
        JumpHoldingRdfCntThreshold1 = other.JumpHoldingRdfCntThreshold1;
      }
      if (other.JumpHoldingIfdCntThreshold1 != 0) {
        JumpHoldingIfdCntThreshold1 = other.JumpHoldingIfdCntThreshold1;
      }
      if (other.JumpHoldingRdfCntThreshold2 != 0) {
        JumpHoldingRdfCntThreshold2 = other.JumpHoldingRdfCntThreshold2;
      }
      if (other.JumpHoldingIfdCntThreshold2 != 0) {
        JumpHoldingIfdCntThreshold2 = other.JumpHoldingIfdCntThreshold2;
      }
      if (other.InAirDashGracePeriodRdfCnt != 0) {
        InAirDashGracePeriodRdfCnt = other.InAirDashGracePeriodRdfCnt;
      }
      if (other.InAirJumpGracePeriodRdfCnt != 0) {
        InAirJumpGracePeriodRdfCnt = other.InAirJumpGracePeriodRdfCnt;
      }
      if (other.BtnEHoldingRdfCntThreshold1 != 0) {
        BtnEHoldingRdfCntThreshold1 = other.BtnEHoldingRdfCntThreshold1;
      }
      if (other.BtnEHoldingIfdCntThreshold1 != 0) {
        BtnEHoldingIfdCntThreshold1 = other.BtnEHoldingIfdCntThreshold1;
      }
      if (other.SpAtkLookupFrames != 0) {
        SpAtkLookupFrames = other.SpAtkLookupFrames;
      }
      if (other.PatternIdUnableToOp != 0) {
        PatternIdUnableToOp = other.PatternIdUnableToOp;
      }
      if (other.PatternIdNoOp != 0) {
        PatternIdNoOp = other.PatternIdNoOp;
      }
      if (other.PatternB != 0) {
        PatternB = other.PatternB;
      }
      if (other.PatternUpB != 0) {
        PatternUpB = other.PatternUpB;
      }
      if (other.PatternDownB != 0) {
        PatternDownB = other.PatternDownB;
      }
      if (other.PatternHoldB != 0) {
        PatternHoldB = other.PatternHoldB;
      }
      if (other.PatternDownA != 0) {
        PatternDownA = other.PatternDownA;
      }
      if (other.PatternReleasedB != 0) {
        PatternReleasedB = other.PatternReleasedB;
      }
      if (other.PatternE != 0) {
        PatternE = other.PatternE;
      }
      if (other.PatternFrontE != 0) {
        PatternFrontE = other.PatternFrontE;
      }
      if (other.PatternBackE != 0) {
        PatternBackE = other.PatternBackE;
      }
      if (other.PatternUpE != 0) {
        PatternUpE = other.PatternUpE;
      }
      if (other.PatternDownE != 0) {
        PatternDownE = other.PatternDownE;
      }
      if (other.PatternHoldE != 0) {
        PatternHoldE = other.PatternHoldE;
      }
      if (other.PatternEHoldB != 0) {
        PatternEHoldB = other.PatternEHoldB;
      }
      if (other.PatternFrontEHoldB != 0) {
        PatternFrontEHoldB = other.PatternFrontEHoldB;
      }
      if (other.PatternBackEHoldB != 0) {
        PatternBackEHoldB = other.PatternBackEHoldB;
      }
      if (other.PatternUpEHoldB != 0) {
        PatternUpEHoldB = other.PatternUpEHoldB;
      }
      if (other.PatternDownEHoldB != 0) {
        PatternDownEHoldB = other.PatternDownEHoldB;
      }
      if (other.PatternHoldEHoldB != 0) {
        PatternHoldEHoldB = other.PatternHoldEHoldB;
      }
      if (other.PatternInventorySlotC != 0) {
        PatternInventorySlotC = other.PatternInventorySlotC;
      }
      if (other.PatternInventorySlotD != 0) {
        PatternInventorySlotD = other.PatternInventorySlotD;
      }
      if (other.PatternInventorySlotBc != 0) {
        PatternInventorySlotBc = other.PatternInventorySlotBc;
      }
      if (other.PatternHoldInventorySlotC != 0) {
        PatternHoldInventorySlotC = other.PatternHoldInventorySlotC;
      }
      if (other.PatternHoldInventorySlotD != 0) {
        PatternHoldInventorySlotD = other.PatternHoldInventorySlotD;
      }
      if (other.EleNone != 0) {
        EleNone = other.EleNone;
      }
      if (other.EleFire != 0) {
        EleFire = other.EleFire;
      }
      if (other.EleWater != 0) {
        EleWater = other.EleWater;
      }
      if (other.EleThunder != 0) {
        EleThunder = other.EleThunder;
      }
      if (other.EleRock != 0) {
        EleRock = other.EleRock;
      }
      if (other.EleWind != 0) {
        EleWind = other.EleWind;
      }
      if (other.EleIce != 0) {
        EleIce = other.EleIce;
      }
      if (other.EleWeaknessDefaultYield != 0F) {
        EleWeaknessDefaultYield = other.EleWeaknessDefaultYield;
      }
      if (other.EleResistanceDefaultYield != 0F) {
        EleResistanceDefaultYield = other.EleResistanceDefaultYield;
      }
      if (other.StartingRenderFrameId != 0) {
        StartingRenderFrameId = other.StartingRenderFrameId;
      }
      if (other.StartingInputFrameId != 0) {
        StartingInputFrameId = other.StartingInputFrameId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            BattleDynamicsFps = input.ReadInt32();
            break;
          }
          case 16: {
            DefaultTimeoutForLastAllConfirmedIfd = input.ReadInt32();
            break;
          }
          case 24: {
            RoomIdNone = input.ReadInt32();
            break;
          }
          case 32: {
            RoomStateImpossible = input.ReadInt32();
            break;
          }
          case 40: {
            RoomStateIdle = input.ReadInt32();
            break;
          }
          case 48: {
            RoomStateWaiting = input.ReadInt32();
            break;
          }
          case 56: {
            RoomStatePrepare = input.ReadInt32();
            break;
          }
          case 64: {
            RoomStateInBattle = input.ReadInt32();
            break;
          }
          case 72: {
            RoomStateInSettlement = input.ReadInt32();
            break;
          }
          case 80: {
            RoomStateStopped = input.ReadInt32();
            break;
          }
          case 88: {
            RoomStateFrontendAwaitingAutoRejoin = input.ReadInt32();
            break;
          }
          case 96: {
            RoomStateFrontendAwaitingManualRejoin = input.ReadInt32();
            break;
          }
          case 104: {
            RoomStateFrontendRejoining = input.ReadInt32();
            break;
          }
          case 112: {
            PlayerBattleStateImpossible = input.ReadInt32();
            break;
          }
          case 120: {
            PlayerBattleStateAddedPendingBattleColliderAck = input.ReadInt32();
            break;
          }
          case 128: {
            PlayerBattleStateReaddedPendingForceResync = input.ReadInt32();
            break;
          }
          case 136: {
            PlayerBattleStateActive = input.ReadInt32();
            break;
          }
          case 144: {
            PlayerBattleStateDisconnected = input.ReadInt32();
            break;
          }
          case 152: {
            PlayerBattleStateLost = input.ReadInt32();
            break;
          }
          case 160: {
            PlayerBattleStateExpelledDuringGame = input.ReadInt32();
            break;
          }
          case 168: {
            PlayerBattleStateExpelledInDismissal = input.ReadInt32();
            break;
          }
          case 176: {
            UpsyncMsgActPlayerColliderAck = input.ReadInt32();
            break;
          }
          case 184: {
            UpsyncMsgActPlayerCmd = input.ReadInt32();
            break;
          }
          case 192: {
            UpsyncMsgActHolepunchBackendUdpTunnel = input.ReadInt32();
            break;
          }
          case 200: {
            UpsyncMsgActHolepunchPeerUdpAddr = input.ReadInt32();
            break;
          }
          case 208: {
            DownsyncMsgActBattleColliderInfo = input.ReadInt32();
            break;
          }
          case 216: {
            DownsyncMsgActInputBatch = input.ReadInt32();
            break;
          }
          case 224: {
            DownsyncMsgActBattleStopped = input.ReadInt32();
            break;
          }
          case 232: {
            DownsyncMsgActForcedResync = input.ReadInt32();
            break;
          }
          case 240: {
            DownsyncMsgActPeerInputBatch = input.ReadInt32();
            break;
          }
          case 248: {
            DownsyncMsgActPeerUdpAddr = input.ReadInt32();
            break;
          }
          case 256: {
            DownsyncMsgActBattleReadyToStart = input.ReadInt32();
            break;
          }
          case 264: {
            DownsyncMsgActBattleStart = input.ReadInt32();
            break;
          }
          case 272: {
            DownsyncMsgActPlayerDisconnected = input.ReadInt32();
            break;
          }
          case 280: {
            DownsyncMsgActPlayerReaddedAndAcked = input.ReadInt32();
            break;
          }
          case 288: {
            DownsyncMsgActPlayerAddedAndAcked = input.ReadInt32();
            break;
          }
          case 296: {
            DownsyncMsgWsClosed = input.ReadInt32();
            break;
          }
          case 304: {
            DownsyncMsgWsOpen = input.ReadInt32();
            break;
          }
          case 312: {
            MagicJoinIndexInvalid = input.ReadUInt32();
            break;
          }
          case 320: {
            MagicJoinIndexSrvUdpTunnel = input.ReadUInt32();
            break;
          }
          case 328: {
            MagicQuotaInfinite = input.ReadInt32();
            break;
          }
          case 336: {
            NpcFleeGracePeriodRdfCnt = input.ReadInt32();
            break;
          }
          case 344: {
            MagicLastSentInputFrameIdNormalAdded = input.ReadInt32();
            break;
          }
          case 352: {
            MagicLastSentInputFrameIdReadded = input.ReadInt32();
            break;
          }
          case 360: {
            BgmNoChange = input.ReadInt32();
            break;
          }
          case 368: {
            InvalidDefaultPlayerId = input.ReadInt32();
            break;
          }
          case 381: {
            EstimatedSecondsPerRdf = input.ReadFloat();
            break;
          }
          case 384: {
            MaxBtnHoldingRdfCnt = input.ReadInt32();
            break;
          }
          case 392: {
            MaxFlyingRdfCnt = input.ReadInt32();
            break;
          }
          case 400: {
            MaxReversePushbackFramesToRecover = input.ReadInt32();
            break;
          }
          case 408: {
            TerminatingEvtsubId = input.ReadInt32();
            break;
          }
          case 416: {
            MagicEvtsubIdDummy = input.ReadInt32();
            break;
          }
          case 424: {
            SpeedNotHitNotSpecified = input.ReadInt32();
            break;
          }
          case 432: {
            DefaultPreallocNpcCapacity = input.ReadInt32();
            break;
          }
          case 440: {
            DefaultPreallocBulletCapacity = input.ReadInt32();
            break;
          }
          case 448: {
            DefaultPreallocTrapCapacity = input.ReadInt32();
            break;
          }
          case 456: {
            DefaultPreallocTriggerCapacity = input.ReadInt32();
            break;
          }
          case 464: {
            DefaultPreallocPickableCapacity = input.ReadInt32();
            break;
          }
          case 472: {
            DefaultPerCharacterBuffCapacity = input.ReadInt32();
            break;
          }
          case 480: {
            DefaultPerCharacterDebuffCapacity = input.ReadInt32();
            break;
          }
          case 488: {
            DefaultPerCharacterInventoryCapacity = input.ReadInt32();
            break;
          }
          case 496: {
            DefaultPerCharacterImmuneBulletRecordCapacity = input.ReadInt32();
            break;
          }
          case 509: {
            GravityY = input.ReadFloat();
            break;
          }
          case 517: {
            GravityYJumpHolding = input.ReadFloat();
            break;
          }
          case 520: {
            DefaultPatrolCueWaivingFrames = input.ReadInt32();
            break;
          }
          case 528: {
            NoPatrolCueId = input.ReadInt32();
            break;
          }
          case 536: {
            NoVfxId = input.ReadInt32();
            break;
          }
          case 549: {
            DefaultPickableHitboxSizeX = input.ReadFloat();
            break;
          }
          case 557: {
            DefaultPickableHitboxSizeY = input.ReadFloat();
            break;
          }
          case 560: {
            DefaultPickableDisappearingAnimFrames = input.ReadInt32();
            break;
          }
          case 568: {
            DefaultPickableConsumedAnimFrames = input.ReadInt32();
            break;
          }
          case 581: {
            DefaultPickableRisingVelY = input.ReadFloat();
            break;
          }
          case 584: {
            DefaultPickableNonpickableStartupFrames = input.ReadInt32();
            break;
          }
          case 592: {
            DefaultFramesToShowDamaged = input.ReadInt32();
            break;
          }
          case 600: {
            DefaultFramesToContinueCombo = input.ReadInt32();
            break;
          }
          case 608: {
            DefaultBlockStunFrames = input.ReadInt32();
            break;
          }
          case 616: {
            DefaultBlownupFramesForFlying = input.ReadInt32();
            break;
          }
          case 624: {
            DefaultGaugeIncByHit = input.ReadInt32();
            break;
          }
          case 632: {
            DefaultFramesDelayedOfBossSavepoint = input.ReadInt32();
            break;
          }
          case 640: {
            InputScaleFrames = input.ReadInt32();
            break;
          }
          case 648: {
            InputScale = input.ReadInt32();
            break;
          }
          case 656: {
            InputDelayFrames = input.ReadInt32();
            break;
          }
          case 664: {
            DefaultBackendInputBufferSize = input.ReadInt32();
            break;
          }
          case 688: {
            MagicFramesToBeOnWall = input.ReadInt32();
            break;
          }
          case 696: {
            DyingFramesToRecover = input.ReadInt32();
            break;
          }
          case 704: {
            ParriedFramesToRecover = input.ReadInt32();
            break;
          }
          case 712: {
            ParriedFramesToStartCancellable = input.ReadInt32();
            break;
          }
          case 720: {
            NoSkill = input.ReadUInt32();
            break;
          }
          case 728: {
            NoSkillHit = input.ReadInt32();
            break;
          }
          case 757: {
            NoLockVel = input.ReadFloat();
            break;
          }
          case 760: {
            DebuffArrIdxElemental = input.ReadInt32();
            break;
          }
          case 768: {
            TerminatingRenderFrameId = input.ReadInt32();
            break;
          }
          case 776: {
            TerminatingInputFrameId = input.ReadInt32();
            break;
          }
          case 784: {
            TerminatingCharacterId = input.ReadUInt32();
            break;
          }
          case 792: {
            TerminatingTrapId = input.ReadUInt32();
            break;
          }
          case 800: {
            TerminatingTriggerId = input.ReadUInt32();
            break;
          }
          case 808: {
            TerminatingPickableId = input.ReadUInt32();
            break;
          }
          case 816: {
            TerminatingBulletId = input.ReadUInt32();
            break;
          }
          case 824: {
            TerminatingBulletTeamId = input.ReadInt32();
            break;
          }
          case 832: {
            TerminatingBuffSpeciesId = input.ReadUInt32();
            break;
          }
          case 840: {
            TerminatingDebuffSpeciesId = input.ReadUInt32();
            break;
          }
          case 848: {
            TerminatingConsumableSpeciesId = input.ReadUInt32();
            break;
          }
          case 856: {
            FrontendWsRecvBytelength = input.ReadInt32();
            break;
          }
          case 864: {
            BackendWsRecvBytelength = input.ReadInt32();
            break;
          }
          case 872: {
            JammedBtnHoldingRdfCnt = input.ReadInt32();
            break;
          }
          case 880: {
            BtnBHoldingRdfCntThreshold2 = input.ReadInt32();
            break;
          }
          case 888: {
            BtnBHoldingRdfCntThreshold1 = input.ReadInt32();
            break;
          }
          case 896: {
            JumpHoldingRdfCntThreshold1 = input.ReadInt32();
            break;
          }
          case 904: {
            JumpHoldingIfdCntThreshold1 = input.ReadInt32();
            break;
          }
          case 912: {
            JumpHoldingRdfCntThreshold2 = input.ReadInt32();
            break;
          }
          case 920: {
            JumpHoldingIfdCntThreshold2 = input.ReadInt32();
            break;
          }
          case 928: {
            InAirDashGracePeriodRdfCnt = input.ReadInt32();
            break;
          }
          case 936: {
            InAirJumpGracePeriodRdfCnt = input.ReadInt32();
            break;
          }
          case 944: {
            BtnEHoldingRdfCntThreshold1 = input.ReadInt32();
            break;
          }
          case 952: {
            BtnEHoldingIfdCntThreshold1 = input.ReadInt32();
            break;
          }
          case 960: {
            SpAtkLookupFrames = input.ReadInt32();
            break;
          }
          case 968: {
            PatternIdUnableToOp = input.ReadInt32();
            break;
          }
          case 976: {
            PatternIdNoOp = input.ReadInt32();
            break;
          }
          case 984: {
            PatternB = input.ReadInt32();
            break;
          }
          case 992: {
            PatternUpB = input.ReadInt32();
            break;
          }
          case 1000: {
            PatternDownB = input.ReadInt32();
            break;
          }
          case 1008: {
            PatternHoldB = input.ReadInt32();
            break;
          }
          case 1016: {
            PatternDownA = input.ReadInt32();
            break;
          }
          case 1024: {
            PatternReleasedB = input.ReadInt32();
            break;
          }
          case 1032: {
            PatternE = input.ReadInt32();
            break;
          }
          case 1040: {
            PatternFrontE = input.ReadInt32();
            break;
          }
          case 1048: {
            PatternBackE = input.ReadInt32();
            break;
          }
          case 1056: {
            PatternUpE = input.ReadInt32();
            break;
          }
          case 1064: {
            PatternDownE = input.ReadInt32();
            break;
          }
          case 1072: {
            PatternHoldE = input.ReadInt32();
            break;
          }
          case 1080: {
            PatternEHoldB = input.ReadInt32();
            break;
          }
          case 1088: {
            PatternFrontEHoldB = input.ReadInt32();
            break;
          }
          case 1096: {
            PatternBackEHoldB = input.ReadInt32();
            break;
          }
          case 1104: {
            PatternUpEHoldB = input.ReadInt32();
            break;
          }
          case 1112: {
            PatternDownEHoldB = input.ReadInt32();
            break;
          }
          case 1120: {
            PatternHoldEHoldB = input.ReadInt32();
            break;
          }
          case 1128: {
            PatternInventorySlotC = input.ReadInt32();
            break;
          }
          case 1136: {
            PatternInventorySlotD = input.ReadInt32();
            break;
          }
          case 1144: {
            PatternInventorySlotBc = input.ReadInt32();
            break;
          }
          case 1152: {
            PatternHoldInventorySlotC = input.ReadInt32();
            break;
          }
          case 1160: {
            PatternHoldInventorySlotD = input.ReadInt32();
            break;
          }
          case 1168: {
            EleNone = input.ReadUInt32();
            break;
          }
          case 1176: {
            EleFire = input.ReadUInt32();
            break;
          }
          case 1184: {
            EleWater = input.ReadUInt32();
            break;
          }
          case 1192: {
            EleThunder = input.ReadUInt32();
            break;
          }
          case 1200: {
            EleRock = input.ReadUInt32();
            break;
          }
          case 1208: {
            EleWind = input.ReadUInt32();
            break;
          }
          case 1216: {
            EleIce = input.ReadUInt32();
            break;
          }
          case 1229: {
            EleWeaknessDefaultYield = input.ReadFloat();
            break;
          }
          case 1237: {
            EleResistanceDefaultYield = input.ReadFloat();
            break;
          }
          case 1240: {
            StartingRenderFrameId = input.ReadInt32();
            break;
          }
          case 1248: {
            StartingInputFrameId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ConfigConsts : pb::IMessage<ConfigConsts> {
    private static readonly pb::MessageParser<ConfigConsts> _parser = new pb::MessageParser<ConfigConsts>(() => new ConfigConsts());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ConfigConsts> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::jtshared.SerializableDataReflection.Descriptor.MessageTypes[70]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConfigConsts() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConfigConsts(ConfigConsts other) : this() {
      characterConfigs_ = other.characterConfigs_.Clone();
      skillConfigs_ = other.skillConfigs_.Clone();
      debuffConfigs_ = other.debuffConfigs_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConfigConsts Clone() {
      return new ConfigConsts(this);
    }

    /// <summary>Field number for the "character_configs" field.</summary>
    public const int CharacterConfigsFieldNumber = 1;
    private static readonly pbc::MapField<uint, global::jtshared.CharacterConfig>.Codec _map_characterConfigs_codec
        = new pbc::MapField<uint, global::jtshared.CharacterConfig>.Codec(pb::FieldCodec.ForUInt32(8), pb::FieldCodec.ForMessage(18, global::jtshared.CharacterConfig.Parser), 10);
    private readonly pbc::MapField<uint, global::jtshared.CharacterConfig> characterConfigs_ = new pbc::MapField<uint, global::jtshared.CharacterConfig>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<uint, global::jtshared.CharacterConfig> CharacterConfigs {
      get { return characterConfigs_; }
    }

    /// <summary>Field number for the "skill_configs" field.</summary>
    public const int SkillConfigsFieldNumber = 2;
    private static readonly pbc::MapField<uint, global::jtshared.Skill>.Codec _map_skillConfigs_codec
        = new pbc::MapField<uint, global::jtshared.Skill>.Codec(pb::FieldCodec.ForUInt32(8), pb::FieldCodec.ForMessage(18, global::jtshared.Skill.Parser), 18);
    private readonly pbc::MapField<uint, global::jtshared.Skill> skillConfigs_ = new pbc::MapField<uint, global::jtshared.Skill>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<uint, global::jtshared.Skill> SkillConfigs {
      get { return skillConfigs_; }
    }

    /// <summary>Field number for the "debuff_configs" field.</summary>
    public const int DebuffConfigsFieldNumber = 3;
    private static readonly pbc::MapField<uint, global::jtshared.DebuffConfig>.Codec _map_debuffConfigs_codec
        = new pbc::MapField<uint, global::jtshared.DebuffConfig>.Codec(pb::FieldCodec.ForUInt32(8), pb::FieldCodec.ForMessage(18, global::jtshared.DebuffConfig.Parser), 26);
    private readonly pbc::MapField<uint, global::jtshared.DebuffConfig> debuffConfigs_ = new pbc::MapField<uint, global::jtshared.DebuffConfig>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<uint, global::jtshared.DebuffConfig> DebuffConfigs {
      get { return debuffConfigs_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ConfigConsts);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ConfigConsts other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!CharacterConfigs.Equals(other.CharacterConfigs)) return false;
      if (!SkillConfigs.Equals(other.SkillConfigs)) return false;
      if (!DebuffConfigs.Equals(other.DebuffConfigs)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= CharacterConfigs.GetHashCode();
      hash ^= SkillConfigs.GetHashCode();
      hash ^= DebuffConfigs.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      characterConfigs_.WriteTo(output, _map_characterConfigs_codec);
      skillConfigs_.WriteTo(output, _map_skillConfigs_codec);
      debuffConfigs_.WriteTo(output, _map_debuffConfigs_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += characterConfigs_.CalculateSize(_map_characterConfigs_codec);
      size += skillConfigs_.CalculateSize(_map_skillConfigs_codec);
      size += debuffConfigs_.CalculateSize(_map_debuffConfigs_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ConfigConsts other) {
      if (other == null) {
        return;
      }
      characterConfigs_.Add(other.characterConfigs_);
      skillConfigs_.Add(other.skillConfigs_);
      debuffConfigs_.Add(other.debuffConfigs_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            characterConfigs_.AddEntriesFrom(input, _map_characterConfigs_codec);
            break;
          }
          case 18: {
            skillConfigs_.AddEntriesFrom(input, _map_skillConfigs_codec);
            break;
          }
          case 26: {
            debuffConfigs_.AddEntriesFrom(input, _map_debuffConfigs_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
