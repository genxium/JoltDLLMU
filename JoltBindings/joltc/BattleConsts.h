#ifndef BATTLE_CONSTS_H
#define BATTLE_CONSTS_H

#pragma once

const uint64_t U64_1 = static_cast<uint64_t>(1);

const int BATTLE_DYNAMICS_FPS = 60;
const float ESTIMATED_SECONDS_PER_FRAME = 1.0 / BATTLE_DYNAMICS_FPS;
const int BACKEND_ESTIMATED_MILLIS_PER_FRAME = (int)(1000.0+(BATTLE_DYNAMICS_FPS-1)/BATTLE_DYNAMICS_FPS); // Ceiled
const int INPUT_SCALE_FRAMES = 2; // inputDelayedAndScaledFrameId = ((originalFrameId - InputDelayFrames) >> InputScaleFrames)
const int INPUT_SCALE = (1 << INPUT_SCALE_FRAMES);
const int INPUT_DELAY_FRAMES = 2; // in the count of render frames
const int DEFAULT_BACKEND_RENDER_BUFFER_SIZE = 512;
const int DEFAULT_BACKEND_INPUT_BUFFER_SIZE = ((30*BATTLE_DYNAMICS_FPS) >> INPUT_SCALE_FRAMES) + 1; 
const int JAMMED_BTN_HOLDING_RDF_CNT = -1;
const int BTN_B_HOLDING_RDF_CNT_THRESHOLD_2 = BATTLE_DYNAMICS_FPS + (BATTLE_DYNAMICS_FPS >> 1);
const int BTN_B_HOLDING_RDF_CNT_THRESHOLD_1 = (BATTLE_DYNAMICS_FPS >> 2) + (BATTLE_DYNAMICS_FPS >> 3);
const int JUMP_HOLDING_RDF_CNT_THRESHOLD_1 = (BATTLE_DYNAMICS_FPS >> 3) + (BATTLE_DYNAMICS_FPS >> 4);  
const int JUMP_HOLDING_IFD_CNT_THRESHOLD_1 = (int)(1.0*JUMP_HOLDING_RDF_CNT_THRESHOLD_1 + INPUT_SCALE - 1) /INPUT_SCALE; // Ceiled  
const int JUMP_HOLDING_RDF_CNT_THRESHOLD_2 = (BATTLE_DYNAMICS_FPS >> 1) + (BATTLE_DYNAMICS_FPS >> 4);  
const int JUMP_HOLDING_IFD_CNT_THRESHOLD_2 = (int)(1.0*JUMP_HOLDING_RDF_CNT_THRESHOLD_2 + INPUT_SCALE - 1)/INPUT_SCALE; // Ceiled  
const int IN_AIR_DASH_GRACE_PERIOD_RDF_CNT = 3;
const int IN_AIR_JUMP_GRACE_PERIOD_RDF_CNT = 6;
const int BTN_E_HOLDING_RDF_CNT_THRESHOLD_1 = JUMP_HOLDING_RDF_CNT_THRESHOLD_1;  
const int BTN_E_HOLDING_IFD_CNT_THRESHOLD_1 = JUMP_HOLDING_IFD_CNT_THRESHOLD_1;  
const int NPC_FLEE_GRACE_PERIOD_RDF_CNT = 8;

const int DEFAULT_PREALLOC_NPC_CAPACITY = 24; // 1 serialized "CharacterDownsync" is around 112 bytes per experiment, (7465 - 7017)/(28-24) 
const int DEFAULT_PREALLOC_BULLET_CAPACITY = 48; // 1 serialized "Bullet" is around 18.5 bytes per experiment, (7465 - 7317)/(56 - 48)
const int DEFAULT_PREALLOC_DYNAMIC_TRAP_CAPACITY = 12;
const int DEFAULT_PREALLOC_TRIGGER_CAPACITY = 15;
const int DEFAULT_PREALLOC_PICKABLE_CAPACITY = 32;
const int DEFAULT_PER_CHARACTER_BUFF_CAPACITY = 1;
const int DEFAULT_PER_CHARACTER_DEBUFF_CAPACITY = 1;
const int DEFAULT_PER_CHARACTER_INVENTORY_CAPACITY = 3;
const int DEFAULT_PER_CHARACTER_IMMUNE_BULLET_RECORD_CAPACITY = 3;

const int DEFAULT_PREALLOC_DYNAMIC_COLLIDER_CAPACITY = DEFAULT_PREALLOC_NPC_CAPACITY + DEFAULT_PREALLOC_BULLET_CAPACITY + DEFAULT_PREALLOC_DYNAMIC_TRAP_CAPACITY + DEFAULT_PREALLOC_TRIGGER_CAPACITY + DEFAULT_PREALLOC_PICKABLE_CAPACITY;

const int JOIN_INDEX_NOT_INITIALIZED = 0;
const int JOIN_INDEX_ARR_IDX_NOT_INITIALIZED = JOIN_INDEX_NOT_INITIALIZED - 1;

const int TERMINATING_RENDER_FRAME_ID = (-1026);
const int TERMINATING_INPUT_FRAME_ID = (-1027);
const int TERMINATING_TRAP_ID = 0;
const int TERMINATING_TRIGGER_ID = 0;
const int TERMINATING_PICKABLE_LOCAL_ID = 0;
const int TERMINATING_PLAYER_ID = 0;
const int TERMINATING_BULLET_LOCAL_ID = 0;
const int TERMINATING_BULLET_TEAM_ID = 0; // Default for proto int32 to save space
const int DOWNSYNC_MSG_ACT_BATTLE_START = 0;

const uint32_t TERMINATING_BUFF_SPECIES_ID = 0; // Default for proto int32 to save space in "CharacterDownsync.killedToDropBuffSpeciesId"
const uint32_t TERMINATING_DEBUFF_SPECIES_ID = 0;
const uint32_t TERMINATING_CONSUMABLE_SPECIES_ID = 0; // Default for proto int32 to save space in "CharacterDownsync.killedToDropConsumableSpeciesId"

#endif
