// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: serializable_data.proto

#include "serializable_data.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_serializable_5fdata_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_BuffConfig_serializable_5fdata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_serializable_5fdata_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Buff_serializable_5fdata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_serializable_5fdata_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_BulletConfig_CancelTransitEntry_DoNotUse_serializable_5fdata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_serializable_5fdata_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_BulletImmuneRecord_serializable_5fdata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_serializable_5fdata_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Bullet_serializable_5fdata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_serializable_5fdata_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CharacterConfig_LoopingChStatesEntry_DoNotUse_serializable_5fdata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_serializable_5fdata_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CharacterSpawnerConfig_serializable_5fdata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_serializable_5fdata_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Debuff_serializable_5fdata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_serializable_5fdata_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_InputFrameDownsync_serializable_5fdata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_serializable_5fdata_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_InputFrameUpsync_serializable_5fdata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_serializable_5fdata_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_InventorySlot_serializable_5fdata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_serializable_5fdata_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_PatrolCue_serializable_5fdata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_serializable_5fdata_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_PeerUdpAddr_serializable_5fdata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_serializable_5fdata_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_PickableConfigFromTiled_serializable_5fdata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_serializable_5fdata_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_PickableSpawnerConfig_serializable_5fdata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_serializable_5fdata_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_PlayerChUnlockProgress_RemainingDependenciesEntry_DoNotUse_serializable_5fdata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_serializable_5fdata_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_PlayerChUnlockProgress_RemovedDependenciesEntry_DoNotUse_serializable_5fdata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_serializable_5fdata_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_PlayerLevelProgress_RemainingDependenciesEntry_DoNotUse_serializable_5fdata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_serializable_5fdata_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_PlayerLevelProgress_RemovedDependenciesEntry_DoNotUse_serializable_5fdata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_serializable_5fdata_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_PlayerRegionProgress_RemainingDependenciesEntry_DoNotUse_serializable_5fdata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_serializable_5fdata_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_PlayerRegionProgress_RemovedDependenciesEntry_DoNotUse_serializable_5fdata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_serializable_5fdata_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_SerializableConvexPolygon_serializable_5fdata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_serializable_5fdata_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_SerializedTriggerEditorIdToLocalId_DictEntry_DoNotUse_serializable_5fdata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_serializable_5fdata_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_SteamAuthenticateUserTicketPayloadParams_serializable_5fdata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_serializable_5fdata_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_StoryPointDialogLine_serializable_5fdata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_serializable_5fdata_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_TrapConfigFromTiled_serializable_5fdata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_serializable_5fdata_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_TriggerColliderAttr_serializable_5fdata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_serializable_5fdata_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_TriggerConfigFromTiled_BossSpeciesSetEntry_DoNotUse_serializable_5fdata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_serializable_5fdata_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Trigger_serializable_5fdata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_serializable_5fdata_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_BattleColliderInfo_serializable_5fdata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_serializable_5fdata_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Inventory_serializable_5fdata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_serializable_5fdata_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_LevelStory_PointsEntry_DoNotUse_serializable_5fdata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_serializable_5fdata_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Pickable_serializable_5fdata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_serializable_5fdata_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_PlayerOnlineArenaProgress_ChUnlockProgressDictEntry_DoNotUse_serializable_5fdata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_serializable_5fdata_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_PlayerStoryProgress_ChUnlockProgressDictEntry_DoNotUse_serializable_5fdata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_serializable_5fdata_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_PlayerStoryProgress_LevelProgressDictEntry_DoNotUse_serializable_5fdata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_serializable_5fdata_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_PlayerStoryProgress_RegionProgressDictEntry_DoNotUse_serializable_5fdata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_serializable_5fdata_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_SerializedTrapLocalIdToColliderAttrs_DictEntry_DoNotUse_serializable_5fdata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_serializable_5fdata_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_SerializedTrapLocalIdToColliderAttrs_serializable_5fdata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_serializable_5fdata_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_SerializedTriggerEditorIdToLocalId_Dict2Entry_DoNotUse_serializable_5fdata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_serializable_5fdata_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_SteamAuthenticateUserTicketPayloadResp_serializable_5fdata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_serializable_5fdata_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_StoryPointStep_serializable_5fdata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_serializable_5fdata_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_StoryPoint_serializable_5fdata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_serializable_5fdata_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_TrapColliderAttrArray_serializable_5fdata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_serializable_5fdata_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_TrapColliderAttr_serializable_5fdata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_serializable_5fdata_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Trap_serializable_5fdata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_serializable_5fdata_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_BulletConfig_serializable_5fdata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_serializable_5fdata_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_PlayerChUnlockProgress_serializable_5fdata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_serializable_5fdata_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_PlayerLevelProgress_serializable_5fdata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_serializable_5fdata_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_PlayerRegionProgress_serializable_5fdata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_serializable_5fdata_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_SerializedCompletelyStaticPatrolCueCollider_serializable_5fdata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_serializable_5fdata_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_SerializedCompletelyStaticTrapCollider_serializable_5fdata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_serializable_5fdata_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_SerializedCompletelyStaticTriggerCollider_serializable_5fdata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_serializable_5fdata_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_SerializedTriggerEditorIdToLocalId_serializable_5fdata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_serializable_5fdata_2eproto ::google::protobuf::internal::SCCInfo<3> scc_info_TriggerConfigFromTiled_serializable_5fdata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_serializable_5fdata_2eproto ::google::protobuf::internal::SCCInfo<4> scc_info_CharacterDownsync_serializable_5fdata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_serializable_5fdata_2eproto ::google::protobuf::internal::SCCInfo<5> scc_info_RenderFrame_serializable_5fdata_2eproto;
namespace shared {
class AuthTokenUnderlyingDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AuthTokenUnderlying> _instance;
} _AuthTokenUnderlying_default_instance_;
class AuthResultDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AuthResult> _instance;
} _AuthResult_default_instance_;
class SteamAuthenticateUserTicketPayloadParamsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SteamAuthenticateUserTicketPayloadParams> _instance;
} _SteamAuthenticateUserTicketPayloadParams_default_instance_;
class SteamAuthenticateUserTicketPayloadRespDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SteamAuthenticateUserTicketPayloadResp> _instance;
} _SteamAuthenticateUserTicketPayloadResp_default_instance_;
class SteamAuthenticateUserTicketResultDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SteamAuthenticateUserTicketResult> _instance;
} _SteamAuthenticateUserTicketResult_default_instance_;
class BattleInvitationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<BattleInvitation> _instance;
} _BattleInvitation_default_instance_;
class CharacterConfig_LoopingChStatesEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CharacterConfig_LoopingChStatesEntry_DoNotUse> _instance;
} _CharacterConfig_LoopingChStatesEntry_DoNotUse_default_instance_;
class CharacterConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CharacterConfig> _instance;
} _CharacterConfig_default_instance_;
class CharacterDownsyncDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CharacterDownsync> _instance;
} _CharacterDownsync_default_instance_;
class InputFrameDecodedDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<InputFrameDecoded> _instance;
} _InputFrameDecoded_default_instance_;
class InputFrameUpsyncDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<InputFrameUpsync> _instance;
} _InputFrameUpsync_default_instance_;
class InputFrameDownsyncDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<InputFrameDownsync> _instance;
} _InputFrameDownsync_default_instance_;
class WsReqDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<WsReq> _instance;
} _WsReq_default_instance_;
class InputBufferSnapshotDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<InputBufferSnapshot> _instance;
} _InputBufferSnapshot_default_instance_;
class PatrolCueDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PatrolCue> _instance;
} _PatrolCue_default_instance_;
class VfxConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<VfxConfig> _instance;
} _VfxConfig_default_instance_;
class BulletConfig_CancelTransitEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<BulletConfig_CancelTransitEntry_DoNotUse> _instance;
} _BulletConfig_CancelTransitEntry_DoNotUse_default_instance_;
class BulletConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<BulletConfig> _instance;
} _BulletConfig_default_instance_;
class BulletDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Bullet> _instance;
} _Bullet_default_instance_;
class TrapConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TrapConfig> _instance;
} _TrapConfig_default_instance_;
class TrapConfigFromTiledDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TrapConfigFromTiled> _instance;
} _TrapConfigFromTiled_default_instance_;
class TrapColliderAttrDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TrapColliderAttr> _instance;
} _TrapColliderAttr_default_instance_;
class TrapDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Trap> _instance;
} _Trap_default_instance_;
class TriggerConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TriggerConfig> _instance;
} _TriggerConfig_default_instance_;
class PeerUdpAddrDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PeerUdpAddr> _instance;
} _PeerUdpAddr_default_instance_;
class BattleColliderInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<BattleColliderInfo> _instance;
} _BattleColliderInfo_default_instance_;
class RenderFrameDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RenderFrame> _instance;
} _RenderFrame_default_instance_;
class WsRespDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<WsResp> _instance;
} _WsResp_default_instance_;
class SkillDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Skill> _instance;
} _Skill_default_instance_;
class FrameLogDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FrameLog> _instance;
} _FrameLog_default_instance_;
class BattleResultDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<BattleResult> _instance;
} _BattleResult_default_instance_;
class DebuffConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DebuffConfig> _instance;
} _DebuffConfig_default_instance_;
class BuffConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<BuffConfig> _instance;
} _BuffConfig_default_instance_;
class BuffDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Buff> _instance;
} _Buff_default_instance_;
class DebuffDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Debuff> _instance;
} _Debuff_default_instance_;
class BulletImmuneRecordDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<BulletImmuneRecord> _instance;
} _BulletImmuneRecord_default_instance_;
class ConsumableConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ConsumableConfig> _instance;
} _ConsumableConfig_default_instance_;
class PickableSkillConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PickableSkillConfig> _instance;
} _PickableSkillConfig_default_instance_;
class InventorySlotDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<InventorySlot> _instance;
} _InventorySlot_default_instance_;
class InventoryDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Inventory> _instance;
} _Inventory_default_instance_;
class BattleEquipmentDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<BattleEquipment> _instance;
} _BattleEquipment_default_instance_;
class PlayerSettingsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PlayerSettings> _instance;
} _PlayerSettings_default_instance_;
class PlayerRegionProgress_RemainingDependenciesEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PlayerRegionProgress_RemainingDependenciesEntry_DoNotUse> _instance;
} _PlayerRegionProgress_RemainingDependenciesEntry_DoNotUse_default_instance_;
class PlayerRegionProgress_RemovedDependenciesEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PlayerRegionProgress_RemovedDependenciesEntry_DoNotUse> _instance;
} _PlayerRegionProgress_RemovedDependenciesEntry_DoNotUse_default_instance_;
class PlayerRegionProgressDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PlayerRegionProgress> _instance;
} _PlayerRegionProgress_default_instance_;
class PlayerLevelProgress_RemainingDependenciesEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PlayerLevelProgress_RemainingDependenciesEntry_DoNotUse> _instance;
} _PlayerLevelProgress_RemainingDependenciesEntry_DoNotUse_default_instance_;
class PlayerLevelProgress_RemovedDependenciesEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PlayerLevelProgress_RemovedDependenciesEntry_DoNotUse> _instance;
} _PlayerLevelProgress_RemovedDependenciesEntry_DoNotUse_default_instance_;
class PlayerLevelProgressDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PlayerLevelProgress> _instance;
} _PlayerLevelProgress_default_instance_;
class PlayerChUnlockProgress_RemainingDependenciesEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PlayerChUnlockProgress_RemainingDependenciesEntry_DoNotUse> _instance;
} _PlayerChUnlockProgress_RemainingDependenciesEntry_DoNotUse_default_instance_;
class PlayerChUnlockProgress_RemovedDependenciesEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PlayerChUnlockProgress_RemovedDependenciesEntry_DoNotUse> _instance;
} _PlayerChUnlockProgress_RemovedDependenciesEntry_DoNotUse_default_instance_;
class PlayerChUnlockProgressDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PlayerChUnlockProgress> _instance;
} _PlayerChUnlockProgress_default_instance_;
class PlayerStoryProgress_RegionProgressDictEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PlayerStoryProgress_RegionProgressDictEntry_DoNotUse> _instance;
} _PlayerStoryProgress_RegionProgressDictEntry_DoNotUse_default_instance_;
class PlayerStoryProgress_LevelProgressDictEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PlayerStoryProgress_LevelProgressDictEntry_DoNotUse> _instance;
} _PlayerStoryProgress_LevelProgressDictEntry_DoNotUse_default_instance_;
class PlayerStoryProgress_ChUnlockProgressDictEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PlayerStoryProgress_ChUnlockProgressDictEntry_DoNotUse> _instance;
} _PlayerStoryProgress_ChUnlockProgressDictEntry_DoNotUse_default_instance_;
class PlayerStoryProgressDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PlayerStoryProgress> _instance;
} _PlayerStoryProgress_default_instance_;
class PlayerOnlineArenaProgress_ChUnlockProgressDictEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PlayerOnlineArenaProgress_ChUnlockProgressDictEntry_DoNotUse> _instance;
} _PlayerOnlineArenaProgress_ChUnlockProgressDictEntry_DoNotUse_default_instance_;
class PlayerOnlineArenaProgressDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PlayerOnlineArenaProgress> _instance;
} _PlayerOnlineArenaProgress_default_instance_;
class StoryPointDialogLineDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<StoryPointDialogLine> _instance;
} _StoryPointDialogLine_default_instance_;
class StoryPointStepDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<StoryPointStep> _instance;
} _StoryPointStep_default_instance_;
class StoryPointDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<StoryPoint> _instance;
} _StoryPoint_default_instance_;
class LevelStory_PointsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LevelStory_PointsEntry_DoNotUse> _instance;
} _LevelStory_PointsEntry_DoNotUse_default_instance_;
class LevelStoryDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LevelStory> _instance;
} _LevelStory_default_instance_;
class SerializableConvexPolygonDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SerializableConvexPolygon> _instance;
} _SerializableConvexPolygon_default_instance_;
class SerializedCompletelyStaticPatrolCueColliderDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SerializedCompletelyStaticPatrolCueCollider> _instance;
} _SerializedCompletelyStaticPatrolCueCollider_default_instance_;
class SerializedCompletelyStaticTrapColliderDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SerializedCompletelyStaticTrapCollider> _instance;
} _SerializedCompletelyStaticTrapCollider_default_instance_;
class SerializedCompletelyStaticTriggerColliderDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SerializedCompletelyStaticTriggerCollider> _instance;
} _SerializedCompletelyStaticTriggerCollider_default_instance_;
class TrapColliderAttrArrayDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TrapColliderAttrArray> _instance;
} _TrapColliderAttrArray_default_instance_;
class SerializedTrapLocalIdToColliderAttrs_DictEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SerializedTrapLocalIdToColliderAttrs_DictEntry_DoNotUse> _instance;
} _SerializedTrapLocalIdToColliderAttrs_DictEntry_DoNotUse_default_instance_;
class SerializedTrapLocalIdToColliderAttrsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SerializedTrapLocalIdToColliderAttrs> _instance;
} _SerializedTrapLocalIdToColliderAttrs_default_instance_;
class SerializedTriggerEditorIdToLocalId_DictEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SerializedTriggerEditorIdToLocalId_DictEntry_DoNotUse> _instance;
} _SerializedTriggerEditorIdToLocalId_DictEntry_DoNotUse_default_instance_;
class SerializedTriggerEditorIdToLocalId_Dict2Entry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SerializedTriggerEditorIdToLocalId_Dict2Entry_DoNotUse> _instance;
} _SerializedTriggerEditorIdToLocalId_Dict2Entry_DoNotUse_default_instance_;
class SerializedTriggerEditorIdToLocalIdDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SerializedTriggerEditorIdToLocalId> _instance;
} _SerializedTriggerEditorIdToLocalId_default_instance_;
class PickableConfigFromTiledDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PickableConfigFromTiled> _instance;
} _PickableConfigFromTiled_default_instance_;
class PickableDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Pickable> _instance;
} _Pickable_default_instance_;
class InjectedCmdConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<InjectedCmdConfig> _instance;
} _InjectedCmdConfig_default_instance_;
class CharacterSpawnerConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CharacterSpawnerConfig> _instance;
} _CharacterSpawnerConfig_default_instance_;
class PickableSpawnerConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PickableSpawnerConfig> _instance;
} _PickableSpawnerConfig_default_instance_;
class TriggerColliderAttrDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TriggerColliderAttr> _instance;
} _TriggerColliderAttr_default_instance_;
class TriggerConfigFromTiled_BossSpeciesSetEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TriggerConfigFromTiled_BossSpeciesSetEntry_DoNotUse> _instance;
} _TriggerConfigFromTiled_BossSpeciesSetEntry_DoNotUse_default_instance_;
class TriggerConfigFromTiledDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TriggerConfigFromTiled> _instance;
} _TriggerConfigFromTiled_default_instance_;
class TriggerDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Trigger> _instance;
} _Trigger_default_instance_;
class PlayerMetaInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PlayerMetaInfo> _instance;
} _PlayerMetaInfo_default_instance_;
class RpcEndpointHolderDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RpcEndpointHolder> _instance;
} _RpcEndpointHolder_default_instance_;
}  // namespace shared
static void InitDefaultsAuthTokenUnderlying_serializable_5fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::shared::_AuthTokenUnderlying_default_instance_;
    new (ptr) ::shared::AuthTokenUnderlying();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::shared::AuthTokenUnderlying::InitAsDefaultInstance();
}

JOLTC_EXPORT ::google::protobuf::internal::SCCInfo<0> scc_info_AuthTokenUnderlying_serializable_5fdata_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsAuthTokenUnderlying_serializable_5fdata_2eproto}, {}};

static void InitDefaultsAuthResult_serializable_5fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::shared::_AuthResult_default_instance_;
    new (ptr) ::shared::AuthResult();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::shared::AuthResult::InitAsDefaultInstance();
}

JOLTC_EXPORT ::google::protobuf::internal::SCCInfo<0> scc_info_AuthResult_serializable_5fdata_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsAuthResult_serializable_5fdata_2eproto}, {}};

static void InitDefaultsSteamAuthenticateUserTicketPayloadParams_serializable_5fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::shared::_SteamAuthenticateUserTicketPayloadParams_default_instance_;
    new (ptr) ::shared::SteamAuthenticateUserTicketPayloadParams();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::shared::SteamAuthenticateUserTicketPayloadParams::InitAsDefaultInstance();
}

JOLTC_EXPORT ::google::protobuf::internal::SCCInfo<0> scc_info_SteamAuthenticateUserTicketPayloadParams_serializable_5fdata_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSteamAuthenticateUserTicketPayloadParams_serializable_5fdata_2eproto}, {}};

static void InitDefaultsSteamAuthenticateUserTicketPayloadResp_serializable_5fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::shared::_SteamAuthenticateUserTicketPayloadResp_default_instance_;
    new (ptr) ::shared::SteamAuthenticateUserTicketPayloadResp();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::shared::SteamAuthenticateUserTicketPayloadResp::InitAsDefaultInstance();
}

JOLTC_EXPORT ::google::protobuf::internal::SCCInfo<1> scc_info_SteamAuthenticateUserTicketPayloadResp_serializable_5fdata_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsSteamAuthenticateUserTicketPayloadResp_serializable_5fdata_2eproto}, {
      &scc_info_SteamAuthenticateUserTicketPayloadParams_serializable_5fdata_2eproto.base,}};

static void InitDefaultsSteamAuthenticateUserTicketResult_serializable_5fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::shared::_SteamAuthenticateUserTicketResult_default_instance_;
    new (ptr) ::shared::SteamAuthenticateUserTicketResult();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::shared::SteamAuthenticateUserTicketResult::InitAsDefaultInstance();
}

JOLTC_EXPORT ::google::protobuf::internal::SCCInfo<1> scc_info_SteamAuthenticateUserTicketResult_serializable_5fdata_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsSteamAuthenticateUserTicketResult_serializable_5fdata_2eproto}, {
      &scc_info_SteamAuthenticateUserTicketPayloadResp_serializable_5fdata_2eproto.base,}};

static void InitDefaultsBattleInvitation_serializable_5fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::shared::_BattleInvitation_default_instance_;
    new (ptr) ::shared::BattleInvitation();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::shared::BattleInvitation::InitAsDefaultInstance();
}

JOLTC_EXPORT ::google::protobuf::internal::SCCInfo<0> scc_info_BattleInvitation_serializable_5fdata_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsBattleInvitation_serializable_5fdata_2eproto}, {}};

static void InitDefaultsCharacterConfig_LoopingChStatesEntry_DoNotUse_serializable_5fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::shared::_CharacterConfig_LoopingChStatesEntry_DoNotUse_default_instance_;
    new (ptr) ::shared::CharacterConfig_LoopingChStatesEntry_DoNotUse();
  }
  ::shared::CharacterConfig_LoopingChStatesEntry_DoNotUse::InitAsDefaultInstance();
}

JOLTC_EXPORT ::google::protobuf::internal::SCCInfo<0> scc_info_CharacterConfig_LoopingChStatesEntry_DoNotUse_serializable_5fdata_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCharacterConfig_LoopingChStatesEntry_DoNotUse_serializable_5fdata_2eproto}, {}};

static void InitDefaultsCharacterConfig_serializable_5fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::shared::_CharacterConfig_default_instance_;
    new (ptr) ::shared::CharacterConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::shared::CharacterConfig::InitAsDefaultInstance();
}

JOLTC_EXPORT ::google::protobuf::internal::SCCInfo<2> scc_info_CharacterConfig_serializable_5fdata_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsCharacterConfig_serializable_5fdata_2eproto}, {
      &scc_info_InventorySlot_serializable_5fdata_2eproto.base,
      &scc_info_CharacterConfig_LoopingChStatesEntry_DoNotUse_serializable_5fdata_2eproto.base,}};

static void InitDefaultsCharacterDownsync_serializable_5fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::shared::_CharacterDownsync_default_instance_;
    new (ptr) ::shared::CharacterDownsync();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::shared::CharacterDownsync::InitAsDefaultInstance();
}

JOLTC_EXPORT ::google::protobuf::internal::SCCInfo<4> scc_info_CharacterDownsync_serializable_5fdata_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 4, InitDefaultsCharacterDownsync_serializable_5fdata_2eproto}, {
      &scc_info_Buff_serializable_5fdata_2eproto.base,
      &scc_info_Debuff_serializable_5fdata_2eproto.base,
      &scc_info_Inventory_serializable_5fdata_2eproto.base,
      &scc_info_BulletImmuneRecord_serializable_5fdata_2eproto.base,}};

static void InitDefaultsInputFrameDecoded_serializable_5fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::shared::_InputFrameDecoded_default_instance_;
    new (ptr) ::shared::InputFrameDecoded();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::shared::InputFrameDecoded::InitAsDefaultInstance();
}

JOLTC_EXPORT ::google::protobuf::internal::SCCInfo<0> scc_info_InputFrameDecoded_serializable_5fdata_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsInputFrameDecoded_serializable_5fdata_2eproto}, {}};

static void InitDefaultsInputFrameUpsync_serializable_5fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::shared::_InputFrameUpsync_default_instance_;
    new (ptr) ::shared::InputFrameUpsync();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::shared::InputFrameUpsync::InitAsDefaultInstance();
}

JOLTC_EXPORT ::google::protobuf::internal::SCCInfo<0> scc_info_InputFrameUpsync_serializable_5fdata_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsInputFrameUpsync_serializable_5fdata_2eproto}, {}};

static void InitDefaultsInputFrameDownsync_serializable_5fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::shared::_InputFrameDownsync_default_instance_;
    new (ptr) ::shared::InputFrameDownsync();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::shared::InputFrameDownsync::InitAsDefaultInstance();
}

JOLTC_EXPORT ::google::protobuf::internal::SCCInfo<0> scc_info_InputFrameDownsync_serializable_5fdata_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsInputFrameDownsync_serializable_5fdata_2eproto}, {}};

static void InitDefaultsWsReq_serializable_5fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::shared::_WsReq_default_instance_;
    new (ptr) ::shared::WsReq();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::shared::WsReq::InitAsDefaultInstance();
}

JOLTC_EXPORT ::google::protobuf::internal::SCCInfo<8> scc_info_WsReq_serializable_5fdata_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 8, InitDefaultsWsReq_serializable_5fdata_2eproto}, {
      &scc_info_InputFrameUpsync_serializable_5fdata_2eproto.base,
      &scc_info_RenderFrame_serializable_5fdata_2eproto.base,
      &scc_info_SerializableConvexPolygon_serializable_5fdata_2eproto.base,
      &scc_info_SerializedCompletelyStaticPatrolCueCollider_serializable_5fdata_2eproto.base,
      &scc_info_SerializedCompletelyStaticTrapCollider_serializable_5fdata_2eproto.base,
      &scc_info_SerializedCompletelyStaticTriggerCollider_serializable_5fdata_2eproto.base,
      &scc_info_SerializedTrapLocalIdToColliderAttrs_serializable_5fdata_2eproto.base,
      &scc_info_SerializedTriggerEditorIdToLocalId_serializable_5fdata_2eproto.base,}};

static void InitDefaultsInputBufferSnapshot_serializable_5fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::shared::_InputBufferSnapshot_default_instance_;
    new (ptr) ::shared::InputBufferSnapshot();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::shared::InputBufferSnapshot::InitAsDefaultInstance();
}

JOLTC_EXPORT ::google::protobuf::internal::SCCInfo<1> scc_info_InputBufferSnapshot_serializable_5fdata_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsInputBufferSnapshot_serializable_5fdata_2eproto}, {
      &scc_info_InputFrameDownsync_serializable_5fdata_2eproto.base,}};

static void InitDefaultsPatrolCue_serializable_5fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::shared::_PatrolCue_default_instance_;
    new (ptr) ::shared::PatrolCue();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::shared::PatrolCue::InitAsDefaultInstance();
}

JOLTC_EXPORT ::google::protobuf::internal::SCCInfo<0> scc_info_PatrolCue_serializable_5fdata_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPatrolCue_serializable_5fdata_2eproto}, {}};

static void InitDefaultsVfxConfig_serializable_5fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::shared::_VfxConfig_default_instance_;
    new (ptr) ::shared::VfxConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::shared::VfxConfig::InitAsDefaultInstance();
}

JOLTC_EXPORT ::google::protobuf::internal::SCCInfo<0> scc_info_VfxConfig_serializable_5fdata_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsVfxConfig_serializable_5fdata_2eproto}, {}};

static void InitDefaultsBulletConfig_CancelTransitEntry_DoNotUse_serializable_5fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::shared::_BulletConfig_CancelTransitEntry_DoNotUse_default_instance_;
    new (ptr) ::shared::BulletConfig_CancelTransitEntry_DoNotUse();
  }
  ::shared::BulletConfig_CancelTransitEntry_DoNotUse::InitAsDefaultInstance();
}

JOLTC_EXPORT ::google::protobuf::internal::SCCInfo<0> scc_info_BulletConfig_CancelTransitEntry_DoNotUse_serializable_5fdata_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsBulletConfig_CancelTransitEntry_DoNotUse_serializable_5fdata_2eproto}, {}};

static void InitDefaultsBulletConfig_serializable_5fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::shared::_BulletConfig_default_instance_;
    new (ptr) ::shared::BulletConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::shared::BulletConfig::InitAsDefaultInstance();
}

JOLTC_EXPORT ::google::protobuf::internal::SCCInfo<2> scc_info_BulletConfig_serializable_5fdata_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsBulletConfig_serializable_5fdata_2eproto}, {
      &scc_info_BulletConfig_CancelTransitEntry_DoNotUse_serializable_5fdata_2eproto.base,
      &scc_info_BuffConfig_serializable_5fdata_2eproto.base,}};

static void InitDefaultsBullet_serializable_5fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::shared::_Bullet_default_instance_;
    new (ptr) ::shared::Bullet();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::shared::Bullet::InitAsDefaultInstance();
}

JOLTC_EXPORT ::google::protobuf::internal::SCCInfo<0> scc_info_Bullet_serializable_5fdata_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsBullet_serializable_5fdata_2eproto}, {}};

static void InitDefaultsTrapConfig_serializable_5fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::shared::_TrapConfig_default_instance_;
    new (ptr) ::shared::TrapConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::shared::TrapConfig::InitAsDefaultInstance();
}

JOLTC_EXPORT ::google::protobuf::internal::SCCInfo<0> scc_info_TrapConfig_serializable_5fdata_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsTrapConfig_serializable_5fdata_2eproto}, {}};

static void InitDefaultsTrapConfigFromTiled_serializable_5fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::shared::_TrapConfigFromTiled_default_instance_;
    new (ptr) ::shared::TrapConfigFromTiled();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::shared::TrapConfigFromTiled::InitAsDefaultInstance();
}

JOLTC_EXPORT ::google::protobuf::internal::SCCInfo<0> scc_info_TrapConfigFromTiled_serializable_5fdata_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsTrapConfigFromTiled_serializable_5fdata_2eproto}, {}};

static void InitDefaultsTrapColliderAttr_serializable_5fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::shared::_TrapColliderAttr_default_instance_;
    new (ptr) ::shared::TrapColliderAttr();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::shared::TrapColliderAttr::InitAsDefaultInstance();
}

JOLTC_EXPORT ::google::protobuf::internal::SCCInfo<1> scc_info_TrapColliderAttr_serializable_5fdata_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsTrapColliderAttr_serializable_5fdata_2eproto}, {
      &scc_info_PatrolCue_serializable_5fdata_2eproto.base,}};

static void InitDefaultsTrap_serializable_5fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::shared::_Trap_default_instance_;
    new (ptr) ::shared::Trap();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::shared::Trap::InitAsDefaultInstance();
}

JOLTC_EXPORT ::google::protobuf::internal::SCCInfo<1> scc_info_Trap_serializable_5fdata_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsTrap_serializable_5fdata_2eproto}, {
      &scc_info_TrapConfigFromTiled_serializable_5fdata_2eproto.base,}};

static void InitDefaultsTriggerConfig_serializable_5fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::shared::_TriggerConfig_default_instance_;
    new (ptr) ::shared::TriggerConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::shared::TriggerConfig::InitAsDefaultInstance();
}

JOLTC_EXPORT ::google::protobuf::internal::SCCInfo<0> scc_info_TriggerConfig_serializable_5fdata_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsTriggerConfig_serializable_5fdata_2eproto}, {}};

static void InitDefaultsPeerUdpAddr_serializable_5fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::shared::_PeerUdpAddr_default_instance_;
    new (ptr) ::shared::PeerUdpAddr();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::shared::PeerUdpAddr::InitAsDefaultInstance();
}

JOLTC_EXPORT ::google::protobuf::internal::SCCInfo<0> scc_info_PeerUdpAddr_serializable_5fdata_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPeerUdpAddr_serializable_5fdata_2eproto}, {}};

static void InitDefaultsBattleColliderInfo_serializable_5fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::shared::_BattleColliderInfo_default_instance_;
    new (ptr) ::shared::BattleColliderInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::shared::BattleColliderInfo::InitAsDefaultInstance();
}

JOLTC_EXPORT ::google::protobuf::internal::SCCInfo<1> scc_info_BattleColliderInfo_serializable_5fdata_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsBattleColliderInfo_serializable_5fdata_2eproto}, {
      &scc_info_PeerUdpAddr_serializable_5fdata_2eproto.base,}};

static void InitDefaultsRenderFrame_serializable_5fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::shared::_RenderFrame_default_instance_;
    new (ptr) ::shared::RenderFrame();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::shared::RenderFrame::InitAsDefaultInstance();
}

JOLTC_EXPORT ::google::protobuf::internal::SCCInfo<5> scc_info_RenderFrame_serializable_5fdata_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 5, InitDefaultsRenderFrame_serializable_5fdata_2eproto}, {
      &scc_info_CharacterDownsync_serializable_5fdata_2eproto.base,
      &scc_info_Bullet_serializable_5fdata_2eproto.base,
      &scc_info_Trap_serializable_5fdata_2eproto.base,
      &scc_info_Trigger_serializable_5fdata_2eproto.base,
      &scc_info_Pickable_serializable_5fdata_2eproto.base,}};

static void InitDefaultsWsResp_serializable_5fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::shared::_WsResp_default_instance_;
    new (ptr) ::shared::WsResp();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::shared::WsResp::InitAsDefaultInstance();
}

JOLTC_EXPORT ::google::protobuf::internal::SCCInfo<4> scc_info_WsResp_serializable_5fdata_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 4, InitDefaultsWsResp_serializable_5fdata_2eproto}, {
      &scc_info_RenderFrame_serializable_5fdata_2eproto.base,
      &scc_info_InputFrameDownsync_serializable_5fdata_2eproto.base,
      &scc_info_BattleColliderInfo_serializable_5fdata_2eproto.base,
      &scc_info_PeerUdpAddr_serializable_5fdata_2eproto.base,}};

static void InitDefaultsSkill_serializable_5fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::shared::_Skill_default_instance_;
    new (ptr) ::shared::Skill();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::shared::Skill::InitAsDefaultInstance();
}

JOLTC_EXPORT ::google::protobuf::internal::SCCInfo<2> scc_info_Skill_serializable_5fdata_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsSkill_serializable_5fdata_2eproto}, {
      &scc_info_BulletConfig_serializable_5fdata_2eproto.base,
      &scc_info_BuffConfig_serializable_5fdata_2eproto.base,}};

static void InitDefaultsFrameLog_serializable_5fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::shared::_FrameLog_default_instance_;
    new (ptr) ::shared::FrameLog();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::shared::FrameLog::InitAsDefaultInstance();
}

JOLTC_EXPORT ::google::protobuf::internal::SCCInfo<2> scc_info_FrameLog_serializable_5fdata_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsFrameLog_serializable_5fdata_2eproto}, {
      &scc_info_RenderFrame_serializable_5fdata_2eproto.base,
      &scc_info_InputFrameDownsync_serializable_5fdata_2eproto.base,}};

static void InitDefaultsBattleResult_serializable_5fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::shared::_BattleResult_default_instance_;
    new (ptr) ::shared::BattleResult();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::shared::BattleResult::InitAsDefaultInstance();
}

JOLTC_EXPORT ::google::protobuf::internal::SCCInfo<0> scc_info_BattleResult_serializable_5fdata_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsBattleResult_serializable_5fdata_2eproto}, {}};

static void InitDefaultsDebuffConfig_serializable_5fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::shared::_DebuffConfig_default_instance_;
    new (ptr) ::shared::DebuffConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::shared::DebuffConfig::InitAsDefaultInstance();
}

JOLTC_EXPORT ::google::protobuf::internal::SCCInfo<0> scc_info_DebuffConfig_serializable_5fdata_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsDebuffConfig_serializable_5fdata_2eproto}, {}};

static void InitDefaultsBuffConfig_serializable_5fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::shared::_BuffConfig_default_instance_;
    new (ptr) ::shared::BuffConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::shared::BuffConfig::InitAsDefaultInstance();
}

JOLTC_EXPORT ::google::protobuf::internal::SCCInfo<0> scc_info_BuffConfig_serializable_5fdata_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsBuffConfig_serializable_5fdata_2eproto}, {}};

static void InitDefaultsBuff_serializable_5fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::shared::_Buff_default_instance_;
    new (ptr) ::shared::Buff();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::shared::Buff::InitAsDefaultInstance();
}

JOLTC_EXPORT ::google::protobuf::internal::SCCInfo<0> scc_info_Buff_serializable_5fdata_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsBuff_serializable_5fdata_2eproto}, {}};

static void InitDefaultsDebuff_serializable_5fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::shared::_Debuff_default_instance_;
    new (ptr) ::shared::Debuff();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::shared::Debuff::InitAsDefaultInstance();
}

JOLTC_EXPORT ::google::protobuf::internal::SCCInfo<0> scc_info_Debuff_serializable_5fdata_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsDebuff_serializable_5fdata_2eproto}, {}};

static void InitDefaultsBulletImmuneRecord_serializable_5fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::shared::_BulletImmuneRecord_default_instance_;
    new (ptr) ::shared::BulletImmuneRecord();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::shared::BulletImmuneRecord::InitAsDefaultInstance();
}

JOLTC_EXPORT ::google::protobuf::internal::SCCInfo<0> scc_info_BulletImmuneRecord_serializable_5fdata_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsBulletImmuneRecord_serializable_5fdata_2eproto}, {}};

static void InitDefaultsConsumableConfig_serializable_5fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::shared::_ConsumableConfig_default_instance_;
    new (ptr) ::shared::ConsumableConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::shared::ConsumableConfig::InitAsDefaultInstance();
}

JOLTC_EXPORT ::google::protobuf::internal::SCCInfo<0> scc_info_ConsumableConfig_serializable_5fdata_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsConsumableConfig_serializable_5fdata_2eproto}, {}};

static void InitDefaultsPickableSkillConfig_serializable_5fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::shared::_PickableSkillConfig_default_instance_;
    new (ptr) ::shared::PickableSkillConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::shared::PickableSkillConfig::InitAsDefaultInstance();
}

JOLTC_EXPORT ::google::protobuf::internal::SCCInfo<0> scc_info_PickableSkillConfig_serializable_5fdata_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPickableSkillConfig_serializable_5fdata_2eproto}, {}};

static void InitDefaultsInventorySlot_serializable_5fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::shared::_InventorySlot_default_instance_;
    new (ptr) ::shared::InventorySlot();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::shared::InventorySlot::InitAsDefaultInstance();
}

JOLTC_EXPORT ::google::protobuf::internal::SCCInfo<0> scc_info_InventorySlot_serializable_5fdata_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsInventorySlot_serializable_5fdata_2eproto}, {}};

static void InitDefaultsInventory_serializable_5fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::shared::_Inventory_default_instance_;
    new (ptr) ::shared::Inventory();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::shared::Inventory::InitAsDefaultInstance();
}

JOLTC_EXPORT ::google::protobuf::internal::SCCInfo<1> scc_info_Inventory_serializable_5fdata_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsInventory_serializable_5fdata_2eproto}, {
      &scc_info_InventorySlot_serializable_5fdata_2eproto.base,}};

static void InitDefaultsBattleEquipment_serializable_5fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::shared::_BattleEquipment_default_instance_;
    new (ptr) ::shared::BattleEquipment();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::shared::BattleEquipment::InitAsDefaultInstance();
}

JOLTC_EXPORT ::google::protobuf::internal::SCCInfo<0> scc_info_BattleEquipment_serializable_5fdata_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsBattleEquipment_serializable_5fdata_2eproto}, {}};

static void InitDefaultsPlayerSettings_serializable_5fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::shared::_PlayerSettings_default_instance_;
    new (ptr) ::shared::PlayerSettings();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::shared::PlayerSettings::InitAsDefaultInstance();
}

JOLTC_EXPORT ::google::protobuf::internal::SCCInfo<0> scc_info_PlayerSettings_serializable_5fdata_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPlayerSettings_serializable_5fdata_2eproto}, {}};

static void InitDefaultsPlayerRegionProgress_RemainingDependenciesEntry_DoNotUse_serializable_5fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::shared::_PlayerRegionProgress_RemainingDependenciesEntry_DoNotUse_default_instance_;
    new (ptr) ::shared::PlayerRegionProgress_RemainingDependenciesEntry_DoNotUse();
  }
  ::shared::PlayerRegionProgress_RemainingDependenciesEntry_DoNotUse::InitAsDefaultInstance();
}

JOLTC_EXPORT ::google::protobuf::internal::SCCInfo<0> scc_info_PlayerRegionProgress_RemainingDependenciesEntry_DoNotUse_serializable_5fdata_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPlayerRegionProgress_RemainingDependenciesEntry_DoNotUse_serializable_5fdata_2eproto}, {}};

static void InitDefaultsPlayerRegionProgress_RemovedDependenciesEntry_DoNotUse_serializable_5fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::shared::_PlayerRegionProgress_RemovedDependenciesEntry_DoNotUse_default_instance_;
    new (ptr) ::shared::PlayerRegionProgress_RemovedDependenciesEntry_DoNotUse();
  }
  ::shared::PlayerRegionProgress_RemovedDependenciesEntry_DoNotUse::InitAsDefaultInstance();
}

JOLTC_EXPORT ::google::protobuf::internal::SCCInfo<0> scc_info_PlayerRegionProgress_RemovedDependenciesEntry_DoNotUse_serializable_5fdata_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPlayerRegionProgress_RemovedDependenciesEntry_DoNotUse_serializable_5fdata_2eproto}, {}};

static void InitDefaultsPlayerRegionProgress_serializable_5fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::shared::_PlayerRegionProgress_default_instance_;
    new (ptr) ::shared::PlayerRegionProgress();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::shared::PlayerRegionProgress::InitAsDefaultInstance();
}

JOLTC_EXPORT ::google::protobuf::internal::SCCInfo<2> scc_info_PlayerRegionProgress_serializable_5fdata_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsPlayerRegionProgress_serializable_5fdata_2eproto}, {
      &scc_info_PlayerRegionProgress_RemainingDependenciesEntry_DoNotUse_serializable_5fdata_2eproto.base,
      &scc_info_PlayerRegionProgress_RemovedDependenciesEntry_DoNotUse_serializable_5fdata_2eproto.base,}};

static void InitDefaultsPlayerLevelProgress_RemainingDependenciesEntry_DoNotUse_serializable_5fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::shared::_PlayerLevelProgress_RemainingDependenciesEntry_DoNotUse_default_instance_;
    new (ptr) ::shared::PlayerLevelProgress_RemainingDependenciesEntry_DoNotUse();
  }
  ::shared::PlayerLevelProgress_RemainingDependenciesEntry_DoNotUse::InitAsDefaultInstance();
}

JOLTC_EXPORT ::google::protobuf::internal::SCCInfo<0> scc_info_PlayerLevelProgress_RemainingDependenciesEntry_DoNotUse_serializable_5fdata_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPlayerLevelProgress_RemainingDependenciesEntry_DoNotUse_serializable_5fdata_2eproto}, {}};

static void InitDefaultsPlayerLevelProgress_RemovedDependenciesEntry_DoNotUse_serializable_5fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::shared::_PlayerLevelProgress_RemovedDependenciesEntry_DoNotUse_default_instance_;
    new (ptr) ::shared::PlayerLevelProgress_RemovedDependenciesEntry_DoNotUse();
  }
  ::shared::PlayerLevelProgress_RemovedDependenciesEntry_DoNotUse::InitAsDefaultInstance();
}

JOLTC_EXPORT ::google::protobuf::internal::SCCInfo<0> scc_info_PlayerLevelProgress_RemovedDependenciesEntry_DoNotUse_serializable_5fdata_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPlayerLevelProgress_RemovedDependenciesEntry_DoNotUse_serializable_5fdata_2eproto}, {}};

static void InitDefaultsPlayerLevelProgress_serializable_5fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::shared::_PlayerLevelProgress_default_instance_;
    new (ptr) ::shared::PlayerLevelProgress();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::shared::PlayerLevelProgress::InitAsDefaultInstance();
}

JOLTC_EXPORT ::google::protobuf::internal::SCCInfo<2> scc_info_PlayerLevelProgress_serializable_5fdata_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsPlayerLevelProgress_serializable_5fdata_2eproto}, {
      &scc_info_PlayerLevelProgress_RemainingDependenciesEntry_DoNotUse_serializable_5fdata_2eproto.base,
      &scc_info_PlayerLevelProgress_RemovedDependenciesEntry_DoNotUse_serializable_5fdata_2eproto.base,}};

static void InitDefaultsPlayerChUnlockProgress_RemainingDependenciesEntry_DoNotUse_serializable_5fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::shared::_PlayerChUnlockProgress_RemainingDependenciesEntry_DoNotUse_default_instance_;
    new (ptr) ::shared::PlayerChUnlockProgress_RemainingDependenciesEntry_DoNotUse();
  }
  ::shared::PlayerChUnlockProgress_RemainingDependenciesEntry_DoNotUse::InitAsDefaultInstance();
}

JOLTC_EXPORT ::google::protobuf::internal::SCCInfo<0> scc_info_PlayerChUnlockProgress_RemainingDependenciesEntry_DoNotUse_serializable_5fdata_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPlayerChUnlockProgress_RemainingDependenciesEntry_DoNotUse_serializable_5fdata_2eproto}, {}};

static void InitDefaultsPlayerChUnlockProgress_RemovedDependenciesEntry_DoNotUse_serializable_5fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::shared::_PlayerChUnlockProgress_RemovedDependenciesEntry_DoNotUse_default_instance_;
    new (ptr) ::shared::PlayerChUnlockProgress_RemovedDependenciesEntry_DoNotUse();
  }
  ::shared::PlayerChUnlockProgress_RemovedDependenciesEntry_DoNotUse::InitAsDefaultInstance();
}

JOLTC_EXPORT ::google::protobuf::internal::SCCInfo<0> scc_info_PlayerChUnlockProgress_RemovedDependenciesEntry_DoNotUse_serializable_5fdata_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPlayerChUnlockProgress_RemovedDependenciesEntry_DoNotUse_serializable_5fdata_2eproto}, {}};

static void InitDefaultsPlayerChUnlockProgress_serializable_5fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::shared::_PlayerChUnlockProgress_default_instance_;
    new (ptr) ::shared::PlayerChUnlockProgress();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::shared::PlayerChUnlockProgress::InitAsDefaultInstance();
}

JOLTC_EXPORT ::google::protobuf::internal::SCCInfo<2> scc_info_PlayerChUnlockProgress_serializable_5fdata_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsPlayerChUnlockProgress_serializable_5fdata_2eproto}, {
      &scc_info_PlayerChUnlockProgress_RemainingDependenciesEntry_DoNotUse_serializable_5fdata_2eproto.base,
      &scc_info_PlayerChUnlockProgress_RemovedDependenciesEntry_DoNotUse_serializable_5fdata_2eproto.base,}};

static void InitDefaultsPlayerStoryProgress_RegionProgressDictEntry_DoNotUse_serializable_5fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::shared::_PlayerStoryProgress_RegionProgressDictEntry_DoNotUse_default_instance_;
    new (ptr) ::shared::PlayerStoryProgress_RegionProgressDictEntry_DoNotUse();
  }
  ::shared::PlayerStoryProgress_RegionProgressDictEntry_DoNotUse::InitAsDefaultInstance();
}

JOLTC_EXPORT ::google::protobuf::internal::SCCInfo<1> scc_info_PlayerStoryProgress_RegionProgressDictEntry_DoNotUse_serializable_5fdata_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsPlayerStoryProgress_RegionProgressDictEntry_DoNotUse_serializable_5fdata_2eproto}, {
      &scc_info_PlayerRegionProgress_serializable_5fdata_2eproto.base,}};

static void InitDefaultsPlayerStoryProgress_LevelProgressDictEntry_DoNotUse_serializable_5fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::shared::_PlayerStoryProgress_LevelProgressDictEntry_DoNotUse_default_instance_;
    new (ptr) ::shared::PlayerStoryProgress_LevelProgressDictEntry_DoNotUse();
  }
  ::shared::PlayerStoryProgress_LevelProgressDictEntry_DoNotUse::InitAsDefaultInstance();
}

JOLTC_EXPORT ::google::protobuf::internal::SCCInfo<1> scc_info_PlayerStoryProgress_LevelProgressDictEntry_DoNotUse_serializable_5fdata_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsPlayerStoryProgress_LevelProgressDictEntry_DoNotUse_serializable_5fdata_2eproto}, {
      &scc_info_PlayerLevelProgress_serializable_5fdata_2eproto.base,}};

static void InitDefaultsPlayerStoryProgress_ChUnlockProgressDictEntry_DoNotUse_serializable_5fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::shared::_PlayerStoryProgress_ChUnlockProgressDictEntry_DoNotUse_default_instance_;
    new (ptr) ::shared::PlayerStoryProgress_ChUnlockProgressDictEntry_DoNotUse();
  }
  ::shared::PlayerStoryProgress_ChUnlockProgressDictEntry_DoNotUse::InitAsDefaultInstance();
}

JOLTC_EXPORT ::google::protobuf::internal::SCCInfo<1> scc_info_PlayerStoryProgress_ChUnlockProgressDictEntry_DoNotUse_serializable_5fdata_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsPlayerStoryProgress_ChUnlockProgressDictEntry_DoNotUse_serializable_5fdata_2eproto}, {
      &scc_info_PlayerChUnlockProgress_serializable_5fdata_2eproto.base,}};

static void InitDefaultsPlayerStoryProgress_serializable_5fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::shared::_PlayerStoryProgress_default_instance_;
    new (ptr) ::shared::PlayerStoryProgress();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::shared::PlayerStoryProgress::InitAsDefaultInstance();
}

JOLTC_EXPORT ::google::protobuf::internal::SCCInfo<3> scc_info_PlayerStoryProgress_serializable_5fdata_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsPlayerStoryProgress_serializable_5fdata_2eproto}, {
      &scc_info_PlayerStoryProgress_RegionProgressDictEntry_DoNotUse_serializable_5fdata_2eproto.base,
      &scc_info_PlayerStoryProgress_LevelProgressDictEntry_DoNotUse_serializable_5fdata_2eproto.base,
      &scc_info_PlayerStoryProgress_ChUnlockProgressDictEntry_DoNotUse_serializable_5fdata_2eproto.base,}};

static void InitDefaultsPlayerOnlineArenaProgress_ChUnlockProgressDictEntry_DoNotUse_serializable_5fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::shared::_PlayerOnlineArenaProgress_ChUnlockProgressDictEntry_DoNotUse_default_instance_;
    new (ptr) ::shared::PlayerOnlineArenaProgress_ChUnlockProgressDictEntry_DoNotUse();
  }
  ::shared::PlayerOnlineArenaProgress_ChUnlockProgressDictEntry_DoNotUse::InitAsDefaultInstance();
}

JOLTC_EXPORT ::google::protobuf::internal::SCCInfo<1> scc_info_PlayerOnlineArenaProgress_ChUnlockProgressDictEntry_DoNotUse_serializable_5fdata_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsPlayerOnlineArenaProgress_ChUnlockProgressDictEntry_DoNotUse_serializable_5fdata_2eproto}, {
      &scc_info_PlayerChUnlockProgress_serializable_5fdata_2eproto.base,}};

static void InitDefaultsPlayerOnlineArenaProgress_serializable_5fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::shared::_PlayerOnlineArenaProgress_default_instance_;
    new (ptr) ::shared::PlayerOnlineArenaProgress();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::shared::PlayerOnlineArenaProgress::InitAsDefaultInstance();
}

JOLTC_EXPORT ::google::protobuf::internal::SCCInfo<1> scc_info_PlayerOnlineArenaProgress_serializable_5fdata_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsPlayerOnlineArenaProgress_serializable_5fdata_2eproto}, {
      &scc_info_PlayerOnlineArenaProgress_ChUnlockProgressDictEntry_DoNotUse_serializable_5fdata_2eproto.base,}};

static void InitDefaultsStoryPointDialogLine_serializable_5fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::shared::_StoryPointDialogLine_default_instance_;
    new (ptr) ::shared::StoryPointDialogLine();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::shared::StoryPointDialogLine::InitAsDefaultInstance();
}

JOLTC_EXPORT ::google::protobuf::internal::SCCInfo<0> scc_info_StoryPointDialogLine_serializable_5fdata_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsStoryPointDialogLine_serializable_5fdata_2eproto}, {}};

static void InitDefaultsStoryPointStep_serializable_5fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::shared::_StoryPointStep_default_instance_;
    new (ptr) ::shared::StoryPointStep();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::shared::StoryPointStep::InitAsDefaultInstance();
}

JOLTC_EXPORT ::google::protobuf::internal::SCCInfo<1> scc_info_StoryPointStep_serializable_5fdata_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsStoryPointStep_serializable_5fdata_2eproto}, {
      &scc_info_StoryPointDialogLine_serializable_5fdata_2eproto.base,}};

static void InitDefaultsStoryPoint_serializable_5fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::shared::_StoryPoint_default_instance_;
    new (ptr) ::shared::StoryPoint();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::shared::StoryPoint::InitAsDefaultInstance();
}

JOLTC_EXPORT ::google::protobuf::internal::SCCInfo<1> scc_info_StoryPoint_serializable_5fdata_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsStoryPoint_serializable_5fdata_2eproto}, {
      &scc_info_StoryPointStep_serializable_5fdata_2eproto.base,}};

static void InitDefaultsLevelStory_PointsEntry_DoNotUse_serializable_5fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::shared::_LevelStory_PointsEntry_DoNotUse_default_instance_;
    new (ptr) ::shared::LevelStory_PointsEntry_DoNotUse();
  }
  ::shared::LevelStory_PointsEntry_DoNotUse::InitAsDefaultInstance();
}

JOLTC_EXPORT ::google::protobuf::internal::SCCInfo<1> scc_info_LevelStory_PointsEntry_DoNotUse_serializable_5fdata_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsLevelStory_PointsEntry_DoNotUse_serializable_5fdata_2eproto}, {
      &scc_info_StoryPoint_serializable_5fdata_2eproto.base,}};

static void InitDefaultsLevelStory_serializable_5fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::shared::_LevelStory_default_instance_;
    new (ptr) ::shared::LevelStory();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::shared::LevelStory::InitAsDefaultInstance();
}

JOLTC_EXPORT ::google::protobuf::internal::SCCInfo<1> scc_info_LevelStory_serializable_5fdata_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsLevelStory_serializable_5fdata_2eproto}, {
      &scc_info_LevelStory_PointsEntry_DoNotUse_serializable_5fdata_2eproto.base,}};

static void InitDefaultsSerializableConvexPolygon_serializable_5fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::shared::_SerializableConvexPolygon_default_instance_;
    new (ptr) ::shared::SerializableConvexPolygon();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::shared::SerializableConvexPolygon::InitAsDefaultInstance();
}

JOLTC_EXPORT ::google::protobuf::internal::SCCInfo<0> scc_info_SerializableConvexPolygon_serializable_5fdata_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSerializableConvexPolygon_serializable_5fdata_2eproto}, {}};

static void InitDefaultsSerializedCompletelyStaticPatrolCueCollider_serializable_5fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::shared::_SerializedCompletelyStaticPatrolCueCollider_default_instance_;
    new (ptr) ::shared::SerializedCompletelyStaticPatrolCueCollider();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::shared::SerializedCompletelyStaticPatrolCueCollider::InitAsDefaultInstance();
}

JOLTC_EXPORT ::google::protobuf::internal::SCCInfo<2> scc_info_SerializedCompletelyStaticPatrolCueCollider_serializable_5fdata_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsSerializedCompletelyStaticPatrolCueCollider_serializable_5fdata_2eproto}, {
      &scc_info_PatrolCue_serializable_5fdata_2eproto.base,
      &scc_info_SerializableConvexPolygon_serializable_5fdata_2eproto.base,}};

static void InitDefaultsSerializedCompletelyStaticTrapCollider_serializable_5fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::shared::_SerializedCompletelyStaticTrapCollider_default_instance_;
    new (ptr) ::shared::SerializedCompletelyStaticTrapCollider();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::shared::SerializedCompletelyStaticTrapCollider::InitAsDefaultInstance();
}

JOLTC_EXPORT ::google::protobuf::internal::SCCInfo<2> scc_info_SerializedCompletelyStaticTrapCollider_serializable_5fdata_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsSerializedCompletelyStaticTrapCollider_serializable_5fdata_2eproto}, {
      &scc_info_TrapColliderAttr_serializable_5fdata_2eproto.base,
      &scc_info_SerializableConvexPolygon_serializable_5fdata_2eproto.base,}};

static void InitDefaultsSerializedCompletelyStaticTriggerCollider_serializable_5fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::shared::_SerializedCompletelyStaticTriggerCollider_default_instance_;
    new (ptr) ::shared::SerializedCompletelyStaticTriggerCollider();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::shared::SerializedCompletelyStaticTriggerCollider::InitAsDefaultInstance();
}

JOLTC_EXPORT ::google::protobuf::internal::SCCInfo<2> scc_info_SerializedCompletelyStaticTriggerCollider_serializable_5fdata_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsSerializedCompletelyStaticTriggerCollider_serializable_5fdata_2eproto}, {
      &scc_info_TriggerColliderAttr_serializable_5fdata_2eproto.base,
      &scc_info_SerializableConvexPolygon_serializable_5fdata_2eproto.base,}};

static void InitDefaultsTrapColliderAttrArray_serializable_5fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::shared::_TrapColliderAttrArray_default_instance_;
    new (ptr) ::shared::TrapColliderAttrArray();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::shared::TrapColliderAttrArray::InitAsDefaultInstance();
}

JOLTC_EXPORT ::google::protobuf::internal::SCCInfo<1> scc_info_TrapColliderAttrArray_serializable_5fdata_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsTrapColliderAttrArray_serializable_5fdata_2eproto}, {
      &scc_info_TrapColliderAttr_serializable_5fdata_2eproto.base,}};

static void InitDefaultsSerializedTrapLocalIdToColliderAttrs_DictEntry_DoNotUse_serializable_5fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::shared::_SerializedTrapLocalIdToColliderAttrs_DictEntry_DoNotUse_default_instance_;
    new (ptr) ::shared::SerializedTrapLocalIdToColliderAttrs_DictEntry_DoNotUse();
  }
  ::shared::SerializedTrapLocalIdToColliderAttrs_DictEntry_DoNotUse::InitAsDefaultInstance();
}

JOLTC_EXPORT ::google::protobuf::internal::SCCInfo<1> scc_info_SerializedTrapLocalIdToColliderAttrs_DictEntry_DoNotUse_serializable_5fdata_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsSerializedTrapLocalIdToColliderAttrs_DictEntry_DoNotUse_serializable_5fdata_2eproto}, {
      &scc_info_TrapColliderAttrArray_serializable_5fdata_2eproto.base,}};

static void InitDefaultsSerializedTrapLocalIdToColliderAttrs_serializable_5fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::shared::_SerializedTrapLocalIdToColliderAttrs_default_instance_;
    new (ptr) ::shared::SerializedTrapLocalIdToColliderAttrs();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::shared::SerializedTrapLocalIdToColliderAttrs::InitAsDefaultInstance();
}

JOLTC_EXPORT ::google::protobuf::internal::SCCInfo<1> scc_info_SerializedTrapLocalIdToColliderAttrs_serializable_5fdata_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsSerializedTrapLocalIdToColliderAttrs_serializable_5fdata_2eproto}, {
      &scc_info_SerializedTrapLocalIdToColliderAttrs_DictEntry_DoNotUse_serializable_5fdata_2eproto.base,}};

static void InitDefaultsSerializedTriggerEditorIdToLocalId_DictEntry_DoNotUse_serializable_5fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::shared::_SerializedTriggerEditorIdToLocalId_DictEntry_DoNotUse_default_instance_;
    new (ptr) ::shared::SerializedTriggerEditorIdToLocalId_DictEntry_DoNotUse();
  }
  ::shared::SerializedTriggerEditorIdToLocalId_DictEntry_DoNotUse::InitAsDefaultInstance();
}

JOLTC_EXPORT ::google::protobuf::internal::SCCInfo<0> scc_info_SerializedTriggerEditorIdToLocalId_DictEntry_DoNotUse_serializable_5fdata_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSerializedTriggerEditorIdToLocalId_DictEntry_DoNotUse_serializable_5fdata_2eproto}, {}};

static void InitDefaultsSerializedTriggerEditorIdToLocalId_Dict2Entry_DoNotUse_serializable_5fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::shared::_SerializedTriggerEditorIdToLocalId_Dict2Entry_DoNotUse_default_instance_;
    new (ptr) ::shared::SerializedTriggerEditorIdToLocalId_Dict2Entry_DoNotUse();
  }
  ::shared::SerializedTriggerEditorIdToLocalId_Dict2Entry_DoNotUse::InitAsDefaultInstance();
}

JOLTC_EXPORT ::google::protobuf::internal::SCCInfo<1> scc_info_SerializedTriggerEditorIdToLocalId_Dict2Entry_DoNotUse_serializable_5fdata_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsSerializedTriggerEditorIdToLocalId_Dict2Entry_DoNotUse_serializable_5fdata_2eproto}, {
      &scc_info_TriggerConfigFromTiled_serializable_5fdata_2eproto.base,}};

static void InitDefaultsSerializedTriggerEditorIdToLocalId_serializable_5fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::shared::_SerializedTriggerEditorIdToLocalId_default_instance_;
    new (ptr) ::shared::SerializedTriggerEditorIdToLocalId();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::shared::SerializedTriggerEditorIdToLocalId::InitAsDefaultInstance();
}

JOLTC_EXPORT ::google::protobuf::internal::SCCInfo<2> scc_info_SerializedTriggerEditorIdToLocalId_serializable_5fdata_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsSerializedTriggerEditorIdToLocalId_serializable_5fdata_2eproto}, {
      &scc_info_SerializedTriggerEditorIdToLocalId_DictEntry_DoNotUse_serializable_5fdata_2eproto.base,
      &scc_info_SerializedTriggerEditorIdToLocalId_Dict2Entry_DoNotUse_serializable_5fdata_2eproto.base,}};

static void InitDefaultsPickableConfigFromTiled_serializable_5fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::shared::_PickableConfigFromTiled_default_instance_;
    new (ptr) ::shared::PickableConfigFromTiled();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::shared::PickableConfigFromTiled::InitAsDefaultInstance();
}

JOLTC_EXPORT ::google::protobuf::internal::SCCInfo<0> scc_info_PickableConfigFromTiled_serializable_5fdata_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPickableConfigFromTiled_serializable_5fdata_2eproto}, {}};

static void InitDefaultsPickable_serializable_5fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::shared::_Pickable_default_instance_;
    new (ptr) ::shared::Pickable();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::shared::Pickable::InitAsDefaultInstance();
}

JOLTC_EXPORT ::google::protobuf::internal::SCCInfo<1> scc_info_Pickable_serializable_5fdata_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsPickable_serializable_5fdata_2eproto}, {
      &scc_info_PickableConfigFromTiled_serializable_5fdata_2eproto.base,}};

static void InitDefaultsInjectedCmdConfig_serializable_5fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::shared::_InjectedCmdConfig_default_instance_;
    new (ptr) ::shared::InjectedCmdConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::shared::InjectedCmdConfig::InitAsDefaultInstance();
}

JOLTC_EXPORT ::google::protobuf::internal::SCCInfo<0> scc_info_InjectedCmdConfig_serializable_5fdata_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsInjectedCmdConfig_serializable_5fdata_2eproto}, {}};

static void InitDefaultsCharacterSpawnerConfig_serializable_5fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::shared::_CharacterSpawnerConfig_default_instance_;
    new (ptr) ::shared::CharacterSpawnerConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::shared::CharacterSpawnerConfig::InitAsDefaultInstance();
}

JOLTC_EXPORT ::google::protobuf::internal::SCCInfo<0> scc_info_CharacterSpawnerConfig_serializable_5fdata_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCharacterSpawnerConfig_serializable_5fdata_2eproto}, {}};

static void InitDefaultsPickableSpawnerConfig_serializable_5fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::shared::_PickableSpawnerConfig_default_instance_;
    new (ptr) ::shared::PickableSpawnerConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::shared::PickableSpawnerConfig::InitAsDefaultInstance();
}

JOLTC_EXPORT ::google::protobuf::internal::SCCInfo<0> scc_info_PickableSpawnerConfig_serializable_5fdata_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPickableSpawnerConfig_serializable_5fdata_2eproto}, {}};

static void InitDefaultsTriggerColliderAttr_serializable_5fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::shared::_TriggerColliderAttr_default_instance_;
    new (ptr) ::shared::TriggerColliderAttr();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::shared::TriggerColliderAttr::InitAsDefaultInstance();
}

JOLTC_EXPORT ::google::protobuf::internal::SCCInfo<0> scc_info_TriggerColliderAttr_serializable_5fdata_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsTriggerColliderAttr_serializable_5fdata_2eproto}, {}};

static void InitDefaultsTriggerConfigFromTiled_BossSpeciesSetEntry_DoNotUse_serializable_5fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::shared::_TriggerConfigFromTiled_BossSpeciesSetEntry_DoNotUse_default_instance_;
    new (ptr) ::shared::TriggerConfigFromTiled_BossSpeciesSetEntry_DoNotUse();
  }
  ::shared::TriggerConfigFromTiled_BossSpeciesSetEntry_DoNotUse::InitAsDefaultInstance();
}

JOLTC_EXPORT ::google::protobuf::internal::SCCInfo<0> scc_info_TriggerConfigFromTiled_BossSpeciesSetEntry_DoNotUse_serializable_5fdata_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsTriggerConfigFromTiled_BossSpeciesSetEntry_DoNotUse_serializable_5fdata_2eproto}, {}};

static void InitDefaultsTriggerConfigFromTiled_serializable_5fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::shared::_TriggerConfigFromTiled_default_instance_;
    new (ptr) ::shared::TriggerConfigFromTiled();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::shared::TriggerConfigFromTiled::InitAsDefaultInstance();
}

JOLTC_EXPORT ::google::protobuf::internal::SCCInfo<3> scc_info_TriggerConfigFromTiled_serializable_5fdata_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsTriggerConfigFromTiled_serializable_5fdata_2eproto}, {
      &scc_info_CharacterSpawnerConfig_serializable_5fdata_2eproto.base,
      &scc_info_PickableSpawnerConfig_serializable_5fdata_2eproto.base,
      &scc_info_TriggerConfigFromTiled_BossSpeciesSetEntry_DoNotUse_serializable_5fdata_2eproto.base,}};

static void InitDefaultsTrigger_serializable_5fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::shared::_Trigger_default_instance_;
    new (ptr) ::shared::Trigger();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::shared::Trigger::InitAsDefaultInstance();
}

JOLTC_EXPORT ::google::protobuf::internal::SCCInfo<0> scc_info_Trigger_serializable_5fdata_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsTrigger_serializable_5fdata_2eproto}, {}};

static void InitDefaultsPlayerMetaInfo_serializable_5fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::shared::_PlayerMetaInfo_default_instance_;
    new (ptr) ::shared::PlayerMetaInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::shared::PlayerMetaInfo::InitAsDefaultInstance();
}

JOLTC_EXPORT ::google::protobuf::internal::SCCInfo<0> scc_info_PlayerMetaInfo_serializable_5fdata_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPlayerMetaInfo_serializable_5fdata_2eproto}, {}};

static void InitDefaultsRpcEndpointHolder_serializable_5fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::shared::_RpcEndpointHolder_default_instance_;
    new (ptr) ::shared::RpcEndpointHolder();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::shared::RpcEndpointHolder::InitAsDefaultInstance();
}

JOLTC_EXPORT ::google::protobuf::internal::SCCInfo<0> scc_info_RpcEndpointHolder_serializable_5fdata_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsRpcEndpointHolder_serializable_5fdata_2eproto}, {}};

void InitDefaults_serializable_5fdata_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_AuthTokenUnderlying_serializable_5fdata_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_AuthResult_serializable_5fdata_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SteamAuthenticateUserTicketPayloadParams_serializable_5fdata_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SteamAuthenticateUserTicketPayloadResp_serializable_5fdata_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SteamAuthenticateUserTicketResult_serializable_5fdata_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_BattleInvitation_serializable_5fdata_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CharacterConfig_LoopingChStatesEntry_DoNotUse_serializable_5fdata_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CharacterConfig_serializable_5fdata_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CharacterDownsync_serializable_5fdata_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_InputFrameDecoded_serializable_5fdata_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_InputFrameUpsync_serializable_5fdata_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_InputFrameDownsync_serializable_5fdata_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_WsReq_serializable_5fdata_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_InputBufferSnapshot_serializable_5fdata_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PatrolCue_serializable_5fdata_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_VfxConfig_serializable_5fdata_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_BulletConfig_CancelTransitEntry_DoNotUse_serializable_5fdata_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_BulletConfig_serializable_5fdata_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Bullet_serializable_5fdata_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TrapConfig_serializable_5fdata_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TrapConfigFromTiled_serializable_5fdata_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TrapColliderAttr_serializable_5fdata_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Trap_serializable_5fdata_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TriggerConfig_serializable_5fdata_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PeerUdpAddr_serializable_5fdata_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_BattleColliderInfo_serializable_5fdata_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RenderFrame_serializable_5fdata_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_WsResp_serializable_5fdata_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Skill_serializable_5fdata_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_FrameLog_serializable_5fdata_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_BattleResult_serializable_5fdata_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_DebuffConfig_serializable_5fdata_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_BuffConfig_serializable_5fdata_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Buff_serializable_5fdata_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Debuff_serializable_5fdata_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_BulletImmuneRecord_serializable_5fdata_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ConsumableConfig_serializable_5fdata_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PickableSkillConfig_serializable_5fdata_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_InventorySlot_serializable_5fdata_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Inventory_serializable_5fdata_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_BattleEquipment_serializable_5fdata_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PlayerSettings_serializable_5fdata_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PlayerRegionProgress_RemainingDependenciesEntry_DoNotUse_serializable_5fdata_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PlayerRegionProgress_RemovedDependenciesEntry_DoNotUse_serializable_5fdata_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PlayerRegionProgress_serializable_5fdata_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PlayerLevelProgress_RemainingDependenciesEntry_DoNotUse_serializable_5fdata_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PlayerLevelProgress_RemovedDependenciesEntry_DoNotUse_serializable_5fdata_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PlayerLevelProgress_serializable_5fdata_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PlayerChUnlockProgress_RemainingDependenciesEntry_DoNotUse_serializable_5fdata_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PlayerChUnlockProgress_RemovedDependenciesEntry_DoNotUse_serializable_5fdata_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PlayerChUnlockProgress_serializable_5fdata_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PlayerStoryProgress_RegionProgressDictEntry_DoNotUse_serializable_5fdata_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PlayerStoryProgress_LevelProgressDictEntry_DoNotUse_serializable_5fdata_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PlayerStoryProgress_ChUnlockProgressDictEntry_DoNotUse_serializable_5fdata_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PlayerStoryProgress_serializable_5fdata_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PlayerOnlineArenaProgress_ChUnlockProgressDictEntry_DoNotUse_serializable_5fdata_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PlayerOnlineArenaProgress_serializable_5fdata_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_StoryPointDialogLine_serializable_5fdata_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_StoryPointStep_serializable_5fdata_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_StoryPoint_serializable_5fdata_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_LevelStory_PointsEntry_DoNotUse_serializable_5fdata_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_LevelStory_serializable_5fdata_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SerializableConvexPolygon_serializable_5fdata_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SerializedCompletelyStaticPatrolCueCollider_serializable_5fdata_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SerializedCompletelyStaticTrapCollider_serializable_5fdata_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SerializedCompletelyStaticTriggerCollider_serializable_5fdata_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TrapColliderAttrArray_serializable_5fdata_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SerializedTrapLocalIdToColliderAttrs_DictEntry_DoNotUse_serializable_5fdata_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SerializedTrapLocalIdToColliderAttrs_serializable_5fdata_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SerializedTriggerEditorIdToLocalId_DictEntry_DoNotUse_serializable_5fdata_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SerializedTriggerEditorIdToLocalId_Dict2Entry_DoNotUse_serializable_5fdata_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SerializedTriggerEditorIdToLocalId_serializable_5fdata_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PickableConfigFromTiled_serializable_5fdata_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Pickable_serializable_5fdata_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_InjectedCmdConfig_serializable_5fdata_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CharacterSpawnerConfig_serializable_5fdata_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PickableSpawnerConfig_serializable_5fdata_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TriggerColliderAttr_serializable_5fdata_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TriggerConfigFromTiled_BossSpeciesSetEntry_DoNotUse_serializable_5fdata_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TriggerConfigFromTiled_serializable_5fdata_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Trigger_serializable_5fdata_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PlayerMetaInfo_serializable_5fdata_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RpcEndpointHolder_serializable_5fdata_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_serializable_5fdata_2eproto[83];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors_serializable_5fdata_2eproto[21];
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_serializable_5fdata_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_serializable_5fdata_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::shared::AuthTokenUnderlying, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::shared::AuthTokenUnderlying, player_id_),
  PROTOBUF_FIELD_OFFSET(::shared::AuthTokenUnderlying, from_authsrv_id_),
  PROTOBUF_FIELD_OFFSET(::shared::AuthTokenUnderlying, to_battlesrv_id_),
  PROTOBUF_FIELD_OFFSET(::shared::AuthTokenUnderlying, expires_at_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::shared::AuthResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::shared::AuthResult, ret_code_),
  PROTOBUF_FIELD_OFFSET(::shared::AuthResult, uname_),
  PROTOBUF_FIELD_OFFSET(::shared::AuthResult, captcha_),
  PROTOBUF_FIELD_OFFSET(::shared::AuthResult, expires_at_),
  PROTOBUF_FIELD_OFFSET(::shared::AuthResult, player_id_),
  PROTOBUF_FIELD_OFFSET(::shared::AuthResult, new_auth_token_),
  PROTOBUF_FIELD_OFFSET(::shared::AuthResult, new_auth_token_sig_),
  PROTOBUF_FIELD_OFFSET(::shared::AuthResult, captcha_submit_authsrv_id_),
  PROTOBUF_FIELD_OFFSET(::shared::AuthResult, battlesrv_hostname_only_),
  PROTOBUF_FIELD_OFFSET(::shared::AuthResult, battlesrv_endpoint_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::shared::SteamAuthenticateUserTicketPayloadParams, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::shared::SteamAuthenticateUserTicketPayloadParams, result_),
  PROTOBUF_FIELD_OFFSET(::shared::SteamAuthenticateUserTicketPayloadParams, steamid_),
  PROTOBUF_FIELD_OFFSET(::shared::SteamAuthenticateUserTicketPayloadParams, ownersteamid_),
  PROTOBUF_FIELD_OFFSET(::shared::SteamAuthenticateUserTicketPayloadParams, vacbanned_),
  PROTOBUF_FIELD_OFFSET(::shared::SteamAuthenticateUserTicketPayloadParams, publisherbanned_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::shared::SteamAuthenticateUserTicketPayloadResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::shared::SteamAuthenticateUserTicketPayloadResp, params_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::shared::SteamAuthenticateUserTicketResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::shared::SteamAuthenticateUserTicketResult, response_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::shared::BattleInvitation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::shared::BattleInvitation, from_player_id_),
  PROTOBUF_FIELD_OFFSET(::shared::BattleInvitation, to_battlesrv_id_),
  PROTOBUF_FIELD_OFFSET(::shared::BattleInvitation, bound_room_id_),
  PROTOBUF_FIELD_OFFSET(::shared::BattleInvitation, expires_at_),
  PROTOBUF_FIELD_OFFSET(::shared::BattleInvitation, passcode_),
  PROTOBUF_FIELD_OFFSET(::shared::CharacterConfig_LoopingChStatesEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::shared::CharacterConfig_LoopingChStatesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::shared::CharacterConfig_LoopingChStatesEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::shared::CharacterConfig_LoopingChStatesEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::shared::CharacterConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::shared::CharacterConfig, species_id_),
  PROTOBUF_FIELD_OFFSET(::shared::CharacterConfig, species_name_),
  PROTOBUF_FIELD_OFFSET(::shared::CharacterConfig, hp_),
  PROTOBUF_FIELD_OFFSET(::shared::CharacterConfig, mp_),
  PROTOBUF_FIELD_OFFSET(::shared::CharacterConfig, lay_down_frames_),
  PROTOBUF_FIELD_OFFSET(::shared::CharacterConfig, lay_down_frames_to_recover_),
  PROTOBUF_FIELD_OFFSET(::shared::CharacterConfig, get_up_invinsible_frames_),
  PROTOBUF_FIELD_OFFSET(::shared::CharacterConfig, get_up_frames_to_recover_),
  PROTOBUF_FIELD_OFFSET(::shared::CharacterConfig, speed_),
  PROTOBUF_FIELD_OFFSET(::shared::CharacterConfig, mp_regen_per_interval_),
  PROTOBUF_FIELD_OFFSET(::shared::CharacterConfig, mp_regen_interval_),
  PROTOBUF_FIELD_OFFSET(::shared::CharacterConfig, jumping_init_vel_y_),
  PROTOBUF_FIELD_OFFSET(::shared::CharacterConfig, inertia_frames_to_recover_),
  PROTOBUF_FIELD_OFFSET(::shared::CharacterConfig, dashing_enabled_),
  PROTOBUF_FIELD_OFFSET(::shared::CharacterConfig, sliding_enabled_),
  PROTOBUF_FIELD_OFFSET(::shared::CharacterConfig, on_wall_enabled_),
  PROTOBUF_FIELD_OFFSET(::shared::CharacterConfig, crouching_enabled_),
  PROTOBUF_FIELD_OFFSET(::shared::CharacterConfig, crouching_atk_enabled_),
  PROTOBUF_FIELD_OFFSET(::shared::CharacterConfig, wall_jumping_frames_to_recover_),
  PROTOBUF_FIELD_OFFSET(::shared::CharacterConfig, wall_jumping_init_vel_x_),
  PROTOBUF_FIELD_OFFSET(::shared::CharacterConfig, wall_jumping_init_vel_y_),
  PROTOBUF_FIELD_OFFSET(::shared::CharacterConfig, wall_sliding_vel_y_),
  PROTOBUF_FIELD_OFFSET(::shared::CharacterConfig, min_falling_vel_y_),
  PROTOBUF_FIELD_OFFSET(::shared::CharacterConfig, max_ascending_vel_y_),
  PROTOBUF_FIELD_OFFSET(::shared::CharacterConfig, use_inventory_btn_b_),
  PROTOBUF_FIELD_OFFSET(::shared::CharacterConfig, ground_dodge_enabled_by_iv_slot_c_in_block_stun_),
  PROTOBUF_FIELD_OFFSET(::shared::CharacterConfig, ground_dodge_enabled_by_rdf_cnt_from_beginning_),
  PROTOBUF_FIELD_OFFSET(::shared::CharacterConfig, ground_dodged_frames_to_recover_),
  PROTOBUF_FIELD_OFFSET(::shared::CharacterConfig, ground_dodged_frames_invinsible_),
  PROTOBUF_FIELD_OFFSET(::shared::CharacterConfig, ground_dodged_speed_),
  PROTOBUF_FIELD_OFFSET(::shared::CharacterConfig, vision_offset_x_),
  PROTOBUF_FIELD_OFFSET(::shared::CharacterConfig, vision_offset_y_),
  PROTOBUF_FIELD_OFFSET(::shared::CharacterConfig, vision_size_x_),
  PROTOBUF_FIELD_OFFSET(::shared::CharacterConfig, vision_size_y_),
  PROTOBUF_FIELD_OFFSET(::shared::CharacterConfig, capsule_radius_),
  PROTOBUF_FIELD_OFFSET(::shared::CharacterConfig, capsule_half_height_),
  PROTOBUF_FIELD_OFFSET(::shared::CharacterConfig, shrinked_scale_radius_),
  PROTOBUF_FIELD_OFFSET(::shared::CharacterConfig, shrinked_scale_height_),
  PROTOBUF_FIELD_OFFSET(::shared::CharacterConfig, lay_down_scale_radius_),
  PROTOBUF_FIELD_OFFSET(::shared::CharacterConfig, lay_down_scale_height_),
  PROTOBUF_FIELD_OFFSET(::shared::CharacterConfig, dying_scale_radius_),
  PROTOBUF_FIELD_OFFSET(::shared::CharacterConfig, dying_scale_height_),
  PROTOBUF_FIELD_OFFSET(::shared::CharacterConfig, dimmed_scale_radius_),
  PROTOBUF_FIELD_OFFSET(::shared::CharacterConfig, dimmed_scale_height_),
  PROTOBUF_FIELD_OFFSET(::shared::CharacterConfig, anti_gravity_when_idle_),
  PROTOBUF_FIELD_OFFSET(::shared::CharacterConfig, anti_gravity_frames_lingering_),
  PROTOBUF_FIELD_OFFSET(::shared::CharacterConfig, omit_gravity_),
  PROTOBUF_FIELD_OFFSET(::shared::CharacterConfig, omit_soft_pushback_),
  PROTOBUF_FIELD_OFFSET(::shared::CharacterConfig, repel_soft_pushback_),
  PROTOBUF_FIELD_OFFSET(::shared::CharacterConfig, collision_type_mask_),
  PROTOBUF_FIELD_OFFSET(::shared::CharacterConfig, has_turn_around_anim_),
  PROTOBUF_FIELD_OFFSET(::shared::CharacterConfig, has_dimmed_anim_),
  PROTOBUF_FIELD_OFFSET(::shared::CharacterConfig, has_awaking_anim_),
  PROTOBUF_FIELD_OFFSET(::shared::CharacterConfig, has_walk_stopping_anim_),
  PROTOBUF_FIELD_OFFSET(::shared::CharacterConfig, has_in_air_walk_stopping_anim_),
  PROTOBUF_FIELD_OFFSET(::shared::CharacterConfig, lay_down_to_recover_from_dimmed_),
  PROTOBUF_FIELD_OFFSET(::shared::CharacterConfig, hardness_),
  PROTOBUF_FIELD_OFFSET(::shared::CharacterConfig, proactive_jump_startup_frames_),
  PROTOBUF_FIELD_OFFSET(::shared::CharacterConfig, default_air_jump_quota_),
  PROTOBUF_FIELD_OFFSET(::shared::CharacterConfig, default_air_dash_quota_),
  PROTOBUF_FIELD_OFFSET(::shared::CharacterConfig, default_def1quota_),
  PROTOBUF_FIELD_OFFSET(::shared::CharacterConfig, isolated_air_jump_and_dash_quota_),
  PROTOBUF_FIELD_OFFSET(::shared::CharacterConfig, air_jump_vfx_species_id_),
  PROTOBUF_FIELD_OFFSET(::shared::CharacterConfig, slip_jump_thres_hold_below_top_face_),
  PROTOBUF_FIELD_OFFSET(::shared::CharacterConfig, slip_jump_character_drop_y_),
  PROTOBUF_FIELD_OFFSET(::shared::CharacterConfig, transform_into_species_id_upon_death_),
  PROTOBUF_FIELD_OFFSET(::shared::CharacterConfig, jump_holding_to_fly_),
  PROTOBUF_FIELD_OFFSET(::shared::CharacterConfig, has_def1_),
  PROTOBUF_FIELD_OFFSET(::shared::CharacterConfig, has_def1atked1anim_),
  PROTOBUF_FIELD_OFFSET(::shared::CharacterConfig, default_def1broken_frames_to_recover_),
  PROTOBUF_FIELD_OFFSET(::shared::CharacterConfig, def1_active_vfx_species_id_),
  PROTOBUF_FIELD_OFFSET(::shared::CharacterConfig, def1_atked_vfx_species_id_),
  PROTOBUF_FIELD_OFFSET(::shared::CharacterConfig, def1_broken_vfx_species_id_),
  PROTOBUF_FIELD_OFFSET(::shared::CharacterConfig, def1_startup_frames_),
  PROTOBUF_FIELD_OFFSET(::shared::CharacterConfig, def1_damage_yield_),
  PROTOBUF_FIELD_OFFSET(::shared::CharacterConfig, def1_defies_ele_weakness_penetration_),
  PROTOBUF_FIELD_OFFSET(::shared::CharacterConfig, def1_defies_debuff_),
  PROTOBUF_FIELD_OFFSET(::shared::CharacterConfig, flying_quota_rdf_cnt_),
  PROTOBUF_FIELD_OFFSET(::shared::CharacterConfig, walking_auto_def1_),
  PROTOBUF_FIELD_OFFSET(::shared::CharacterConfig, ifc_),
  PROTOBUF_FIELD_OFFSET(::shared::CharacterConfig, ele_weakness_),
  PROTOBUF_FIELD_OFFSET(::shared::CharacterConfig, ele_resistance_),
  PROTOBUF_FIELD_OFFSET(::shared::CharacterConfig, has_btn_b_charging_),
  PROTOBUF_FIELD_OFFSET(::shared::CharacterConfig, btn_b_charged_vfx_species_id_),
  PROTOBUF_FIELD_OFFSET(::shared::CharacterConfig, is_key_ch_),
  PROTOBUF_FIELD_OFFSET(::shared::CharacterConfig, allows_same_team_soft_pushback_),
  PROTOBUF_FIELD_OFFSET(::shared::CharacterConfig, gauge_inc_when_killed_),
  PROTOBUF_FIELD_OFFSET(::shared::CharacterConfig, jumping_instead_of_walking_),
  PROTOBUF_FIELD_OFFSET(::shared::CharacterConfig, vision_search_interval_pow2minus1u_),
  PROTOBUF_FIELD_OFFSET(::shared::CharacterConfig, vision_search_interval_pow2minus1_),
  PROTOBUF_FIELD_OFFSET(::shared::CharacterConfig, npc_no_default_air_walking_),
  PROTOBUF_FIELD_OFFSET(::shared::CharacterConfig, npc_prioritize_bullet_handling_),
  PROTOBUF_FIELD_OFFSET(::shared::CharacterConfig, npc_prioritize_ally_healing_),
  PROTOBUF_FIELD_OFFSET(::shared::CharacterConfig, npc_not_hunting_in_air_oppo_ch_),
  PROTOBUF_FIELD_OFFSET(::shared::CharacterConfig, transform_into_frames_to_recover_),
  PROTOBUF_FIELD_OFFSET(::shared::CharacterConfig, transform_into_frames_invinsible_),
  PROTOBUF_FIELD_OFFSET(::shared::CharacterConfig, awaking_frames_to_recover_),
  PROTOBUF_FIELD_OFFSET(::shared::CharacterConfig, awaking_frames_invinsible_),
  PROTOBUF_FIELD_OFFSET(::shared::CharacterConfig, use_idle1_as_flying_idle_),
  PROTOBUF_FIELD_OFFSET(::shared::CharacterConfig, no_flee_),
  PROTOBUF_FIELD_OFFSET(::shared::CharacterConfig, init_inventory_slots_),
  PROTOBUF_FIELD_OFFSET(::shared::CharacterConfig, btn_b_auto_unhold_ch_states_),
  PROTOBUF_FIELD_OFFSET(::shared::CharacterConfig, looping_ch_states_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::shared::CharacterDownsync, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::shared::CharacterDownsync, id_),
  PROTOBUF_FIELD_OFFSET(::shared::CharacterDownsync, x_),
  PROTOBUF_FIELD_OFFSET(::shared::CharacterDownsync, y_),
  PROTOBUF_FIELD_OFFSET(::shared::CharacterDownsync, dir_x_),
  PROTOBUF_FIELD_OFFSET(::shared::CharacterDownsync, dir_y_),
  PROTOBUF_FIELD_OFFSET(::shared::CharacterDownsync, vel_x_),
  PROTOBUF_FIELD_OFFSET(::shared::CharacterDownsync, vel_y_),
  PROTOBUF_FIELD_OFFSET(::shared::CharacterDownsync, speed_),
  PROTOBUF_FIELD_OFFSET(::shared::CharacterDownsync, species_id_),
  PROTOBUF_FIELD_OFFSET(::shared::CharacterDownsync, join_index_),
  PROTOBUF_FIELD_OFFSET(::shared::CharacterDownsync, frames_to_recover_),
  PROTOBUF_FIELD_OFFSET(::shared::CharacterDownsync, frames_captured_by_inertia_),
  PROTOBUF_FIELD_OFFSET(::shared::CharacterDownsync, captured_by_patrol_cue_),
  PROTOBUF_FIELD_OFFSET(::shared::CharacterDownsync, frames_in_patrol_cue_),
  PROTOBUF_FIELD_OFFSET(::shared::CharacterDownsync, beats_cnt_),
  PROTOBUF_FIELD_OFFSET(::shared::CharacterDownsync, beaten_cnt_),
  PROTOBUF_FIELD_OFFSET(::shared::CharacterDownsync, hp_),
  PROTOBUF_FIELD_OFFSET(::shared::CharacterDownsync, mp_),
  PROTOBUF_FIELD_OFFSET(::shared::CharacterDownsync, btn_b_holding_rdf_count_),
  PROTOBUF_FIELD_OFFSET(::shared::CharacterDownsync, character_state_),
  PROTOBUF_FIELD_OFFSET(::shared::CharacterDownsync, frames_in_ch_state_),
  PROTOBUF_FIELD_OFFSET(::shared::CharacterDownsync, in_air_),
  PROTOBUF_FIELD_OFFSET(::shared::CharacterDownsync, jump_triggered_),
  PROTOBUF_FIELD_OFFSET(::shared::CharacterDownsync, on_wall_),
  PROTOBUF_FIELD_OFFSET(::shared::CharacterDownsync, on_wall_norm_x_),
  PROTOBUF_FIELD_OFFSET(::shared::CharacterDownsync, on_wall_norm_y_),
  PROTOBUF_FIELD_OFFSET(::shared::CharacterDownsync, omit_gravity_),
  PROTOBUF_FIELD_OFFSET(::shared::CharacterDownsync, omit_soft_pushback_),
  PROTOBUF_FIELD_OFFSET(::shared::CharacterDownsync, waiving_patrol_cue_id_),
  PROTOBUF_FIELD_OFFSET(::shared::CharacterDownsync, goal_as_npc_),
  PROTOBUF_FIELD_OFFSET(::shared::CharacterDownsync, revival_x_),
  PROTOBUF_FIELD_OFFSET(::shared::CharacterDownsync, revival_y_),
  PROTOBUF_FIELD_OFFSET(::shared::CharacterDownsync, revival_dir_x_),
  PROTOBUF_FIELD_OFFSET(::shared::CharacterDownsync, revival_dir_y_),
  PROTOBUF_FIELD_OFFSET(::shared::CharacterDownsync, on_slope_),
  PROTOBUF_FIELD_OFFSET(::shared::CharacterDownsync, friction_vel_x_),
  PROTOBUF_FIELD_OFFSET(::shared::CharacterDownsync, forced_crouching_),
  PROTOBUF_FIELD_OFFSET(::shared::CharacterDownsync, slip_jump_triggered_),
  PROTOBUF_FIELD_OFFSET(::shared::CharacterDownsync, primarily_on_slippable_hard_pushback_),
  PROTOBUF_FIELD_OFFSET(::shared::CharacterDownsync, prev_was_crouching_),
  PROTOBUF_FIELD_OFFSET(::shared::CharacterDownsync, new_birth_),
  PROTOBUF_FIELD_OFFSET(::shared::CharacterDownsync, frames_invinsible_),
  PROTOBUF_FIELD_OFFSET(::shared::CharacterDownsync, jump_started_),
  PROTOBUF_FIELD_OFFSET(::shared::CharacterDownsync, frames_to_start_jump_),
  PROTOBUF_FIELD_OFFSET(::shared::CharacterDownsync, repel_soft_pushback_),
  PROTOBUF_FIELD_OFFSET(::shared::CharacterDownsync, publishing_evt_mask_upon_killed_),
  PROTOBUF_FIELD_OFFSET(::shared::CharacterDownsync, publishing_to_trigger_local_id_upon_killed_),
  PROTOBUF_FIELD_OFFSET(::shared::CharacterDownsync, subscribes_to_trigger_local_id_),
  PROTOBUF_FIELD_OFFSET(::shared::CharacterDownsync, jump_holding_rdf_cnt_),
  PROTOBUF_FIELD_OFFSET(::shared::CharacterDownsync, remaining_air_jump_quota_),
  PROTOBUF_FIELD_OFFSET(::shared::CharacterDownsync, remaining_air_dash_quota_),
  PROTOBUF_FIELD_OFFSET(::shared::CharacterDownsync, killed_to_drop_consumable_species_id_),
  PROTOBUF_FIELD_OFFSET(::shared::CharacterDownsync, killed_to_drop_buff_species_id_),
  PROTOBUF_FIELD_OFFSET(::shared::CharacterDownsync, killed_to_drop_pickup_skill_id_),
  PROTOBUF_FIELD_OFFSET(::shared::CharacterDownsync, friction_vel_y_),
  PROTOBUF_FIELD_OFFSET(::shared::CharacterDownsync, frames_since_last_damaged_),
  PROTOBUF_FIELD_OFFSET(::shared::CharacterDownsync, remaining_def1quota_),
  PROTOBUF_FIELD_OFFSET(::shared::CharacterDownsync, combo_hit_cnt_),
  PROTOBUF_FIELD_OFFSET(::shared::CharacterDownsync, combo_frames_remained_),
  PROTOBUF_FIELD_OFFSET(::shared::CharacterDownsync, damage_elemental_attrs_),
  PROTOBUF_FIELD_OFFSET(::shared::CharacterDownsync, on_slope_facing_down_),
  PROTOBUF_FIELD_OFFSET(::shared::CharacterDownsync, last_damaged_by_join_index_),
  PROTOBUF_FIELD_OFFSET(::shared::CharacterDownsync, last_damaged_by_bullet_team_id_),
  PROTOBUF_FIELD_OFFSET(::shared::CharacterDownsync, activated_rdf_id_),
  PROTOBUF_FIELD_OFFSET(::shared::CharacterDownsync, cached_cue_cmd_),
  PROTOBUF_FIELD_OFFSET(::shared::CharacterDownsync, active_skill_id_),
  PROTOBUF_FIELD_OFFSET(::shared::CharacterDownsync, active_skill_hit_),
  PROTOBUF_FIELD_OFFSET(::shared::CharacterDownsync, bullet_team_id_),
  PROTOBUF_FIELD_OFFSET(::shared::CharacterDownsync, ch_collision_team_id_),
  PROTOBUF_FIELD_OFFSET(::shared::CharacterDownsync, btn_c_holding_rdf_count_),
  PROTOBUF_FIELD_OFFSET(::shared::CharacterDownsync, btn_d_holding_rdf_count_),
  PROTOBUF_FIELD_OFFSET(::shared::CharacterDownsync, btn_e_holding_rdf_count_),
  PROTOBUF_FIELD_OFFSET(::shared::CharacterDownsync, parry_prep_rdf_cnt_down_),
  PROTOBUF_FIELD_OFFSET(::shared::CharacterDownsync, mp_regen_rdf_countdown_),
  PROTOBUF_FIELD_OFFSET(::shared::CharacterDownsync, flying_rdf_countdown_),
  PROTOBUF_FIELD_OFFSET(::shared::CharacterDownsync, locking_on_join_index_),
  PROTOBUF_FIELD_OFFSET(::shared::CharacterDownsync, buff_list_),
  PROTOBUF_FIELD_OFFSET(::shared::CharacterDownsync, debuff_list_),
  PROTOBUF_FIELD_OFFSET(::shared::CharacterDownsync, inventory_),
  PROTOBUF_FIELD_OFFSET(::shared::CharacterDownsync, bullet_immune_records_),
  PROTOBUF_FIELD_OFFSET(::shared::CharacterDownsync, kinematic_knobs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::shared::InputFrameDecoded, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::shared::InputFrameDecoded, dx_),
  PROTOBUF_FIELD_OFFSET(::shared::InputFrameDecoded, dy_),
  PROTOBUF_FIELD_OFFSET(::shared::InputFrameDecoded, btn_a_level_),
  PROTOBUF_FIELD_OFFSET(::shared::InputFrameDecoded, btn_b_level_),
  PROTOBUF_FIELD_OFFSET(::shared::InputFrameDecoded, btn_c_level_),
  PROTOBUF_FIELD_OFFSET(::shared::InputFrameDecoded, btn_d_level_),
  PROTOBUF_FIELD_OFFSET(::shared::InputFrameDecoded, btn_e_level_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::shared::InputFrameUpsync, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::shared::InputFrameUpsync, input_frame_id_),
  PROTOBUF_FIELD_OFFSET(::shared::InputFrameUpsync, encoded_),
  PROTOBUF_FIELD_OFFSET(::shared::InputFrameUpsync, join_index_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::shared::InputFrameDownsync, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::shared::InputFrameDownsync, input_frame_id_),
  PROTOBUF_FIELD_OFFSET(::shared::InputFrameDownsync, input_list_),
  PROTOBUF_FIELD_OFFSET(::shared::InputFrameDownsync, confirmed_list_),
  PROTOBUF_FIELD_OFFSET(::shared::InputFrameDownsync, udp_confirmed_list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::shared::WsReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::shared::WsReq, player_id_),
  PROTOBUF_FIELD_OFFSET(::shared::WsReq, act_),
  PROTOBUF_FIELD_OFFSET(::shared::WsReq, join_index_),
  PROTOBUF_FIELD_OFFSET(::shared::WsReq, acking_frame_id_),
  PROTOBUF_FIELD_OFFSET(::shared::WsReq, acking_input_frame_id_),
  PROTOBUF_FIELD_OFFSET(::shared::WsReq, auth_key_),
  PROTOBUF_FIELD_OFFSET(::shared::WsReq, input_frame_upsync_batch_),
  PROTOBUF_FIELD_OFFSET(::shared::WsReq, self_parsed_rdf_),
  PROTOBUF_FIELD_OFFSET(::shared::WsReq, collision_space_half_width_),
  PROTOBUF_FIELD_OFFSET(::shared::WsReq, collision_space_half_height_),
  PROTOBUF_FIELD_OFFSET(::shared::WsReq, battle_duration_seconds_),
  PROTOBUF_FIELD_OFFSET(::shared::WsReq, serialized_barrier_polygons_),
  PROTOBUF_FIELD_OFFSET(::shared::WsReq, serialized_static_patrol_cues_),
  PROTOBUF_FIELD_OFFSET(::shared::WsReq, serialized_completely_static_traps_),
  PROTOBUF_FIELD_OFFSET(::shared::WsReq, serialized_static_triggers_),
  PROTOBUF_FIELD_OFFSET(::shared::WsReq, serialized_trap_local_id_to_collider_attrs_),
  PROTOBUF_FIELD_OFFSET(::shared::WsReq, serialized_trigger_editor_id_to_local_id_),
  PROTOBUF_FIELD_OFFSET(::shared::WsReq, seq_no_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::shared::InputBufferSnapshot, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::shared::InputBufferSnapshot, ref_render_frame_id_),
  PROTOBUF_FIELD_OFFSET(::shared::InputBufferSnapshot, unconfirmed_mask_),
  PROTOBUF_FIELD_OFFSET(::shared::InputBufferSnapshot, to_send_input_frame_downsyncs_),
  PROTOBUF_FIELD_OFFSET(::shared::InputBufferSnapshot, should_force_resync_),
  PROTOBUF_FIELD_OFFSET(::shared::InputBufferSnapshot, peer_join_index_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::shared::PatrolCue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::shared::PatrolCue, id_),
  PROTOBUF_FIELD_OFFSET(::shared::PatrolCue, fl_act_),
  PROTOBUF_FIELD_OFFSET(::shared::PatrolCue, fr_act_),
  PROTOBUF_FIELD_OFFSET(::shared::PatrolCue, fl_capture_frames_),
  PROTOBUF_FIELD_OFFSET(::shared::PatrolCue, fr_capture_frames_),
  PROTOBUF_FIELD_OFFSET(::shared::PatrolCue, fd_act_),
  PROTOBUF_FIELD_OFFSET(::shared::PatrolCue, fu_act_),
  PROTOBUF_FIELD_OFFSET(::shared::PatrolCue, fd_capture_frames_),
  PROTOBUF_FIELD_OFFSET(::shared::PatrolCue, fu_capture_frames_),
  PROTOBUF_FIELD_OFFSET(::shared::PatrolCue, collision_type_mask_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::shared::VfxConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::shared::VfxConfig, species_id_),
  PROTOBUF_FIELD_OFFSET(::shared::VfxConfig, motion_type_),
  PROTOBUF_FIELD_OFFSET(::shared::VfxConfig, duration_type_),
  PROTOBUF_FIELD_OFFSET(::shared::VfxConfig, on_character_),
  PROTOBUF_FIELD_OFFSET(::shared::VfxConfig, on_bullet_),
  PROTOBUF_FIELD_OFFSET(::shared::VfxConfig, on_trap_),
  PROTOBUF_FIELD_OFFSET(::shared::VfxConfig, use_pixelated_ver_),
  PROTOBUF_FIELD_OFFSET(::shared::VfxConfig, name_),
  PROTOBUF_FIELD_OFFSET(::shared::BulletConfig_CancelTransitEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::shared::BulletConfig_CancelTransitEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::shared::BulletConfig_CancelTransitEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::shared::BulletConfig_CancelTransitEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::shared::BulletConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::shared::BulletConfig, startup_frames_),
  PROTOBUF_FIELD_OFFSET(::shared::BulletConfig, cancellable_st_frame_),
  PROTOBUF_FIELD_OFFSET(::shared::BulletConfig, cancellable_ed_frame_),
  PROTOBUF_FIELD_OFFSET(::shared::BulletConfig, active_frames_),
  PROTOBUF_FIELD_OFFSET(::shared::BulletConfig, hit_stun_frames_),
  PROTOBUF_FIELD_OFFSET(::shared::BulletConfig, block_stun_frames_),
  PROTOBUF_FIELD_OFFSET(::shared::BulletConfig, pushback_vel_x_),
  PROTOBUF_FIELD_OFFSET(::shared::BulletConfig, pushback_vel_y_),
  PROTOBUF_FIELD_OFFSET(::shared::BulletConfig, damage_),
  PROTOBUF_FIELD_OFFSET(::shared::BulletConfig, self_lock_vel_x_),
  PROTOBUF_FIELD_OFFSET(::shared::BulletConfig, self_lock_vel_y_),
  PROTOBUF_FIELD_OFFSET(::shared::BulletConfig, hitbox_offset_x_),
  PROTOBUF_FIELD_OFFSET(::shared::BulletConfig, hitbox_offset_y_),
  PROTOBUF_FIELD_OFFSET(::shared::BulletConfig, hitbox_size_x_),
  PROTOBUF_FIELD_OFFSET(::shared::BulletConfig, hitbox_size_y_),
  PROTOBUF_FIELD_OFFSET(::shared::BulletConfig, blow_up_),
  PROTOBUF_FIELD_OFFSET(::shared::BulletConfig, species_id_),
  PROTOBUF_FIELD_OFFSET(::shared::BulletConfig, explosion_frames_),
  PROTOBUF_FIELD_OFFSET(::shared::BulletConfig, b_type_),
  PROTOBUF_FIELD_OFFSET(::shared::BulletConfig, mh_type_),
  PROTOBUF_FIELD_OFFSET(::shared::BulletConfig, simultaneous_multi_hit_cnt_),
  PROTOBUF_FIELD_OFFSET(::shared::BulletConfig, speed_),
  PROTOBUF_FIELD_OFFSET(::shared::BulletConfig, dir_x_),
  PROTOBUF_FIELD_OFFSET(::shared::BulletConfig, dir_y_),
  PROTOBUF_FIELD_OFFSET(::shared::BulletConfig, cancel_transit_),
  PROTOBUF_FIELD_OFFSET(::shared::BulletConfig, repeat_quota_),
  PROTOBUF_FIELD_OFFSET(::shared::BulletConfig, active_vfx_species_id_),
  PROTOBUF_FIELD_OFFSET(::shared::BulletConfig, explosion_vfx_species_id_),
  PROTOBUF_FIELD_OFFSET(::shared::BulletConfig, allows_walking_),
  PROTOBUF_FIELD_OFFSET(::shared::BulletConfig, allows_crouching_),
  PROTOBUF_FIELD_OFFSET(::shared::BulletConfig, hardness_),
  PROTOBUF_FIELD_OFFSET(::shared::BulletConfig, startup_invinsible_frames_),
  PROTOBUF_FIELD_OFFSET(::shared::BulletConfig, hit_invinsible_frames_),
  PROTOBUF_FIELD_OFFSET(::shared::BulletConfig, explosion_species_id_),
  PROTOBUF_FIELD_OFFSET(::shared::BulletConfig, perp_acc_mag_),
  PROTOBUF_FIELD_OFFSET(::shared::BulletConfig, delay_self_vel_to_active_),
  PROTOBUF_FIELD_OFFSET(::shared::BulletConfig, speed_if_not_hit_),
  PROTOBUF_FIELD_OFFSET(::shared::BulletConfig, omit_soft_pushback_),
  PROTOBUF_FIELD_OFFSET(::shared::BulletConfig, hitbox_size_inc_x_),
  PROTOBUF_FIELD_OFFSET(::shared::BulletConfig, hitbox_size_inc_y_),
  PROTOBUF_FIELD_OFFSET(::shared::BulletConfig, remains_upon_hit_),
  PROTOBUF_FIELD_OFFSET(::shared::BulletConfig, rotates_along_velocity_),
  PROTOBUF_FIELD_OFFSET(::shared::BulletConfig, default_hard_pushback_bounce_quota_),
  PROTOBUF_FIELD_OFFSET(::shared::BulletConfig, hard_pushback_bounce_norm_factor_),
  PROTOBUF_FIELD_OFFSET(::shared::BulletConfig, hard_pushback_bounce_sheer_factor_),
  PROTOBUF_FIELD_OFFSET(::shared::BulletConfig, is_pixelated_active_vfx_),
  PROTOBUF_FIELD_OFFSET(::shared::BulletConfig, is_pixelated_explostion_vfx_),
  PROTOBUF_FIELD_OFFSET(::shared::BulletConfig, mh_vanish_on_melee_hit_),
  PROTOBUF_FIELD_OFFSET(::shared::BulletConfig, down_slope_primer_vel_y_),
  PROTOBUF_FIELD_OFFSET(::shared::BulletConfig, mh_updates_origin_pos_),
  PROTOBUF_FIELD_OFFSET(::shared::BulletConfig, beam_collision_),
  PROTOBUF_FIELD_OFFSET(::shared::BulletConfig, angular_frame_vel_cos_),
  PROTOBUF_FIELD_OFFSET(::shared::BulletConfig, angular_frame_vel_sin_),
  PROTOBUF_FIELD_OFFSET(::shared::BulletConfig, vision_offset_x_),
  PROTOBUF_FIELD_OFFSET(::shared::BulletConfig, vision_offset_y_),
  PROTOBUF_FIELD_OFFSET(::shared::BulletConfig, vision_size_x_),
  PROTOBUF_FIELD_OFFSET(::shared::BulletConfig, vision_size_y_),
  PROTOBUF_FIELD_OFFSET(::shared::BulletConfig, self_lock_vel_ywhen_flying_),
  PROTOBUF_FIELD_OFFSET(::shared::BulletConfig, elemental_attrs_),
  PROTOBUF_FIELD_OFFSET(::shared::BulletConfig, cancellable_by_inventory_slot_c_),
  PROTOBUF_FIELD_OFFSET(::shared::BulletConfig, cancellable_by_inventory_slot_d_),
  PROTOBUF_FIELD_OFFSET(::shared::BulletConfig, spin_anchor_x_),
  PROTOBUF_FIELD_OFFSET(::shared::BulletConfig, spin_anchor_y_),
  PROTOBUF_FIELD_OFFSET(::shared::BulletConfig, beam_visual_size_y_),
  PROTOBUF_FIELD_OFFSET(::shared::BulletConfig, touch_explosion_bomb_collision_),
  PROTOBUF_FIELD_OFFSET(::shared::BulletConfig, air_riding_ground_wave_),
  PROTOBUF_FIELD_OFFSET(::shared::BulletConfig, ground_impact_melee_collision_),
  PROTOBUF_FIELD_OFFSET(::shared::BulletConfig, wall_impact_melee_collision_),
  PROTOBUF_FIELD_OFFSET(::shared::BulletConfig, mh_inherits_spin_),
  PROTOBUF_FIELD_OFFSET(::shared::BulletConfig, init_spin_cos_),
  PROTOBUF_FIELD_OFFSET(::shared::BulletConfig, init_spin_sin_),
  PROTOBUF_FIELD_OFFSET(::shared::BulletConfig, finishing_frames_),
  PROTOBUF_FIELD_OFFSET(::shared::BulletConfig, no_explosion_on_hard_pushback_),
  PROTOBUF_FIELD_OFFSET(::shared::BulletConfig, startup_vfx_species_id_),
  PROTOBUF_FIELD_OFFSET(::shared::BulletConfig, ifc_),
  PROTOBUF_FIELD_OFFSET(::shared::BulletConfig, reflect_fireball_xif_not_harder_),
  PROTOBUF_FIELD_OFFSET(::shared::BulletConfig, rejects_reflection_from_another_bullet_),
  PROTOBUF_FIELD_OFFSET(::shared::BulletConfig, provides_xhard_pushback_),
  PROTOBUF_FIELD_OFFSET(::shared::BulletConfig, provides_yhard_pushback_top_),
  PROTOBUF_FIELD_OFFSET(::shared::BulletConfig, provides_yhard_pushback_bottom_),
  PROTOBUF_FIELD_OFFSET(::shared::BulletConfig, ignore_slope_deceleration_),
  PROTOBUF_FIELD_OFFSET(::shared::BulletConfig, rotate_offender_with_spin_),
  PROTOBUF_FIELD_OFFSET(::shared::BulletConfig, mh_not_trigger_on_ch_hit_),
  PROTOBUF_FIELD_OFFSET(::shared::BulletConfig, mh_not_trigger_on_harder_bullet_hit_),
  PROTOBUF_FIELD_OFFSET(::shared::BulletConfig, mh_not_trigger_on_hard_pushback_hit_),
  PROTOBUF_FIELD_OFFSET(::shared::BulletConfig, hopper_missile_),
  PROTOBUF_FIELD_OFFSET(::shared::BulletConfig, beam_rendering_),
  PROTOBUF_FIELD_OFFSET(::shared::BulletConfig, missile_search_interval_pow2minus1_),
  PROTOBUF_FIELD_OFFSET(::shared::BulletConfig, use_ch_offset_regardless_of_emission_mh_),
  PROTOBUF_FIELD_OFFSET(::shared::BulletConfig, inplace_vanish_explosion_species_id_),
  PROTOBUF_FIELD_OFFSET(::shared::BulletConfig, anim_looping_rdf_offset_),
  PROTOBUF_FIELD_OFFSET(::shared::BulletConfig, explosion_anim_looping_rdf_offset_),
  PROTOBUF_FIELD_OFFSET(::shared::BulletConfig, gauge_inc_reduction_ratio_),
  PROTOBUF_FIELD_OFFSET(::shared::BulletConfig, mh_inherits_frames_in_bl_state_),
  PROTOBUF_FIELD_OFFSET(::shared::BulletConfig, guard_breaker_extra_hit_cnt_),
  PROTOBUF_FIELD_OFFSET(::shared::BulletConfig, takes_def1as_hard_pushback_),
  PROTOBUF_FIELD_OFFSET(::shared::BulletConfig, collision_type_mask_),
  PROTOBUF_FIELD_OFFSET(::shared::BulletConfig, takes_gravity_),
  PROTOBUF_FIELD_OFFSET(::shared::BulletConfig, buff_config_),
  PROTOBUF_FIELD_OFFSET(::shared::BulletConfig, character_emit_sfx_name_),
  PROTOBUF_FIELD_OFFSET(::shared::BulletConfig, fireball_emit_sfx_name_),
  PROTOBUF_FIELD_OFFSET(::shared::BulletConfig, explosion_sfx_name_),
  PROTOBUF_FIELD_OFFSET(::shared::BulletConfig, active_sfx_name_),
  PROTOBUF_FIELD_OFFSET(::shared::BulletConfig, explosion_on_flesh_sfx_name_),
  PROTOBUF_FIELD_OFFSET(::shared::BulletConfig, explosion_on_rock_sfx_name_),
  PROTOBUF_FIELD_OFFSET(::shared::BulletConfig, explosion_on_metal_sfx_name_),
  PROTOBUF_FIELD_OFFSET(::shared::BulletConfig, explosion_on_wood_sfx_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::shared::Bullet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::shared::Bullet, bl_state_),
  PROTOBUF_FIELD_OFFSET(::shared::Bullet, frames_in_bl_state_),
  PROTOBUF_FIELD_OFFSET(::shared::Bullet, bullet_local_id_),
  PROTOBUF_FIELD_OFFSET(::shared::Bullet, originated_render_frame_id_),
  PROTOBUF_FIELD_OFFSET(::shared::Bullet, offender_join_index_),
  PROTOBUF_FIELD_OFFSET(::shared::Bullet, offender_trap_local_id_),
  PROTOBUF_FIELD_OFFSET(::shared::Bullet, team_id_),
  PROTOBUF_FIELD_OFFSET(::shared::Bullet, vert_moving_trap_local_id_upon_active_),
  PROTOBUF_FIELD_OFFSET(::shared::Bullet, repeat_quota_left_),
  PROTOBUF_FIELD_OFFSET(::shared::Bullet, remaining_hard_pushback_bounce_quota_),
  PROTOBUF_FIELD_OFFSET(::shared::Bullet, target_character_join_index_),
  PROTOBUF_FIELD_OFFSET(::shared::Bullet, damage_dealed_),
  PROTOBUF_FIELD_OFFSET(::shared::Bullet, exploded_on_ifc_),
  PROTOBUF_FIELD_OFFSET(::shared::Bullet, x_),
  PROTOBUF_FIELD_OFFSET(::shared::Bullet, y_),
  PROTOBUF_FIELD_OFFSET(::shared::Bullet, dir_x_),
  PROTOBUF_FIELD_OFFSET(::shared::Bullet, dir_y_),
  PROTOBUF_FIELD_OFFSET(::shared::Bullet, vel_x_),
  PROTOBUF_FIELD_OFFSET(::shared::Bullet, vel_y_),
  PROTOBUF_FIELD_OFFSET(::shared::Bullet, originated_x_),
  PROTOBUF_FIELD_OFFSET(::shared::Bullet, originated_y_),
  PROTOBUF_FIELD_OFFSET(::shared::Bullet, spin_cos_),
  PROTOBUF_FIELD_OFFSET(::shared::Bullet, spin_sin_),
  PROTOBUF_FIELD_OFFSET(::shared::Bullet, active_skill_hit_),
  PROTOBUF_FIELD_OFFSET(::shared::Bullet, skill_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::shared::TrapConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::shared::TrapConfig, species_id_),
  PROTOBUF_FIELD_OFFSET(::shared::TrapConfig, explosion_species_id_),
  PROTOBUF_FIELD_OFFSET(::shared::TrapConfig, explosion_frames_),
  PROTOBUF_FIELD_OFFSET(::shared::TrapConfig, blow_up_),
  PROTOBUF_FIELD_OFFSET(::shared::TrapConfig, damage_),
  PROTOBUF_FIELD_OFFSET(::shared::TrapConfig, hit_stun_frames_),
  PROTOBUF_FIELD_OFFSET(::shared::TrapConfig, hit_invinsible_frames_),
  PROTOBUF_FIELD_OFFSET(::shared::TrapConfig, deactivatable_),
  PROTOBUF_FIELD_OFFSET(::shared::TrapConfig, hardness_),
  PROTOBUF_FIELD_OFFSET(::shared::TrapConfig, deactivate_upon_triggered_),
  PROTOBUF_FIELD_OFFSET(::shared::TrapConfig, const_friction_vel_x_top_),
  PROTOBUF_FIELD_OFFSET(::shared::TrapConfig, const_friction_vel_x_bottom_),
  PROTOBUF_FIELD_OFFSET(::shared::TrapConfig, const_friction_vel_y_left_),
  PROTOBUF_FIELD_OFFSET(::shared::TrapConfig, const_friction_vel_y_right_),
  PROTOBUF_FIELD_OFFSET(::shared::TrapConfig, patrol_cue_requires_full_contain_),
  PROTOBUF_FIELD_OFFSET(::shared::TrapConfig, spin_anchor_x_),
  PROTOBUF_FIELD_OFFSET(::shared::TrapConfig, spin_anchor_y_),
  PROTOBUF_FIELD_OFFSET(::shared::TrapConfig, angular_frame_vel_cos_),
  PROTOBUF_FIELD_OFFSET(::shared::TrapConfig, angular_frame_vel_sin_),
  PROTOBUF_FIELD_OFFSET(::shared::TrapConfig, intrinsic_spin_cos_),
  PROTOBUF_FIELD_OFFSET(::shared::TrapConfig, intrinsic_spin_sin_),
  PROTOBUF_FIELD_OFFSET(::shared::TrapConfig, atk1_upon_triggered_),
  PROTOBUF_FIELD_OFFSET(::shared::TrapConfig, atk1_skill_id_),
  PROTOBUF_FIELD_OFFSET(::shared::TrapConfig, is_rotary_),
  PROTOBUF_FIELD_OFFSET(::shared::TrapConfig, no_x_flip_rendering_),
  PROTOBUF_FIELD_OFFSET(::shared::TrapConfig, species_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::shared::TrapConfigFromTiled, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::shared::TrapConfigFromTiled, species_id_),
  PROTOBUF_FIELD_OFFSET(::shared::TrapConfigFromTiled, quota_),
  PROTOBUF_FIELD_OFFSET(::shared::TrapConfigFromTiled, speed_),
  PROTOBUF_FIELD_OFFSET(::shared::TrapConfigFromTiled, dir_x_),
  PROTOBUF_FIELD_OFFSET(::shared::TrapConfigFromTiled, dir_y_),
  PROTOBUF_FIELD_OFFSET(::shared::TrapConfigFromTiled, subscribes_to_id_),
  PROTOBUF_FIELD_OFFSET(::shared::TrapConfigFromTiled, subscribes_to_id_after_initial_fire_),
  PROTOBUF_FIELD_OFFSET(::shared::TrapConfigFromTiled, subscribes_to_id_alt_),
  PROTOBUF_FIELD_OFFSET(::shared::TrapConfigFromTiled, box_cw_),
  PROTOBUF_FIELD_OFFSET(::shared::TrapConfigFromTiled, box_ch_),
  PROTOBUF_FIELD_OFFSET(::shared::TrapConfigFromTiled, init_no_angular_vel_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::shared::TrapColliderAttr, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::shared::TrapColliderAttr, hitbox_offset_x_),
  PROTOBUF_FIELD_OFFSET(::shared::TrapColliderAttr, hitbox_offset_y_),
  PROTOBUF_FIELD_OFFSET(::shared::TrapColliderAttr, hitbox_size_x_),
  PROTOBUF_FIELD_OFFSET(::shared::TrapColliderAttr, hitbox_size_y_),
  PROTOBUF_FIELD_OFFSET(::shared::TrapColliderAttr, provides_hard_pushback_),
  PROTOBUF_FIELD_OFFSET(::shared::TrapColliderAttr, provides_damage_),
  PROTOBUF_FIELD_OFFSET(::shared::TrapColliderAttr, provides_escape_),
  PROTOBUF_FIELD_OFFSET(::shared::TrapColliderAttr, provides_slip_jump_),
  PROTOBUF_FIELD_OFFSET(::shared::TrapColliderAttr, prohibits_wall_grabbing_),
  PROTOBUF_FIELD_OFFSET(::shared::TrapColliderAttr, forces_crouching_),
  PROTOBUF_FIELD_OFFSET(::shared::TrapColliderAttr, species_id_),
  PROTOBUF_FIELD_OFFSET(::shared::TrapColliderAttr, only_allows_aligned_vel_x_),
  PROTOBUF_FIELD_OFFSET(::shared::TrapColliderAttr, only_allows_aligned_vel_y_),
  PROTOBUF_FIELD_OFFSET(::shared::TrapColliderAttr, as_patrol_cue_),
  PROTOBUF_FIELD_OFFSET(::shared::TrapColliderAttr, tc_pc_),
  PROTOBUF_FIELD_OFFSET(::shared::TrapColliderAttr, trap_local_id_),
  PROTOBUF_FIELD_OFFSET(::shared::TrapColliderAttr, collision_type_mask_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::shared::Trap, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::shared::Trap, trap_local_id_),
  PROTOBUF_FIELD_OFFSET(::shared::Trap, patrol_cue_angular_vel_flip_mark_),
  PROTOBUF_FIELD_OFFSET(::shared::Trap, config_from_tiled_),
  PROTOBUF_FIELD_OFFSET(::shared::Trap, trap_state_),
  PROTOBUF_FIELD_OFFSET(::shared::Trap, frames_in_trap_state_),
  PROTOBUF_FIELD_OFFSET(::shared::Trap, is_completely_static_),
  PROTOBUF_FIELD_OFFSET(::shared::Trap, captured_by_patrol_cue_),
  PROTOBUF_FIELD_OFFSET(::shared::Trap, frames_in_patrol_cue_),
  PROTOBUF_FIELD_OFFSET(::shared::Trap, waiving_patrol_cue_id_),
  PROTOBUF_FIELD_OFFSET(::shared::Trap, waiving_spontaneous_patrol_),
  PROTOBUF_FIELD_OFFSET(::shared::Trap, subscribes_to_trigger_local_id_),
  PROTOBUF_FIELD_OFFSET(::shared::Trap, subscribes_to_trigger_local_id_alt_),
  PROTOBUF_FIELD_OFFSET(::shared::Trap, spin_cos_),
  PROTOBUF_FIELD_OFFSET(::shared::Trap, spin_sin_),
  PROTOBUF_FIELD_OFFSET(::shared::Trap, angular_frame_vel_cos_),
  PROTOBUF_FIELD_OFFSET(::shared::Trap, angular_frame_vel_sin_),
  PROTOBUF_FIELD_OFFSET(::shared::Trap, x_),
  PROTOBUF_FIELD_OFFSET(::shared::Trap, y_),
  PROTOBUF_FIELD_OFFSET(::shared::Trap, dir_x_),
  PROTOBUF_FIELD_OFFSET(::shared::Trap, dir_y_),
  PROTOBUF_FIELD_OFFSET(::shared::Trap, vel_x_),
  PROTOBUF_FIELD_OFFSET(::shared::Trap, vel_y_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::shared::TriggerConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::shared::TriggerConfig, species_id_),
  PROTOBUF_FIELD_OFFSET(::shared::TriggerConfig, species_name_),
  PROTOBUF_FIELD_OFFSET(::shared::TriggerConfig, trigger_type_),
  PROTOBUF_FIELD_OFFSET(::shared::TriggerConfig, collision_type_mask_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::shared::PeerUdpAddr, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::shared::PeerUdpAddr, ip_),
  PROTOBUF_FIELD_OFFSET(::shared::PeerUdpAddr, port_),
  PROTOBUF_FIELD_OFFSET(::shared::PeerUdpAddr, auth_key_),
  PROTOBUF_FIELD_OFFSET(::shared::PeerUdpAddr, seq_no_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::shared::BattleColliderInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::shared::BattleColliderInfo, stage_name_),
  PROTOBUF_FIELD_OFFSET(::shared::BattleColliderInfo, bound_room_id_),
  PROTOBUF_FIELD_OFFSET(::shared::BattleColliderInfo, battle_duration_frames_),
  PROTOBUF_FIELD_OFFSET(::shared::BattleColliderInfo, input_frame_upsync_delay_tolerance_),
  PROTOBUF_FIELD_OFFSET(::shared::BattleColliderInfo, max_chasing_render_frames_per_update_),
  PROTOBUF_FIELD_OFFSET(::shared::BattleColliderInfo, rollback_estimated_dt_millis_),
  PROTOBUF_FIELD_OFFSET(::shared::BattleColliderInfo, rollback_estimated_dt_nanos_),
  PROTOBUF_FIELD_OFFSET(::shared::BattleColliderInfo, render_buffer_size_),
  PROTOBUF_FIELD_OFFSET(::shared::BattleColliderInfo, collision_min_step_),
  PROTOBUF_FIELD_OFFSET(::shared::BattleColliderInfo, bound_room_capacity_),
  PROTOBUF_FIELD_OFFSET(::shared::BattleColliderInfo, prealloc_npc_capacity_),
  PROTOBUF_FIELD_OFFSET(::shared::BattleColliderInfo, prealloc_bullet_capacity_),
  PROTOBUF_FIELD_OFFSET(::shared::BattleColliderInfo, battle_udp_tunnel_),
  PROTOBUF_FIELD_OFFSET(::shared::BattleColliderInfo, frame_log_enabled_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::shared::RenderFrame, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::shared::RenderFrame, id_),
  PROTOBUF_FIELD_OFFSET(::shared::RenderFrame, players_arr_),
  PROTOBUF_FIELD_OFFSET(::shared::RenderFrame, countdown_nanos_),
  PROTOBUF_FIELD_OFFSET(::shared::RenderFrame, bullets_),
  PROTOBUF_FIELD_OFFSET(::shared::RenderFrame, npcs_arr_),
  PROTOBUF_FIELD_OFFSET(::shared::RenderFrame, traps_arr_),
  PROTOBUF_FIELD_OFFSET(::shared::RenderFrame, triggers_arr_),
  PROTOBUF_FIELD_OFFSET(::shared::RenderFrame, pickables_),
  PROTOBUF_FIELD_OFFSET(::shared::RenderFrame, backend_unconfirmed_mask_),
  PROTOBUF_FIELD_OFFSET(::shared::RenderFrame, should_force_resync_),
  PROTOBUF_FIELD_OFFSET(::shared::RenderFrame, species_id_list_),
  PROTOBUF_FIELD_OFFSET(::shared::RenderFrame, bullet_local_id_counter_),
  PROTOBUF_FIELD_OFFSET(::shared::RenderFrame, npc_local_id_counter_),
  PROTOBUF_FIELD_OFFSET(::shared::RenderFrame, participant_change_id_),
  PROTOBUF_FIELD_OFFSET(::shared::RenderFrame, pickable_local_id_counter_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::shared::WsResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::shared::WsResp, ret_),
  PROTOBUF_FIELD_OFFSET(::shared::WsResp, act_),
  PROTOBUF_FIELD_OFFSET(::shared::WsResp, rdf_),
  PROTOBUF_FIELD_OFFSET(::shared::WsResp, input_frame_downsync_batch_),
  PROTOBUF_FIELD_OFFSET(::shared::WsResp, bci_frame_),
  PROTOBUF_FIELD_OFFSET(::shared::WsResp, peer_join_index_),
  PROTOBUF_FIELD_OFFSET(::shared::WsResp, peer_udp_addr_list_),
  PROTOBUF_FIELD_OFFSET(::shared::WsResp, err_msg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::shared::Skill, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::shared::Skill, battle_local_id_),
  PROTOBUF_FIELD_OFFSET(::shared::Skill, recovery_frames_),
  PROTOBUF_FIELD_OFFSET(::shared::Skill, recovery_frames_on_block_),
  PROTOBUF_FIELD_OFFSET(::shared::Skill, recovery_frames_on_hit_),
  PROTOBUF_FIELD_OFFSET(::shared::Skill, trigger_type_),
  PROTOBUF_FIELD_OFFSET(::shared::Skill, bound_ch_state_),
  PROTOBUF_FIELD_OFFSET(::shared::Skill, bound_ch_state_on_hit_),
  PROTOBUF_FIELD_OFFSET(::shared::Skill, mp_delta_),
  PROTOBUF_FIELD_OFFSET(::shared::Skill, id_),
  PROTOBUF_FIELD_OFFSET(::shared::Skill, hits_),
  PROTOBUF_FIELD_OFFSET(::shared::Skill, self_non_stock_buff_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::shared::FrameLog, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::shared::FrameLog, rdf_),
  PROTOBUF_FIELD_OFFSET(::shared::FrameLog, actually_used_idf_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::shared::BattleResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::shared::BattleResult, winner_join_index_),
  PROTOBUF_FIELD_OFFSET(::shared::BattleResult, winner_bullet_team_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::shared::DebuffConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::shared::DebuffConfig, species_id_),
  PROTOBUF_FIELD_OFFSET(::shared::DebuffConfig, stock_type_),
  PROTOBUF_FIELD_OFFSET(::shared::DebuffConfig, stock_),
  PROTOBUF_FIELD_OFFSET(::shared::DebuffConfig, type_),
  PROTOBUF_FIELD_OFFSET(::shared::DebuffConfig, arr_idx_),
  PROTOBUF_FIELD_OFFSET(::shared::DebuffConfig, impact_per_interval_),
  PROTOBUF_FIELD_OFFSET(::shared::DebuffConfig, impact_interval_),
  PROTOBUF_FIELD_OFFSET(::shared::DebuffConfig, friction_vel_x_),
  PROTOBUF_FIELD_OFFSET(::shared::DebuffConfig, friction_vel_y_),
  PROTOBUF_FIELD_OFFSET(::shared::DebuffConfig, friction_acc_x_),
  PROTOBUF_FIELD_OFFSET(::shared::DebuffConfig, friction_acc_y_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::shared::BuffConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::shared::BuffConfig, species_id_),
  PROTOBUF_FIELD_OFFSET(::shared::BuffConfig, stock_type_),
  PROTOBUF_FIELD_OFFSET(::shared::BuffConfig, stock_),
  PROTOBUF_FIELD_OFFSET(::shared::BuffConfig, speed_delta_),
  PROTOBUF_FIELD_OFFSET(::shared::BuffConfig, hitbox_size_x_delta_),
  PROTOBUF_FIELD_OFFSET(::shared::BuffConfig, hitbox_size_y_delta_),
  PROTOBUF_FIELD_OFFSET(::shared::BuffConfig, damage_delta_),
  PROTOBUF_FIELD_OFFSET(::shared::BuffConfig, damage_delta_by_percentage_),
  PROTOBUF_FIELD_OFFSET(::shared::BuffConfig, character_hardness_delta_),
  PROTOBUF_FIELD_OFFSET(::shared::BuffConfig, melee_hardness_delta_),
  PROTOBUF_FIELD_OFFSET(::shared::BuffConfig, fireball_hardness_delta_),
  PROTOBUF_FIELD_OFFSET(::shared::BuffConfig, invinsible_),
  PROTOBUF_FIELD_OFFSET(::shared::BuffConfig, xform_ch_species_id_),
  PROTOBUF_FIELD_OFFSET(::shared::BuffConfig, repel_soft_pushback_),
  PROTOBUF_FIELD_OFFSET(::shared::BuffConfig, omit_gravity_),
  PROTOBUF_FIELD_OFFSET(::shared::BuffConfig, auto_def1_),
  PROTOBUF_FIELD_OFFSET(::shared::BuffConfig, associated_debuffs_),
  PROTOBUF_FIELD_OFFSET(::shared::BuffConfig, character_vfx_species_id_),
  PROTOBUF_FIELD_OFFSET(::shared::BuffConfig, is_pixelated_vfx_on_character_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::shared::Buff, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::shared::Buff, species_id_),
  PROTOBUF_FIELD_OFFSET(::shared::Buff, stock_),
  PROTOBUF_FIELD_OFFSET(::shared::Buff, originated_render_frame_id_),
  PROTOBUF_FIELD_OFFSET(::shared::Buff, orig_ch_species_id_),
  PROTOBUF_FIELD_OFFSET(::shared::Buff, orig_repel_soft_pushback_),
  PROTOBUF_FIELD_OFFSET(::shared::Buff, orig_omit_gravity_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::shared::Debuff, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::shared::Debuff, species_id_),
  PROTOBUF_FIELD_OFFSET(::shared::Debuff, stock_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::shared::BulletImmuneRecord, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::shared::BulletImmuneRecord, bullet_local_id_),
  PROTOBUF_FIELD_OFFSET(::shared::BulletImmuneRecord, remaining_lifetime_rdf_count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::shared::ConsumableConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::shared::ConsumableConfig, species_id_),
  PROTOBUF_FIELD_OFFSET(::shared::ConsumableConfig, refill_delta_),
  PROTOBUF_FIELD_OFFSET(::shared::ConsumableConfig, vfx_id_on_picker_),
  PROTOBUF_FIELD_OFFSET(::shared::ConsumableConfig, is_pixelated_vfx_on_picker_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::shared::PickableSkillConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::shared::PickableSkillConfig, skill_id_),
  PROTOBUF_FIELD_OFFSET(::shared::PickableSkillConfig, vfx_id_on_picker_),
  PROTOBUF_FIELD_OFFSET(::shared::PickableSkillConfig, is_pixelated_vfx_on_picker_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::shared::InventorySlot, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::shared::InventorySlot, stock_type_),
  PROTOBUF_FIELD_OFFSET(::shared::InventorySlot, quota_),
  PROTOBUF_FIELD_OFFSET(::shared::InventorySlot, frames_to_recover_),
  PROTOBUF_FIELD_OFFSET(::shared::InventorySlot, default_quota_),
  PROTOBUF_FIELD_OFFSET(::shared::InventorySlot, default_frames_to_recover_),
  PROTOBUF_FIELD_OFFSET(::shared::InventorySlot, buff_species_id_),
  PROTOBUF_FIELD_OFFSET(::shared::InventorySlot, skill_id_),
  PROTOBUF_FIELD_OFFSET(::shared::InventorySlot, skill_id_air_),
  PROTOBUF_FIELD_OFFSET(::shared::InventorySlot, gauge_charged_),
  PROTOBUF_FIELD_OFFSET(::shared::InventorySlot, gauge_required_),
  PROTOBUF_FIELD_OFFSET(::shared::InventorySlot, full_charge_buff_species_id_),
  PROTOBUF_FIELD_OFFSET(::shared::InventorySlot, full_charge_skill_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::shared::Inventory, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::shared::Inventory, slots_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::shared::BattleEquipment, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::shared::BattleEquipment, species_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::shared::PlayerSettings, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::shared::PlayerSettings, sound_volume_),
  PROTOBUF_FIELD_OFFSET(::shared::PlayerRegionProgress_RemainingDependenciesEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::shared::PlayerRegionProgress_RemainingDependenciesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::shared::PlayerRegionProgress_RemainingDependenciesEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::shared::PlayerRegionProgress_RemainingDependenciesEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::shared::PlayerRegionProgress_RemovedDependenciesEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::shared::PlayerRegionProgress_RemovedDependenciesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::shared::PlayerRegionProgress_RemovedDependenciesEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::shared::PlayerRegionProgress_RemovedDependenciesEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::shared::PlayerRegionProgress, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::shared::PlayerRegionProgress, region_id_),
  PROTOBUF_FIELD_OFFSET(::shared::PlayerRegionProgress, completed_level_count_),
  PROTOBUF_FIELD_OFFSET(::shared::PlayerRegionProgress, remaining_dependencies_),
  PROTOBUF_FIELD_OFFSET(::shared::PlayerRegionProgress, removed_dependencies_),
  PROTOBUF_FIELD_OFFSET(::shared::PlayerLevelProgress_RemainingDependenciesEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::shared::PlayerLevelProgress_RemainingDependenciesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::shared::PlayerLevelProgress_RemainingDependenciesEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::shared::PlayerLevelProgress_RemainingDependenciesEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::shared::PlayerLevelProgress_RemovedDependenciesEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::shared::PlayerLevelProgress_RemovedDependenciesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::shared::PlayerLevelProgress_RemovedDependenciesEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::shared::PlayerLevelProgress_RemovedDependenciesEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::shared::PlayerLevelProgress, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::shared::PlayerLevelProgress, region_id_),
  PROTOBUF_FIELD_OFFSET(::shared::PlayerLevelProgress, level_id_),
  PROTOBUF_FIELD_OFFSET(::shared::PlayerLevelProgress, highest_score_),
  PROTOBUF_FIELD_OFFSET(::shared::PlayerLevelProgress, shortest_finish_time_at_highest_score_),
  PROTOBUF_FIELD_OFFSET(::shared::PlayerLevelProgress, character_species_id_at_highest_score_),
  PROTOBUF_FIELD_OFFSET(::shared::PlayerLevelProgress, shortest_finish_time_),
  PROTOBUF_FIELD_OFFSET(::shared::PlayerLevelProgress, score_at_shortest_finish_time_),
  PROTOBUF_FIELD_OFFSET(::shared::PlayerLevelProgress, character_species_id_at_shortest_finish_time_),
  PROTOBUF_FIELD_OFFSET(::shared::PlayerLevelProgress, remaining_dependencies_),
  PROTOBUF_FIELD_OFFSET(::shared::PlayerLevelProgress, removed_dependencies_),
  PROTOBUF_FIELD_OFFSET(::shared::PlayerChUnlockProgress_RemainingDependenciesEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::shared::PlayerChUnlockProgress_RemainingDependenciesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::shared::PlayerChUnlockProgress_RemainingDependenciesEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::shared::PlayerChUnlockProgress_RemainingDependenciesEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::shared::PlayerChUnlockProgress_RemovedDependenciesEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::shared::PlayerChUnlockProgress_RemovedDependenciesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::shared::PlayerChUnlockProgress_RemovedDependenciesEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::shared::PlayerChUnlockProgress_RemovedDependenciesEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::shared::PlayerChUnlockProgress, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::shared::PlayerChUnlockProgress, species_id_),
  PROTOBUF_FIELD_OFFSET(::shared::PlayerChUnlockProgress, remaining_dependencies_),
  PROTOBUF_FIELD_OFFSET(::shared::PlayerChUnlockProgress, removed_dependencies_),
  PROTOBUF_FIELD_OFFSET(::shared::PlayerStoryProgress_RegionProgressDictEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::shared::PlayerStoryProgress_RegionProgressDictEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::shared::PlayerStoryProgress_RegionProgressDictEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::shared::PlayerStoryProgress_RegionProgressDictEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::shared::PlayerStoryProgress_LevelProgressDictEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::shared::PlayerStoryProgress_LevelProgressDictEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::shared::PlayerStoryProgress_LevelProgressDictEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::shared::PlayerStoryProgress_LevelProgressDictEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::shared::PlayerStoryProgress_ChUnlockProgressDictEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::shared::PlayerStoryProgress_ChUnlockProgressDictEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::shared::PlayerStoryProgress_ChUnlockProgressDictEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::shared::PlayerStoryProgress_ChUnlockProgressDictEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::shared::PlayerStoryProgress, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::shared::PlayerStoryProgress, region_progress_dict_),
  PROTOBUF_FIELD_OFFSET(::shared::PlayerStoryProgress, level_progress_dict_),
  PROTOBUF_FIELD_OFFSET(::shared::PlayerStoryProgress, cursor_region_id_),
  PROTOBUF_FIELD_OFFSET(::shared::PlayerStoryProgress, cursor_level_id_),
  PROTOBUF_FIELD_OFFSET(::shared::PlayerStoryProgress, view_),
  PROTOBUF_FIELD_OFFSET(::shared::PlayerStoryProgress, saved_at_gmt_millis_),
  PROTOBUF_FIELD_OFFSET(::shared::PlayerStoryProgress, ch_unlock_progress_dict_),
  PROTOBUF_FIELD_OFFSET(::shared::PlayerOnlineArenaProgress_ChUnlockProgressDictEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::shared::PlayerOnlineArenaProgress_ChUnlockProgressDictEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::shared::PlayerOnlineArenaProgress_ChUnlockProgressDictEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::shared::PlayerOnlineArenaProgress_ChUnlockProgressDictEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::shared::PlayerOnlineArenaProgress, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::shared::PlayerOnlineArenaProgress, saved_at_gmt_millis_),
  PROTOBUF_FIELD_OFFSET(::shared::PlayerOnlineArenaProgress, player_id_),
  PROTOBUF_FIELD_OFFSET(::shared::PlayerOnlineArenaProgress, ch_unlock_progress_dict_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::shared::StoryPointDialogLine, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::shared::StoryPointDialogLine, narrator_join_index_),
  PROTOBUF_FIELD_OFFSET(::shared::StoryPointDialogLine, narrator_species_id_),
  PROTOBUF_FIELD_OFFSET(::shared::StoryPointDialogLine, content_),
  PROTOBUF_FIELD_OFFSET(::shared::StoryPointDialogLine, down_or_not_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::shared::StoryPointStep, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::shared::StoryPointStep, lines_),
  PROTOBUF_FIELD_OFFSET(::shared::StoryPointStep, nonctrl_alive_rdf_count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::shared::StoryPoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::shared::StoryPoint, steps_),
  PROTOBUF_FIELD_OFFSET(::shared::StoryPoint, nonctrl_),
  PROTOBUF_FIELD_OFFSET(::shared::StoryPoint, cutscene_name_),
  PROTOBUF_FIELD_OFFSET(::shared::LevelStory_PointsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::shared::LevelStory_PointsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::shared::LevelStory_PointsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::shared::LevelStory_PointsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::shared::LevelStory, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::shared::LevelStory, points_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::shared::SerializableConvexPolygon, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::shared::SerializableConvexPolygon, anchor_x_),
  PROTOBUF_FIELD_OFFSET(::shared::SerializableConvexPolygon, anchor_y_),
  PROTOBUF_FIELD_OFFSET(::shared::SerializableConvexPolygon, points_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::shared::SerializedCompletelyStaticPatrolCueCollider, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::shared::SerializedCompletelyStaticPatrolCueCollider, attr_),
  PROTOBUF_FIELD_OFFSET(::shared::SerializedCompletelyStaticPatrolCueCollider, polygon_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::shared::SerializedCompletelyStaticTrapCollider, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::shared::SerializedCompletelyStaticTrapCollider, attr_),
  PROTOBUF_FIELD_OFFSET(::shared::SerializedCompletelyStaticTrapCollider, polygon_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::shared::SerializedCompletelyStaticTriggerCollider, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::shared::SerializedCompletelyStaticTriggerCollider, attr_),
  PROTOBUF_FIELD_OFFSET(::shared::SerializedCompletelyStaticTriggerCollider, polygon_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::shared::TrapColliderAttrArray, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::shared::TrapColliderAttrArray, list_),
  PROTOBUF_FIELD_OFFSET(::shared::SerializedTrapLocalIdToColliderAttrs_DictEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::shared::SerializedTrapLocalIdToColliderAttrs_DictEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::shared::SerializedTrapLocalIdToColliderAttrs_DictEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::shared::SerializedTrapLocalIdToColliderAttrs_DictEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::shared::SerializedTrapLocalIdToColliderAttrs, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::shared::SerializedTrapLocalIdToColliderAttrs, dict_),
  PROTOBUF_FIELD_OFFSET(::shared::SerializedTriggerEditorIdToLocalId_DictEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::shared::SerializedTriggerEditorIdToLocalId_DictEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::shared::SerializedTriggerEditorIdToLocalId_DictEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::shared::SerializedTriggerEditorIdToLocalId_DictEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::shared::SerializedTriggerEditorIdToLocalId_Dict2Entry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::shared::SerializedTriggerEditorIdToLocalId_Dict2Entry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::shared::SerializedTriggerEditorIdToLocalId_Dict2Entry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::shared::SerializedTriggerEditorIdToLocalId_Dict2Entry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::shared::SerializedTriggerEditorIdToLocalId, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::shared::SerializedTriggerEditorIdToLocalId, dict_),
  PROTOBUF_FIELD_OFFSET(::shared::SerializedTriggerEditorIdToLocalId, dict2_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::shared::PickableConfigFromTiled, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::shared::PickableConfigFromTiled, init_virtual_grid_x_),
  PROTOBUF_FIELD_OFFSET(::shared::PickableConfigFromTiled, init_virtual_grid_y_),
  PROTOBUF_FIELD_OFFSET(::shared::PickableConfigFromTiled, takes_gravity_),
  PROTOBUF_FIELD_OFFSET(::shared::PickableConfigFromTiled, first_show_rdf_id_),
  PROTOBUF_FIELD_OFFSET(::shared::PickableConfigFromTiled, recur_quota_),
  PROTOBUF_FIELD_OFFSET(::shared::PickableConfigFromTiled, recur_interval_rdf_count_),
  PROTOBUF_FIELD_OFFSET(::shared::PickableConfigFromTiled, lifetime_rdf_count_per_occurrence_),
  PROTOBUF_FIELD_OFFSET(::shared::PickableConfigFromTiled, pickup_type_),
  PROTOBUF_FIELD_OFFSET(::shared::PickableConfigFromTiled, stock_quota_per_occurrence_),
  PROTOBUF_FIELD_OFFSET(::shared::PickableConfigFromTiled, subscription_id_),
  PROTOBUF_FIELD_OFFSET(::shared::PickableConfigFromTiled, vfx_species_id_),
  PROTOBUF_FIELD_OFFSET(::shared::PickableConfigFromTiled, consumable_species_id_),
  PROTOBUF_FIELD_OFFSET(::shared::PickableConfigFromTiled, buff_species_id_),
  PROTOBUF_FIELD_OFFSET(::shared::PickableConfigFromTiled, skill_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::shared::Pickable, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::shared::Pickable, pickable_local_id_),
  PROTOBUF_FIELD_OFFSET(::shared::Pickable, x_),
  PROTOBUF_FIELD_OFFSET(::shared::Pickable, y_),
  PROTOBUF_FIELD_OFFSET(::shared::Pickable, config_from_tiled_),
  PROTOBUF_FIELD_OFFSET(::shared::Pickable, remaining_lifetime_rdf_count_),
  PROTOBUF_FIELD_OFFSET(::shared::Pickable, remaining_recur_quota_),
  PROTOBUF_FIELD_OFFSET(::shared::Pickable, vel_x_),
  PROTOBUF_FIELD_OFFSET(::shared::Pickable, vel_y_),
  PROTOBUF_FIELD_OFFSET(::shared::Pickable, pk_state_),
  PROTOBUF_FIELD_OFFSET(::shared::Pickable, frames_in_pk_state_),
  PROTOBUF_FIELD_OFFSET(::shared::Pickable, picked_by_join_index_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::shared::InjectedCmdConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::shared::InjectedCmdConfig, cutoff_rdf_frame_id_),
  PROTOBUF_FIELD_OFFSET(::shared::InjectedCmdConfig, op_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::shared::CharacterSpawnerConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::shared::CharacterSpawnerConfig, cutoff_rdf_frame_id_),
  PROTOBUF_FIELD_OFFSET(::shared::CharacterSpawnerConfig, species_id_list_),
  PROTOBUF_FIELD_OFFSET(::shared::CharacterSpawnerConfig, init_op_list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::shared::PickableSpawnerConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::shared::PickableSpawnerConfig, cutoff_rdf_frame_id_),
  PROTOBUF_FIELD_OFFSET(::shared::PickableSpawnerConfig, species_id_list_),
  PROTOBUF_FIELD_OFFSET(::shared::PickableSpawnerConfig, init_op_list_),
  PROTOBUF_FIELD_OFFSET(::shared::PickableSpawnerConfig, pickup_type_list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::shared::TriggerColliderAttr, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::shared::TriggerColliderAttr, trigger_local_id_),
  PROTOBUF_FIELD_OFFSET(::shared::TriggerColliderAttr, species_id_),
  PROTOBUF_FIELD_OFFSET(::shared::TriggerConfigFromTiled_BossSpeciesSetEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::shared::TriggerConfigFromTiled_BossSpeciesSetEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::shared::TriggerConfigFromTiled_BossSpeciesSetEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::shared::TriggerConfigFromTiled_BossSpeciesSetEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::shared::TriggerConfigFromTiled, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::shared::TriggerConfigFromTiled, editor_id_),
  PROTOBUF_FIELD_OFFSET(::shared::TriggerConfigFromTiled, species_id_),
  PROTOBUF_FIELD_OFFSET(::shared::TriggerConfigFromTiled, delayed_frames_),
  PROTOBUF_FIELD_OFFSET(::shared::TriggerConfigFromTiled, recovery_frames_),
  PROTOBUF_FIELD_OFFSET(::shared::TriggerConfigFromTiled, bullet_team_id_),
  PROTOBUF_FIELD_OFFSET(::shared::TriggerConfigFromTiled, sub_cycle_trigger_frames_),
  PROTOBUF_FIELD_OFFSET(::shared::TriggerConfigFromTiled, sub_cycle_quota_),
  PROTOBUF_FIELD_OFFSET(::shared::TriggerConfigFromTiled, quota_cap_),
  PROTOBUF_FIELD_OFFSET(::shared::TriggerConfigFromTiled, subscribes_to_id_list_),
  PROTOBUF_FIELD_OFFSET(::shared::TriggerConfigFromTiled, subscribes_to_exhausted_id_list_),
  PROTOBUF_FIELD_OFFSET(::shared::TriggerConfigFromTiled, new_revival_x_),
  PROTOBUF_FIELD_OFFSET(::shared::TriggerConfigFromTiled, new_revival_y_),
  PROTOBUF_FIELD_OFFSET(::shared::TriggerConfigFromTiled, init_dir_x_),
  PROTOBUF_FIELD_OFFSET(::shared::TriggerConfigFromTiled, init_dir_y_),
  PROTOBUF_FIELD_OFFSET(::shared::TriggerConfigFromTiled, publishing_evt_mask_upon_exhausted_),
  PROTOBUF_FIELD_OFFSET(::shared::TriggerConfigFromTiled, character_spawner_time_seq_),
  PROTOBUF_FIELD_OFFSET(::shared::TriggerConfigFromTiled, pickable_spawner_time_seq_),
  PROTOBUF_FIELD_OFFSET(::shared::TriggerConfigFromTiled, force_ctrl_rdf_count_),
  PROTOBUF_FIELD_OFFSET(::shared::TriggerConfigFromTiled, force_ctrl_cmd_),
  PROTOBUF_FIELD_OFFSET(::shared::TriggerConfigFromTiled, reload_colliders_in_new_phase_),
  PROTOBUF_FIELD_OFFSET(::shared::TriggerConfigFromTiled, story_point_id_),
  PROTOBUF_FIELD_OFFSET(::shared::TriggerConfigFromTiled, bgm_id_),
  PROTOBUF_FIELD_OFFSET(::shared::TriggerConfigFromTiled, boss_species_set_),
  PROTOBUF_FIELD_OFFSET(::shared::TriggerConfigFromTiled, is_boss_savepoint_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::shared::Trigger, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::shared::Trigger, editor_id_),
  PROTOBUF_FIELD_OFFSET(::shared::Trigger, trigger_local_id_),
  PROTOBUF_FIELD_OFFSET(::shared::Trigger, frames_to_fire_),
  PROTOBUF_FIELD_OFFSET(::shared::Trigger, frames_to_recover_),
  PROTOBUF_FIELD_OFFSET(::shared::Trigger, quota_),
  PROTOBUF_FIELD_OFFSET(::shared::Trigger, bullet_team_id_),
  PROTOBUF_FIELD_OFFSET(::shared::Trigger, dir_x_),
  PROTOBUF_FIELD_OFFSET(::shared::Trigger, sub_cycle_quota_left_),
  PROTOBUF_FIELD_OFFSET(::shared::Trigger, state_),
  PROTOBUF_FIELD_OFFSET(::shared::Trigger, frames_in_state_),
  PROTOBUF_FIELD_OFFSET(::shared::Trigger, x_),
  PROTOBUF_FIELD_OFFSET(::shared::Trigger, y_),
  PROTOBUF_FIELD_OFFSET(::shared::Trigger, demanded_evt_mask_),
  PROTOBUF_FIELD_OFFSET(::shared::Trigger, fulfilled_evt_mask_),
  PROTOBUF_FIELD_OFFSET(::shared::Trigger, wave_npc_killed_evt_mask_counter_),
  PROTOBUF_FIELD_OFFSET(::shared::Trigger, subscriber_local_ids_mask_),
  PROTOBUF_FIELD_OFFSET(::shared::Trigger, exhaust_subscriber_local_ids_mask_),
  PROTOBUF_FIELD_OFFSET(::shared::Trigger, offender_join_index_),
  PROTOBUF_FIELD_OFFSET(::shared::Trigger, offender_bullet_team_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::shared::PlayerMetaInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::shared::PlayerMetaInfo, player_id_),
  PROTOBUF_FIELD_OFFSET(::shared::PlayerMetaInfo, join_index_),
  PROTOBUF_FIELD_OFFSET(::shared::PlayerMetaInfo, bullet_team_id_),
  PROTOBUF_FIELD_OFFSET(::shared::PlayerMetaInfo, species_id_),
  PROTOBUF_FIELD_OFFSET(::shared::PlayerMetaInfo, room_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::shared::RpcEndpointHolder, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::shared::RpcEndpointHolder, id_),
  PROTOBUF_FIELD_OFFSET(::shared::RpcEndpointHolder, external_addr_host_),
  PROTOBUF_FIELD_OFFSET(::shared::RpcEndpointHolder, external_addr_port_),
  PROTOBUF_FIELD_OFFSET(::shared::RpcEndpointHolder, internal_addr_host_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::shared::AuthTokenUnderlying)},
  { 9, -1, sizeof(::shared::AuthResult)},
  { 24, -1, sizeof(::shared::SteamAuthenticateUserTicketPayloadParams)},
  { 34, -1, sizeof(::shared::SteamAuthenticateUserTicketPayloadResp)},
  { 40, -1, sizeof(::shared::SteamAuthenticateUserTicketResult)},
  { 46, -1, sizeof(::shared::BattleInvitation)},
  { 56, 63, sizeof(::shared::CharacterConfig_LoopingChStatesEntry_DoNotUse)},
  { 65, -1, sizeof(::shared::CharacterConfig)},
  { 173, -1, sizeof(::shared::CharacterDownsync)},
  { 259, -1, sizeof(::shared::InputFrameDecoded)},
  { 271, -1, sizeof(::shared::InputFrameUpsync)},
  { 279, -1, sizeof(::shared::InputFrameDownsync)},
  { 288, -1, sizeof(::shared::WsReq)},
  { 311, -1, sizeof(::shared::InputBufferSnapshot)},
  { 321, -1, sizeof(::shared::PatrolCue)},
  { 336, -1, sizeof(::shared::VfxConfig)},
  { 349, 356, sizeof(::shared::BulletConfig_CancelTransitEntry_DoNotUse)},
  { 358, -1, sizeof(::shared::BulletConfig)},
  { 470, -1, sizeof(::shared::Bullet)},
  { 500, -1, sizeof(::shared::TrapConfig)},
  { 531, -1, sizeof(::shared::TrapConfigFromTiled)},
  { 547, -1, sizeof(::shared::TrapColliderAttr)},
  { 569, -1, sizeof(::shared::Trap)},
  { 596, -1, sizeof(::shared::TriggerConfig)},
  { 605, -1, sizeof(::shared::PeerUdpAddr)},
  { 614, -1, sizeof(::shared::BattleColliderInfo)},
  { 633, -1, sizeof(::shared::RenderFrame)},
  { 653, -1, sizeof(::shared::WsResp)},
  { 666, -1, sizeof(::shared::Skill)},
  { 682, -1, sizeof(::shared::FrameLog)},
  { 689, -1, sizeof(::shared::BattleResult)},
  { 696, -1, sizeof(::shared::DebuffConfig)},
  { 712, -1, sizeof(::shared::BuffConfig)},
  { 736, -1, sizeof(::shared::Buff)},
  { 747, -1, sizeof(::shared::Debuff)},
  { 754, -1, sizeof(::shared::BulletImmuneRecord)},
  { 761, -1, sizeof(::shared::ConsumableConfig)},
  { 770, -1, sizeof(::shared::PickableSkillConfig)},
  { 778, -1, sizeof(::shared::InventorySlot)},
  { 795, -1, sizeof(::shared::Inventory)},
  { 801, -1, sizeof(::shared::BattleEquipment)},
  { 807, -1, sizeof(::shared::PlayerSettings)},
  { 813, 820, sizeof(::shared::PlayerRegionProgress_RemainingDependenciesEntry_DoNotUse)},
  { 822, 829, sizeof(::shared::PlayerRegionProgress_RemovedDependenciesEntry_DoNotUse)},
  { 831, -1, sizeof(::shared::PlayerRegionProgress)},
  { 840, 847, sizeof(::shared::PlayerLevelProgress_RemainingDependenciesEntry_DoNotUse)},
  { 849, 856, sizeof(::shared::PlayerLevelProgress_RemovedDependenciesEntry_DoNotUse)},
  { 858, -1, sizeof(::shared::PlayerLevelProgress)},
  { 873, 880, sizeof(::shared::PlayerChUnlockProgress_RemainingDependenciesEntry_DoNotUse)},
  { 882, 889, sizeof(::shared::PlayerChUnlockProgress_RemovedDependenciesEntry_DoNotUse)},
  { 891, -1, sizeof(::shared::PlayerChUnlockProgress)},
  { 899, 906, sizeof(::shared::PlayerStoryProgress_RegionProgressDictEntry_DoNotUse)},
  { 908, 915, sizeof(::shared::PlayerStoryProgress_LevelProgressDictEntry_DoNotUse)},
  { 917, 924, sizeof(::shared::PlayerStoryProgress_ChUnlockProgressDictEntry_DoNotUse)},
  { 926, -1, sizeof(::shared::PlayerStoryProgress)},
  { 938, 945, sizeof(::shared::PlayerOnlineArenaProgress_ChUnlockProgressDictEntry_DoNotUse)},
  { 947, -1, sizeof(::shared::PlayerOnlineArenaProgress)},
  { 955, -1, sizeof(::shared::StoryPointDialogLine)},
  { 964, -1, sizeof(::shared::StoryPointStep)},
  { 971, -1, sizeof(::shared::StoryPoint)},
  { 979, 986, sizeof(::shared::LevelStory_PointsEntry_DoNotUse)},
  { 988, -1, sizeof(::shared::LevelStory)},
  { 994, -1, sizeof(::shared::SerializableConvexPolygon)},
  { 1002, -1, sizeof(::shared::SerializedCompletelyStaticPatrolCueCollider)},
  { 1009, -1, sizeof(::shared::SerializedCompletelyStaticTrapCollider)},
  { 1016, -1, sizeof(::shared::SerializedCompletelyStaticTriggerCollider)},
  { 1023, -1, sizeof(::shared::TrapColliderAttrArray)},
  { 1029, 1036, sizeof(::shared::SerializedTrapLocalIdToColliderAttrs_DictEntry_DoNotUse)},
  { 1038, -1, sizeof(::shared::SerializedTrapLocalIdToColliderAttrs)},
  { 1044, 1051, sizeof(::shared::SerializedTriggerEditorIdToLocalId_DictEntry_DoNotUse)},
  { 1053, 1060, sizeof(::shared::SerializedTriggerEditorIdToLocalId_Dict2Entry_DoNotUse)},
  { 1062, -1, sizeof(::shared::SerializedTriggerEditorIdToLocalId)},
  { 1069, -1, sizeof(::shared::PickableConfigFromTiled)},
  { 1088, -1, sizeof(::shared::Pickable)},
  { 1104, -1, sizeof(::shared::InjectedCmdConfig)},
  { 1111, -1, sizeof(::shared::CharacterSpawnerConfig)},
  { 1119, -1, sizeof(::shared::PickableSpawnerConfig)},
  { 1128, -1, sizeof(::shared::TriggerColliderAttr)},
  { 1135, 1142, sizeof(::shared::TriggerConfigFromTiled_BossSpeciesSetEntry_DoNotUse)},
  { 1144, -1, sizeof(::shared::TriggerConfigFromTiled)},
  { 1173, -1, sizeof(::shared::Trigger)},
  { 1197, -1, sizeof(::shared::PlayerMetaInfo)},
  { 1207, -1, sizeof(::shared::RpcEndpointHolder)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::shared::_AuthTokenUnderlying_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::shared::_AuthResult_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::shared::_SteamAuthenticateUserTicketPayloadParams_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::shared::_SteamAuthenticateUserTicketPayloadResp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::shared::_SteamAuthenticateUserTicketResult_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::shared::_BattleInvitation_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::shared::_CharacterConfig_LoopingChStatesEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::shared::_CharacterConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::shared::_CharacterDownsync_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::shared::_InputFrameDecoded_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::shared::_InputFrameUpsync_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::shared::_InputFrameDownsync_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::shared::_WsReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::shared::_InputBufferSnapshot_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::shared::_PatrolCue_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::shared::_VfxConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::shared::_BulletConfig_CancelTransitEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::shared::_BulletConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::shared::_Bullet_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::shared::_TrapConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::shared::_TrapConfigFromTiled_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::shared::_TrapColliderAttr_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::shared::_Trap_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::shared::_TriggerConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::shared::_PeerUdpAddr_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::shared::_BattleColliderInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::shared::_RenderFrame_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::shared::_WsResp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::shared::_Skill_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::shared::_FrameLog_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::shared::_BattleResult_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::shared::_DebuffConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::shared::_BuffConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::shared::_Buff_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::shared::_Debuff_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::shared::_BulletImmuneRecord_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::shared::_ConsumableConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::shared::_PickableSkillConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::shared::_InventorySlot_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::shared::_Inventory_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::shared::_BattleEquipment_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::shared::_PlayerSettings_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::shared::_PlayerRegionProgress_RemainingDependenciesEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::shared::_PlayerRegionProgress_RemovedDependenciesEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::shared::_PlayerRegionProgress_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::shared::_PlayerLevelProgress_RemainingDependenciesEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::shared::_PlayerLevelProgress_RemovedDependenciesEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::shared::_PlayerLevelProgress_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::shared::_PlayerChUnlockProgress_RemainingDependenciesEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::shared::_PlayerChUnlockProgress_RemovedDependenciesEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::shared::_PlayerChUnlockProgress_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::shared::_PlayerStoryProgress_RegionProgressDictEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::shared::_PlayerStoryProgress_LevelProgressDictEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::shared::_PlayerStoryProgress_ChUnlockProgressDictEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::shared::_PlayerStoryProgress_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::shared::_PlayerOnlineArenaProgress_ChUnlockProgressDictEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::shared::_PlayerOnlineArenaProgress_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::shared::_StoryPointDialogLine_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::shared::_StoryPointStep_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::shared::_StoryPoint_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::shared::_LevelStory_PointsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::shared::_LevelStory_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::shared::_SerializableConvexPolygon_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::shared::_SerializedCompletelyStaticPatrolCueCollider_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::shared::_SerializedCompletelyStaticTrapCollider_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::shared::_SerializedCompletelyStaticTriggerCollider_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::shared::_TrapColliderAttrArray_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::shared::_SerializedTrapLocalIdToColliderAttrs_DictEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::shared::_SerializedTrapLocalIdToColliderAttrs_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::shared::_SerializedTriggerEditorIdToLocalId_DictEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::shared::_SerializedTriggerEditorIdToLocalId_Dict2Entry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::shared::_SerializedTriggerEditorIdToLocalId_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::shared::_PickableConfigFromTiled_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::shared::_Pickable_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::shared::_InjectedCmdConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::shared::_CharacterSpawnerConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::shared::_PickableSpawnerConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::shared::_TriggerColliderAttr_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::shared::_TriggerConfigFromTiled_BossSpeciesSetEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::shared::_TriggerConfigFromTiled_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::shared::_Trigger_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::shared::_PlayerMetaInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::shared::_RpcEndpointHolder_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_serializable_5fdata_2eproto = {
  {}, AddDescriptors_serializable_5fdata_2eproto, "serializable_data.proto", schemas,
  file_default_instances, TableStruct_serializable_5fdata_2eproto::offsets,
  file_level_metadata_serializable_5fdata_2eproto, 83, file_level_enum_descriptors_serializable_5fdata_2eproto, file_level_service_descriptors_serializable_5fdata_2eproto,
};

const char descriptor_table_protodef_serializable_5fdata_2eproto[] =
  "\n\027serializable_data.proto\022\006shared\"n\n\023Aut"
  "hTokenUnderlying\022\021\n\tplayer_id\030\001 \001(\t\022\027\n\017f"
  "rom_authsrv_id\030\002 \001(\r\022\027\n\017to_battlesrv_id\030"
  "\003 \001(\r\022\022\n\nexpires_at\030\004 \001(\003\"\371\001\n\nAuthResult"
  "\022\020\n\010ret_code\030\001 \001(\005\022\r\n\005uname\030\002 \001(\t\022\017\n\007cap"
  "tcha\030\003 \001(\t\022\022\n\nexpires_at\030\004 \001(\003\022\021\n\tplayer"
  "_id\030\005 \001(\t\022\026\n\016new_auth_token\030\006 \001(\t\022\032\n\022new"
  "_auth_token_sig\030\007 \001(\t\022!\n\031captcha_submit_"
  "authsrv_id\030\010 \001(\r\022\037\n\027battlesrv_hostname_o"
  "nly\030\t \001(\t\022\032\n\022battlesrv_endpoint\030\n \001(\t\"\215\001"
  "\n(SteamAuthenticateUserTicketPayloadPara"
  "ms\022\016\n\006result\030\001 \001(\t\022\017\n\007steamid\030\002 \001(\t\022\024\n\014o"
  "wnersteamid\030\003 \001(\t\022\021\n\tvacbanned\030\004 \001(\010\022\027\n\017"
  "publisherbanned\030\005 \001(\010\"j\n&SteamAuthentica"
  "teUserTicketPayloadResp\022@\n\006params\030\001 \001(\0132"
  "0.shared.SteamAuthenticateUserTicketPayl"
  "oadParams\"e\n!SteamAuthenticateUserTicket"
  "Result\022@\n\010response\030\001 \001(\0132..shared.SteamA"
  "uthenticateUserTicketPayloadResp\"\200\001\n\020Bat"
  "tleInvitation\022\026\n\016from_player_id\030\001 \001(\t\022\027\n"
  "\017to_battlesrv_id\030\002 \001(\r\022\025\n\rbound_room_id\030"
  "\003 \001(\005\022\022\n\nexpires_at\030\004 \001(\003\022\020\n\010passcode\030\005 "
  "\001(\t\"\315\032\n\017CharacterConfig\022\022\n\nspecies_id\030\001 "
  "\001(\r\022\024\n\014species_name\030\002 \001(\t\022\n\n\002hp\030\003 \001(\005\022\n\n"
  "\002mp\030\004 \001(\005\022\027\n\017lay_down_frames\030\005 \001(\005\022\"\n\032la"
  "y_down_frames_to_recover\030\006 \001(\005\022 \n\030get_up"
  "_invinsible_frames\030\007 \001(\005\022 \n\030get_up_frame"
  "s_to_recover\030\010 \001(\005\022\r\n\005speed\030\t \001(\002\022\035\n\025mp_"
  "regen_per_interval\030\n \001(\005\022\031\n\021mp_regen_int"
  "erval\030\013 \001(\005\022\032\n\022jumping_init_vel_y\030\014 \001(\002\022"
  "!\n\031inertia_frames_to_recover\030\r \001(\005\022\027\n\017da"
  "shing_enabled\030\016 \001(\010\022\027\n\017sliding_enabled\030\017"
  " \001(\010\022\027\n\017on_wall_enabled\030\020 \001(\010\022\031\n\021crouchi"
  "ng_enabled\030\021 \001(\010\022\035\n\025crouching_atk_enable"
  "d\030\022 \001(\010\022&\n\036wall_jumping_frames_to_recove"
  "r\030\023 \001(\005\022\037\n\027wall_jumping_init_vel_x\030\024 \001(\002"
  "\022\037\n\027wall_jumping_init_vel_y\030\025 \001(\002\022\032\n\022wal"
  "l_sliding_vel_y\030\026 \001(\002\022\031\n\021min_falling_vel"
  "_y\030\027 \001(\002\022\033\n\023max_ascending_vel_y\030\030 \001(\002\022\033\n"
  "\023use_inventory_btn_b\030\031 \001(\010\0227\n/ground_dod"
  "ge_enabled_by_iv_slot_c_in_block_stun\030\032 "
  "\001(\010\0226\n.ground_dodge_enabled_by_rdf_cnt_f"
  "rom_beginning\030\033 \001(\005\022\'\n\037ground_dodged_fra"
  "mes_to_recover\030\034 \001(\005\022\'\n\037ground_dodged_fr"
  "ames_invinsible\030\035 \001(\005\022\033\n\023ground_dodged_s"
  "peed\030\036 \001(\002\022\027\n\017vision_offset_x\030\037 \001(\002\022\027\n\017v"
  "ision_offset_y\030  \001(\002\022\025\n\rvision_size_x\030! "
  "\001(\002\022\025\n\rvision_size_y\030\" \001(\002\022\026\n\016capsule_ra"
  "dius\030# \001(\002\022\033\n\023capsule_half_height\030$ \001(\002\022"
  "\035\n\025shrinked_scale_radius\030% \001(\002\022\035\n\025shrink"
  "ed_scale_height\030& \001(\002\022\035\n\025lay_down_scale_"
  "radius\030\' \001(\002\022\035\n\025lay_down_scale_height\030( "
  "\001(\002\022\032\n\022dying_scale_radius\030) \001(\002\022\032\n\022dying"
  "_scale_height\030* \001(\002\022\033\n\023dimmed_scale_radi"
  "us\030+ \001(\002\022\033\n\023dimmed_scale_height\030, \001(\002\022\036\n"
  "\026anti_gravity_when_idle\030- \001(\010\022%\n\035anti_gr"
  "avity_frames_lingering\030. \001(\005\022\024\n\014omit_gra"
  "vity\030/ \001(\010\022\032\n\022omit_soft_pushback\0300 \001(\010\022\033"
  "\n\023repel_soft_pushback\0301 \001(\010\022\033\n\023collision"
  "_type_mask\0302 \001(\004\022\034\n\024has_turn_around_anim"
  "\0303 \001(\010\022\027\n\017has_dimmed_anim\0304 \001(\010\022\030\n\020has_a"
  "waking_anim\0305 \001(\010\022\036\n\026has_walk_stopping_a"
  "nim\0306 \001(\010\022%\n\035has_in_air_walk_stopping_an"
  "im\0307 \001(\010\022\'\n\037lay_down_to_recover_from_dim"
  "med\0308 \001(\010\022\020\n\010hardness\0309 \001(\005\022%\n\035proactive"
  "_jump_startup_frames\030: \001(\005\022\036\n\026default_ai"
  "r_jump_quota\030; \001(\r\022\036\n\026default_air_dash_q"
  "uota\030< \001(\r\022\031\n\021default_def1Quota\030= \001(\r\022(\n"
  " isolated_air_jump_and_dash_quota\030> \001(\010\022"
  "\037\n\027air_jump_vfx_species_id\030\? \001(\005\022+\n#slip"
  "_jump_thres_hold_below_top_face\030@ \001(\002\022\"\n"
  "\032slip_jump_character_drop_y\030A \001(\002\022,\n$tra"
  "nsform_into_species_id_upon_death\030B \001(\r\022"
  "\033\n\023jump_holding_to_fly\030C \001(\010\022\020\n\010has_def1"
  "\030D \001(\010\022\032\n\022has_def1Atked1Anim\030E \001(\010\022,\n$de"
  "fault_def1Broken_frames_to_recover\030F \001(\005"
  "\022\"\n\032def1_active_vfx_species_id\030G \001(\005\022!\n\031"
  "def1_atked_vfx_species_id\030H \001(\005\022\"\n\032def1_"
  "broken_vfx_species_id\030I \001(\005\022\033\n\023def1_star"
  "tup_frames\030J \001(\005\022\031\n\021def1_damage_yield\030K "
  "\001(\002\022,\n$def1_defies_ele_weakness_penetrat"
  "ion\030L \001(\010\022\032\n\022def1_defies_debuff\030M \001(\010\022\034\n"
  "\024flying_quota_rdf_cnt\030N \001(\005\022\031\n\021walking_a"
  "uto_def1\030O \001(\010\022\035\n\003Ifc\030P \001(\0162\020.shared.Ifa"
  "ceCat\022\024\n\014ele_weakness\030Q \001(\r\022\026\n\016ele_resis"
  "tance\030R \001(\r\022\032\n\022has_btn_b_charging\030S \001(\010\022"
  "$\n\034btn_b_charged_vfx_species_id\030T \001(\005\022\021\n"
  "\tis_key_ch\030U \001(\010\022&\n\036allows_same_team_sof"
  "t_pushback\030V \001(\010\022\035\n\025gauge_inc_when_kille"
  "d\030W \001(\005\022\"\n\032jumping_instead_of_walking\030X "
  "\001(\010\022*\n\"vision_search_interval_pow2Minus1"
  "U\030Y \001(\r\022)\n!vision_search_interval_pow2Mi"
  "nus1\030Z \001(\005\022\"\n\032npc_no_default_air_walking"
  "\030[ \001(\010\022&\n\036npc_prioritize_bullet_handling"
  "\030\\ \001(\010\022#\n\033npc_prioritize_ally_healing\030] "
  "\001(\010\022&\n\036npc_not_hunting_in_air_oppo_ch\030^ "
  "\001(\010\022(\n transform_into_frames_to_recover\030"
  "_ \001(\005\022(\n transform_into_frames_invinsibl"
  "e\030` \001(\005\022!\n\031awaking_frames_to_recover\030a \001"
  "(\005\022!\n\031awaking_frames_invinsible\030b \001(\005\022 \n"
  "\030use_idle1_as_flying_idle\030c \001(\010\022\017\n\007no_fl"
  "ee\030d \001(\010\0223\n\024init_inventory_slots\030e \003(\0132\025"
  ".shared.InventorySlot\022;\n\033btn_b_auto_unho"
  "ld_ch_states\030f \003(\0162\026.shared.CharacterSta"
  "te\022G\n\021looping_ch_states\030g \003(\0132,.shared.C"
  "haracterConfig.LoopingChStatesEntry\0326\n\024L"
  "oopingChStatesEntry\022\013\n\003key\030\001 \001(\005\022\r\n\005valu"
  "e\030\002 \001(\005:\0028\001\"\351\021\n\021CharacterDownsync\022\n\n\002id\030"
  "\001 \001(\005\022\t\n\001x\030\002 \001(\002\022\t\n\001y\030\003 \001(\002\022\r\n\005dir_x\030\004 \001"
  "(\005\022\r\n\005dir_y\030\005 \001(\005\022\r\n\005vel_x\030\006 \001(\002\022\r\n\005vel_"
  "y\030\007 \001(\002\022\r\n\005speed\030\010 \001(\002\022\022\n\nspecies_id\030\t \001"
  "(\r\022\022\n\njoin_index\030\n \001(\005\022\031\n\021frames_to_reco"
  "ver\030\013 \001(\005\022\"\n\032frames_captured_by_inertia\030"
  "\014 \001(\005\022\036\n\026captured_by_patrol_cue\030\r \001(\010\022\034\n"
  "\024frames_in_patrol_cue\030\016 \001(\005\022\021\n\tbeats_cnt"
  "\030\017 \001(\r\022\022\n\nbeaten_cnt\030\020 \001(\r\022\n\n\002hp\030\021 \001(\005\022\n"
  "\n\002mp\030\022 \001(\005\022\037\n\027btn_b_holding_rdf_count\030\023 "
  "\001(\005\022/\n\017character_state\030\026 \001(\0162\026.shared.Ch"
  "aracterState\022\032\n\022frames_in_ch_state\030\027 \001(\005"
  "\022\016\n\006in_air\030\030 \001(\010\022\026\n\016jump_triggered\030\031 \001(\010"
  "\022\017\n\007on_wall\030\032 \001(\010\022\026\n\016on_wall_norm_x\030\033 \001("
  "\005\022\026\n\016on_wall_norm_y\030\034 \001(\005\022\024\n\014omit_gravit"
  "y\030\035 \001(\010\022\032\n\022omit_soft_pushback\030\036 \001(\010\022\035\n\025w"
  "aiving_patrol_cue_id\030\037 \001(\005\022$\n\013goal_as_np"
  "c\030  \001(\0162\017.shared.NpcGoal\022\021\n\trevival_x\030! "
  "\001(\002\022\021\n\trevival_y\030\" \001(\002\022\025\n\rrevival_dir_x\030"
  "# \001(\005\022\025\n\rrevival_dir_y\030$ \001(\005\022\020\n\010on_slope"
  "\030% \001(\010\022\026\n\016friction_vel_x\030& \001(\005\022\030\n\020forced"
  "_crouching\030\' \001(\010\022\033\n\023slip_jump_triggered\030"
  "( \001(\010\022,\n$primarily_on_slippable_hard_pus"
  "hback\030) \001(\010\022\032\n\022prev_was_crouching\030* \001(\010\022"
  "\021\n\tnew_birth\030+ \001(\010\022\031\n\021frames_invinsible\030"
  ", \001(\005\022\024\n\014jump_started\030- \001(\010\022\034\n\024frames_to"
  "_start_jump\030. \001(\005\022\033\n\023repel_soft_pushback"
  "\030/ \001(\010\022\'\n\037publishing_evt_mask_upon_kille"
  "d\0300 \001(\004\0222\n*publishing_to_trigger_local_i"
  "d_upon_killed\0301 \001(\005\022&\n\036subscribes_to_tri"
  "gger_local_id\0302 \001(\005\022\034\n\024jump_holding_rdf_"
  "cnt\0303 \001(\005\022 \n\030remaining_air_jump_quota\0304 "
  "\001(\r\022 \n\030remaining_air_dash_quota\0305 \001(\r\022,\n"
  "$killed_to_drop_consumable_species_id\0306 "
  "\001(\r\022&\n\036killed_to_drop_buff_species_id\0307 "
  "\001(\r\022&\n\036killed_to_drop_pickup_skill_id\0308 "
  "\001(\r\022\026\n\016friction_vel_y\0309 \001(\005\022!\n\031frames_si"
  "nce_last_damaged\030: \001(\005\022\033\n\023remaining_def1"
  "Quota\030; \001(\r\022\025\n\rcombo_hit_cnt\030< \001(\r\022\035\n\025co"
  "mbo_frames_remained\030= \001(\005\022\036\n\026damage_elem"
  "ental_attrs\030> \001(\r\022\034\n\024on_slope_facing_dow"
  "n\030\? \001(\010\022\"\n\032last_damaged_by_join_index\030@ "
  "\001(\005\022&\n\036last_damaged_by_bullet_team_id\030A "
  "\001(\005\022\030\n\020activated_rdf_id\030B \001(\005\022\026\n\016cached_"
  "cue_cmd\030C \001(\004\022\027\n\017active_skill_id\030D \001(\r\022\030"
  "\n\020active_skill_hit\030E \001(\005\022\026\n\016bullet_team_"
  "id\030F \001(\005\022\034\n\024ch_collision_team_id\030G \001(\005\022\037"
  "\n\027btn_c_holding_rdf_count\030H \001(\005\022\037\n\027btn_d"
  "_Holding_rdf_count\030I \001(\005\022\037\n\027btn_e_holdin"
  "g_rdf_count\030J \001(\005\022\037\n\027parry_prep_rdf_cnt_"
  "down\030K \001(\005\022\036\n\026mp_regen_rdf_countdown\030L \001"
  "(\005\022\034\n\024flying_rdf_countdown\030M \001(\005\022\035\n\025lock"
  "ing_on_join_index\030N \001(\005\022\037\n\tbuff_list\030Z \003"
  "(\0132\014.shared.Buff\022#\n\013debuff_list\030[ \003(\0132\016."
  "shared.Debuff\022$\n\tinventory\030\\ \001(\0132\021.share"
  "d.Inventory\0229\n\025bullet_immune_records\030] \003"
  "(\0132\032.shared.BulletImmuneRecord\022\027\n\017kinema"
  "tic_knobs\030^ \003(\002\"\224\001\n\021InputFrameDecoded\022\n\n"
  "\002dx\030\001 \001(\005\022\n\n\002dy\030\002 \001(\005\022\023\n\013btn_a_level\030\003 \001"
  "(\005\022\023\n\013btn_b_level\030\004 \001(\005\022\023\n\013btn_c_level\030\005"
  " \001(\005\022\023\n\013btn_d_level\030\006 \001(\005\022\023\n\013btn_e_level"
  "\030\007 \001(\005\"O\n\020InputFrameUpsync\022\026\n\016input_fram"
  "e_id\030\001 \001(\005\022\017\n\007encoded\030\002 \001(\004\022\022\n\njoin_inde"
  "x\030\003 \001(\005\"t\n\022InputFrameDownsync\022\026\n\016input_f"
  "rame_id\030\001 \001(\005\022\022\n\ninput_list\030\002 \003(\004\022\026\n\016con"
  "firmed_list\030\003 \001(\004\022\032\n\022udp_confirmed_list\030"
  "\004 \001(\004\"\200\007\n\005WsReq\022\021\n\tplayer_id\030\001 \001(\t\022\013\n\003ac"
  "t\030\002 \001(\005\022\022\n\njoin_index\030\003 \001(\005\022\027\n\017acking_fr"
  "ame_id\030\004 \001(\005\022\035\n\025acking_input_frame_id\030\005 "
  "\001(\005\022\020\n\010auth_key\030\006 \001(\005\022:\n\030input_frame_ups"
  "ync_batch\030\007 \003(\0132\030.shared.InputFrameUpsyn"
  "c\022,\n\017self_parsed_rdf\030\010 \001(\0132\023.shared.Rend"
  "erFrame\022\"\n\032collision_space_half_width\030\t "
  "\001(\005\022#\n\033collision_space_half_height\030\n \001(\005"
  "\022\037\n\027battle_duration_seconds\030\013 \001(\005\022F\n\033ser"
  "ialized_barrier_polygons\030\014 \003(\0132!.shared."
  "SerializableConvexPolygon\022Z\n\035serialized_"
  "static_patrol_cues\030\r \003(\01323.shared.Serial"
  "izedCompletelyStaticPatrolCueCollider\022Z\n"
  "\"serialized_completely_static_traps\030\016 \003("
  "\0132..shared.SerializedCompletelyStaticTra"
  "pCollider\022U\n\032serialized_static_triggers\030"
  "\017 \003(\01321.shared.SerializedCompletelyStati"
  "cTriggerCollider\022`\n*serialized_trap_loca"
  "l_id_to_collider_attrs\030\020 \001(\0132,.shared.Se"
  "rializedTrapLocalIdToColliderAttrs\022\\\n(se"
  "rialized_trigger_editor_id_to_local_id\030\022"
  " \001(\0132*.shared.SerializedTriggerEditorIdT"
  "oLocalId\022\016\n\006seq_no\030\023 \001(\r\"\305\001\n\023InputBuffer"
  "Snapshot\022\033\n\023ref_render_frame_id\030\001 \001(\005\022\030\n"
  "\020unconfirmed_mask\030\002 \001(\004\022A\n\035to_send_input"
  "_frame_downsyncs\030\003 \003(\0132\032.shared.InputFra"
  "meDownsync\022\033\n\023should_force_resync\030\004 \001(\010\022"
  "\027\n\017peer_join_index\030\005 \001(\005\"\341\001\n\tPatrolCue\022\n"
  "\n\002id\030\001 \001(\005\022\016\n\006fl_act\030\002 \001(\004\022\016\n\006fr_act\030\003 \001"
  "(\004\022\031\n\021fl_capture_frames\030\004 \001(\005\022\031\n\021fr_capt"
  "ure_frames\030\005 \001(\005\022\016\n\006fd_act\030\006 \001(\004\022\016\n\006fu_a"
  "ct\030\007 \001(\004\022\031\n\021fd_capture_frames\030\010 \001(\005\022\031\n\021f"
  "u_capture_frames\030\t \001(\005\022\034\n\023collision_type"
  "_mask\030\205\010 \001(\004\"\337\001\n\tVfxConfig\022\022\n\nspecies_id"
  "\030\001 \001(\005\022*\n\013motion_type\030\002 \001(\0162\025.shared.Vfx"
  "MotionType\022.\n\rduration_type\030\003 \001(\0162\027.shar"
  "ed.VfxDurationType\022\024\n\014on_character\030\004 \001(\010"
  "\022\021\n\ton_bullet\030\005 \001(\010\022\017\n\007on_trap\030\006 \001(\010\022\031\n\021"
  "use_pixelated_ver\030\007 \001(\010\022\r\n\004name\030\200\010 \001(\t\"\317"
  "\032\n\014BulletConfig\022\026\n\016startup_frames\030\001 \001(\005\022"
  "\034\n\024cancellable_st_frame\030\002 \001(\005\022\034\n\024cancell"
  "able_ed_frame\030\003 \001(\005\022\025\n\ractive_frames\030\004 \001"
  "(\005\022\027\n\017hit_stun_frames\030\005 \001(\005\022\031\n\021block_stu"
  "n_frames\030\006 \001(\005\022\026\n\016pushback_vel_x\030\007 \001(\002\022\026"
  "\n\016pushback_vel_y\030\010 \001(\002\022\016\n\006damage\030\t \001(\005\022\027"
  "\n\017self_lock_vel_x\030\n \001(\002\022\027\n\017self_lock_vel"
  "_y\030\013 \001(\002\022\027\n\017hitbox_offset_x\030\014 \001(\002\022\027\n\017hit"
  "box_offset_y\030\r \001(\002\022\025\n\rhitbox_size_x\030\016 \001("
  "\002\022\025\n\rhitbox_size_y\030\017 \001(\002\022\017\n\007blow_up\030\020 \001("
  "\010\022\022\n\nspecies_id\030\021 \001(\005\022\030\n\020explosion_frame"
  "s\030\022 \001(\005\022\"\n\006b_type\030\023 \001(\0162\022.shared.BulletT"
  "ype\022%\n\007mh_type\030\024 \001(\0162\024.shared.MultiHitTy"
  "pe\022\"\n\032simultaneous_multi_hit_cnt\030\025 \001(\r\022\r"
  "\n\005speed\030\026 \001(\002\022\r\n\005dir_x\030\027 \001(\005\022\r\n\005dir_y\030\030 "
  "\001(\005\022\?\n\016cancel_transit\030\031 \003(\0132\'.shared.Bul"
  "letConfig.CancelTransitEntry\022\024\n\014repeat_q"
  "uota\030\032 \001(\005\022\035\n\025active_vfx_species_id\030\033 \001("
  "\005\022 \n\030explosion_vfx_species_id\030\034 \001(\005\022\026\n\016a"
  "llows_walking\030\035 \001(\010\022\030\n\020allows_crouching\030"
  "\036 \001(\010\022\020\n\010hardness\030\037 \001(\005\022!\n\031startup_invin"
  "sible_frames\030  \001(\005\022\035\n\025hit_invinsible_fra"
  "mes\030! \001(\005\022\034\n\024explosion_species_id\030\" \001(\005\022"
  "\024\n\014perp_acc_mag\030# \001(\005\022 \n\030delay_self_vel_"
  "to_active\030$ \001(\010\022\030\n\020speed_if_not_hit\030% \001("
  "\002\022\032\n\022omit_soft_pushback\030& \001(\010\022\031\n\021hitbox_"
  "size_inc_x\030\' \001(\002\022\031\n\021hitbox_size_inc_y\030( "
  "\001(\002\022\030\n\020remains_upon_hit\030) \001(\010\022\036\n\026rotates"
  "_along_velocity\030* \001(\010\022*\n\"default_hard_pu"
  "shback_bounce_quota\030+ \001(\005\022(\n hard_pushba"
  "ck_bounce_norm_factor\030, \001(\002\022)\n!hard_push"
  "back_bounce_sheer_factor\030- \001(\002\022\037\n\027is_pix"
  "elated_active_vfx\030. \001(\010\022#\n\033is_pixelated_"
  "explostion_vfx\030/ \001(\010\022\036\n\026mh_vanish_on_mel"
  "ee_hit\0300 \001(\010\022\037\n\027down_slope_primer_vel_y\030"
  "1 \001(\002\022\035\n\025mh_updates_origin_pos\0302 \001(\010\022\026\n\016"
  "beam_collision\0303 \001(\010\022\035\n\025angular_frame_ve"
  "l_cos\0304 \001(\002\022\035\n\025angular_frame_vel_sin\0305 \001"
  "(\002\022\027\n\017vision_offset_x\0306 \001(\002\022\027\n\017vision_of"
  "fset_y\0307 \001(\002\022\025\n\rvision_size_x\0308 \001(\002\022\025\n\rv"
  "ision_size_y\0309 \001(\002\022\"\n\032self_lock_vel_yWhe"
  "n_flying\030: \001(\005\022\027\n\017elemental_attrs\030; \001(\r\022"
  "\'\n\037cancellable_by_inventory_slot_c\030< \001(\010"
  "\022\'\n\037cancellable_by_inventory_slot_d\030= \001("
  "\010\022\025\n\rspin_anchor_x\030> \001(\002\022\025\n\rspin_anchor_"
  "y\030\? \001(\002\022\032\n\022beam_visual_size_y\030@ \001(\002\022&\n\036t"
  "ouch_explosion_bomb_collision\030A \001(\010\022\036\n\026a"
  "ir_riding_ground_wave\030B \001(\010\022%\n\035ground_im"
  "pact_melee_collision\030C \001(\010\022#\n\033wall_impac"
  "t_melee_collision\030D \001(\010\022\030\n\020mh_inherits_s"
  "pin\030E \001(\010\022\025\n\rinit_spin_cos\030F \001(\002\022\025\n\rinit"
  "_spin_sin\030G \001(\002\022\030\n\020finishing_frames\030H \001("
  "\005\022%\n\035no_explosion_on_hard_pushback\030I \001(\010"
  "\022\036\n\026startup_vfx_species_id\030J \001(\005\022\035\n\003ifc\030"
  "K \001(\0162\020.shared.IfaceCat\022\'\n\037reflect_fireb"
  "all_xIf_not_harder\030L \001(\010\022.\n&rejects_refl"
  "ection_from_another_bullet\030M \001(\010\022\037\n\027prov"
  "ides_xHard_pushback\030N \001(\010\022#\n\033provides_yH"
  "ard_pushback_top\030O \001(\010\022&\n\036provides_yHard"
  "_pushback_bottom\030P \001(\010\022!\n\031ignore_slope_d"
  "eceleration\030Q \001(\010\022!\n\031rotate_offender_wit"
  "h_spin\030R \001(\010\022 \n\030mh_not_trigger_on_ch_hit"
  "\030S \001(\010\022+\n#mh_not_trigger_on_harder_bulle"
  "t_hit\030T \001(\010\022+\n#mh_not_trigger_on_hard_pu"
  "shback_hit\030U \001(\010\022\026\n\016hopper_missile\030V \001(\010"
  "\022\026\n\016beam_rendering\030W \001(\010\022*\n\"missile_sear"
  "ch_interval_pow2Minus1\030X \001(\r\022/\n\'use_ch_o"
  "ffset_regardless_of_emission_mh\030Y \001(\010\022+\n"
  "#inplace_vanish_explosion_species_id\030Z \001"
  "(\005\022\037\n\027anim_looping_rdf_offset\030[ \001(\005\022)\n!e"
  "xplosion_anim_looping_rdf_offset\030\\ \001(\005\022!"
  "\n\031gauge_inc_reduction_ratio\030] \001(\002\022&\n\036mh_"
  "inherits_frames_in_bl_state\030^ \001(\010\022#\n\033gua"
  "rd_breaker_extra_hit_cnt\030_ \001(\r\022\"\n\032takes_"
  "def1As_hard_pushback\030` \001(\010\022\034\n\023collision_"
  "type_mask\030\205\010 \001(\004\022\026\n\rtakes_gravity\030\206\010 \001(\010"
  "\022(\n\013buff_config\030\207\010 \001(\0132\022.shared.BuffConf"
  "ig\022 \n\027character_emit_sfx_name\030\200\020 \001(\t\022\037\n\026"
  "fireball_emit_sfx_name\030\201\020 \001(\t\022\033\n\022explosi"
  "on_sfx_name\030\202\020 \001(\t\022\030\n\017active_sfx_name\030\203\020"
  " \001(\t\022$\n\033explosion_on_flesh_sfx_name\030\204\020 \001"
  "(\t\022#\n\032explosion_on_rock_sfx_name\030\205\020 \001(\t\022"
  "$\n\033explosion_on_metal_sfx_name\030\206\020 \001(\t\022#\n"
  "\032explosion_on_wood_sfx_name\030\207\020 \001(\t\0324\n\022Ca"
  "ncelTransitEntry\022\013\n\003key\030\001 \001(\005\022\r\n\005value\030\002"
  " \001(\r:\0028\001\"\203\005\n\006Bullet\022%\n\010bl_state\030\001 \001(\0162\023."
  "shared.BulletState\022\032\n\022frames_in_bl_state"
  "\030\002 \001(\005\022\027\n\017bullet_local_id\030\003 \001(\005\022\"\n\032origi"
  "nated_render_frame_id\030\004 \001(\005\022\033\n\023offender_"
  "join_index\030\005 \001(\005\022\036\n\026offender_trap_local_"
  "id\030\006 \001(\005\022\017\n\007team_id\030\007 \001(\005\022-\n%vert_moving"
  "_trap_local_id_upon_active\030\010 \001(\005\022\031\n\021repe"
  "at_quota_left\030\t \001(\005\022,\n$remaining_hard_pu"
  "shback_bounce_quota\030\n \001(\005\022#\n\033target_char"
  "acter_join_index\030\013 \001(\005\022\025\n\rdamage_dealed\030"
  "\014 \001(\005\022)\n\017exploded_on_ifc\030\r \001(\0162\020.shared."
  "IfaceCat\022\t\n\001x\030\016 \001(\002\022\t\n\001y\030\017 \001(\002\022\r\n\005dir_x\030"
  "\020 \001(\002\022\r\n\005dir_y\030\021 \001(\002\022\r\n\005vel_x\030\022 \001(\002\022\r\n\005v"
  "el_y\030\023 \001(\002\022\024\n\014originated_x\030\024 \001(\002\022\024\n\014orig"
  "inated_y\030\025 \001(\002\022\020\n\010spin_cos\030\026 \001(\002\022\020\n\010spin"
  "_sin\030\027 \001(\002\022\030\n\020active_skill_hit\030\030 \001(\005\022\020\n\010"
  "skill_id\030\031 \001(\r\"\324\005\n\nTrapConfig\022\022\n\nspecies"
  "_id\030\001 \001(\005\022\034\n\024explosion_species_id\030\002 \001(\005\022"
  "\030\n\020explosion_frames\030\003 \001(\005\022\017\n\007blow_up\030\004 \001"
  "(\010\022\016\n\006damage\030\005 \001(\005\022\027\n\017hit_stun_frames\030\006 "
  "\001(\005\022\035\n\025hit_invinsible_frames\030\007 \001(\005\022\025\n\rde"
  "activatable\030\010 \001(\010\022\020\n\010hardness\030\t \001(\005\022!\n\031d"
  "eactivate_upon_triggered\030\n \001(\010\022 \n\030const_"
  "friction_vel_x_top\030\013 \001(\002\022#\n\033const_fricti"
  "on_vel_x_bottom\030\014 \001(\002\022!\n\031const_friction_"
  "vel_y_left\030\r \001(\002\022\"\n\032const_friction_vel_y"
  "_right\030\016 \001(\002\022(\n patrol_cue_requires_full"
  "_contain\030\017 \001(\010\022\025\n\rspin_anchor_x\030\020 \001(\002\022\025\n"
  "\rspin_anchor_y\030\021 \001(\002\022\035\n\025angular_frame_ve"
  "l_cos\030\022 \001(\002\022\035\n\025angular_frame_vel_sin\030\023 \001"
  "(\002\022\032\n\022intrinsic_spin_cos\030\024 \001(\002\022\032\n\022intrin"
  "sic_spin_sin\030\025 \001(\002\022\033\n\023atk1_upon_triggere"
  "d\030\026 \001(\010\022\025\n\ratk1_skill_id\030\027 \001(\r\022\021\n\tis_rot"
  "ary\030\030 \001(\010\022\033\n\023no_x_flip_rendering\030\031 \001(\010\022\025"
  "\n\014species_name\030\200\010 \001(\t\"\207\002\n\023TrapConfigFrom"
  "Tiled\022\022\n\nspecies_id\030\001 \001(\005\022\r\n\005quota\030\002 \001(\005"
  "\022\r\n\005speed\030\003 \001(\002\022\r\n\005dir_x\030\004 \001(\005\022\r\n\005dir_y\030"
  "\005 \001(\005\022\030\n\020subscribes_to_id\030\007 \001(\005\022+\n#subsc"
  "ribes_to_id_after_initial_fire\030\010 \001(\005\022\034\n\024"
  "subscribes_to_id_alt\030\t \001(\005\022\016\n\006box_cw\030\n \001"
  "(\002\022\016\n\006box_ch\030\013 \001(\002\022\033\n\023init_no_angular_ve"
  "l\030\014 \001(\002\"\344\003\n\020TrapColliderAttr\022\027\n\017hitbox_o"
  "ffset_x\030\001 \001(\005\022\027\n\017hitbox_offset_y\030\002 \001(\005\022\025"
  "\n\rhitbox_size_x\030\003 \001(\005\022\025\n\rhitbox_size_y\030\004"
  " \001(\005\022\036\n\026provides_hard_pushback\030\005 \001(\010\022\027\n\017"
  "provides_damage\030\006 \001(\010\022\027\n\017provides_escape"
  "\030\007 \001(\010\022\032\n\022provides_slip_jump\030\010 \001(\010\022\037\n\027pr"
  "ohibits_wall_grabbing\030\t \001(\010\022\030\n\020forces_cr"
  "ouching\030\n \001(\010\022\022\n\nspecies_id\030\013 \001(\005\022!\n\031onl"
  "y_allows_aligned_vel_x\030\014 \001(\005\022!\n\031only_all"
  "ows_aligned_vel_y\030\r \001(\005\022\025\n\ras_patrol_cue"
  "\030\016 \001(\010\022 \n\005tc_pc\030\017 \001(\0132\021.shared.PatrolCue"
  "\022\026\n\rtrap_local_id\030\200\010 \001(\005\022\034\n\023collision_ty"
  "pe_mask\030\205\010 \001(\004\"\353\004\n\004Trap\022\025\n\rtrap_local_id"
  "\030\001 \001(\005\022(\n patrol_cue_angular_vel_flip_ma"
  "rk\030\002 \001(\005\0226\n\021config_from_tiled\030\003 \001(\0132\033.sh"
  "ared.TrapConfigFromTiled\022%\n\ntrap_state\030\004"
  " \001(\0162\021.shared.TrapState\022\034\n\024frames_in_tra"
  "p_state\030\005 \001(\005\022\034\n\024is_completely_static\030\006 "
  "\001(\010\022\036\n\026captured_by_patrol_cue\030\007 \001(\010\022\034\n\024f"
  "rames_in_patrol_cue\030\010 \001(\005\022\035\n\025waiving_pat"
  "rol_cue_id\030\t \001(\005\022\"\n\032waiving_spontaneous_"
  "patrol\030\n \001(\010\022&\n\036subscribes_to_trigger_lo"
  "cal_id\030\013 \001(\005\022*\n\"subscribes_to_trigger_lo"
  "cal_id_alt\030\014 \001(\005\022\020\n\010spin_cos\030\r \001(\002\022\020\n\010sp"
  "in_sin\030\016 \001(\002\022\035\n\025angular_frame_vel_cos\030\017 "
  "\001(\002\022\035\n\025angular_frame_vel_sin\030\020 \001(\002\022\t\n\001x\030"
  "\021 \001(\002\022\t\n\001y\030\022 \001(\002\022\r\n\005dir_x\030\023 \001(\005\022\r\n\005dir_y"
  "\030\024 \001(\005\022\r\n\005vel_x\030\025 \001(\002\022\r\n\005vel_y\030\026 \001(\002\"\201\001\n"
  "\rTriggerConfig\022\022\n\nspecies_id\030\001 \001(\005\022\024\n\014sp"
  "ecies_name\030\002 \001(\t\022)\n\014trigger_type\030\003 \001(\0162\023"
  ".shared.TriggerType\022\033\n\023collision_type_ma"
  "sk\030\004 \001(\004\"I\n\013PeerUdpAddr\022\n\n\002ip\030\001 \001(\t\022\014\n\004p"
  "ort\030\002 \001(\005\022\020\n\010auth_key\030\003 \001(\005\022\016\n\006seq_no\030\004 "
  "\001(\r\"\347\003\n\022BattleColliderInfo\022\022\n\nstage_name"
  "\030\001 \001(\t\022\025\n\rbound_room_id\030\002 \001(\005\022\036\n\026battle_"
  "duration_frames\030\003 \001(\003\022*\n\"input_frame_ups"
  "ync_delay_tolerance\030\004 \001(\005\022,\n$max_chasing"
  "_render_frames_per_update\030\005 \001(\005\022$\n\034rollb"
  "ack_estimated_dt_millis\030\006 \001(\001\022#\n\033rollbac"
  "k_estimated_dt_nanos\030\007 \001(\003\022\032\n\022render_buf"
  "fer_size\030\010 \001(\005\022\032\n\022collision_min_step\030\t \001"
  "(\005\022\033\n\023bound_room_capacity\030\n \001(\005\022\035\n\025preal"
  "loc_npc_capacity\030\013 \001(\005\022 \n\030prealloc_bulle"
  "t_capacity\030\014 \001(\005\022/\n\021battle_udp_tunnel\030\200\010"
  " \001(\0132\023.shared.PeerUdpAddr\022\032\n\021frame_log_e"
  "nabled\030\201\010 \001(\010\"\375\003\n\013RenderFrame\022\n\n\002id\030\001 \001("
  "\005\022.\n\013players_arr\030\002 \003(\0132\031.shared.Characte"
  "rDownsync\022\027\n\017countdown_nanos\030\003 \001(\003\022\037\n\007bu"
  "llets\030\004 \003(\0132\016.shared.Bullet\022+\n\010npcs_arr\030"
  "\005 \003(\0132\031.shared.CharacterDownsync\022\037\n\ttrap"
  "s_arr\030\006 \003(\0132\014.shared.Trap\022%\n\014triggers_ar"
  "r\030\007 \003(\0132\017.shared.Trigger\022#\n\tpickables\030\n "
  "\003(\0132\020.shared.Pickable\022!\n\030backend_unconfi"
  "rmed_mask\030\200\010 \001(\004\022\034\n\023should_force_resync\030"
  "\201\010 \001(\010\022\030\n\017species_id_list\030\202\010 \003(\005\022 \n\027bull"
  "et_local_id_counter\030\203\010 \001(\005\022\035\n\024npc_local_"
  "id_counter\030\204\010 \001(\005\022\036\n\025participant_change_"
  "id\030\205\010 \001(\005\022\"\n\031pickable_local_id_counter\030\206"
  "\010 \001(\005\"\217\002\n\006WsResp\022\013\n\003ret\030\001 \001(\005\022\013\n\003act\030\002 \001"
  "(\005\022 \n\003rdf\030\003 \001(\0132\023.shared.RenderFrame\022>\n\032"
  "input_frame_downsync_batch\030\004 \003(\0132\032.share"
  "d.InputFrameDownsync\022-\n\tbci_frame\030\005 \001(\0132"
  "\032.shared.BattleColliderInfo\022\027\n\017peer_join"
  "_index\030\006 \001(\005\022/\n\022peer_udp_addr_list\030\007 \003(\013"
  "2\023.shared.PeerUdpAddr\022\020\n\007err_msg\030\200\020 \001(\t\""
  "\207\003\n\005Skill\022\027\n\017battle_local_id\030\001 \001(\005\022\027\n\017re"
  "covery_frames\030\002 \001(\005\022 \n\030recovery_frames_o"
  "n_block\030\003 \001(\005\022\036\n\026recovery_frames_on_hit\030"
  "\004 \001(\005\022.\n\014trigger_type\030\005 \001(\0162\030.shared.Ski"
  "llTriggerType\022.\n\016bound_ch_state\030\006 \001(\0162\026."
  "shared.CharacterState\0225\n\025bound_ch_state_"
  "on_hit\030\007 \001(\0162\026.shared.CharacterState\022\020\n\010"
  "mp_delta\030\010 \001(\005\022\n\n\002id\030\t \001(\r\022#\n\004hits\030\200\010 \003("
  "\0132\024.shared.BulletConfig\0220\n\023self_non_stoc"
  "k_buff\030\201\010 \001(\0132\022.shared.BuffConfig\"c\n\010Fra"
  "meLog\022 \n\003rdf\030\001 \001(\0132\023.shared.RenderFrame\022"
  "5\n\021actually_used_idf\030\002 \001(\0132\032.shared.Inpu"
  "tFrameDownsync\"H\n\014BattleResult\022\031\n\021winner"
  "_join_index\030\001 \001(\005\022\035\n\025winner_bullet_team_"
  "id\030\002 \001(\005\"\245\002\n\014DebuffConfig\022\022\n\nspecies_id\030"
  "\001 \001(\r\022)\n\nstock_type\030\002 \001(\0162\025.shared.BuffS"
  "tockType\022\r\n\005stock\030\003 \001(\005\022 \n\004type\030\004 \001(\0162\022."
  "shared.DebuffType\022\017\n\007arr_idx\030\005 \001(\005\022\033\n\023im"
  "pact_per_interval\030\006 \001(\005\022\027\n\017impact_interv"
  "al\030\007 \001(\005\022\026\n\016friction_vel_x\030\010 \001(\005\022\026\n\016fric"
  "tion_vel_y\030\t \001(\005\022\026\n\016friction_acc_x\030\n \001(\005"
  "\022\026\n\016friction_acc_y\030\013 \001(\005\"\240\004\n\nBuffConfig\022"
  "\022\n\nspecies_id\030\001 \001(\r\022)\n\nstock_type\030\002 \001(\0162"
  "\025.shared.BuffStockType\022\r\n\005stock\030\003 \001(\005\022\023\n"
  "\013speed_delta\030\004 \001(\002\022\033\n\023hitbox_size_x_delt"
  "a\030\005 \001(\002\022\033\n\023hitbox_size_y_delta\030\006 \001(\002\022\024\n\014"
  "damage_delta\030\007 \001(\005\022\"\n\032damage_delta_by_pe"
  "rcentage\030\010 \001(\005\022 \n\030character_hardness_del"
  "ta\030\t \001(\005\022\034\n\024melee_hardness_delta\030\n \001(\005\022\037"
  "\n\027fireball_hardness_delta\030\013 \001(\005\022\022\n\ninvin"
  "sible\030\014 \001(\010\022\033\n\023xform_ch_species_id\030\r \001(\r"
  "\022\033\n\023repel_soft_pushback\030\016 \001(\010\022\024\n\014omit_gr"
  "avity\030\017 \001(\010\022\021\n\tauto_def1\030\020 \001(\010\022\032\n\022associ"
  "ated_debuffs\030\021 \003(\r\022 \n\030character_vfx_spec"
  "ies_id\030\022 \001(\005\022%\n\035is_pixelated_vfx_on_char"
  "acter\030\023 \001(\010\"\246\001\n\004Buff\022\022\n\nspecies_id\030\001 \001(\r"
  "\022\r\n\005stock\030\002 \001(\005\022\"\n\032originated_render_fra"
  "me_id\030\003 \001(\005\022\032\n\022orig_ch_species_id\030\004 \001(\r\022"
  " \n\030orig_repel_soft_pushback\030\005 \001(\010\022\031\n\021ori"
  "g_omit_gravity\030\006 \001(\010\"+\n\006Debuff\022\022\n\nspecie"
  "s_id\030\001 \001(\r\022\r\n\005stock\030\002 \001(\005\"S\n\022BulletImmun"
  "eRecord\022\027\n\017bullet_local_id\030\001 \001(\005\022$\n\034rema"
  "ining_lifetime_rdf_count\030\002 \001(\005\"z\n\020Consum"
  "ableConfig\022\022\n\nspecies_id\030\001 \001(\r\022\024\n\014refill"
  "_delta\030\002 \001(\005\022\030\n\020vfx_id_on_picker\030\003 \001(\005\022\""
  "\n\032is_pixelated_vfx_on_picker\030\004 \001(\010\"e\n\023Pi"
  "ckableSkillConfig\022\020\n\010skill_id\030\001 \001(\r\022\030\n\020v"
  "fx_id_on_picker\030\002 \001(\005\022\"\n\032is_pixelated_vf"
  "x_on_picker\030\003 \001(\010\"\332\002\n\rInventorySlot\0222\n\ns"
  "tock_type\030\001 \001(\0162\036.shared.InventorySlotSt"
  "ockType\022\r\n\005quota\030\002 \001(\r\022\031\n\021frames_to_reco"
  "ver\030\003 \001(\005\022\025\n\rdefault_quota\030\004 \001(\r\022!\n\031defa"
  "ult_frames_to_recover\030\005 \001(\005\022\027\n\017buff_spec"
  "ies_id\030\006 \001(\r\022\020\n\010skill_id\030\007 \001(\r\022\024\n\014skill_"
  "id_air\030\010 \001(\r\022\025\n\rgauge_charged\030\t \001(\005\022\026\n\016g"
  "auge_required\030\n \001(\005\022#\n\033full_charge_buff_"
  "species_id\030\013 \001(\r\022\034\n\024full_charge_skill_id"
  "\030\014 \001(\r\"1\n\tInventory\022$\n\005slots\030\001 \003(\0132\025.sha"
  "red.InventorySlot\"%\n\017BattleEquipment\022\022\n\n"
  "species_id\030\001 \001(\r\"&\n\016PlayerSettings\022\024\n\014so"
  "und_volume\030\001 \001(\005\"\360\002\n\024PlayerRegionProgres"
  "s\022\021\n\tregion_id\030\001 \001(\005\022\035\n\025completed_level_"
  "count\030\002 \001(\005\022W\n\026remaining_dependencies\030\003 "
  "\003(\01327.shared.PlayerRegionProgress.Remain"
  "ingDependenciesEntry\022S\n\024removed_dependen"
  "cies\030\004 \003(\01325.shared.PlayerRegionProgress"
  ".RemovedDependenciesEntry\032<\n\032RemainingDe"
  "pendenciesEntry\022\013\n\003key\030\001 \001(\005\022\r\n\005value\030\002 "
  "\001(\010:\0028\001\032:\n\030RemovedDependenciesEntry\022\013\n\003k"
  "ey\030\001 \001(\005\022\r\n\005value\030\002 \001(\010:\0028\001\"\320\004\n\023PlayerLe"
  "velProgress\022\021\n\tregion_id\030\001 \001(\005\022\020\n\010level_"
  "id\030\002 \001(\005\022\025\n\rhighest_score\030\003 \001(\005\022-\n%short"
  "est_finish_time_at_highest_score\030\004 \001(\005\022-"
  "\n%character_species_id_at_highest_score\030"
  "\005 \001(\r\022\034\n\024shortest_finish_time\030\006 \001(\005\022%\n\035s"
  "core_at_shortest_finish_time\030\007 \001(\005\0224\n,ch"
  "aracter_species_id_at_shortest_finish_ti"
  "me\030\010 \001(\r\022V\n\026remaining_dependencies\030\t \003(\013"
  "26.shared.PlayerLevelProgress.RemainingD"
  "ependenciesEntry\022R\n\024removed_dependencies"
  "\030\n \003(\01324.shared.PlayerLevelProgress.Remo"
  "vedDependenciesEntry\032<\n\032RemainingDepende"
  "nciesEntry\022\013\n\003key\030\001 \001(\005\022\r\n\005value\030\002 \001(\010:\002"
  "8\001\032:\n\030RemovedDependenciesEntry\022\013\n\003key\030\001 "
  "\001(\005\022\r\n\005value\030\002 \001(\010:\0028\001\"\330\002\n\026PlayerChUnloc"
  "kProgress\022\022\n\nspecies_id\030\001 \001(\r\022Y\n\026remaini"
  "ng_dependencies\030\002 \003(\01329.shared.PlayerChU"
  "nlockProgress.RemainingDependenciesEntry"
  "\022U\n\024removed_dependencies\030\003 \003(\01327.shared."
  "PlayerChUnlockProgress.RemovedDependenci"
  "esEntry\032<\n\032RemainingDependenciesEntry\022\013\n"
  "\003key\030\001 \001(\005\022\r\n\005value\030\002 \001(\010:\0028\001\032:\n\030Removed"
  "DependenciesEntry\022\013\n\003key\030\001 \001(\005\022\r\n\005value\030"
  "\002 \001(\010:\0028\001\"\237\005\n\023PlayerStoryProgress\022Q\n\024reg"
  "ion_progress_dict\030\001 \003(\01323.shared.PlayerS"
  "toryProgress.RegionProgressDictEntry\022O\n\023"
  "level_progress_dict\030\002 \003(\01322.shared.Playe"
  "rStoryProgress.LevelProgressDictEntry\022\030\n"
  "\020cursor_region_id\030\003 \001(\005\022\027\n\017cursor_level_"
  "id\030\004 \001(\005\022/\n\004view\030\005 \001(\0162!.shared.PlayerSt"
  "oryModeSelectView\022\033\n\023saved_at_gmt_millis"
  "\030\006 \001(\004\022V\n\027ch_unlock_progress_dict\030\007 \003(\0132"
  "5.shared.PlayerStoryProgress.ChUnlockPro"
  "gressDictEntry\032W\n\027RegionProgressDictEntr"
  "y\022\013\n\003key\030\001 \001(\005\022+\n\005value\030\002 \001(\0132\034.shared.P"
  "layerRegionProgress:\0028\001\032U\n\026LevelProgress"
  "DictEntry\022\013\n\003key\030\001 \001(\005\022*\n\005value\030\002 \001(\0132\033."
  "shared.PlayerLevelProgress:\0028\001\032[\n\031ChUnlo"
  "ckProgressDictEntry\022\013\n\003key\030\001 \001(\r\022-\n\005valu"
  "e\030\002 \001(\0132\036.shared.PlayerChUnlockProgress:"
  "\0028\001\"\206\002\n\031PlayerOnlineArenaProgress\022\033\n\023sav"
  "ed_at_gmt_millis\030\001 \001(\004\022\021\n\tplayer_id\030\002 \001("
  "\t\022\\\n\027ch_unlock_progress_dict\030\003 \003(\0132;.sha"
  "red.PlayerOnlineArenaProgress.ChUnlockPr"
  "ogressDictEntry\032[\n\031ChUnlockProgressDictE"
  "ntry\022\013\n\003key\030\001 \001(\r\022-\n\005value\030\002 \001(\0132\036.share"
  "d.PlayerChUnlockProgress:\0028\001\"v\n\024StoryPoi"
  "ntDialogLine\022\033\n\023narrator_join_index\030\001 \001("
  "\005\022\033\n\023narrator_species_id\030\002 \001(\r\022\017\n\007conten"
  "t\030\003 \001(\t\022\023\n\013down_or_not\030\004 \001(\010\"^\n\016StoryPoi"
  "ntStep\022+\n\005lines\030\001 \003(\0132\034.shared.StoryPoin"
  "tDialogLine\022\037\n\027nonctrl_alive_rdf_count\030\002"
  " \001(\005\"[\n\nStoryPoint\022%\n\005steps\030\001 \003(\0132\026.shar"
  "ed.StoryPointStep\022\017\n\007nonctrl\030\002 \001(\010\022\025\n\rcu"
  "tscene_name\030\003 \001(\t\"\177\n\nLevelStory\022.\n\006point"
  "s\030\001 \003(\0132\036.shared.LevelStory.PointsEntry\032"
  "A\n\013PointsEntry\022\013\n\003key\030\001 \001(\005\022!\n\005value\030\002 \001"
  "(\0132\022.shared.StoryPoint:\0028\001\"O\n\031Serializab"
  "leConvexPolygon\022\020\n\010anchor_x\030\001 \001(\002\022\020\n\010anc"
  "hor_y\030\002 \001(\002\022\016\n\006points\030\003 \003(\002\"\202\001\n+Serializ"
  "edCompletelyStaticPatrolCueCollider\022\037\n\004a"
  "ttr\030\001 \001(\0132\021.shared.PatrolCue\0222\n\007polygon\030"
  "\002 \001(\0132!.shared.SerializableConvexPolygon"
  "\"\204\001\n&SerializedCompletelyStaticTrapColli"
  "der\022&\n\004attr\030\001 \001(\0132\030.shared.TrapColliderA"
  "ttr\0222\n\007polygon\030\002 \001(\0132!.shared.Serializab"
  "leConvexPolygon\"\212\001\n)SerializedCompletely"
  "StaticTriggerCollider\022)\n\004attr\030\001 \001(\0132\033.sh"
  "ared.TriggerColliderAttr\0222\n\007polygon\030\002 \001("
  "\0132!.shared.SerializableConvexPolygon\"\?\n\025"
  "TrapColliderAttrArray\022&\n\004list\030\001 \003(\0132\030.sh"
  "ared.TrapColliderAttr\"\270\001\n$SerializedTrap"
  "LocalIdToColliderAttrs\022D\n\004dict\030\001 \003(\01326.s"
  "hared.SerializedTrapLocalIdToColliderAtt"
  "rs.DictEntry\032J\n\tDictEntry\022\013\n\003key\030\001 \001(\005\022,"
  "\n\005value\030\002 \001(\0132\035.shared.TrapColliderAttrA"
  "rray:\0028\001\"\251\002\n\"SerializedTriggerEditorIdTo"
  "LocalId\022B\n\004dict\030\001 \003(\01324.shared.Serialize"
  "dTriggerEditorIdToLocalId.DictEntry\022D\n\005d"
  "ict2\030\002 \003(\01325.shared.SerializedTriggerEdi"
  "torIdToLocalId.Dict2Entry\032+\n\tDictEntry\022\013"
  "\n\003key\030\001 \001(\005\022\r\n\005value\030\002 \001(\005:\0028\001\032L\n\nDict2E"
  "ntry\022\013\n\003key\030\001 \001(\005\022-\n\005value\030\002 \001(\0132\036.share"
  "d.TriggerConfigFromTiled:\0028\001\"\262\003\n\027Pickabl"
  "eConfigFromTiled\022\033\n\023init_virtual_grid_x\030"
  "\001 \001(\005\022\033\n\023init_virtual_grid_y\030\002 \001(\005\022\025\n\rta"
  "kes_gravity\030\003 \001(\010\022\031\n\021first_show_rdf_id\030\004"
  " \001(\005\022\023\n\013recur_quota\030\005 \001(\005\022 \n\030recur_inter"
  "val_rdf_count\030\006 \001(\r\022)\n!lifetime_rdf_coun"
  "t_per_occurrence\030\007 \001(\r\022\'\n\013pickup_type\030\010 "
  "\001(\0162\022.shared.PickupType\022\"\n\032stock_quota_p"
  "er_occurrence\030\t \001(\r\022\027\n\017subscription_id\030\n"
  " \001(\005\022\026\n\016vfx_species_id\030\013 \001(\005\022\036\n\025consumab"
  "le_species_id\030\200\010 \001(\r\022\030\n\017buff_species_id\030"
  "\201\010 \001(\r\022\021\n\010skill_id\030\202\010 \001(\r\"\275\002\n\010Pickable\022\031"
  "\n\021pickable_local_id\030\001 \001(\005\022\t\n\001x\030\002 \001(\002\022\t\n\001"
  "y\030\003 \001(\002\022:\n\021config_from_tiled\030\004 \001(\0132\037.sha"
  "red.PickableConfigFromTiled\022$\n\034remaining"
  "_lifetime_rdf_count\030\005 \001(\005\022\035\n\025remaining_r"
  "ecur_quota\030\006 \001(\005\022\r\n\005vel_x\030\007 \001(\002\022\r\n\005vel_y"
  "\030\010 \001(\002\022\'\n\010pk_state\030\t \001(\0162\025.shared.Pickab"
  "leState\022\032\n\022frames_in_pk_state\030\n \001(\005\022\034\n\024p"
  "icked_by_join_index\030\013 \001(\005\"<\n\021InjectedCmd"
  "Config\022\033\n\023cutoff_rdf_frame_id\030\001 \001(\005\022\n\n\002o"
  "p\030\002 \001(\004\"d\n\026CharacterSpawnerConfig\022\033\n\023cut"
  "off_rdf_frame_id\030\001 \001(\005\022\027\n\017species_id_lis"
  "t\030\002 \003(\r\022\024\n\014init_op_list\030\003 \003(\004\"\221\001\n\025Pickab"
  "leSpawnerConfig\022\033\n\023cutoff_rdf_frame_id\030\001"
  " \001(\005\022\027\n\017species_id_list\030\002 \003(\r\022\024\n\014init_op"
  "_list\030\003 \003(\004\022,\n\020pickup_type_list\030\004 \003(\0162\022."
  "shared.PickupType\"C\n\023TriggerColliderAttr"
  "\022\030\n\020trigger_local_id\030\001 \001(\005\022\022\n\nspecies_id"
  "\030\002 \001(\005\"\317\006\n\026TriggerConfigFromTiled\022\021\n\tedi"
  "tor_id\030\001 \001(\005\022\022\n\nspecies_id\030\002 \001(\005\022\026\n\016dela"
  "yed_frames\030\003 \001(\005\022\027\n\017recovery_frames\030\004 \001("
  "\005\022\026\n\016bullet_team_id\030\005 \001(\005\022 \n\030sub_cycle_t"
  "rigger_frames\030\006 \001(\005\022\027\n\017sub_cycle_quota\030\007"
  " \001(\005\022\021\n\tquota_cap\030\010 \001(\005\022\035\n\025subscribes_to"
  "_id_list\030\t \003(\005\022\'\n\037subscribes_to_exhauste"
  "d_id_list\030\n \003(\005\022\025\n\rnew_revival_x\030\013 \001(\002\022\025"
  "\n\rnew_revival_y\030\014 \001(\002\022\022\n\ninit_dir_x\030\r \001("
  "\005\022\022\n\ninit_dir_y\030\016 \001(\005\022*\n\"publishing_evt_"
  "mask_upon_exhausted\030\017 \001(\004\022B\n\032character_s"
  "pawner_time_seq\030\020 \003(\0132\036.shared.Character"
  "SpawnerConfig\022@\n\031pickable_spawner_time_s"
  "eq\030\021 \003(\0132\035.shared.PickableSpawnerConfig\022"
  "\034\n\024force_ctrl_rdf_count\030\022 \001(\005\022\026\n\016force_c"
  "trl_cmd\030\023 \001(\004\022%\n\035reload_colliders_in_new"
  "_phase\030\024 \001(\010\022\027\n\016story_point_id\030\200\010 \001(\005\022\017\n"
  "\006bgm_id\030\201\010 \001(\005\022M\n\020boss_species_set\030\202\010 \003("
  "\01322.shared.TriggerConfigFromTiled.BossSp"
  "eciesSetEntry\022\032\n\021is_boss_savepoint\030\203\010 \001("
  "\010\0325\n\023BossSpeciesSetEntry\022\013\n\003key\030\001 \001(\r\022\r\n"
  "\005value\030\002 \001(\010:\0028\001\"\376\003\n\007Trigger\022\021\n\teditor_i"
  "d\030\001 \001(\005\022\030\n\020trigger_local_id\030\002 \001(\005\022\026\n\016fra"
  "mes_to_fire\030\003 \001(\005\022\031\n\021frames_to_recover\030\004"
  " \001(\005\022\r\n\005quota\030\005 \001(\005\022\026\n\016bullet_team_id\030\006 "
  "\001(\005\022\r\n\005dir_x\030\007 \001(\005\022\034\n\024sub_cycle_quota_le"
  "ft\030\t \001(\005\022#\n\005state\030\n \001(\0162\024.shared.Trigger"
  "State\022\027\n\017frames_in_state\030\013 \001(\005\022\t\n\001x\030\014 \001("
  "\002\022\t\n\001y\030\r \001(\002\022\031\n\021demanded_evt_mask\030\016 \001(\004\022"
  "\032\n\022fulfilled_evt_mask\030\017 \001(\004\022(\n wave_npc_"
  "killed_evt_mask_counter\030\020 \001(\004\022!\n\031subscri"
  "ber_local_ids_mask\030\021 \001(\004\022)\n!exhaust_subs"
  "criber_local_ids_mask\030\022 \001(\004\022\033\n\023offender_"
  "join_index\030\023 \001(\005\022\037\n\027offender_bullet_team"
  "_id\030\024 \001(\005\"t\n\016PlayerMetaInfo\022\021\n\tplayer_id"
  "\030\001 \001(\t\022\022\n\njoin_index\030\002 \001(\005\022\026\n\016bullet_tea"
  "m_id\030\003 \001(\005\022\022\n\nspecies_id\030\004 \001(\r\022\017\n\007room_i"
  "d\030\005 \001(\005\"s\n\021RpcEndpointHolder\022\n\n\002id\030\001 \001(\r"
  "\022\032\n\022external_addr_host\030\002 \001(\t\022\032\n\022external"
  "_addr_port\030\003 \001(\r\022\032\n\022internal_addr_host\030\004"
  " \001(\t*4\n\024BoxInterpolationType\022\013\n\007UsePrev\020"
  "\000\022\017\n\013Interpolate\020\001*U\n\010IfaceCat\022\t\n\005EMPTY\020"
  "\000\022\t\n\005FLESH\020\001\022\t\n\005METAL\020\002\022\t\n\005FLUID\020\003\022\010\n\004RO"
  "CK\020\004\022\t\n\005GRASS\020\005\022\010\n\004WOOD\020\006*D\n\013BulletState"
  "\022\013\n\007StartUp\020\000\022\n\n\006Active\020\001\022\r\n\tExploding\020\002"
  "\022\r\n\tVanishing\020\003*\270\007\n\016CharacterState\022\t\n\005Id"
  "le1\020\000\022\013\n\007Walking\020\001\022\016\n\nTurnAround\020\002\022\n\n\006At"
  "ked1\020\003\022\024\n\020InAirIdle1NoJump\020\004\022\024\n\020InAirIdl"
  "e1ByJump\020\005\022\024\n\020InAirIdle2ByJump\020\006\022\030\n\024InAi"
  "rIdle1ByWallJump\020\007\022\017\n\013InAirAtked1\020\010\022\014\n\010B"
  "lownUp1\020\t\022\014\n\010LayDown1\020\n\022\n\n\006GetUp1\020\013\022\t\n\005D"
  "ying\020\014\022\013\n\007Dashing\020\r\022\013\n\007Sliding\020\016\022\n\n\006Dimm"
  "ed\020\017\022\024\n\020TransformingInto\020\020\022\017\n\013BackDashin"
  "g\020\021\022\020\n\014InAirWalking\020\022\022\035\n\031TransformingInt"
  "oFromDeath\020\023\022\020\n\014WalkStopping\020\024\022\025\n\021InAirW"
  "alkStopping\020\025\022\013\n\007Parried\020\026\022\013\n\007Awaking\020\027\022"
  "\020\n\014GroundDodged\020\030\022\017\n\013BackWalking\020\031\022\020\n\013On"
  "WallIdle1\020\200\001\022\020\n\013CrouchIdle1\020\200\002\022\017\n\nCrouch"
  "Atk1\020\201\002\022\022\n\rCrouchWalking\020\202\002\022\021\n\014CrouchAtk"
  "ed1\020\203\002\022\t\n\004Def1\020\204\002\022\017\n\nDef1Atked1\020\205\002\022\017\n\nDe"
  "f1Broken\020\206\002\022\t\n\004Atk1\020\200\010\022\t\n\004Atk2\020\201\010\022\t\n\004Atk"
  "3\020\202\010\022\t\n\004Atk4\020\203\010\022\t\n\004Atk5\020\204\010\022\t\n\004Atk6\020\205\010\022\t\n"
  "\004Atk7\020\206\010\022\022\n\rAtk7_Charging\020\207\010\022\027\n\022Atk7_Cha"
  "rgeRelease\020\210\010\022\t\n\004Atk8\020\211\010\022\016\n\tInAirAtk1\020\200\020"
  "\022\016\n\tInAirAtk2\020\201\020\022\020\n\013WalkingAtk1\020\202\020\022\020\n\013Wa"
  "lkingAtk4\020\203\020\022\016\n\tInAirAtk6\020\204\020\022\017\n\nOnWallAt"
  "k1\020\200\030\022\023\n\016Idle1_Charging\020\201\030\022\031\n\024WalkingAtk"
  "1_Charging\020\202\030\022\027\n\022InAirAtk1_Charging\020\203\030\022\030"
  "\n\023OnWallAtk1_Charging\020\204\030\022\030\n\023CrouchAtk1_C"
  "harging\020\205\030*\223\001\n\007NpcGoal\022\t\n\005NIdle\020\000\022\017\n\013NFo"
  "llowAlly\020\001\022\013\n\007NPatrol\020\002\022\021\n\rNHuntThenIdle"
  "\020\003\022\023\n\017NHuntThenPatrol\020\004\022\027\n\023NHuntThenFoll"
  "owAlly\020\005\022\036\n\032NIdleIfGoHuntingThenPatrol\020\006"
  "*N\n\tTrapState\022\t\n\005TIdle\020\000\022\014\n\010TWalking\020\001\022\t"
  "\n\005TAtk1\020\002\022\013\n\007TAtked1\020\003\022\020\n\014TDeactivated\020\004"
  "*,\n\014TriggerState\022\n\n\006TReady\020\000\022\020\n\014TCooling"
  "Down\020\001*<\n\rPickableState\022\t\n\005PIdle\020\000\022\021\n\rPD"
  "isappearing\020\001\022\r\n\tPConsumed\020\002*v\n\nBulletTy"
  "pe\022\020\n\014Undetermined\020\000\022\t\n\005Melee\020\001\022\014\n\010Fireb"
  "all\020\002\022\016\n\nGroundWave\020\003\022\021\n\rMissileLinear\020\004"
  "\022\032\n\026MissileQuadraticBezier\020\005*\346\001\n\014MultiHi"
  "tType\022\010\n\004None\020\000\022\020\n\014FromEmission\020\001\022\026\n\022Fro"
  "mFirstHitActual\020\002\022\026\n\022FromFirstHitAnyway\020"
  "\003\022\025\n\021FromPrevHitActual\020\004\022\025\n\021FromPrevHitA"
  "nyway\020\005\022\033\n\027FromVisionSeekOrDefault\020\006\022#\n\037"
  "FromPrevHitActualOrActiveTimeUp\020\007\022\032\n\026Fro"
  "mEmissionJustActive\020\010*3\n\020SkillTriggerTyp"
  "e\022\016\n\nRisingEdge\020\000\022\017\n\013FallingEdge\020\001*,\n\017Vf"
  "xDurationType\022\n\n\006OneOff\020\000\022\r\n\tRepeating\020\001"
  "*7\n\rVfxMotionType\022\014\n\010NoMotion\020\000\022\013\n\007Dropp"
  "ed\020\001\022\013\n\007Tracing\020\002*y\n\013TriggerType\022\n\n\006TtNo"
  "ne\020\000\022\r\n\tTtTrivial\020\001\022\021\n\rTtCyclicTimed\020\002\022\016"
  "\n\nTtIndiWave\020\003\022\016\n\nTtSyncWave\020\004\022\016\n\nTtMove"
  "ment\020\005\022\014\n\010TtAttack\020\006*1\n\rBuffStockType\022\n\n"
  "\006NoneBf\020\000\022\t\n\005Timed\020\001\022\t\n\005Quota\020\002*q\n\nDebuf"
  "fType\022\013\n\007NoneDbf\020\000\022\021\n\rSpeedDownOnly\020\001\022\021\n"
  "\rColdSpeedDown\020\002\022\026\n\022PositionLockedOnly\020\003"
  "\022\030\n\024FrozenPositionLocked\020\004*6\n\016Consumable"
  "Type\022\014\n\010NoneCsmb\020\000\022\n\n\006Refill\020\001\022\n\n\006DbfRcv"
  "\020\002*\237\001\n\026InventorySlotStockType\022\n\n\006NoneIv\020"
  "\000\022\013\n\007DummyIv\020\001\022\014\n\010PocketIv\020\002\022\013\n\007TimedIv\020"
  "\003\022\013\n\007QuotaIv\020\004\022\023\n\017TimedMagazineIv\020\005\022\024\n\020G"
  "augedMagazineIv\020\006\022\031\n\025GaugedTimedMagazine"
  "Iv\020\007*<\n\031PlayerStoryModeSelectView\022\010\n\004NON"
  "E\020\000\022\n\n\006REGION\020\001\022\t\n\005LEVEL\020\002*5\n\020FinishedLv"
  "Option\022\r\n\tBOSS_ONLY\020\000\022\022\n\016STORY_AND_BOSS\020"
  "\001*1\n\nPickupType\022\r\n\tImmediate\020\000\022\024\n\020PutInt"
  "oInventory\020\001B\t\252\002\006sharedb\006proto3"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_serializable_5fdata_2eproto = {
  false, InitDefaults_serializable_5fdata_2eproto, 
  descriptor_table_protodef_serializable_5fdata_2eproto,
  "serializable_data.proto", &assign_descriptors_table_serializable_5fdata_2eproto, 27711,
};

void AddDescriptors_serializable_5fdata_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[1] =
  {
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_serializable_5fdata_2eproto, deps, 0);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_serializable_5fdata_2eproto = []() { AddDescriptors_serializable_5fdata_2eproto(); return true; }();
namespace shared {
const ::google::protobuf::EnumDescriptor* BoxInterpolationType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_serializable_5fdata_2eproto);
  return file_level_enum_descriptors_serializable_5fdata_2eproto[0];
}
bool BoxInterpolationType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* IfaceCat_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_serializable_5fdata_2eproto);
  return file_level_enum_descriptors_serializable_5fdata_2eproto[1];
}
bool IfaceCat_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* BulletState_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_serializable_5fdata_2eproto);
  return file_level_enum_descriptors_serializable_5fdata_2eproto[2];
}
bool BulletState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* CharacterState_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_serializable_5fdata_2eproto);
  return file_level_enum_descriptors_serializable_5fdata_2eproto[3];
}
bool CharacterState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 128:
    case 256:
    case 257:
    case 258:
    case 259:
    case 260:
    case 261:
    case 262:
    case 1024:
    case 1025:
    case 1026:
    case 1027:
    case 1028:
    case 1029:
    case 1030:
    case 1031:
    case 1032:
    case 1033:
    case 2048:
    case 2049:
    case 2050:
    case 2051:
    case 2052:
    case 3072:
    case 3073:
    case 3074:
    case 3075:
    case 3076:
    case 3077:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* NpcGoal_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_serializable_5fdata_2eproto);
  return file_level_enum_descriptors_serializable_5fdata_2eproto[4];
}
bool NpcGoal_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* TrapState_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_serializable_5fdata_2eproto);
  return file_level_enum_descriptors_serializable_5fdata_2eproto[5];
}
bool TrapState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* TriggerState_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_serializable_5fdata_2eproto);
  return file_level_enum_descriptors_serializable_5fdata_2eproto[6];
}
bool TriggerState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* PickableState_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_serializable_5fdata_2eproto);
  return file_level_enum_descriptors_serializable_5fdata_2eproto[7];
}
bool PickableState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* BulletType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_serializable_5fdata_2eproto);
  return file_level_enum_descriptors_serializable_5fdata_2eproto[8];
}
bool BulletType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* MultiHitType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_serializable_5fdata_2eproto);
  return file_level_enum_descriptors_serializable_5fdata_2eproto[9];
}
bool MultiHitType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* SkillTriggerType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_serializable_5fdata_2eproto);
  return file_level_enum_descriptors_serializable_5fdata_2eproto[10];
}
bool SkillTriggerType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* VfxDurationType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_serializable_5fdata_2eproto);
  return file_level_enum_descriptors_serializable_5fdata_2eproto[11];
}
bool VfxDurationType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* VfxMotionType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_serializable_5fdata_2eproto);
  return file_level_enum_descriptors_serializable_5fdata_2eproto[12];
}
bool VfxMotionType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* TriggerType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_serializable_5fdata_2eproto);
  return file_level_enum_descriptors_serializable_5fdata_2eproto[13];
}
bool TriggerType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* BuffStockType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_serializable_5fdata_2eproto);
  return file_level_enum_descriptors_serializable_5fdata_2eproto[14];
}
bool BuffStockType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* DebuffType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_serializable_5fdata_2eproto);
  return file_level_enum_descriptors_serializable_5fdata_2eproto[15];
}
bool DebuffType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ConsumableType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_serializable_5fdata_2eproto);
  return file_level_enum_descriptors_serializable_5fdata_2eproto[16];
}
bool ConsumableType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* InventorySlotStockType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_serializable_5fdata_2eproto);
  return file_level_enum_descriptors_serializable_5fdata_2eproto[17];
}
bool InventorySlotStockType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* PlayerStoryModeSelectView_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_serializable_5fdata_2eproto);
  return file_level_enum_descriptors_serializable_5fdata_2eproto[18];
}
bool PlayerStoryModeSelectView_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* FinishedLvOption_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_serializable_5fdata_2eproto);
  return file_level_enum_descriptors_serializable_5fdata_2eproto[19];
}
bool FinishedLvOption_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* PickupType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_serializable_5fdata_2eproto);
  return file_level_enum_descriptors_serializable_5fdata_2eproto[20];
}
bool PickupType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void AuthTokenUnderlying::InitAsDefaultInstance() {
}
class AuthTokenUnderlying::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AuthTokenUnderlying::kPlayerIdFieldNumber;
const int AuthTokenUnderlying::kFromAuthsrvIdFieldNumber;
const int AuthTokenUnderlying::kToBattlesrvIdFieldNumber;
const int AuthTokenUnderlying::kExpiresAtFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AuthTokenUnderlying::AuthTokenUnderlying()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:shared.AuthTokenUnderlying)
}
AuthTokenUnderlying::AuthTokenUnderlying(const AuthTokenUnderlying& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  player_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.player_id().size() > 0) {
    player_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.player_id_);
  }
  ::memcpy(&from_authsrv_id_, &from.from_authsrv_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&expires_at_) -
    reinterpret_cast<char*>(&from_authsrv_id_)) + sizeof(expires_at_));
  // @@protoc_insertion_point(copy_constructor:shared.AuthTokenUnderlying)
}

void AuthTokenUnderlying::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_AuthTokenUnderlying_serializable_5fdata_2eproto.base);
  player_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&from_authsrv_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&expires_at_) -
      reinterpret_cast<char*>(&from_authsrv_id_)) + sizeof(expires_at_));
}

AuthTokenUnderlying::~AuthTokenUnderlying() {
  // @@protoc_insertion_point(destructor:shared.AuthTokenUnderlying)
  SharedDtor();
}

void AuthTokenUnderlying::SharedDtor() {
  player_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void AuthTokenUnderlying::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AuthTokenUnderlying& AuthTokenUnderlying::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_AuthTokenUnderlying_serializable_5fdata_2eproto.base);
  return *internal_default_instance();
}


void AuthTokenUnderlying::Clear() {
// @@protoc_insertion_point(message_clear_start:shared.AuthTokenUnderlying)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  player_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&from_authsrv_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&expires_at_) -
      reinterpret_cast<char*>(&from_authsrv_id_)) + sizeof(expires_at_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AuthTokenUnderlying::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<AuthTokenUnderlying*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string player_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("shared.AuthTokenUnderlying.player_id");
        object = msg->mutable_player_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // uint32 from_authsrv_id = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_from_authsrv_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // uint32 to_battlesrv_id = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_to_battlesrv_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int64 expires_at = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_expires_at(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AuthTokenUnderlying::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:shared.AuthTokenUnderlying)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string player_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_player_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->player_id().data(), static_cast<int>(this->player_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "shared.AuthTokenUnderlying.player_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 from_authsrv_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &from_authsrv_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 to_battlesrv_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &to_battlesrv_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 expires_at = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &expires_at_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:shared.AuthTokenUnderlying)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:shared.AuthTokenUnderlying)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AuthTokenUnderlying::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:shared.AuthTokenUnderlying)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string player_id = 1;
  if (this->player_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->player_id().data(), static_cast<int>(this->player_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "shared.AuthTokenUnderlying.player_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->player_id(), output);
  }

  // uint32 from_authsrv_id = 2;
  if (this->from_authsrv_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->from_authsrv_id(), output);
  }

  // uint32 to_battlesrv_id = 3;
  if (this->to_battlesrv_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->to_battlesrv_id(), output);
  }

  // int64 expires_at = 4;
  if (this->expires_at() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->expires_at(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:shared.AuthTokenUnderlying)
}

::google::protobuf::uint8* AuthTokenUnderlying::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:shared.AuthTokenUnderlying)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string player_id = 1;
  if (this->player_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->player_id().data(), static_cast<int>(this->player_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "shared.AuthTokenUnderlying.player_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->player_id(), target);
  }

  // uint32 from_authsrv_id = 2;
  if (this->from_authsrv_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->from_authsrv_id(), target);
  }

  // uint32 to_battlesrv_id = 3;
  if (this->to_battlesrv_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->to_battlesrv_id(), target);
  }

  // int64 expires_at = 4;
  if (this->expires_at() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->expires_at(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:shared.AuthTokenUnderlying)
  return target;
}

size_t AuthTokenUnderlying::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:shared.AuthTokenUnderlying)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string player_id = 1;
  if (this->player_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->player_id());
  }

  // uint32 from_authsrv_id = 2;
  if (this->from_authsrv_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->from_authsrv_id());
  }

  // uint32 to_battlesrv_id = 3;
  if (this->to_battlesrv_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->to_battlesrv_id());
  }

  // int64 expires_at = 4;
  if (this->expires_at() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->expires_at());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AuthTokenUnderlying::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:shared.AuthTokenUnderlying)
  GOOGLE_DCHECK_NE(&from, this);
  const AuthTokenUnderlying* source =
      ::google::protobuf::DynamicCastToGenerated<AuthTokenUnderlying>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:shared.AuthTokenUnderlying)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:shared.AuthTokenUnderlying)
    MergeFrom(*source);
  }
}

void AuthTokenUnderlying::MergeFrom(const AuthTokenUnderlying& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:shared.AuthTokenUnderlying)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.player_id().size() > 0) {

    player_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.player_id_);
  }
  if (from.from_authsrv_id() != 0) {
    set_from_authsrv_id(from.from_authsrv_id());
  }
  if (from.to_battlesrv_id() != 0) {
    set_to_battlesrv_id(from.to_battlesrv_id());
  }
  if (from.expires_at() != 0) {
    set_expires_at(from.expires_at());
  }
}

void AuthTokenUnderlying::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:shared.AuthTokenUnderlying)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AuthTokenUnderlying::CopyFrom(const AuthTokenUnderlying& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:shared.AuthTokenUnderlying)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuthTokenUnderlying::IsInitialized() const {
  return true;
}

void AuthTokenUnderlying::Swap(AuthTokenUnderlying* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AuthTokenUnderlying::InternalSwap(AuthTokenUnderlying* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  player_id_.Swap(&other->player_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(from_authsrv_id_, other->from_authsrv_id_);
  swap(to_battlesrv_id_, other->to_battlesrv_id_);
  swap(expires_at_, other->expires_at_);
}

::google::protobuf::Metadata AuthTokenUnderlying::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_serializable_5fdata_2eproto);
  return ::file_level_metadata_serializable_5fdata_2eproto[kIndexInFileMessages];
}


// ===================================================================

void AuthResult::InitAsDefaultInstance() {
}
class AuthResult::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AuthResult::kRetCodeFieldNumber;
const int AuthResult::kUnameFieldNumber;
const int AuthResult::kCaptchaFieldNumber;
const int AuthResult::kExpiresAtFieldNumber;
const int AuthResult::kPlayerIdFieldNumber;
const int AuthResult::kNewAuthTokenFieldNumber;
const int AuthResult::kNewAuthTokenSigFieldNumber;
const int AuthResult::kCaptchaSubmitAuthsrvIdFieldNumber;
const int AuthResult::kBattlesrvHostnameOnlyFieldNumber;
const int AuthResult::kBattlesrvEndpointFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AuthResult::AuthResult()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:shared.AuthResult)
}
AuthResult::AuthResult(const AuthResult& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  uname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.uname().size() > 0) {
    uname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uname_);
  }
  captcha_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.captcha().size() > 0) {
    captcha_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.captcha_);
  }
  player_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.player_id().size() > 0) {
    player_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.player_id_);
  }
  new_auth_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.new_auth_token().size() > 0) {
    new_auth_token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.new_auth_token_);
  }
  new_auth_token_sig_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.new_auth_token_sig().size() > 0) {
    new_auth_token_sig_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.new_auth_token_sig_);
  }
  battlesrv_hostname_only_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.battlesrv_hostname_only().size() > 0) {
    battlesrv_hostname_only_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.battlesrv_hostname_only_);
  }
  battlesrv_endpoint_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.battlesrv_endpoint().size() > 0) {
    battlesrv_endpoint_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.battlesrv_endpoint_);
  }
  ::memcpy(&expires_at_, &from.expires_at_,
    static_cast<size_t>(reinterpret_cast<char*>(&captcha_submit_authsrv_id_) -
    reinterpret_cast<char*>(&expires_at_)) + sizeof(captcha_submit_authsrv_id_));
  // @@protoc_insertion_point(copy_constructor:shared.AuthResult)
}

void AuthResult::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_AuthResult_serializable_5fdata_2eproto.base);
  uname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  captcha_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  player_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  new_auth_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  new_auth_token_sig_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  battlesrv_hostname_only_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  battlesrv_endpoint_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&expires_at_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&captcha_submit_authsrv_id_) -
      reinterpret_cast<char*>(&expires_at_)) + sizeof(captcha_submit_authsrv_id_));
}

AuthResult::~AuthResult() {
  // @@protoc_insertion_point(destructor:shared.AuthResult)
  SharedDtor();
}

void AuthResult::SharedDtor() {
  uname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  captcha_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  player_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  new_auth_token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  new_auth_token_sig_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  battlesrv_hostname_only_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  battlesrv_endpoint_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void AuthResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AuthResult& AuthResult::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_AuthResult_serializable_5fdata_2eproto.base);
  return *internal_default_instance();
}


void AuthResult::Clear() {
// @@protoc_insertion_point(message_clear_start:shared.AuthResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  uname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  captcha_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  player_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  new_auth_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  new_auth_token_sig_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  battlesrv_hostname_only_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  battlesrv_endpoint_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&expires_at_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&captcha_submit_authsrv_id_) -
      reinterpret_cast<char*>(&expires_at_)) + sizeof(captcha_submit_authsrv_id_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AuthResult::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<AuthResult*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int32 ret_code = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_ret_code(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string uname = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("shared.AuthResult.uname");
        object = msg->mutable_uname();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string captcha = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("shared.AuthResult.captcha");
        object = msg->mutable_captcha();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // int64 expires_at = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_expires_at(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string player_id = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("shared.AuthResult.player_id");
        object = msg->mutable_player_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string new_auth_token = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("shared.AuthResult.new_auth_token");
        object = msg->mutable_new_auth_token();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string new_auth_token_sig = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 58) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("shared.AuthResult.new_auth_token_sig");
        object = msg->mutable_new_auth_token_sig();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // uint32 captcha_submit_authsrv_id = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 64) goto handle_unusual;
        msg->set_captcha_submit_authsrv_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string battlesrv_hostname_only = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 74) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("shared.AuthResult.battlesrv_hostname_only");
        object = msg->mutable_battlesrv_hostname_only();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string battlesrv_endpoint = 10;
      case 10: {
        if (static_cast<::google::protobuf::uint8>(tag) != 82) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("shared.AuthResult.battlesrv_endpoint");
        object = msg->mutable_battlesrv_endpoint();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AuthResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:shared.AuthResult)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 ret_code = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string uname = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->uname().data(), static_cast<int>(this->uname().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "shared.AuthResult.uname"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string captcha = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_captcha()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->captcha().data(), static_cast<int>(this->captcha().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "shared.AuthResult.captcha"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 expires_at = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &expires_at_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string player_id = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_player_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->player_id().data(), static_cast<int>(this->player_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "shared.AuthResult.player_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string new_auth_token = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_new_auth_token()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->new_auth_token().data(), static_cast<int>(this->new_auth_token().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "shared.AuthResult.new_auth_token"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string new_auth_token_sig = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (58 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_new_auth_token_sig()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->new_auth_token_sig().data(), static_cast<int>(this->new_auth_token_sig().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "shared.AuthResult.new_auth_token_sig"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 captcha_submit_authsrv_id = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (64 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &captcha_submit_authsrv_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string battlesrv_hostname_only = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (74 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_battlesrv_hostname_only()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->battlesrv_hostname_only().data(), static_cast<int>(this->battlesrv_hostname_only().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "shared.AuthResult.battlesrv_hostname_only"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string battlesrv_endpoint = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (82 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_battlesrv_endpoint()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->battlesrv_endpoint().data(), static_cast<int>(this->battlesrv_endpoint().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "shared.AuthResult.battlesrv_endpoint"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:shared.AuthResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:shared.AuthResult)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AuthResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:shared.AuthResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 ret_code = 1;
  if (this->ret_code() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret_code(), output);
  }

  // string uname = 2;
  if (this->uname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->uname().data(), static_cast<int>(this->uname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "shared.AuthResult.uname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->uname(), output);
  }

  // string captcha = 3;
  if (this->captcha().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->captcha().data(), static_cast<int>(this->captcha().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "shared.AuthResult.captcha");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->captcha(), output);
  }

  // int64 expires_at = 4;
  if (this->expires_at() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->expires_at(), output);
  }

  // string player_id = 5;
  if (this->player_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->player_id().data(), static_cast<int>(this->player_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "shared.AuthResult.player_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->player_id(), output);
  }

  // string new_auth_token = 6;
  if (this->new_auth_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->new_auth_token().data(), static_cast<int>(this->new_auth_token().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "shared.AuthResult.new_auth_token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->new_auth_token(), output);
  }

  // string new_auth_token_sig = 7;
  if (this->new_auth_token_sig().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->new_auth_token_sig().data(), static_cast<int>(this->new_auth_token_sig().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "shared.AuthResult.new_auth_token_sig");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->new_auth_token_sig(), output);
  }

  // uint32 captcha_submit_authsrv_id = 8;
  if (this->captcha_submit_authsrv_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->captcha_submit_authsrv_id(), output);
  }

  // string battlesrv_hostname_only = 9;
  if (this->battlesrv_hostname_only().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->battlesrv_hostname_only().data(), static_cast<int>(this->battlesrv_hostname_only().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "shared.AuthResult.battlesrv_hostname_only");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->battlesrv_hostname_only(), output);
  }

  // string battlesrv_endpoint = 10;
  if (this->battlesrv_endpoint().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->battlesrv_endpoint().data(), static_cast<int>(this->battlesrv_endpoint().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "shared.AuthResult.battlesrv_endpoint");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->battlesrv_endpoint(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:shared.AuthResult)
}

::google::protobuf::uint8* AuthResult::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:shared.AuthResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 ret_code = 1;
  if (this->ret_code() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret_code(), target);
  }

  // string uname = 2;
  if (this->uname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->uname().data(), static_cast<int>(this->uname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "shared.AuthResult.uname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->uname(), target);
  }

  // string captcha = 3;
  if (this->captcha().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->captcha().data(), static_cast<int>(this->captcha().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "shared.AuthResult.captcha");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->captcha(), target);
  }

  // int64 expires_at = 4;
  if (this->expires_at() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->expires_at(), target);
  }

  // string player_id = 5;
  if (this->player_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->player_id().data(), static_cast<int>(this->player_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "shared.AuthResult.player_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->player_id(), target);
  }

  // string new_auth_token = 6;
  if (this->new_auth_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->new_auth_token().data(), static_cast<int>(this->new_auth_token().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "shared.AuthResult.new_auth_token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->new_auth_token(), target);
  }

  // string new_auth_token_sig = 7;
  if (this->new_auth_token_sig().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->new_auth_token_sig().data(), static_cast<int>(this->new_auth_token_sig().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "shared.AuthResult.new_auth_token_sig");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->new_auth_token_sig(), target);
  }

  // uint32 captcha_submit_authsrv_id = 8;
  if (this->captcha_submit_authsrv_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->captcha_submit_authsrv_id(), target);
  }

  // string battlesrv_hostname_only = 9;
  if (this->battlesrv_hostname_only().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->battlesrv_hostname_only().data(), static_cast<int>(this->battlesrv_hostname_only().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "shared.AuthResult.battlesrv_hostname_only");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->battlesrv_hostname_only(), target);
  }

  // string battlesrv_endpoint = 10;
  if (this->battlesrv_endpoint().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->battlesrv_endpoint().data(), static_cast<int>(this->battlesrv_endpoint().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "shared.AuthResult.battlesrv_endpoint");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->battlesrv_endpoint(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:shared.AuthResult)
  return target;
}

size_t AuthResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:shared.AuthResult)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string uname = 2;
  if (this->uname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->uname());
  }

  // string captcha = 3;
  if (this->captcha().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->captcha());
  }

  // string player_id = 5;
  if (this->player_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->player_id());
  }

  // string new_auth_token = 6;
  if (this->new_auth_token().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->new_auth_token());
  }

  // string new_auth_token_sig = 7;
  if (this->new_auth_token_sig().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->new_auth_token_sig());
  }

  // string battlesrv_hostname_only = 9;
  if (this->battlesrv_hostname_only().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->battlesrv_hostname_only());
  }

  // string battlesrv_endpoint = 10;
  if (this->battlesrv_endpoint().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->battlesrv_endpoint());
  }

  // int64 expires_at = 4;
  if (this->expires_at() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->expires_at());
  }

  // int32 ret_code = 1;
  if (this->ret_code() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->ret_code());
  }

  // uint32 captcha_submit_authsrv_id = 8;
  if (this->captcha_submit_authsrv_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->captcha_submit_authsrv_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AuthResult::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:shared.AuthResult)
  GOOGLE_DCHECK_NE(&from, this);
  const AuthResult* source =
      ::google::protobuf::DynamicCastToGenerated<AuthResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:shared.AuthResult)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:shared.AuthResult)
    MergeFrom(*source);
  }
}

void AuthResult::MergeFrom(const AuthResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:shared.AuthResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.uname().size() > 0) {

    uname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uname_);
  }
  if (from.captcha().size() > 0) {

    captcha_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.captcha_);
  }
  if (from.player_id().size() > 0) {

    player_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.player_id_);
  }
  if (from.new_auth_token().size() > 0) {

    new_auth_token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.new_auth_token_);
  }
  if (from.new_auth_token_sig().size() > 0) {

    new_auth_token_sig_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.new_auth_token_sig_);
  }
  if (from.battlesrv_hostname_only().size() > 0) {

    battlesrv_hostname_only_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.battlesrv_hostname_only_);
  }
  if (from.battlesrv_endpoint().size() > 0) {

    battlesrv_endpoint_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.battlesrv_endpoint_);
  }
  if (from.expires_at() != 0) {
    set_expires_at(from.expires_at());
  }
  if (from.ret_code() != 0) {
    set_ret_code(from.ret_code());
  }
  if (from.captcha_submit_authsrv_id() != 0) {
    set_captcha_submit_authsrv_id(from.captcha_submit_authsrv_id());
  }
}

void AuthResult::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:shared.AuthResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AuthResult::CopyFrom(const AuthResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:shared.AuthResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuthResult::IsInitialized() const {
  return true;
}

void AuthResult::Swap(AuthResult* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AuthResult::InternalSwap(AuthResult* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  uname_.Swap(&other->uname_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  captcha_.Swap(&other->captcha_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  player_id_.Swap(&other->player_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  new_auth_token_.Swap(&other->new_auth_token_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  new_auth_token_sig_.Swap(&other->new_auth_token_sig_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  battlesrv_hostname_only_.Swap(&other->battlesrv_hostname_only_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  battlesrv_endpoint_.Swap(&other->battlesrv_endpoint_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(expires_at_, other->expires_at_);
  swap(ret_code_, other->ret_code_);
  swap(captcha_submit_authsrv_id_, other->captcha_submit_authsrv_id_);
}

::google::protobuf::Metadata AuthResult::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_serializable_5fdata_2eproto);
  return ::file_level_metadata_serializable_5fdata_2eproto[kIndexInFileMessages];
}


// ===================================================================

void SteamAuthenticateUserTicketPayloadParams::InitAsDefaultInstance() {
}
class SteamAuthenticateUserTicketPayloadParams::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SteamAuthenticateUserTicketPayloadParams::kResultFieldNumber;
const int SteamAuthenticateUserTicketPayloadParams::kSteamidFieldNumber;
const int SteamAuthenticateUserTicketPayloadParams::kOwnersteamidFieldNumber;
const int SteamAuthenticateUserTicketPayloadParams::kVacbannedFieldNumber;
const int SteamAuthenticateUserTicketPayloadParams::kPublisherbannedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SteamAuthenticateUserTicketPayloadParams::SteamAuthenticateUserTicketPayloadParams()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:shared.SteamAuthenticateUserTicketPayloadParams)
}
SteamAuthenticateUserTicketPayloadParams::SteamAuthenticateUserTicketPayloadParams(const SteamAuthenticateUserTicketPayloadParams& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  result_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.result().size() > 0) {
    result_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.result_);
  }
  steamid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.steamid().size() > 0) {
    steamid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.steamid_);
  }
  ownersteamid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.ownersteamid().size() > 0) {
    ownersteamid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ownersteamid_);
  }
  ::memcpy(&vacbanned_, &from.vacbanned_,
    static_cast<size_t>(reinterpret_cast<char*>(&publisherbanned_) -
    reinterpret_cast<char*>(&vacbanned_)) + sizeof(publisherbanned_));
  // @@protoc_insertion_point(copy_constructor:shared.SteamAuthenticateUserTicketPayloadParams)
}

void SteamAuthenticateUserTicketPayloadParams::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_SteamAuthenticateUserTicketPayloadParams_serializable_5fdata_2eproto.base);
  result_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  steamid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ownersteamid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&vacbanned_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&publisherbanned_) -
      reinterpret_cast<char*>(&vacbanned_)) + sizeof(publisherbanned_));
}

SteamAuthenticateUserTicketPayloadParams::~SteamAuthenticateUserTicketPayloadParams() {
  // @@protoc_insertion_point(destructor:shared.SteamAuthenticateUserTicketPayloadParams)
  SharedDtor();
}

void SteamAuthenticateUserTicketPayloadParams::SharedDtor() {
  result_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  steamid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ownersteamid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SteamAuthenticateUserTicketPayloadParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SteamAuthenticateUserTicketPayloadParams& SteamAuthenticateUserTicketPayloadParams::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_SteamAuthenticateUserTicketPayloadParams_serializable_5fdata_2eproto.base);
  return *internal_default_instance();
}


void SteamAuthenticateUserTicketPayloadParams::Clear() {
// @@protoc_insertion_point(message_clear_start:shared.SteamAuthenticateUserTicketPayloadParams)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  result_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  steamid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ownersteamid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&vacbanned_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&publisherbanned_) -
      reinterpret_cast<char*>(&vacbanned_)) + sizeof(publisherbanned_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SteamAuthenticateUserTicketPayloadParams::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<SteamAuthenticateUserTicketPayloadParams*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string result = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("shared.SteamAuthenticateUserTicketPayloadParams.result");
        object = msg->mutable_result();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string steamid = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("shared.SteamAuthenticateUserTicketPayloadParams.steamid");
        object = msg->mutable_steamid();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string ownersteamid = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("shared.SteamAuthenticateUserTicketPayloadParams.ownersteamid");
        object = msg->mutable_ownersteamid();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // bool vacbanned = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_vacbanned(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // bool publisherbanned = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_publisherbanned(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SteamAuthenticateUserTicketPayloadParams::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:shared.SteamAuthenticateUserTicketPayloadParams)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string result = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_result()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->result().data(), static_cast<int>(this->result().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "shared.SteamAuthenticateUserTicketPayloadParams.result"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string steamid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_steamid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->steamid().data(), static_cast<int>(this->steamid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "shared.SteamAuthenticateUserTicketPayloadParams.steamid"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string ownersteamid = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ownersteamid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ownersteamid().data(), static_cast<int>(this->ownersteamid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "shared.SteamAuthenticateUserTicketPayloadParams.ownersteamid"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool vacbanned = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &vacbanned_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool publisherbanned = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &publisherbanned_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:shared.SteamAuthenticateUserTicketPayloadParams)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:shared.SteamAuthenticateUserTicketPayloadParams)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SteamAuthenticateUserTicketPayloadParams::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:shared.SteamAuthenticateUserTicketPayloadParams)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string result = 1;
  if (this->result().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->result().data(), static_cast<int>(this->result().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "shared.SteamAuthenticateUserTicketPayloadParams.result");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->result(), output);
  }

  // string steamid = 2;
  if (this->steamid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->steamid().data(), static_cast<int>(this->steamid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "shared.SteamAuthenticateUserTicketPayloadParams.steamid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->steamid(), output);
  }

  // string ownersteamid = 3;
  if (this->ownersteamid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ownersteamid().data(), static_cast<int>(this->ownersteamid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "shared.SteamAuthenticateUserTicketPayloadParams.ownersteamid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->ownersteamid(), output);
  }

  // bool vacbanned = 4;
  if (this->vacbanned() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->vacbanned(), output);
  }

  // bool publisherbanned = 5;
  if (this->publisherbanned() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->publisherbanned(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:shared.SteamAuthenticateUserTicketPayloadParams)
}

::google::protobuf::uint8* SteamAuthenticateUserTicketPayloadParams::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:shared.SteamAuthenticateUserTicketPayloadParams)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string result = 1;
  if (this->result().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->result().data(), static_cast<int>(this->result().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "shared.SteamAuthenticateUserTicketPayloadParams.result");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->result(), target);
  }

  // string steamid = 2;
  if (this->steamid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->steamid().data(), static_cast<int>(this->steamid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "shared.SteamAuthenticateUserTicketPayloadParams.steamid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->steamid(), target);
  }

  // string ownersteamid = 3;
  if (this->ownersteamid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ownersteamid().data(), static_cast<int>(this->ownersteamid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "shared.SteamAuthenticateUserTicketPayloadParams.ownersteamid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->ownersteamid(), target);
  }

  // bool vacbanned = 4;
  if (this->vacbanned() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->vacbanned(), target);
  }

  // bool publisherbanned = 5;
  if (this->publisherbanned() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->publisherbanned(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:shared.SteamAuthenticateUserTicketPayloadParams)
  return target;
}

size_t SteamAuthenticateUserTicketPayloadParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:shared.SteamAuthenticateUserTicketPayloadParams)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string result = 1;
  if (this->result().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->result());
  }

  // string steamid = 2;
  if (this->steamid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->steamid());
  }

  // string ownersteamid = 3;
  if (this->ownersteamid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ownersteamid());
  }

  // bool vacbanned = 4;
  if (this->vacbanned() != 0) {
    total_size += 1 + 1;
  }

  // bool publisherbanned = 5;
  if (this->publisherbanned() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SteamAuthenticateUserTicketPayloadParams::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:shared.SteamAuthenticateUserTicketPayloadParams)
  GOOGLE_DCHECK_NE(&from, this);
  const SteamAuthenticateUserTicketPayloadParams* source =
      ::google::protobuf::DynamicCastToGenerated<SteamAuthenticateUserTicketPayloadParams>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:shared.SteamAuthenticateUserTicketPayloadParams)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:shared.SteamAuthenticateUserTicketPayloadParams)
    MergeFrom(*source);
  }
}

void SteamAuthenticateUserTicketPayloadParams::MergeFrom(const SteamAuthenticateUserTicketPayloadParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:shared.SteamAuthenticateUserTicketPayloadParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.result().size() > 0) {

    result_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.result_);
  }
  if (from.steamid().size() > 0) {

    steamid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.steamid_);
  }
  if (from.ownersteamid().size() > 0) {

    ownersteamid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ownersteamid_);
  }
  if (from.vacbanned() != 0) {
    set_vacbanned(from.vacbanned());
  }
  if (from.publisherbanned() != 0) {
    set_publisherbanned(from.publisherbanned());
  }
}

void SteamAuthenticateUserTicketPayloadParams::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:shared.SteamAuthenticateUserTicketPayloadParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SteamAuthenticateUserTicketPayloadParams::CopyFrom(const SteamAuthenticateUserTicketPayloadParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:shared.SteamAuthenticateUserTicketPayloadParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SteamAuthenticateUserTicketPayloadParams::IsInitialized() const {
  return true;
}

void SteamAuthenticateUserTicketPayloadParams::Swap(SteamAuthenticateUserTicketPayloadParams* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SteamAuthenticateUserTicketPayloadParams::InternalSwap(SteamAuthenticateUserTicketPayloadParams* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  result_.Swap(&other->result_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  steamid_.Swap(&other->steamid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  ownersteamid_.Swap(&other->ownersteamid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(vacbanned_, other->vacbanned_);
  swap(publisherbanned_, other->publisherbanned_);
}

::google::protobuf::Metadata SteamAuthenticateUserTicketPayloadParams::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_serializable_5fdata_2eproto);
  return ::file_level_metadata_serializable_5fdata_2eproto[kIndexInFileMessages];
}


// ===================================================================

void SteamAuthenticateUserTicketPayloadResp::InitAsDefaultInstance() {
  ::shared::_SteamAuthenticateUserTicketPayloadResp_default_instance_._instance.get_mutable()->params_ = const_cast< ::shared::SteamAuthenticateUserTicketPayloadParams*>(
      ::shared::SteamAuthenticateUserTicketPayloadParams::internal_default_instance());
}
class SteamAuthenticateUserTicketPayloadResp::HasBitSetters {
 public:
  static const ::shared::SteamAuthenticateUserTicketPayloadParams& params(const SteamAuthenticateUserTicketPayloadResp* msg);
};

const ::shared::SteamAuthenticateUserTicketPayloadParams&
SteamAuthenticateUserTicketPayloadResp::HasBitSetters::params(const SteamAuthenticateUserTicketPayloadResp* msg) {
  return *msg->params_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SteamAuthenticateUserTicketPayloadResp::kParamsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SteamAuthenticateUserTicketPayloadResp::SteamAuthenticateUserTicketPayloadResp()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:shared.SteamAuthenticateUserTicketPayloadResp)
}
SteamAuthenticateUserTicketPayloadResp::SteamAuthenticateUserTicketPayloadResp(const SteamAuthenticateUserTicketPayloadResp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_params()) {
    params_ = new ::shared::SteamAuthenticateUserTicketPayloadParams(*from.params_);
  } else {
    params_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:shared.SteamAuthenticateUserTicketPayloadResp)
}

void SteamAuthenticateUserTicketPayloadResp::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_SteamAuthenticateUserTicketPayloadResp_serializable_5fdata_2eproto.base);
  params_ = nullptr;
}

SteamAuthenticateUserTicketPayloadResp::~SteamAuthenticateUserTicketPayloadResp() {
  // @@protoc_insertion_point(destructor:shared.SteamAuthenticateUserTicketPayloadResp)
  SharedDtor();
}

void SteamAuthenticateUserTicketPayloadResp::SharedDtor() {
  if (this != internal_default_instance()) delete params_;
}

void SteamAuthenticateUserTicketPayloadResp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SteamAuthenticateUserTicketPayloadResp& SteamAuthenticateUserTicketPayloadResp::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_SteamAuthenticateUserTicketPayloadResp_serializable_5fdata_2eproto.base);
  return *internal_default_instance();
}


void SteamAuthenticateUserTicketPayloadResp::Clear() {
// @@protoc_insertion_point(message_clear_start:shared.SteamAuthenticateUserTicketPayloadResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && params_ != nullptr) {
    delete params_;
  }
  params_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SteamAuthenticateUserTicketPayloadResp::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<SteamAuthenticateUserTicketPayloadResp*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .shared.SteamAuthenticateUserTicketPayloadParams params = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::shared::SteamAuthenticateUserTicketPayloadParams::_InternalParse;
        object = msg->mutable_params();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SteamAuthenticateUserTicketPayloadResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:shared.SteamAuthenticateUserTicketPayloadResp)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .shared.SteamAuthenticateUserTicketPayloadParams params = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_params()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:shared.SteamAuthenticateUserTicketPayloadResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:shared.SteamAuthenticateUserTicketPayloadResp)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SteamAuthenticateUserTicketPayloadResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:shared.SteamAuthenticateUserTicketPayloadResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .shared.SteamAuthenticateUserTicketPayloadParams params = 1;
  if (this->has_params()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::params(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:shared.SteamAuthenticateUserTicketPayloadResp)
}

::google::protobuf::uint8* SteamAuthenticateUserTicketPayloadResp::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:shared.SteamAuthenticateUserTicketPayloadResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .shared.SteamAuthenticateUserTicketPayloadParams params = 1;
  if (this->has_params()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::params(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:shared.SteamAuthenticateUserTicketPayloadResp)
  return target;
}

size_t SteamAuthenticateUserTicketPayloadResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:shared.SteamAuthenticateUserTicketPayloadResp)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .shared.SteamAuthenticateUserTicketPayloadParams params = 1;
  if (this->has_params()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *params_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SteamAuthenticateUserTicketPayloadResp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:shared.SteamAuthenticateUserTicketPayloadResp)
  GOOGLE_DCHECK_NE(&from, this);
  const SteamAuthenticateUserTicketPayloadResp* source =
      ::google::protobuf::DynamicCastToGenerated<SteamAuthenticateUserTicketPayloadResp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:shared.SteamAuthenticateUserTicketPayloadResp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:shared.SteamAuthenticateUserTicketPayloadResp)
    MergeFrom(*source);
  }
}

void SteamAuthenticateUserTicketPayloadResp::MergeFrom(const SteamAuthenticateUserTicketPayloadResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:shared.SteamAuthenticateUserTicketPayloadResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_params()) {
    mutable_params()->::shared::SteamAuthenticateUserTicketPayloadParams::MergeFrom(from.params());
  }
}

void SteamAuthenticateUserTicketPayloadResp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:shared.SteamAuthenticateUserTicketPayloadResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SteamAuthenticateUserTicketPayloadResp::CopyFrom(const SteamAuthenticateUserTicketPayloadResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:shared.SteamAuthenticateUserTicketPayloadResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SteamAuthenticateUserTicketPayloadResp::IsInitialized() const {
  return true;
}

void SteamAuthenticateUserTicketPayloadResp::Swap(SteamAuthenticateUserTicketPayloadResp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SteamAuthenticateUserTicketPayloadResp::InternalSwap(SteamAuthenticateUserTicketPayloadResp* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(params_, other->params_);
}

::google::protobuf::Metadata SteamAuthenticateUserTicketPayloadResp::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_serializable_5fdata_2eproto);
  return ::file_level_metadata_serializable_5fdata_2eproto[kIndexInFileMessages];
}


// ===================================================================

void SteamAuthenticateUserTicketResult::InitAsDefaultInstance() {
  ::shared::_SteamAuthenticateUserTicketResult_default_instance_._instance.get_mutable()->response_ = const_cast< ::shared::SteamAuthenticateUserTicketPayloadResp*>(
      ::shared::SteamAuthenticateUserTicketPayloadResp::internal_default_instance());
}
class SteamAuthenticateUserTicketResult::HasBitSetters {
 public:
  static const ::shared::SteamAuthenticateUserTicketPayloadResp& response(const SteamAuthenticateUserTicketResult* msg);
};

const ::shared::SteamAuthenticateUserTicketPayloadResp&
SteamAuthenticateUserTicketResult::HasBitSetters::response(const SteamAuthenticateUserTicketResult* msg) {
  return *msg->response_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SteamAuthenticateUserTicketResult::kResponseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SteamAuthenticateUserTicketResult::SteamAuthenticateUserTicketResult()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:shared.SteamAuthenticateUserTicketResult)
}
SteamAuthenticateUserTicketResult::SteamAuthenticateUserTicketResult(const SteamAuthenticateUserTicketResult& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_response()) {
    response_ = new ::shared::SteamAuthenticateUserTicketPayloadResp(*from.response_);
  } else {
    response_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:shared.SteamAuthenticateUserTicketResult)
}

void SteamAuthenticateUserTicketResult::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_SteamAuthenticateUserTicketResult_serializable_5fdata_2eproto.base);
  response_ = nullptr;
}

SteamAuthenticateUserTicketResult::~SteamAuthenticateUserTicketResult() {
  // @@protoc_insertion_point(destructor:shared.SteamAuthenticateUserTicketResult)
  SharedDtor();
}

void SteamAuthenticateUserTicketResult::SharedDtor() {
  if (this != internal_default_instance()) delete response_;
}

void SteamAuthenticateUserTicketResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SteamAuthenticateUserTicketResult& SteamAuthenticateUserTicketResult::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_SteamAuthenticateUserTicketResult_serializable_5fdata_2eproto.base);
  return *internal_default_instance();
}


void SteamAuthenticateUserTicketResult::Clear() {
// @@protoc_insertion_point(message_clear_start:shared.SteamAuthenticateUserTicketResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && response_ != nullptr) {
    delete response_;
  }
  response_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SteamAuthenticateUserTicketResult::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<SteamAuthenticateUserTicketResult*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .shared.SteamAuthenticateUserTicketPayloadResp response = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::shared::SteamAuthenticateUserTicketPayloadResp::_InternalParse;
        object = msg->mutable_response();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SteamAuthenticateUserTicketResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:shared.SteamAuthenticateUserTicketResult)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .shared.SteamAuthenticateUserTicketPayloadResp response = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_response()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:shared.SteamAuthenticateUserTicketResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:shared.SteamAuthenticateUserTicketResult)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SteamAuthenticateUserTicketResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:shared.SteamAuthenticateUserTicketResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .shared.SteamAuthenticateUserTicketPayloadResp response = 1;
  if (this->has_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::response(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:shared.SteamAuthenticateUserTicketResult)
}

::google::protobuf::uint8* SteamAuthenticateUserTicketResult::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:shared.SteamAuthenticateUserTicketResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .shared.SteamAuthenticateUserTicketPayloadResp response = 1;
  if (this->has_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::response(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:shared.SteamAuthenticateUserTicketResult)
  return target;
}

size_t SteamAuthenticateUserTicketResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:shared.SteamAuthenticateUserTicketResult)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .shared.SteamAuthenticateUserTicketPayloadResp response = 1;
  if (this->has_response()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *response_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SteamAuthenticateUserTicketResult::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:shared.SteamAuthenticateUserTicketResult)
  GOOGLE_DCHECK_NE(&from, this);
  const SteamAuthenticateUserTicketResult* source =
      ::google::protobuf::DynamicCastToGenerated<SteamAuthenticateUserTicketResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:shared.SteamAuthenticateUserTicketResult)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:shared.SteamAuthenticateUserTicketResult)
    MergeFrom(*source);
  }
}

void SteamAuthenticateUserTicketResult::MergeFrom(const SteamAuthenticateUserTicketResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:shared.SteamAuthenticateUserTicketResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_response()) {
    mutable_response()->::shared::SteamAuthenticateUserTicketPayloadResp::MergeFrom(from.response());
  }
}

void SteamAuthenticateUserTicketResult::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:shared.SteamAuthenticateUserTicketResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SteamAuthenticateUserTicketResult::CopyFrom(const SteamAuthenticateUserTicketResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:shared.SteamAuthenticateUserTicketResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SteamAuthenticateUserTicketResult::IsInitialized() const {
  return true;
}

void SteamAuthenticateUserTicketResult::Swap(SteamAuthenticateUserTicketResult* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SteamAuthenticateUserTicketResult::InternalSwap(SteamAuthenticateUserTicketResult* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(response_, other->response_);
}

::google::protobuf::Metadata SteamAuthenticateUserTicketResult::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_serializable_5fdata_2eproto);
  return ::file_level_metadata_serializable_5fdata_2eproto[kIndexInFileMessages];
}


// ===================================================================

void BattleInvitation::InitAsDefaultInstance() {
}
class BattleInvitation::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BattleInvitation::kFromPlayerIdFieldNumber;
const int BattleInvitation::kToBattlesrvIdFieldNumber;
const int BattleInvitation::kBoundRoomIdFieldNumber;
const int BattleInvitation::kExpiresAtFieldNumber;
const int BattleInvitation::kPasscodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BattleInvitation::BattleInvitation()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:shared.BattleInvitation)
}
BattleInvitation::BattleInvitation(const BattleInvitation& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  from_player_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.from_player_id().size() > 0) {
    from_player_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.from_player_id_);
  }
  passcode_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.passcode().size() > 0) {
    passcode_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.passcode_);
  }
  ::memcpy(&to_battlesrv_id_, &from.to_battlesrv_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&expires_at_) -
    reinterpret_cast<char*>(&to_battlesrv_id_)) + sizeof(expires_at_));
  // @@protoc_insertion_point(copy_constructor:shared.BattleInvitation)
}

void BattleInvitation::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_BattleInvitation_serializable_5fdata_2eproto.base);
  from_player_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  passcode_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&to_battlesrv_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&expires_at_) -
      reinterpret_cast<char*>(&to_battlesrv_id_)) + sizeof(expires_at_));
}

BattleInvitation::~BattleInvitation() {
  // @@protoc_insertion_point(destructor:shared.BattleInvitation)
  SharedDtor();
}

void BattleInvitation::SharedDtor() {
  from_player_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  passcode_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void BattleInvitation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BattleInvitation& BattleInvitation::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_BattleInvitation_serializable_5fdata_2eproto.base);
  return *internal_default_instance();
}


void BattleInvitation::Clear() {
// @@protoc_insertion_point(message_clear_start:shared.BattleInvitation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  from_player_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  passcode_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&to_battlesrv_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&expires_at_) -
      reinterpret_cast<char*>(&to_battlesrv_id_)) + sizeof(expires_at_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* BattleInvitation::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<BattleInvitation*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string from_player_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("shared.BattleInvitation.from_player_id");
        object = msg->mutable_from_player_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // uint32 to_battlesrv_id = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_to_battlesrv_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 bound_room_id = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_bound_room_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int64 expires_at = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_expires_at(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string passcode = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("shared.BattleInvitation.passcode");
        object = msg->mutable_passcode();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool BattleInvitation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:shared.BattleInvitation)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string from_player_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_from_player_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->from_player_id().data(), static_cast<int>(this->from_player_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "shared.BattleInvitation.from_player_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 to_battlesrv_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &to_battlesrv_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 bound_room_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bound_room_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 expires_at = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &expires_at_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string passcode = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_passcode()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->passcode().data(), static_cast<int>(this->passcode().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "shared.BattleInvitation.passcode"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:shared.BattleInvitation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:shared.BattleInvitation)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void BattleInvitation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:shared.BattleInvitation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string from_player_id = 1;
  if (this->from_player_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->from_player_id().data(), static_cast<int>(this->from_player_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "shared.BattleInvitation.from_player_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->from_player_id(), output);
  }

  // uint32 to_battlesrv_id = 2;
  if (this->to_battlesrv_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->to_battlesrv_id(), output);
  }

  // int32 bound_room_id = 3;
  if (this->bound_room_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->bound_room_id(), output);
  }

  // int64 expires_at = 4;
  if (this->expires_at() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->expires_at(), output);
  }

  // string passcode = 5;
  if (this->passcode().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->passcode().data(), static_cast<int>(this->passcode().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "shared.BattleInvitation.passcode");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->passcode(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:shared.BattleInvitation)
}

::google::protobuf::uint8* BattleInvitation::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:shared.BattleInvitation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string from_player_id = 1;
  if (this->from_player_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->from_player_id().data(), static_cast<int>(this->from_player_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "shared.BattleInvitation.from_player_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->from_player_id(), target);
  }

  // uint32 to_battlesrv_id = 2;
  if (this->to_battlesrv_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->to_battlesrv_id(), target);
  }

  // int32 bound_room_id = 3;
  if (this->bound_room_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->bound_room_id(), target);
  }

  // int64 expires_at = 4;
  if (this->expires_at() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->expires_at(), target);
  }

  // string passcode = 5;
  if (this->passcode().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->passcode().data(), static_cast<int>(this->passcode().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "shared.BattleInvitation.passcode");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->passcode(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:shared.BattleInvitation)
  return target;
}

size_t BattleInvitation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:shared.BattleInvitation)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string from_player_id = 1;
  if (this->from_player_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->from_player_id());
  }

  // string passcode = 5;
  if (this->passcode().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->passcode());
  }

  // uint32 to_battlesrv_id = 2;
  if (this->to_battlesrv_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->to_battlesrv_id());
  }

  // int32 bound_room_id = 3;
  if (this->bound_room_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->bound_room_id());
  }

  // int64 expires_at = 4;
  if (this->expires_at() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->expires_at());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BattleInvitation::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:shared.BattleInvitation)
  GOOGLE_DCHECK_NE(&from, this);
  const BattleInvitation* source =
      ::google::protobuf::DynamicCastToGenerated<BattleInvitation>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:shared.BattleInvitation)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:shared.BattleInvitation)
    MergeFrom(*source);
  }
}

void BattleInvitation::MergeFrom(const BattleInvitation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:shared.BattleInvitation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.from_player_id().size() > 0) {

    from_player_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.from_player_id_);
  }
  if (from.passcode().size() > 0) {

    passcode_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.passcode_);
  }
  if (from.to_battlesrv_id() != 0) {
    set_to_battlesrv_id(from.to_battlesrv_id());
  }
  if (from.bound_room_id() != 0) {
    set_bound_room_id(from.bound_room_id());
  }
  if (from.expires_at() != 0) {
    set_expires_at(from.expires_at());
  }
}

void BattleInvitation::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:shared.BattleInvitation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BattleInvitation::CopyFrom(const BattleInvitation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:shared.BattleInvitation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BattleInvitation::IsInitialized() const {
  return true;
}

void BattleInvitation::Swap(BattleInvitation* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BattleInvitation::InternalSwap(BattleInvitation* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  from_player_id_.Swap(&other->from_player_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  passcode_.Swap(&other->passcode_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(to_battlesrv_id_, other->to_battlesrv_id_);
  swap(bound_room_id_, other->bound_room_id_);
  swap(expires_at_, other->expires_at_);
}

::google::protobuf::Metadata BattleInvitation::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_serializable_5fdata_2eproto);
  return ::file_level_metadata_serializable_5fdata_2eproto[kIndexInFileMessages];
}


// ===================================================================

CharacterConfig_LoopingChStatesEntry_DoNotUse::CharacterConfig_LoopingChStatesEntry_DoNotUse() {}
CharacterConfig_LoopingChStatesEntry_DoNotUse::CharacterConfig_LoopingChStatesEntry_DoNotUse(::google::protobuf::Arena* arena)
    : SuperType(arena) {}
void CharacterConfig_LoopingChStatesEntry_DoNotUse::MergeFrom(const CharacterConfig_LoopingChStatesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata CharacterConfig_LoopingChStatesEntry_DoNotUse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_serializable_5fdata_2eproto);
  return ::file_level_metadata_serializable_5fdata_2eproto[6];
}
void CharacterConfig_LoopingChStatesEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CharacterConfig_LoopingChStatesEntry_DoNotUse::_ParseMap(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx) {
  using MF = ::google::protobuf::internal::MapField<
      CharacterConfig_LoopingChStatesEntry_DoNotUse, EntryKeyType, EntryValueType,
      kEntryKeyFieldType, kEntryValueFieldType,
      kEntryDefaultEnumValue>;
  auto mf = static_cast<MF*>(object);
  Parser<MF, ::google::protobuf::Map<EntryKeyType, EntryValueType>> parser(mf);
#define DO_(x) if (!(x)) return false
  DO_(parser.ParseMap(begin, end));
#undef DO_
  return true;
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER


// ===================================================================

void CharacterConfig::InitAsDefaultInstance() {
}
class CharacterConfig::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CharacterConfig::kSpeciesIdFieldNumber;
const int CharacterConfig::kSpeciesNameFieldNumber;
const int CharacterConfig::kHpFieldNumber;
const int CharacterConfig::kMpFieldNumber;
const int CharacterConfig::kLayDownFramesFieldNumber;
const int CharacterConfig::kLayDownFramesToRecoverFieldNumber;
const int CharacterConfig::kGetUpInvinsibleFramesFieldNumber;
const int CharacterConfig::kGetUpFramesToRecoverFieldNumber;
const int CharacterConfig::kSpeedFieldNumber;
const int CharacterConfig::kMpRegenPerIntervalFieldNumber;
const int CharacterConfig::kMpRegenIntervalFieldNumber;
const int CharacterConfig::kJumpingInitVelYFieldNumber;
const int CharacterConfig::kInertiaFramesToRecoverFieldNumber;
const int CharacterConfig::kDashingEnabledFieldNumber;
const int CharacterConfig::kSlidingEnabledFieldNumber;
const int CharacterConfig::kOnWallEnabledFieldNumber;
const int CharacterConfig::kCrouchingEnabledFieldNumber;
const int CharacterConfig::kCrouchingAtkEnabledFieldNumber;
const int CharacterConfig::kWallJumpingFramesToRecoverFieldNumber;
const int CharacterConfig::kWallJumpingInitVelXFieldNumber;
const int CharacterConfig::kWallJumpingInitVelYFieldNumber;
const int CharacterConfig::kWallSlidingVelYFieldNumber;
const int CharacterConfig::kMinFallingVelYFieldNumber;
const int CharacterConfig::kMaxAscendingVelYFieldNumber;
const int CharacterConfig::kUseInventoryBtnBFieldNumber;
const int CharacterConfig::kGroundDodgeEnabledByIvSlotCInBlockStunFieldNumber;
const int CharacterConfig::kGroundDodgeEnabledByRdfCntFromBeginningFieldNumber;
const int CharacterConfig::kGroundDodgedFramesToRecoverFieldNumber;
const int CharacterConfig::kGroundDodgedFramesInvinsibleFieldNumber;
const int CharacterConfig::kGroundDodgedSpeedFieldNumber;
const int CharacterConfig::kVisionOffsetXFieldNumber;
const int CharacterConfig::kVisionOffsetYFieldNumber;
const int CharacterConfig::kVisionSizeXFieldNumber;
const int CharacterConfig::kVisionSizeYFieldNumber;
const int CharacterConfig::kCapsuleRadiusFieldNumber;
const int CharacterConfig::kCapsuleHalfHeightFieldNumber;
const int CharacterConfig::kShrinkedScaleRadiusFieldNumber;
const int CharacterConfig::kShrinkedScaleHeightFieldNumber;
const int CharacterConfig::kLayDownScaleRadiusFieldNumber;
const int CharacterConfig::kLayDownScaleHeightFieldNumber;
const int CharacterConfig::kDyingScaleRadiusFieldNumber;
const int CharacterConfig::kDyingScaleHeightFieldNumber;
const int CharacterConfig::kDimmedScaleRadiusFieldNumber;
const int CharacterConfig::kDimmedScaleHeightFieldNumber;
const int CharacterConfig::kAntiGravityWhenIdleFieldNumber;
const int CharacterConfig::kAntiGravityFramesLingeringFieldNumber;
const int CharacterConfig::kOmitGravityFieldNumber;
const int CharacterConfig::kOmitSoftPushbackFieldNumber;
const int CharacterConfig::kRepelSoftPushbackFieldNumber;
const int CharacterConfig::kCollisionTypeMaskFieldNumber;
const int CharacterConfig::kHasTurnAroundAnimFieldNumber;
const int CharacterConfig::kHasDimmedAnimFieldNumber;
const int CharacterConfig::kHasAwakingAnimFieldNumber;
const int CharacterConfig::kHasWalkStoppingAnimFieldNumber;
const int CharacterConfig::kHasInAirWalkStoppingAnimFieldNumber;
const int CharacterConfig::kLayDownToRecoverFromDimmedFieldNumber;
const int CharacterConfig::kHardnessFieldNumber;
const int CharacterConfig::kProactiveJumpStartupFramesFieldNumber;
const int CharacterConfig::kDefaultAirJumpQuotaFieldNumber;
const int CharacterConfig::kDefaultAirDashQuotaFieldNumber;
const int CharacterConfig::kDefaultDef1QuotaFieldNumber;
const int CharacterConfig::kIsolatedAirJumpAndDashQuotaFieldNumber;
const int CharacterConfig::kAirJumpVfxSpeciesIdFieldNumber;
const int CharacterConfig::kSlipJumpThresHoldBelowTopFaceFieldNumber;
const int CharacterConfig::kSlipJumpCharacterDropYFieldNumber;
const int CharacterConfig::kTransformIntoSpeciesIdUponDeathFieldNumber;
const int CharacterConfig::kJumpHoldingToFlyFieldNumber;
const int CharacterConfig::kHasDef1FieldNumber;
const int CharacterConfig::kHasDef1Atked1AnimFieldNumber;
const int CharacterConfig::kDefaultDef1BrokenFramesToRecoverFieldNumber;
const int CharacterConfig::kDef1ActiveVfxSpeciesIdFieldNumber;
const int CharacterConfig::kDef1AtkedVfxSpeciesIdFieldNumber;
const int CharacterConfig::kDef1BrokenVfxSpeciesIdFieldNumber;
const int CharacterConfig::kDef1StartupFramesFieldNumber;
const int CharacterConfig::kDef1DamageYieldFieldNumber;
const int CharacterConfig::kDef1DefiesEleWeaknessPenetrationFieldNumber;
const int CharacterConfig::kDef1DefiesDebuffFieldNumber;
const int CharacterConfig::kFlyingQuotaRdfCntFieldNumber;
const int CharacterConfig::kWalkingAutoDef1FieldNumber;
const int CharacterConfig::kIfcFieldNumber;
const int CharacterConfig::kEleWeaknessFieldNumber;
const int CharacterConfig::kEleResistanceFieldNumber;
const int CharacterConfig::kHasBtnBChargingFieldNumber;
const int CharacterConfig::kBtnBChargedVfxSpeciesIdFieldNumber;
const int CharacterConfig::kIsKeyChFieldNumber;
const int CharacterConfig::kAllowsSameTeamSoftPushbackFieldNumber;
const int CharacterConfig::kGaugeIncWhenKilledFieldNumber;
const int CharacterConfig::kJumpingInsteadOfWalkingFieldNumber;
const int CharacterConfig::kVisionSearchIntervalPow2Minus1UFieldNumber;
const int CharacterConfig::kVisionSearchIntervalPow2Minus1FieldNumber;
const int CharacterConfig::kNpcNoDefaultAirWalkingFieldNumber;
const int CharacterConfig::kNpcPrioritizeBulletHandlingFieldNumber;
const int CharacterConfig::kNpcPrioritizeAllyHealingFieldNumber;
const int CharacterConfig::kNpcNotHuntingInAirOppoChFieldNumber;
const int CharacterConfig::kTransformIntoFramesToRecoverFieldNumber;
const int CharacterConfig::kTransformIntoFramesInvinsibleFieldNumber;
const int CharacterConfig::kAwakingFramesToRecoverFieldNumber;
const int CharacterConfig::kAwakingFramesInvinsibleFieldNumber;
const int CharacterConfig::kUseIdle1AsFlyingIdleFieldNumber;
const int CharacterConfig::kNoFleeFieldNumber;
const int CharacterConfig::kInitInventorySlotsFieldNumber;
const int CharacterConfig::kBtnBAutoUnholdChStatesFieldNumber;
const int CharacterConfig::kLoopingChStatesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CharacterConfig::CharacterConfig()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:shared.CharacterConfig)
}
CharacterConfig::CharacterConfig(const CharacterConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      init_inventory_slots_(from.init_inventory_slots_),
      btn_b_auto_unhold_ch_states_(from.btn_b_auto_unhold_ch_states_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  looping_ch_states_.MergeFrom(from.looping_ch_states_);
  species_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.species_name().size() > 0) {
    species_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.species_name_);
  }
  ::memcpy(&species_id_, &from.species_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&no_flee_) -
    reinterpret_cast<char*>(&species_id_)) + sizeof(no_flee_));
  // @@protoc_insertion_point(copy_constructor:shared.CharacterConfig)
}

void CharacterConfig::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CharacterConfig_serializable_5fdata_2eproto.base);
  species_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&species_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&no_flee_) -
      reinterpret_cast<char*>(&species_id_)) + sizeof(no_flee_));
}

CharacterConfig::~CharacterConfig() {
  // @@protoc_insertion_point(destructor:shared.CharacterConfig)
  SharedDtor();
}

void CharacterConfig::SharedDtor() {
  species_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CharacterConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CharacterConfig& CharacterConfig::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CharacterConfig_serializable_5fdata_2eproto.base);
  return *internal_default_instance();
}


void CharacterConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:shared.CharacterConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  init_inventory_slots_.Clear();
  btn_b_auto_unhold_ch_states_.Clear();
  looping_ch_states_.Clear();
  species_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&species_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&no_flee_) -
      reinterpret_cast<char*>(&species_id_)) + sizeof(no_flee_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CharacterConfig::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CharacterConfig*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // uint32 species_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_species_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string species_name = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("shared.CharacterConfig.species_name");
        object = msg->mutable_species_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // int32 hp = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_hp(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 mp = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_mp(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 lay_down_frames = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_lay_down_frames(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 lay_down_frames_to_recover = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_lay_down_frames_to_recover(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 get_up_invinsible_frames = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        msg->set_get_up_invinsible_frames(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 get_up_frames_to_recover = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 64) goto handle_unusual;
        msg->set_get_up_frames_to_recover(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // float speed = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 77) goto handle_unusual;
        msg->set_speed(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // int32 mp_regen_per_interval = 10;
      case 10: {
        if (static_cast<::google::protobuf::uint8>(tag) != 80) goto handle_unusual;
        msg->set_mp_regen_per_interval(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 mp_regen_interval = 11;
      case 11: {
        if (static_cast<::google::protobuf::uint8>(tag) != 88) goto handle_unusual;
        msg->set_mp_regen_interval(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // float jumping_init_vel_y = 12;
      case 12: {
        if (static_cast<::google::protobuf::uint8>(tag) != 101) goto handle_unusual;
        msg->set_jumping_init_vel_y(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // int32 inertia_frames_to_recover = 13;
      case 13: {
        if (static_cast<::google::protobuf::uint8>(tag) != 104) goto handle_unusual;
        msg->set_inertia_frames_to_recover(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // bool dashing_enabled = 14;
      case 14: {
        if (static_cast<::google::protobuf::uint8>(tag) != 112) goto handle_unusual;
        msg->set_dashing_enabled(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // bool sliding_enabled = 15;
      case 15: {
        if (static_cast<::google::protobuf::uint8>(tag) != 120) goto handle_unusual;
        msg->set_sliding_enabled(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // bool on_wall_enabled = 16;
      case 16: {
        if (static_cast<::google::protobuf::uint8>(tag) != 128) goto handle_unusual;
        msg->set_on_wall_enabled(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // bool crouching_enabled = 17;
      case 17: {
        if (static_cast<::google::protobuf::uint8>(tag) != 136) goto handle_unusual;
        msg->set_crouching_enabled(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // bool crouching_atk_enabled = 18;
      case 18: {
        if (static_cast<::google::protobuf::uint8>(tag) != 144) goto handle_unusual;
        msg->set_crouching_atk_enabled(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 wall_jumping_frames_to_recover = 19;
      case 19: {
        if (static_cast<::google::protobuf::uint8>(tag) != 152) goto handle_unusual;
        msg->set_wall_jumping_frames_to_recover(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // float wall_jumping_init_vel_x = 20;
      case 20: {
        if (static_cast<::google::protobuf::uint8>(tag) != 165) goto handle_unusual;
        msg->set_wall_jumping_init_vel_x(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // float wall_jumping_init_vel_y = 21;
      case 21: {
        if (static_cast<::google::protobuf::uint8>(tag) != 173) goto handle_unusual;
        msg->set_wall_jumping_init_vel_y(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // float wall_sliding_vel_y = 22;
      case 22: {
        if (static_cast<::google::protobuf::uint8>(tag) != 181) goto handle_unusual;
        msg->set_wall_sliding_vel_y(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // float min_falling_vel_y = 23;
      case 23: {
        if (static_cast<::google::protobuf::uint8>(tag) != 189) goto handle_unusual;
        msg->set_min_falling_vel_y(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // float max_ascending_vel_y = 24;
      case 24: {
        if (static_cast<::google::protobuf::uint8>(tag) != 197) goto handle_unusual;
        msg->set_max_ascending_vel_y(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // bool use_inventory_btn_b = 25;
      case 25: {
        if (static_cast<::google::protobuf::uint8>(tag) != 200) goto handle_unusual;
        msg->set_use_inventory_btn_b(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // bool ground_dodge_enabled_by_iv_slot_c_in_block_stun = 26;
      case 26: {
        if (static_cast<::google::protobuf::uint8>(tag) != 208) goto handle_unusual;
        msg->set_ground_dodge_enabled_by_iv_slot_c_in_block_stun(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 ground_dodge_enabled_by_rdf_cnt_from_beginning = 27;
      case 27: {
        if (static_cast<::google::protobuf::uint8>(tag) != 216) goto handle_unusual;
        msg->set_ground_dodge_enabled_by_rdf_cnt_from_beginning(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 ground_dodged_frames_to_recover = 28;
      case 28: {
        if (static_cast<::google::protobuf::uint8>(tag) != 224) goto handle_unusual;
        msg->set_ground_dodged_frames_to_recover(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 ground_dodged_frames_invinsible = 29;
      case 29: {
        if (static_cast<::google::protobuf::uint8>(tag) != 232) goto handle_unusual;
        msg->set_ground_dodged_frames_invinsible(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // float ground_dodged_speed = 30;
      case 30: {
        if (static_cast<::google::protobuf::uint8>(tag) != 245) goto handle_unusual;
        msg->set_ground_dodged_speed(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // float vision_offset_x = 31;
      case 31: {
        if (static_cast<::google::protobuf::uint8>(tag) != 253) goto handle_unusual;
        msg->set_vision_offset_x(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // float vision_offset_y = 32;
      case 32: {
        if (static_cast<::google::protobuf::uint8>(tag) != 5) goto handle_unusual;
        msg->set_vision_offset_y(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // float vision_size_x = 33;
      case 33: {
        if (static_cast<::google::protobuf::uint8>(tag) != 13) goto handle_unusual;
        msg->set_vision_size_x(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // float vision_size_y = 34;
      case 34: {
        if (static_cast<::google::protobuf::uint8>(tag) != 21) goto handle_unusual;
        msg->set_vision_size_y(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // float capsule_radius = 35;
      case 35: {
        if (static_cast<::google::protobuf::uint8>(tag) != 29) goto handle_unusual;
        msg->set_capsule_radius(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // float capsule_half_height = 36;
      case 36: {
        if (static_cast<::google::protobuf::uint8>(tag) != 37) goto handle_unusual;
        msg->set_capsule_half_height(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // float shrinked_scale_radius = 37;
      case 37: {
        if (static_cast<::google::protobuf::uint8>(tag) != 45) goto handle_unusual;
        msg->set_shrinked_scale_radius(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // float shrinked_scale_height = 38;
      case 38: {
        if (static_cast<::google::protobuf::uint8>(tag) != 53) goto handle_unusual;
        msg->set_shrinked_scale_height(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // float lay_down_scale_radius = 39;
      case 39: {
        if (static_cast<::google::protobuf::uint8>(tag) != 61) goto handle_unusual;
        msg->set_lay_down_scale_radius(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // float lay_down_scale_height = 40;
      case 40: {
        if (static_cast<::google::protobuf::uint8>(tag) != 69) goto handle_unusual;
        msg->set_lay_down_scale_height(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // float dying_scale_radius = 41;
      case 41: {
        if (static_cast<::google::protobuf::uint8>(tag) != 77) goto handle_unusual;
        msg->set_dying_scale_radius(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // float dying_scale_height = 42;
      case 42: {
        if (static_cast<::google::protobuf::uint8>(tag) != 85) goto handle_unusual;
        msg->set_dying_scale_height(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // float dimmed_scale_radius = 43;
      case 43: {
        if (static_cast<::google::protobuf::uint8>(tag) != 93) goto handle_unusual;
        msg->set_dimmed_scale_radius(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // float dimmed_scale_height = 44;
      case 44: {
        if (static_cast<::google::protobuf::uint8>(tag) != 101) goto handle_unusual;
        msg->set_dimmed_scale_height(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // bool anti_gravity_when_idle = 45;
      case 45: {
        if (static_cast<::google::protobuf::uint8>(tag) != 104) goto handle_unusual;
        msg->set_anti_gravity_when_idle(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 anti_gravity_frames_lingering = 46;
      case 46: {
        if (static_cast<::google::protobuf::uint8>(tag) != 112) goto handle_unusual;
        msg->set_anti_gravity_frames_lingering(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // bool omit_gravity = 47;
      case 47: {
        if (static_cast<::google::protobuf::uint8>(tag) != 120) goto handle_unusual;
        msg->set_omit_gravity(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // bool omit_soft_pushback = 48;
      case 48: {
        if (static_cast<::google::protobuf::uint8>(tag) != 128) goto handle_unusual;
        msg->set_omit_soft_pushback(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // bool repel_soft_pushback = 49;
      case 49: {
        if (static_cast<::google::protobuf::uint8>(tag) != 136) goto handle_unusual;
        msg->set_repel_soft_pushback(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // uint64 collision_type_mask = 50;
      case 50: {
        if (static_cast<::google::protobuf::uint8>(tag) != 144) goto handle_unusual;
        msg->set_collision_type_mask(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // bool has_turn_around_anim = 51;
      case 51: {
        if (static_cast<::google::protobuf::uint8>(tag) != 152) goto handle_unusual;
        msg->set_has_turn_around_anim(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // bool has_dimmed_anim = 52;
      case 52: {
        if (static_cast<::google::protobuf::uint8>(tag) != 160) goto handle_unusual;
        msg->set_has_dimmed_anim(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // bool has_awaking_anim = 53;
      case 53: {
        if (static_cast<::google::protobuf::uint8>(tag) != 168) goto handle_unusual;
        msg->set_has_awaking_anim(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // bool has_walk_stopping_anim = 54;
      case 54: {
        if (static_cast<::google::protobuf::uint8>(tag) != 176) goto handle_unusual;
        msg->set_has_walk_stopping_anim(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // bool has_in_air_walk_stopping_anim = 55;
      case 55: {
        if (static_cast<::google::protobuf::uint8>(tag) != 184) goto handle_unusual;
        msg->set_has_in_air_walk_stopping_anim(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // bool lay_down_to_recover_from_dimmed = 56;
      case 56: {
        if (static_cast<::google::protobuf::uint8>(tag) != 192) goto handle_unusual;
        msg->set_lay_down_to_recover_from_dimmed(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 hardness = 57;
      case 57: {
        if (static_cast<::google::protobuf::uint8>(tag) != 200) goto handle_unusual;
        msg->set_hardness(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 proactive_jump_startup_frames = 58;
      case 58: {
        if (static_cast<::google::protobuf::uint8>(tag) != 208) goto handle_unusual;
        msg->set_proactive_jump_startup_frames(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // uint32 default_air_jump_quota = 59;
      case 59: {
        if (static_cast<::google::protobuf::uint8>(tag) != 216) goto handle_unusual;
        msg->set_default_air_jump_quota(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // uint32 default_air_dash_quota = 60;
      case 60: {
        if (static_cast<::google::protobuf::uint8>(tag) != 224) goto handle_unusual;
        msg->set_default_air_dash_quota(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // uint32 default_def1Quota = 61;
      case 61: {
        if (static_cast<::google::protobuf::uint8>(tag) != 232) goto handle_unusual;
        msg->set_default_def1quota(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // bool isolated_air_jump_and_dash_quota = 62;
      case 62: {
        if (static_cast<::google::protobuf::uint8>(tag) != 240) goto handle_unusual;
        msg->set_isolated_air_jump_and_dash_quota(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 air_jump_vfx_species_id = 63;
      case 63: {
        if (static_cast<::google::protobuf::uint8>(tag) != 248) goto handle_unusual;
        msg->set_air_jump_vfx_species_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // float slip_jump_thres_hold_below_top_face = 64;
      case 64: {
        if (static_cast<::google::protobuf::uint8>(tag) != 5) goto handle_unusual;
        msg->set_slip_jump_thres_hold_below_top_face(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // float slip_jump_character_drop_y = 65;
      case 65: {
        if (static_cast<::google::protobuf::uint8>(tag) != 13) goto handle_unusual;
        msg->set_slip_jump_character_drop_y(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // uint32 transform_into_species_id_upon_death = 66;
      case 66: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_transform_into_species_id_upon_death(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // bool jump_holding_to_fly = 67;
      case 67: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_jump_holding_to_fly(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // bool has_def1 = 68;
      case 68: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_has_def1(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // bool has_def1Atked1Anim = 69;
      case 69: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_has_def1atked1anim(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 default_def1Broken_frames_to_recover = 70;
      case 70: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_default_def1broken_frames_to_recover(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 def1_active_vfx_species_id = 71;
      case 71: {
        if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        msg->set_def1_active_vfx_species_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 def1_atked_vfx_species_id = 72;
      case 72: {
        if (static_cast<::google::protobuf::uint8>(tag) != 64) goto handle_unusual;
        msg->set_def1_atked_vfx_species_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 def1_broken_vfx_species_id = 73;
      case 73: {
        if (static_cast<::google::protobuf::uint8>(tag) != 72) goto handle_unusual;
        msg->set_def1_broken_vfx_species_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 def1_startup_frames = 74;
      case 74: {
        if (static_cast<::google::protobuf::uint8>(tag) != 80) goto handle_unusual;
        msg->set_def1_startup_frames(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // float def1_damage_yield = 75;
      case 75: {
        if (static_cast<::google::protobuf::uint8>(tag) != 93) goto handle_unusual;
        msg->set_def1_damage_yield(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // bool def1_defies_ele_weakness_penetration = 76;
      case 76: {
        if (static_cast<::google::protobuf::uint8>(tag) != 96) goto handle_unusual;
        msg->set_def1_defies_ele_weakness_penetration(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // bool def1_defies_debuff = 77;
      case 77: {
        if (static_cast<::google::protobuf::uint8>(tag) != 104) goto handle_unusual;
        msg->set_def1_defies_debuff(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 flying_quota_rdf_cnt = 78;
      case 78: {
        if (static_cast<::google::protobuf::uint8>(tag) != 112) goto handle_unusual;
        msg->set_flying_quota_rdf_cnt(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // bool walking_auto_def1 = 79;
      case 79: {
        if (static_cast<::google::protobuf::uint8>(tag) != 120) goto handle_unusual;
        msg->set_walking_auto_def1(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // .shared.IfaceCat Ifc = 80;
      case 80: {
        if (static_cast<::google::protobuf::uint8>(tag) != 128) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_ifc(static_cast<::shared::IfaceCat>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // uint32 ele_weakness = 81;
      case 81: {
        if (static_cast<::google::protobuf::uint8>(tag) != 136) goto handle_unusual;
        msg->set_ele_weakness(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // uint32 ele_resistance = 82;
      case 82: {
        if (static_cast<::google::protobuf::uint8>(tag) != 144) goto handle_unusual;
        msg->set_ele_resistance(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // bool has_btn_b_charging = 83;
      case 83: {
        if (static_cast<::google::protobuf::uint8>(tag) != 152) goto handle_unusual;
        msg->set_has_btn_b_charging(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 btn_b_charged_vfx_species_id = 84;
      case 84: {
        if (static_cast<::google::protobuf::uint8>(tag) != 160) goto handle_unusual;
        msg->set_btn_b_charged_vfx_species_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // bool is_key_ch = 85;
      case 85: {
        if (static_cast<::google::protobuf::uint8>(tag) != 168) goto handle_unusual;
        msg->set_is_key_ch(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // bool allows_same_team_soft_pushback = 86;
      case 86: {
        if (static_cast<::google::protobuf::uint8>(tag) != 176) goto handle_unusual;
        msg->set_allows_same_team_soft_pushback(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 gauge_inc_when_killed = 87;
      case 87: {
        if (static_cast<::google::protobuf::uint8>(tag) != 184) goto handle_unusual;
        msg->set_gauge_inc_when_killed(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // bool jumping_instead_of_walking = 88;
      case 88: {
        if (static_cast<::google::protobuf::uint8>(tag) != 192) goto handle_unusual;
        msg->set_jumping_instead_of_walking(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // uint32 vision_search_interval_pow2Minus1U = 89;
      case 89: {
        if (static_cast<::google::protobuf::uint8>(tag) != 200) goto handle_unusual;
        msg->set_vision_search_interval_pow2minus1u(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 vision_search_interval_pow2Minus1 = 90;
      case 90: {
        if (static_cast<::google::protobuf::uint8>(tag) != 208) goto handle_unusual;
        msg->set_vision_search_interval_pow2minus1(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // bool npc_no_default_air_walking = 91;
      case 91: {
        if (static_cast<::google::protobuf::uint8>(tag) != 216) goto handle_unusual;
        msg->set_npc_no_default_air_walking(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // bool npc_prioritize_bullet_handling = 92;
      case 92: {
        if (static_cast<::google::protobuf::uint8>(tag) != 224) goto handle_unusual;
        msg->set_npc_prioritize_bullet_handling(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // bool npc_prioritize_ally_healing = 93;
      case 93: {
        if (static_cast<::google::protobuf::uint8>(tag) != 232) goto handle_unusual;
        msg->set_npc_prioritize_ally_healing(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // bool npc_not_hunting_in_air_oppo_ch = 94;
      case 94: {
        if (static_cast<::google::protobuf::uint8>(tag) != 240) goto handle_unusual;
        msg->set_npc_not_hunting_in_air_oppo_ch(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 transform_into_frames_to_recover = 95;
      case 95: {
        if (static_cast<::google::protobuf::uint8>(tag) != 248) goto handle_unusual;
        msg->set_transform_into_frames_to_recover(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 transform_into_frames_invinsible = 96;
      case 96: {
        if (static_cast<::google::protobuf::uint8>(tag) != 0) goto handle_unusual;
        msg->set_transform_into_frames_invinsible(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 awaking_frames_to_recover = 97;
      case 97: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_awaking_frames_to_recover(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 awaking_frames_invinsible = 98;
      case 98: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_awaking_frames_invinsible(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // bool use_idle1_as_flying_idle = 99;
      case 99: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_use_idle1_as_flying_idle(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // bool no_flee = 100;
      case 100: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_no_flee(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated .shared.InventorySlot init_inventory_slots = 101;
      case 101: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::shared::InventorySlot::_InternalParse;
          object = msg->add_init_inventory_slots();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 65535) == 1706 && (ptr += 2));
        break;
      }
      // repeated .shared.CharacterState btn_b_auto_unhold_ch_states = 102;
      case 102: {
        if (static_cast<::google::protobuf::uint8>(tag) == 50) {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::protobuf::internal::PackedEnumParser;
          object = msg->mutable_btn_b_auto_unhold_ch_states();
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          if (size) ptr = parser_till_end(ptr, newend, object, ctx);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        do {
          ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
          msg->add_btn_b_auto_unhold_ch_states(static_cast<::shared::CharacterState>(val));
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 65535) == 1712 && (ptr += 2));
        break;
      }
      // map<int32, int32> looping_ch_states = 103;
      case 103: {
        if (static_cast<::google::protobuf::uint8>(tag) != 58) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::protobuf::internal::SlowMapEntryParser;
          auto parse_map = ::shared::CharacterConfig_LoopingChStatesEntry_DoNotUse::_ParseMap;
          ctx->extra_parse_data().payload.clear();
          ctx->extra_parse_data().parse_map = parse_map;
          object = &msg->looping_ch_states_;
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(parse_map(ptr, newend, object, ctx));
          ptr = newend;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 65535) == 1722 && (ptr += 2));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CharacterConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:shared.CharacterConfig)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 species_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &species_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string species_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_species_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->species_name().data(), static_cast<int>(this->species_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "shared.CharacterConfig.species_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 hp = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 mp = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 lay_down_frames = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lay_down_frames_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 lay_down_frames_to_recover = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lay_down_frames_to_recover_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 get_up_invinsible_frames = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (56 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &get_up_invinsible_frames_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 get_up_frames_to_recover = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (64 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &get_up_frames_to_recover_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float speed = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (77 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &speed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 mp_regen_per_interval = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (80 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mp_regen_per_interval_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 mp_regen_interval = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (88 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mp_regen_interval_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float jumping_init_vel_y = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (101 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &jumping_init_vel_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 inertia_frames_to_recover = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (104 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &inertia_frames_to_recover_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool dashing_enabled = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (112 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &dashing_enabled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool sliding_enabled = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (120 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &sliding_enabled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool on_wall_enabled = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (128 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &on_wall_enabled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool crouching_enabled = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (136 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &crouching_enabled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool crouching_atk_enabled = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (144 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &crouching_atk_enabled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 wall_jumping_frames_to_recover = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (152 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wall_jumping_frames_to_recover_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float wall_jumping_init_vel_x = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (165 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &wall_jumping_init_vel_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float wall_jumping_init_vel_y = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (173 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &wall_jumping_init_vel_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float wall_sliding_vel_y = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (181 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &wall_sliding_vel_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float min_falling_vel_y = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (189 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &min_falling_vel_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float max_ascending_vel_y = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (197 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &max_ascending_vel_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool use_inventory_btn_b = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (200 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_inventory_btn_b_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool ground_dodge_enabled_by_iv_slot_c_in_block_stun = 26;
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (208 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ground_dodge_enabled_by_iv_slot_c_in_block_stun_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 ground_dodge_enabled_by_rdf_cnt_from_beginning = 27;
      case 27: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (216 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ground_dodge_enabled_by_rdf_cnt_from_beginning_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 ground_dodged_frames_to_recover = 28;
      case 28: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (224 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ground_dodged_frames_to_recover_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 ground_dodged_frames_invinsible = 29;
      case 29: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (232 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ground_dodged_frames_invinsible_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float ground_dodged_speed = 30;
      case 30: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (245 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &ground_dodged_speed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float vision_offset_x = 31;
      case 31: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (253 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &vision_offset_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float vision_offset_y = 32;
      case 32: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (261 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &vision_offset_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float vision_size_x = 33;
      case 33: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (269 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &vision_size_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float vision_size_y = 34;
      case 34: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (277 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &vision_size_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float capsule_radius = 35;
      case 35: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (285 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &capsule_radius_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float capsule_half_height = 36;
      case 36: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (293 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &capsule_half_height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float shrinked_scale_radius = 37;
      case 37: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (301 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &shrinked_scale_radius_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float shrinked_scale_height = 38;
      case 38: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (309 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &shrinked_scale_height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float lay_down_scale_radius = 39;
      case 39: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (317 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &lay_down_scale_radius_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float lay_down_scale_height = 40;
      case 40: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (325 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &lay_down_scale_height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float dying_scale_radius = 41;
      case 41: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (333 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &dying_scale_radius_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float dying_scale_height = 42;
      case 42: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (341 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &dying_scale_height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float dimmed_scale_radius = 43;
      case 43: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (349 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &dimmed_scale_radius_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float dimmed_scale_height = 44;
      case 44: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (357 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &dimmed_scale_height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool anti_gravity_when_idle = 45;
      case 45: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (360 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &anti_gravity_when_idle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 anti_gravity_frames_lingering = 46;
      case 46: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (368 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &anti_gravity_frames_lingering_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool omit_gravity = 47;
      case 47: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (376 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &omit_gravity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool omit_soft_pushback = 48;
      case 48: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (384 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &omit_soft_pushback_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool repel_soft_pushback = 49;
      case 49: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (392 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &repel_soft_pushback_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 collision_type_mask = 50;
      case 50: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (400 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &collision_type_mask_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool has_turn_around_anim = 51;
      case 51: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (408 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_turn_around_anim_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool has_dimmed_anim = 52;
      case 52: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (416 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_dimmed_anim_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool has_awaking_anim = 53;
      case 53: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (424 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_awaking_anim_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool has_walk_stopping_anim = 54;
      case 54: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (432 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_walk_stopping_anim_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool has_in_air_walk_stopping_anim = 55;
      case 55: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (440 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_in_air_walk_stopping_anim_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool lay_down_to_recover_from_dimmed = 56;
      case 56: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (448 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &lay_down_to_recover_from_dimmed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 hardness = 57;
      case 57: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (456 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hardness_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 proactive_jump_startup_frames = 58;
      case 58: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (464 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &proactive_jump_startup_frames_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 default_air_jump_quota = 59;
      case 59: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (472 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &default_air_jump_quota_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 default_air_dash_quota = 60;
      case 60: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (480 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &default_air_dash_quota_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 default_def1Quota = 61;
      case 61: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (488 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &default_def1quota_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool isolated_air_jump_and_dash_quota = 62;
      case 62: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (496 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isolated_air_jump_and_dash_quota_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 air_jump_vfx_species_id = 63;
      case 63: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (504 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &air_jump_vfx_species_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float slip_jump_thres_hold_below_top_face = 64;
      case 64: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (517 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &slip_jump_thres_hold_below_top_face_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float slip_jump_character_drop_y = 65;
      case 65: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (525 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &slip_jump_character_drop_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 transform_into_species_id_upon_death = 66;
      case 66: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (528 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &transform_into_species_id_upon_death_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool jump_holding_to_fly = 67;
      case 67: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (536 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &jump_holding_to_fly_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool has_def1 = 68;
      case 68: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (544 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_def1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool has_def1Atked1Anim = 69;
      case 69: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (552 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_def1atked1anim_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 default_def1Broken_frames_to_recover = 70;
      case 70: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (560 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &default_def1broken_frames_to_recover_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 def1_active_vfx_species_id = 71;
      case 71: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (568 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &def1_active_vfx_species_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 def1_atked_vfx_species_id = 72;
      case 72: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (576 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &def1_atked_vfx_species_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 def1_broken_vfx_species_id = 73;
      case 73: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (584 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &def1_broken_vfx_species_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 def1_startup_frames = 74;
      case 74: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (592 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &def1_startup_frames_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float def1_damage_yield = 75;
      case 75: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (605 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &def1_damage_yield_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool def1_defies_ele_weakness_penetration = 76;
      case 76: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (608 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &def1_defies_ele_weakness_penetration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool def1_defies_debuff = 77;
      case 77: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (616 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &def1_defies_debuff_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 flying_quota_rdf_cnt = 78;
      case 78: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (624 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &flying_quota_rdf_cnt_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool walking_auto_def1 = 79;
      case 79: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (632 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &walking_auto_def1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .shared.IfaceCat Ifc = 80;
      case 80: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (640 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_ifc(static_cast< ::shared::IfaceCat >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 ele_weakness = 81;
      case 81: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (648 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ele_weakness_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 ele_resistance = 82;
      case 82: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (656 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ele_resistance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool has_btn_b_charging = 83;
      case 83: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (664 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_btn_b_charging_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 btn_b_charged_vfx_species_id = 84;
      case 84: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (672 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &btn_b_charged_vfx_species_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_key_ch = 85;
      case 85: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (680 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_key_ch_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool allows_same_team_soft_pushback = 86;
      case 86: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (688 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &allows_same_team_soft_pushback_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 gauge_inc_when_killed = 87;
      case 87: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (696 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gauge_inc_when_killed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool jumping_instead_of_walking = 88;
      case 88: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (704 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &jumping_instead_of_walking_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 vision_search_interval_pow2Minus1U = 89;
      case 89: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (712 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &vision_search_interval_pow2minus1u_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 vision_search_interval_pow2Minus1 = 90;
      case 90: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (720 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vision_search_interval_pow2minus1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool npc_no_default_air_walking = 91;
      case 91: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (728 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &npc_no_default_air_walking_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool npc_prioritize_bullet_handling = 92;
      case 92: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (736 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &npc_prioritize_bullet_handling_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool npc_prioritize_ally_healing = 93;
      case 93: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (744 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &npc_prioritize_ally_healing_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool npc_not_hunting_in_air_oppo_ch = 94;
      case 94: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (752 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &npc_not_hunting_in_air_oppo_ch_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 transform_into_frames_to_recover = 95;
      case 95: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (760 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &transform_into_frames_to_recover_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 transform_into_frames_invinsible = 96;
      case 96: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (768 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &transform_into_frames_invinsible_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 awaking_frames_to_recover = 97;
      case 97: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (776 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &awaking_frames_to_recover_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 awaking_frames_invinsible = 98;
      case 98: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (784 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &awaking_frames_invinsible_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool use_idle1_as_flying_idle = 99;
      case 99: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (792 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_idle1_as_flying_idle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool no_flee = 100;
      case 100: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (800 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &no_flee_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .shared.InventorySlot init_inventory_slots = 101;
      case 101: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (810 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_init_inventory_slots()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .shared.CharacterState btn_b_auto_unhold_ch_states = 102;
      case 102: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (818 & 0xFF)) {
          ::google::protobuf::uint32 length;
          DO_(input->ReadVarint32(&length));
          ::google::protobuf::io::CodedInputStream::Limit limit = input->PushLimit(static_cast<int>(length));
          while (input->BytesUntilLimit() > 0) {
            int value = 0;
            DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
            add_btn_b_auto_unhold_ch_states(static_cast< ::shared::CharacterState >(value));
          }
          input->PopLimit(limit);
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (816 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          add_btn_b_auto_unhold_ch_states(static_cast< ::shared::CharacterState >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<int32, int32> looping_ch_states = 103;
      case 103: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (826 & 0xFF)) {
          CharacterConfig_LoopingChStatesEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              CharacterConfig_LoopingChStatesEntry_DoNotUse,
              ::google::protobuf::int32, ::google::protobuf::int32,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
              0 >,
            ::google::protobuf::Map< ::google::protobuf::int32, ::google::protobuf::int32 > > parser(&looping_ch_states_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:shared.CharacterConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:shared.CharacterConfig)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CharacterConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:shared.CharacterConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 species_id = 1;
  if (this->species_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->species_id(), output);
  }

  // string species_name = 2;
  if (this->species_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->species_name().data(), static_cast<int>(this->species_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "shared.CharacterConfig.species_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->species_name(), output);
  }

  // int32 hp = 3;
  if (this->hp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->hp(), output);
  }

  // int32 mp = 4;
  if (this->mp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->mp(), output);
  }

  // int32 lay_down_frames = 5;
  if (this->lay_down_frames() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->lay_down_frames(), output);
  }

  // int32 lay_down_frames_to_recover = 6;
  if (this->lay_down_frames_to_recover() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->lay_down_frames_to_recover(), output);
  }

  // int32 get_up_invinsible_frames = 7;
  if (this->get_up_invinsible_frames() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->get_up_invinsible_frames(), output);
  }

  // int32 get_up_frames_to_recover = 8;
  if (this->get_up_frames_to_recover() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->get_up_frames_to_recover(), output);
  }

  // float speed = 9;
  if (this->speed() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->speed(), output);
  }

  // int32 mp_regen_per_interval = 10;
  if (this->mp_regen_per_interval() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->mp_regen_per_interval(), output);
  }

  // int32 mp_regen_interval = 11;
  if (this->mp_regen_interval() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->mp_regen_interval(), output);
  }

  // float jumping_init_vel_y = 12;
  if (this->jumping_init_vel_y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->jumping_init_vel_y(), output);
  }

  // int32 inertia_frames_to_recover = 13;
  if (this->inertia_frames_to_recover() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->inertia_frames_to_recover(), output);
  }

  // bool dashing_enabled = 14;
  if (this->dashing_enabled() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->dashing_enabled(), output);
  }

  // bool sliding_enabled = 15;
  if (this->sliding_enabled() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(15, this->sliding_enabled(), output);
  }

  // bool on_wall_enabled = 16;
  if (this->on_wall_enabled() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(16, this->on_wall_enabled(), output);
  }

  // bool crouching_enabled = 17;
  if (this->crouching_enabled() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(17, this->crouching_enabled(), output);
  }

  // bool crouching_atk_enabled = 18;
  if (this->crouching_atk_enabled() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(18, this->crouching_atk_enabled(), output);
  }

  // int32 wall_jumping_frames_to_recover = 19;
  if (this->wall_jumping_frames_to_recover() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->wall_jumping_frames_to_recover(), output);
  }

  // float wall_jumping_init_vel_x = 20;
  if (this->wall_jumping_init_vel_x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(20, this->wall_jumping_init_vel_x(), output);
  }

  // float wall_jumping_init_vel_y = 21;
  if (this->wall_jumping_init_vel_y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(21, this->wall_jumping_init_vel_y(), output);
  }

  // float wall_sliding_vel_y = 22;
  if (this->wall_sliding_vel_y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(22, this->wall_sliding_vel_y(), output);
  }

  // float min_falling_vel_y = 23;
  if (this->min_falling_vel_y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(23, this->min_falling_vel_y(), output);
  }

  // float max_ascending_vel_y = 24;
  if (this->max_ascending_vel_y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(24, this->max_ascending_vel_y(), output);
  }

  // bool use_inventory_btn_b = 25;
  if (this->use_inventory_btn_b() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(25, this->use_inventory_btn_b(), output);
  }

  // bool ground_dodge_enabled_by_iv_slot_c_in_block_stun = 26;
  if (this->ground_dodge_enabled_by_iv_slot_c_in_block_stun() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(26, this->ground_dodge_enabled_by_iv_slot_c_in_block_stun(), output);
  }

  // int32 ground_dodge_enabled_by_rdf_cnt_from_beginning = 27;
  if (this->ground_dodge_enabled_by_rdf_cnt_from_beginning() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(27, this->ground_dodge_enabled_by_rdf_cnt_from_beginning(), output);
  }

  // int32 ground_dodged_frames_to_recover = 28;
  if (this->ground_dodged_frames_to_recover() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(28, this->ground_dodged_frames_to_recover(), output);
  }

  // int32 ground_dodged_frames_invinsible = 29;
  if (this->ground_dodged_frames_invinsible() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(29, this->ground_dodged_frames_invinsible(), output);
  }

  // float ground_dodged_speed = 30;
  if (this->ground_dodged_speed() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(30, this->ground_dodged_speed(), output);
  }

  // float vision_offset_x = 31;
  if (this->vision_offset_x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(31, this->vision_offset_x(), output);
  }

  // float vision_offset_y = 32;
  if (this->vision_offset_y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(32, this->vision_offset_y(), output);
  }

  // float vision_size_x = 33;
  if (this->vision_size_x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(33, this->vision_size_x(), output);
  }

  // float vision_size_y = 34;
  if (this->vision_size_y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(34, this->vision_size_y(), output);
  }

  // float capsule_radius = 35;
  if (this->capsule_radius() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(35, this->capsule_radius(), output);
  }

  // float capsule_half_height = 36;
  if (this->capsule_half_height() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(36, this->capsule_half_height(), output);
  }

  // float shrinked_scale_radius = 37;
  if (this->shrinked_scale_radius() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(37, this->shrinked_scale_radius(), output);
  }

  // float shrinked_scale_height = 38;
  if (this->shrinked_scale_height() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(38, this->shrinked_scale_height(), output);
  }

  // float lay_down_scale_radius = 39;
  if (this->lay_down_scale_radius() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(39, this->lay_down_scale_radius(), output);
  }

  // float lay_down_scale_height = 40;
  if (this->lay_down_scale_height() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(40, this->lay_down_scale_height(), output);
  }

  // float dying_scale_radius = 41;
  if (this->dying_scale_radius() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(41, this->dying_scale_radius(), output);
  }

  // float dying_scale_height = 42;
  if (this->dying_scale_height() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(42, this->dying_scale_height(), output);
  }

  // float dimmed_scale_radius = 43;
  if (this->dimmed_scale_radius() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(43, this->dimmed_scale_radius(), output);
  }

  // float dimmed_scale_height = 44;
  if (this->dimmed_scale_height() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(44, this->dimmed_scale_height(), output);
  }

  // bool anti_gravity_when_idle = 45;
  if (this->anti_gravity_when_idle() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(45, this->anti_gravity_when_idle(), output);
  }

  // int32 anti_gravity_frames_lingering = 46;
  if (this->anti_gravity_frames_lingering() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(46, this->anti_gravity_frames_lingering(), output);
  }

  // bool omit_gravity = 47;
  if (this->omit_gravity() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(47, this->omit_gravity(), output);
  }

  // bool omit_soft_pushback = 48;
  if (this->omit_soft_pushback() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(48, this->omit_soft_pushback(), output);
  }

  // bool repel_soft_pushback = 49;
  if (this->repel_soft_pushback() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(49, this->repel_soft_pushback(), output);
  }

  // uint64 collision_type_mask = 50;
  if (this->collision_type_mask() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(50, this->collision_type_mask(), output);
  }

  // bool has_turn_around_anim = 51;
  if (this->has_turn_around_anim() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(51, this->has_turn_around_anim(), output);
  }

  // bool has_dimmed_anim = 52;
  if (this->has_dimmed_anim() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(52, this->has_dimmed_anim(), output);
  }

  // bool has_awaking_anim = 53;
  if (this->has_awaking_anim() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(53, this->has_awaking_anim(), output);
  }

  // bool has_walk_stopping_anim = 54;
  if (this->has_walk_stopping_anim() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(54, this->has_walk_stopping_anim(), output);
  }

  // bool has_in_air_walk_stopping_anim = 55;
  if (this->has_in_air_walk_stopping_anim() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(55, this->has_in_air_walk_stopping_anim(), output);
  }

  // bool lay_down_to_recover_from_dimmed = 56;
  if (this->lay_down_to_recover_from_dimmed() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(56, this->lay_down_to_recover_from_dimmed(), output);
  }

  // int32 hardness = 57;
  if (this->hardness() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(57, this->hardness(), output);
  }

  // int32 proactive_jump_startup_frames = 58;
  if (this->proactive_jump_startup_frames() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(58, this->proactive_jump_startup_frames(), output);
  }

  // uint32 default_air_jump_quota = 59;
  if (this->default_air_jump_quota() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(59, this->default_air_jump_quota(), output);
  }

  // uint32 default_air_dash_quota = 60;
  if (this->default_air_dash_quota() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(60, this->default_air_dash_quota(), output);
  }

  // uint32 default_def1Quota = 61;
  if (this->default_def1quota() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(61, this->default_def1quota(), output);
  }

  // bool isolated_air_jump_and_dash_quota = 62;
  if (this->isolated_air_jump_and_dash_quota() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(62, this->isolated_air_jump_and_dash_quota(), output);
  }

  // int32 air_jump_vfx_species_id = 63;
  if (this->air_jump_vfx_species_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(63, this->air_jump_vfx_species_id(), output);
  }

  // float slip_jump_thres_hold_below_top_face = 64;
  if (this->slip_jump_thres_hold_below_top_face() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(64, this->slip_jump_thres_hold_below_top_face(), output);
  }

  // float slip_jump_character_drop_y = 65;
  if (this->slip_jump_character_drop_y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(65, this->slip_jump_character_drop_y(), output);
  }

  // uint32 transform_into_species_id_upon_death = 66;
  if (this->transform_into_species_id_upon_death() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(66, this->transform_into_species_id_upon_death(), output);
  }

  // bool jump_holding_to_fly = 67;
  if (this->jump_holding_to_fly() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(67, this->jump_holding_to_fly(), output);
  }

  // bool has_def1 = 68;
  if (this->has_def1() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(68, this->has_def1(), output);
  }

  // bool has_def1Atked1Anim = 69;
  if (this->has_def1atked1anim() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(69, this->has_def1atked1anim(), output);
  }

  // int32 default_def1Broken_frames_to_recover = 70;
  if (this->default_def1broken_frames_to_recover() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(70, this->default_def1broken_frames_to_recover(), output);
  }

  // int32 def1_active_vfx_species_id = 71;
  if (this->def1_active_vfx_species_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(71, this->def1_active_vfx_species_id(), output);
  }

  // int32 def1_atked_vfx_species_id = 72;
  if (this->def1_atked_vfx_species_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(72, this->def1_atked_vfx_species_id(), output);
  }

  // int32 def1_broken_vfx_species_id = 73;
  if (this->def1_broken_vfx_species_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(73, this->def1_broken_vfx_species_id(), output);
  }

  // int32 def1_startup_frames = 74;
  if (this->def1_startup_frames() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(74, this->def1_startup_frames(), output);
  }

  // float def1_damage_yield = 75;
  if (this->def1_damage_yield() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(75, this->def1_damage_yield(), output);
  }

  // bool def1_defies_ele_weakness_penetration = 76;
  if (this->def1_defies_ele_weakness_penetration() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(76, this->def1_defies_ele_weakness_penetration(), output);
  }

  // bool def1_defies_debuff = 77;
  if (this->def1_defies_debuff() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(77, this->def1_defies_debuff(), output);
  }

  // int32 flying_quota_rdf_cnt = 78;
  if (this->flying_quota_rdf_cnt() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(78, this->flying_quota_rdf_cnt(), output);
  }

  // bool walking_auto_def1 = 79;
  if (this->walking_auto_def1() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(79, this->walking_auto_def1(), output);
  }

  // .shared.IfaceCat Ifc = 80;
  if (this->ifc() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      80, this->ifc(), output);
  }

  // uint32 ele_weakness = 81;
  if (this->ele_weakness() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(81, this->ele_weakness(), output);
  }

  // uint32 ele_resistance = 82;
  if (this->ele_resistance() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(82, this->ele_resistance(), output);
  }

  // bool has_btn_b_charging = 83;
  if (this->has_btn_b_charging() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(83, this->has_btn_b_charging(), output);
  }

  // int32 btn_b_charged_vfx_species_id = 84;
  if (this->btn_b_charged_vfx_species_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(84, this->btn_b_charged_vfx_species_id(), output);
  }

  // bool is_key_ch = 85;
  if (this->is_key_ch() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(85, this->is_key_ch(), output);
  }

  // bool allows_same_team_soft_pushback = 86;
  if (this->allows_same_team_soft_pushback() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(86, this->allows_same_team_soft_pushback(), output);
  }

  // int32 gauge_inc_when_killed = 87;
  if (this->gauge_inc_when_killed() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(87, this->gauge_inc_when_killed(), output);
  }

  // bool jumping_instead_of_walking = 88;
  if (this->jumping_instead_of_walking() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(88, this->jumping_instead_of_walking(), output);
  }

  // uint32 vision_search_interval_pow2Minus1U = 89;
  if (this->vision_search_interval_pow2minus1u() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(89, this->vision_search_interval_pow2minus1u(), output);
  }

  // int32 vision_search_interval_pow2Minus1 = 90;
  if (this->vision_search_interval_pow2minus1() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(90, this->vision_search_interval_pow2minus1(), output);
  }

  // bool npc_no_default_air_walking = 91;
  if (this->npc_no_default_air_walking() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(91, this->npc_no_default_air_walking(), output);
  }

  // bool npc_prioritize_bullet_handling = 92;
  if (this->npc_prioritize_bullet_handling() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(92, this->npc_prioritize_bullet_handling(), output);
  }

  // bool npc_prioritize_ally_healing = 93;
  if (this->npc_prioritize_ally_healing() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(93, this->npc_prioritize_ally_healing(), output);
  }

  // bool npc_not_hunting_in_air_oppo_ch = 94;
  if (this->npc_not_hunting_in_air_oppo_ch() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(94, this->npc_not_hunting_in_air_oppo_ch(), output);
  }

  // int32 transform_into_frames_to_recover = 95;
  if (this->transform_into_frames_to_recover() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(95, this->transform_into_frames_to_recover(), output);
  }

  // int32 transform_into_frames_invinsible = 96;
  if (this->transform_into_frames_invinsible() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(96, this->transform_into_frames_invinsible(), output);
  }

  // int32 awaking_frames_to_recover = 97;
  if (this->awaking_frames_to_recover() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(97, this->awaking_frames_to_recover(), output);
  }

  // int32 awaking_frames_invinsible = 98;
  if (this->awaking_frames_invinsible() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(98, this->awaking_frames_invinsible(), output);
  }

  // bool use_idle1_as_flying_idle = 99;
  if (this->use_idle1_as_flying_idle() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(99, this->use_idle1_as_flying_idle(), output);
  }

  // bool no_flee = 100;
  if (this->no_flee() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(100, this->no_flee(), output);
  }

  // repeated .shared.InventorySlot init_inventory_slots = 101;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->init_inventory_slots_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      101,
      this->init_inventory_slots(static_cast<int>(i)),
      output);
  }

  // repeated .shared.CharacterState btn_b_auto_unhold_ch_states = 102;
  if (this->btn_b_auto_unhold_ch_states_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(
      102,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      output);
    output->WriteVarint32(_btn_b_auto_unhold_ch_states_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->btn_b_auto_unhold_ch_states_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnumNoTag(
      this->btn_b_auto_unhold_ch_states(i), output);
  }

  // map<int32, int32> looping_ch_states = 103;
  if (!this->looping_ch_states().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::int32, ::google::protobuf::int32 >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::int32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (output->IsSerializationDeterministic() &&
        this->looping_ch_states().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->looping_ch_states().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::int32, ::google::protobuf::int32 >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::google::protobuf::int32 >::const_iterator
          it = this->looping_ch_states().begin();
          it != this->looping_ch_states().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<CharacterConfig_LoopingChStatesEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(looping_ch_states_.NewEntryWrapper(items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(103, *entry, output);
      }
    } else {
      ::std::unique_ptr<CharacterConfig_LoopingChStatesEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::google::protobuf::int32 >::const_iterator
          it = this->looping_ch_states().begin();
          it != this->looping_ch_states().end(); ++it) {
        entry.reset(looping_ch_states_.NewEntryWrapper(it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(103, *entry, output);
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:shared.CharacterConfig)
}

::google::protobuf::uint8* CharacterConfig::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:shared.CharacterConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 species_id = 1;
  if (this->species_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->species_id(), target);
  }

  // string species_name = 2;
  if (this->species_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->species_name().data(), static_cast<int>(this->species_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "shared.CharacterConfig.species_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->species_name(), target);
  }

  // int32 hp = 3;
  if (this->hp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->hp(), target);
  }

  // int32 mp = 4;
  if (this->mp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->mp(), target);
  }

  // int32 lay_down_frames = 5;
  if (this->lay_down_frames() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->lay_down_frames(), target);
  }

  // int32 lay_down_frames_to_recover = 6;
  if (this->lay_down_frames_to_recover() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->lay_down_frames_to_recover(), target);
  }

  // int32 get_up_invinsible_frames = 7;
  if (this->get_up_invinsible_frames() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->get_up_invinsible_frames(), target);
  }

  // int32 get_up_frames_to_recover = 8;
  if (this->get_up_frames_to_recover() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->get_up_frames_to_recover(), target);
  }

  // float speed = 9;
  if (this->speed() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->speed(), target);
  }

  // int32 mp_regen_per_interval = 10;
  if (this->mp_regen_per_interval() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->mp_regen_per_interval(), target);
  }

  // int32 mp_regen_interval = 11;
  if (this->mp_regen_interval() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->mp_regen_interval(), target);
  }

  // float jumping_init_vel_y = 12;
  if (this->jumping_init_vel_y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(12, this->jumping_init_vel_y(), target);
  }

  // int32 inertia_frames_to_recover = 13;
  if (this->inertia_frames_to_recover() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->inertia_frames_to_recover(), target);
  }

  // bool dashing_enabled = 14;
  if (this->dashing_enabled() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(14, this->dashing_enabled(), target);
  }

  // bool sliding_enabled = 15;
  if (this->sliding_enabled() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(15, this->sliding_enabled(), target);
  }

  // bool on_wall_enabled = 16;
  if (this->on_wall_enabled() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(16, this->on_wall_enabled(), target);
  }

  // bool crouching_enabled = 17;
  if (this->crouching_enabled() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(17, this->crouching_enabled(), target);
  }

  // bool crouching_atk_enabled = 18;
  if (this->crouching_atk_enabled() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(18, this->crouching_atk_enabled(), target);
  }

  // int32 wall_jumping_frames_to_recover = 19;
  if (this->wall_jumping_frames_to_recover() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->wall_jumping_frames_to_recover(), target);
  }

  // float wall_jumping_init_vel_x = 20;
  if (this->wall_jumping_init_vel_x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(20, this->wall_jumping_init_vel_x(), target);
  }

  // float wall_jumping_init_vel_y = 21;
  if (this->wall_jumping_init_vel_y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(21, this->wall_jumping_init_vel_y(), target);
  }

  // float wall_sliding_vel_y = 22;
  if (this->wall_sliding_vel_y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(22, this->wall_sliding_vel_y(), target);
  }

  // float min_falling_vel_y = 23;
  if (this->min_falling_vel_y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(23, this->min_falling_vel_y(), target);
  }

  // float max_ascending_vel_y = 24;
  if (this->max_ascending_vel_y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(24, this->max_ascending_vel_y(), target);
  }

  // bool use_inventory_btn_b = 25;
  if (this->use_inventory_btn_b() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(25, this->use_inventory_btn_b(), target);
  }

  // bool ground_dodge_enabled_by_iv_slot_c_in_block_stun = 26;
  if (this->ground_dodge_enabled_by_iv_slot_c_in_block_stun() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(26, this->ground_dodge_enabled_by_iv_slot_c_in_block_stun(), target);
  }

  // int32 ground_dodge_enabled_by_rdf_cnt_from_beginning = 27;
  if (this->ground_dodge_enabled_by_rdf_cnt_from_beginning() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(27, this->ground_dodge_enabled_by_rdf_cnt_from_beginning(), target);
  }

  // int32 ground_dodged_frames_to_recover = 28;
  if (this->ground_dodged_frames_to_recover() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(28, this->ground_dodged_frames_to_recover(), target);
  }

  // int32 ground_dodged_frames_invinsible = 29;
  if (this->ground_dodged_frames_invinsible() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(29, this->ground_dodged_frames_invinsible(), target);
  }

  // float ground_dodged_speed = 30;
  if (this->ground_dodged_speed() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(30, this->ground_dodged_speed(), target);
  }

  // float vision_offset_x = 31;
  if (this->vision_offset_x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(31, this->vision_offset_x(), target);
  }

  // float vision_offset_y = 32;
  if (this->vision_offset_y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(32, this->vision_offset_y(), target);
  }

  // float vision_size_x = 33;
  if (this->vision_size_x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(33, this->vision_size_x(), target);
  }

  // float vision_size_y = 34;
  if (this->vision_size_y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(34, this->vision_size_y(), target);
  }

  // float capsule_radius = 35;
  if (this->capsule_radius() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(35, this->capsule_radius(), target);
  }

  // float capsule_half_height = 36;
  if (this->capsule_half_height() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(36, this->capsule_half_height(), target);
  }

  // float shrinked_scale_radius = 37;
  if (this->shrinked_scale_radius() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(37, this->shrinked_scale_radius(), target);
  }

  // float shrinked_scale_height = 38;
  if (this->shrinked_scale_height() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(38, this->shrinked_scale_height(), target);
  }

  // float lay_down_scale_radius = 39;
  if (this->lay_down_scale_radius() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(39, this->lay_down_scale_radius(), target);
  }

  // float lay_down_scale_height = 40;
  if (this->lay_down_scale_height() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(40, this->lay_down_scale_height(), target);
  }

  // float dying_scale_radius = 41;
  if (this->dying_scale_radius() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(41, this->dying_scale_radius(), target);
  }

  // float dying_scale_height = 42;
  if (this->dying_scale_height() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(42, this->dying_scale_height(), target);
  }

  // float dimmed_scale_radius = 43;
  if (this->dimmed_scale_radius() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(43, this->dimmed_scale_radius(), target);
  }

  // float dimmed_scale_height = 44;
  if (this->dimmed_scale_height() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(44, this->dimmed_scale_height(), target);
  }

  // bool anti_gravity_when_idle = 45;
  if (this->anti_gravity_when_idle() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(45, this->anti_gravity_when_idle(), target);
  }

  // int32 anti_gravity_frames_lingering = 46;
  if (this->anti_gravity_frames_lingering() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(46, this->anti_gravity_frames_lingering(), target);
  }

  // bool omit_gravity = 47;
  if (this->omit_gravity() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(47, this->omit_gravity(), target);
  }

  // bool omit_soft_pushback = 48;
  if (this->omit_soft_pushback() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(48, this->omit_soft_pushback(), target);
  }

  // bool repel_soft_pushback = 49;
  if (this->repel_soft_pushback() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(49, this->repel_soft_pushback(), target);
  }

  // uint64 collision_type_mask = 50;
  if (this->collision_type_mask() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(50, this->collision_type_mask(), target);
  }

  // bool has_turn_around_anim = 51;
  if (this->has_turn_around_anim() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(51, this->has_turn_around_anim(), target);
  }

  // bool has_dimmed_anim = 52;
  if (this->has_dimmed_anim() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(52, this->has_dimmed_anim(), target);
  }

  // bool has_awaking_anim = 53;
  if (this->has_awaking_anim() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(53, this->has_awaking_anim(), target);
  }

  // bool has_walk_stopping_anim = 54;
  if (this->has_walk_stopping_anim() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(54, this->has_walk_stopping_anim(), target);
  }

  // bool has_in_air_walk_stopping_anim = 55;
  if (this->has_in_air_walk_stopping_anim() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(55, this->has_in_air_walk_stopping_anim(), target);
  }

  // bool lay_down_to_recover_from_dimmed = 56;
  if (this->lay_down_to_recover_from_dimmed() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(56, this->lay_down_to_recover_from_dimmed(), target);
  }

  // int32 hardness = 57;
  if (this->hardness() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(57, this->hardness(), target);
  }

  // int32 proactive_jump_startup_frames = 58;
  if (this->proactive_jump_startup_frames() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(58, this->proactive_jump_startup_frames(), target);
  }

  // uint32 default_air_jump_quota = 59;
  if (this->default_air_jump_quota() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(59, this->default_air_jump_quota(), target);
  }

  // uint32 default_air_dash_quota = 60;
  if (this->default_air_dash_quota() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(60, this->default_air_dash_quota(), target);
  }

  // uint32 default_def1Quota = 61;
  if (this->default_def1quota() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(61, this->default_def1quota(), target);
  }

  // bool isolated_air_jump_and_dash_quota = 62;
  if (this->isolated_air_jump_and_dash_quota() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(62, this->isolated_air_jump_and_dash_quota(), target);
  }

  // int32 air_jump_vfx_species_id = 63;
  if (this->air_jump_vfx_species_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(63, this->air_jump_vfx_species_id(), target);
  }

  // float slip_jump_thres_hold_below_top_face = 64;
  if (this->slip_jump_thres_hold_below_top_face() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(64, this->slip_jump_thres_hold_below_top_face(), target);
  }

  // float slip_jump_character_drop_y = 65;
  if (this->slip_jump_character_drop_y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(65, this->slip_jump_character_drop_y(), target);
  }

  // uint32 transform_into_species_id_upon_death = 66;
  if (this->transform_into_species_id_upon_death() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(66, this->transform_into_species_id_upon_death(), target);
  }

  // bool jump_holding_to_fly = 67;
  if (this->jump_holding_to_fly() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(67, this->jump_holding_to_fly(), target);
  }

  // bool has_def1 = 68;
  if (this->has_def1() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(68, this->has_def1(), target);
  }

  // bool has_def1Atked1Anim = 69;
  if (this->has_def1atked1anim() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(69, this->has_def1atked1anim(), target);
  }

  // int32 default_def1Broken_frames_to_recover = 70;
  if (this->default_def1broken_frames_to_recover() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(70, this->default_def1broken_frames_to_recover(), target);
  }

  // int32 def1_active_vfx_species_id = 71;
  if (this->def1_active_vfx_species_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(71, this->def1_active_vfx_species_id(), target);
  }

  // int32 def1_atked_vfx_species_id = 72;
  if (this->def1_atked_vfx_species_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(72, this->def1_atked_vfx_species_id(), target);
  }

  // int32 def1_broken_vfx_species_id = 73;
  if (this->def1_broken_vfx_species_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(73, this->def1_broken_vfx_species_id(), target);
  }

  // int32 def1_startup_frames = 74;
  if (this->def1_startup_frames() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(74, this->def1_startup_frames(), target);
  }

  // float def1_damage_yield = 75;
  if (this->def1_damage_yield() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(75, this->def1_damage_yield(), target);
  }

  // bool def1_defies_ele_weakness_penetration = 76;
  if (this->def1_defies_ele_weakness_penetration() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(76, this->def1_defies_ele_weakness_penetration(), target);
  }

  // bool def1_defies_debuff = 77;
  if (this->def1_defies_debuff() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(77, this->def1_defies_debuff(), target);
  }

  // int32 flying_quota_rdf_cnt = 78;
  if (this->flying_quota_rdf_cnt() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(78, this->flying_quota_rdf_cnt(), target);
  }

  // bool walking_auto_def1 = 79;
  if (this->walking_auto_def1() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(79, this->walking_auto_def1(), target);
  }

  // .shared.IfaceCat Ifc = 80;
  if (this->ifc() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      80, this->ifc(), target);
  }

  // uint32 ele_weakness = 81;
  if (this->ele_weakness() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(81, this->ele_weakness(), target);
  }

  // uint32 ele_resistance = 82;
  if (this->ele_resistance() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(82, this->ele_resistance(), target);
  }

  // bool has_btn_b_charging = 83;
  if (this->has_btn_b_charging() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(83, this->has_btn_b_charging(), target);
  }

  // int32 btn_b_charged_vfx_species_id = 84;
  if (this->btn_b_charged_vfx_species_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(84, this->btn_b_charged_vfx_species_id(), target);
  }

  // bool is_key_ch = 85;
  if (this->is_key_ch() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(85, this->is_key_ch(), target);
  }

  // bool allows_same_team_soft_pushback = 86;
  if (this->allows_same_team_soft_pushback() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(86, this->allows_same_team_soft_pushback(), target);
  }

  // int32 gauge_inc_when_killed = 87;
  if (this->gauge_inc_when_killed() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(87, this->gauge_inc_when_killed(), target);
  }

  // bool jumping_instead_of_walking = 88;
  if (this->jumping_instead_of_walking() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(88, this->jumping_instead_of_walking(), target);
  }

  // uint32 vision_search_interval_pow2Minus1U = 89;
  if (this->vision_search_interval_pow2minus1u() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(89, this->vision_search_interval_pow2minus1u(), target);
  }

  // int32 vision_search_interval_pow2Minus1 = 90;
  if (this->vision_search_interval_pow2minus1() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(90, this->vision_search_interval_pow2minus1(), target);
  }

  // bool npc_no_default_air_walking = 91;
  if (this->npc_no_default_air_walking() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(91, this->npc_no_default_air_walking(), target);
  }

  // bool npc_prioritize_bullet_handling = 92;
  if (this->npc_prioritize_bullet_handling() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(92, this->npc_prioritize_bullet_handling(), target);
  }

  // bool npc_prioritize_ally_healing = 93;
  if (this->npc_prioritize_ally_healing() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(93, this->npc_prioritize_ally_healing(), target);
  }

  // bool npc_not_hunting_in_air_oppo_ch = 94;
  if (this->npc_not_hunting_in_air_oppo_ch() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(94, this->npc_not_hunting_in_air_oppo_ch(), target);
  }

  // int32 transform_into_frames_to_recover = 95;
  if (this->transform_into_frames_to_recover() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(95, this->transform_into_frames_to_recover(), target);
  }

  // int32 transform_into_frames_invinsible = 96;
  if (this->transform_into_frames_invinsible() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(96, this->transform_into_frames_invinsible(), target);
  }

  // int32 awaking_frames_to_recover = 97;
  if (this->awaking_frames_to_recover() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(97, this->awaking_frames_to_recover(), target);
  }

  // int32 awaking_frames_invinsible = 98;
  if (this->awaking_frames_invinsible() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(98, this->awaking_frames_invinsible(), target);
  }

  // bool use_idle1_as_flying_idle = 99;
  if (this->use_idle1_as_flying_idle() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(99, this->use_idle1_as_flying_idle(), target);
  }

  // bool no_flee = 100;
  if (this->no_flee() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(100, this->no_flee(), target);
  }

  // repeated .shared.InventorySlot init_inventory_slots = 101;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->init_inventory_slots_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        101, this->init_inventory_slots(static_cast<int>(i)), target);
  }

  // repeated .shared.CharacterState btn_b_auto_unhold_ch_states = 102;
  if (this->btn_b_auto_unhold_ch_states_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      102,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(      _btn_b_auto_unhold_ch_states_cached_byte_size_.load(std::memory_order_relaxed),
        target);
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumNoTagToArray(
      this->btn_b_auto_unhold_ch_states_, target);
  }

  // map<int32, int32> looping_ch_states = 103;
  if (!this->looping_ch_states().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::int32, ::google::protobuf::int32 >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::int32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (false &&
        this->looping_ch_states().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->looping_ch_states().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::int32, ::google::protobuf::int32 >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::google::protobuf::int32 >::const_iterator
          it = this->looping_ch_states().begin();
          it != this->looping_ch_states().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<CharacterConfig_LoopingChStatesEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(looping_ch_states_.NewEntryWrapper(items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(103, *entry, target);
      }
    } else {
      ::std::unique_ptr<CharacterConfig_LoopingChStatesEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::google::protobuf::int32 >::const_iterator
          it = this->looping_ch_states().begin();
          it != this->looping_ch_states().end(); ++it) {
        entry.reset(looping_ch_states_.NewEntryWrapper(it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(103, *entry, target);
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:shared.CharacterConfig)
  return target;
}

size_t CharacterConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:shared.CharacterConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .shared.InventorySlot init_inventory_slots = 101;
  {
    unsigned int count = static_cast<unsigned int>(this->init_inventory_slots_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->init_inventory_slots(static_cast<int>(i)));
    }
  }

  // repeated .shared.CharacterState btn_b_auto_unhold_ch_states = 102;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->btn_b_auto_unhold_ch_states_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->btn_b_auto_unhold_ch_states(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast<::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    _btn_b_auto_unhold_ch_states_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // map<int32, int32> looping_ch_states = 103;
  total_size += 2 *
      ::google::protobuf::internal::FromIntSize(this->looping_ch_states_size());
  {
    ::std::unique_ptr<CharacterConfig_LoopingChStatesEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::google::protobuf::int32, ::google::protobuf::int32 >::const_iterator
        it = this->looping_ch_states().begin();
        it != this->looping_ch_states().end(); ++it) {
      entry.reset(looping_ch_states_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // string species_name = 2;
  if (this->species_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->species_name());
  }

  // uint32 species_id = 1;
  if (this->species_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->species_id());
  }

  // int32 hp = 3;
  if (this->hp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->hp());
  }

  // int32 mp = 4;
  if (this->mp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->mp());
  }

  // int32 lay_down_frames = 5;
  if (this->lay_down_frames() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->lay_down_frames());
  }

  // int32 lay_down_frames_to_recover = 6;
  if (this->lay_down_frames_to_recover() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->lay_down_frames_to_recover());
  }

  // int32 get_up_invinsible_frames = 7;
  if (this->get_up_invinsible_frames() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->get_up_invinsible_frames());
  }

  // int32 get_up_frames_to_recover = 8;
  if (this->get_up_frames_to_recover() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->get_up_frames_to_recover());
  }

  // float speed = 9;
  if (this->speed() != 0) {
    total_size += 1 + 4;
  }

  // int32 mp_regen_per_interval = 10;
  if (this->mp_regen_per_interval() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->mp_regen_per_interval());
  }

  // int32 mp_regen_interval = 11;
  if (this->mp_regen_interval() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->mp_regen_interval());
  }

  // float jumping_init_vel_y = 12;
  if (this->jumping_init_vel_y() != 0) {
    total_size += 1 + 4;
  }

  // int32 inertia_frames_to_recover = 13;
  if (this->inertia_frames_to_recover() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->inertia_frames_to_recover());
  }

  // bool dashing_enabled = 14;
  if (this->dashing_enabled() != 0) {
    total_size += 1 + 1;
  }

  // bool sliding_enabled = 15;
  if (this->sliding_enabled() != 0) {
    total_size += 1 + 1;
  }

  // bool on_wall_enabled = 16;
  if (this->on_wall_enabled() != 0) {
    total_size += 2 + 1;
  }

  // bool crouching_enabled = 17;
  if (this->crouching_enabled() != 0) {
    total_size += 2 + 1;
  }

  // int32 wall_jumping_frames_to_recover = 19;
  if (this->wall_jumping_frames_to_recover() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->wall_jumping_frames_to_recover());
  }

  // float wall_jumping_init_vel_x = 20;
  if (this->wall_jumping_init_vel_x() != 0) {
    total_size += 2 + 4;
  }

  // float wall_jumping_init_vel_y = 21;
  if (this->wall_jumping_init_vel_y() != 0) {
    total_size += 2 + 4;
  }

  // float wall_sliding_vel_y = 22;
  if (this->wall_sliding_vel_y() != 0) {
    total_size += 2 + 4;
  }

  // float min_falling_vel_y = 23;
  if (this->min_falling_vel_y() != 0) {
    total_size += 2 + 4;
  }

  // float max_ascending_vel_y = 24;
  if (this->max_ascending_vel_y() != 0) {
    total_size += 2 + 4;
  }

  // int32 ground_dodge_enabled_by_rdf_cnt_from_beginning = 27;
  if (this->ground_dodge_enabled_by_rdf_cnt_from_beginning() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->ground_dodge_enabled_by_rdf_cnt_from_beginning());
  }

  // int32 ground_dodged_frames_to_recover = 28;
  if (this->ground_dodged_frames_to_recover() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->ground_dodged_frames_to_recover());
  }

  // bool crouching_atk_enabled = 18;
  if (this->crouching_atk_enabled() != 0) {
    total_size += 2 + 1;
  }

  // bool use_inventory_btn_b = 25;
  if (this->use_inventory_btn_b() != 0) {
    total_size += 2 + 1;
  }

  // bool ground_dodge_enabled_by_iv_slot_c_in_block_stun = 26;
  if (this->ground_dodge_enabled_by_iv_slot_c_in_block_stun() != 0) {
    total_size += 2 + 1;
  }

  // bool anti_gravity_when_idle = 45;
  if (this->anti_gravity_when_idle() != 0) {
    total_size += 2 + 1;
  }

  // int32 ground_dodged_frames_invinsible = 29;
  if (this->ground_dodged_frames_invinsible() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->ground_dodged_frames_invinsible());
  }

  // float ground_dodged_speed = 30;
  if (this->ground_dodged_speed() != 0) {
    total_size += 2 + 4;
  }

  // float vision_offset_x = 31;
  if (this->vision_offset_x() != 0) {
    total_size += 2 + 4;
  }

  // float vision_offset_y = 32;
  if (this->vision_offset_y() != 0) {
    total_size += 2 + 4;
  }

  // float vision_size_x = 33;
  if (this->vision_size_x() != 0) {
    total_size += 2 + 4;
  }

  // float vision_size_y = 34;
  if (this->vision_size_y() != 0) {
    total_size += 2 + 4;
  }

  // float capsule_radius = 35;
  if (this->capsule_radius() != 0) {
    total_size += 2 + 4;
  }

  // float capsule_half_height = 36;
  if (this->capsule_half_height() != 0) {
    total_size += 2 + 4;
  }

  // float shrinked_scale_radius = 37;
  if (this->shrinked_scale_radius() != 0) {
    total_size += 2 + 4;
  }

  // float shrinked_scale_height = 38;
  if (this->shrinked_scale_height() != 0) {
    total_size += 2 + 4;
  }

  // float lay_down_scale_radius = 39;
  if (this->lay_down_scale_radius() != 0) {
    total_size += 2 + 4;
  }

  // float lay_down_scale_height = 40;
  if (this->lay_down_scale_height() != 0) {
    total_size += 2 + 4;
  }

  // float dying_scale_radius = 41;
  if (this->dying_scale_radius() != 0) {
    total_size += 2 + 4;
  }

  // float dying_scale_height = 42;
  if (this->dying_scale_height() != 0) {
    total_size += 2 + 4;
  }

  // float dimmed_scale_radius = 43;
  if (this->dimmed_scale_radius() != 0) {
    total_size += 2 + 4;
  }

  // float dimmed_scale_height = 44;
  if (this->dimmed_scale_height() != 0) {
    total_size += 2 + 4;
  }

  // int32 anti_gravity_frames_lingering = 46;
  if (this->anti_gravity_frames_lingering() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->anti_gravity_frames_lingering());
  }

  // bool omit_gravity = 47;
  if (this->omit_gravity() != 0) {
    total_size += 2 + 1;
  }

  // bool omit_soft_pushback = 48;
  if (this->omit_soft_pushback() != 0) {
    total_size += 2 + 1;
  }

  // bool repel_soft_pushback = 49;
  if (this->repel_soft_pushback() != 0) {
    total_size += 2 + 1;
  }

  // bool has_turn_around_anim = 51;
  if (this->has_turn_around_anim() != 0) {
    total_size += 2 + 1;
  }

  // uint64 collision_type_mask = 50;
  if (this->collision_type_mask() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->collision_type_mask());
  }

  // bool has_dimmed_anim = 52;
  if (this->has_dimmed_anim() != 0) {
    total_size += 2 + 1;
  }

  // bool has_awaking_anim = 53;
  if (this->has_awaking_anim() != 0) {
    total_size += 2 + 1;
  }

  // bool has_walk_stopping_anim = 54;
  if (this->has_walk_stopping_anim() != 0) {
    total_size += 2 + 1;
  }

  // bool has_in_air_walk_stopping_anim = 55;
  if (this->has_in_air_walk_stopping_anim() != 0) {
    total_size += 2 + 1;
  }

  // int32 hardness = 57;
  if (this->hardness() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->hardness());
  }

  // int32 proactive_jump_startup_frames = 58;
  if (this->proactive_jump_startup_frames() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->proactive_jump_startup_frames());
  }

  // uint32 default_air_jump_quota = 59;
  if (this->default_air_jump_quota() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->default_air_jump_quota());
  }

  // uint32 default_air_dash_quota = 60;
  if (this->default_air_dash_quota() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->default_air_dash_quota());
  }

  // uint32 default_def1Quota = 61;
  if (this->default_def1quota() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->default_def1quota());
  }

  // int32 air_jump_vfx_species_id = 63;
  if (this->air_jump_vfx_species_id() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->air_jump_vfx_species_id());
  }

  // bool lay_down_to_recover_from_dimmed = 56;
  if (this->lay_down_to_recover_from_dimmed() != 0) {
    total_size += 2 + 1;
  }

  // bool isolated_air_jump_and_dash_quota = 62;
  if (this->isolated_air_jump_and_dash_quota() != 0) {
    total_size += 2 + 1;
  }

  // bool jump_holding_to_fly = 67;
  if (this->jump_holding_to_fly() != 0) {
    total_size += 2 + 1;
  }

  // bool has_def1 = 68;
  if (this->has_def1() != 0) {
    total_size += 2 + 1;
  }

  // float slip_jump_thres_hold_below_top_face = 64;
  if (this->slip_jump_thres_hold_below_top_face() != 0) {
    total_size += 2 + 4;
  }

  // float slip_jump_character_drop_y = 65;
  if (this->slip_jump_character_drop_y() != 0) {
    total_size += 2 + 4;
  }

  // uint32 transform_into_species_id_upon_death = 66;
  if (this->transform_into_species_id_upon_death() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->transform_into_species_id_upon_death());
  }

  // int32 default_def1Broken_frames_to_recover = 70;
  if (this->default_def1broken_frames_to_recover() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->default_def1broken_frames_to_recover());
  }

  // int32 def1_active_vfx_species_id = 71;
  if (this->def1_active_vfx_species_id() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->def1_active_vfx_species_id());
  }

  // int32 def1_atked_vfx_species_id = 72;
  if (this->def1_atked_vfx_species_id() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->def1_atked_vfx_species_id());
  }

  // int32 def1_broken_vfx_species_id = 73;
  if (this->def1_broken_vfx_species_id() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->def1_broken_vfx_species_id());
  }

  // int32 def1_startup_frames = 74;
  if (this->def1_startup_frames() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->def1_startup_frames());
  }

  // float def1_damage_yield = 75;
  if (this->def1_damage_yield() != 0) {
    total_size += 2 + 4;
  }

  // bool has_def1Atked1Anim = 69;
  if (this->has_def1atked1anim() != 0) {
    total_size += 2 + 1;
  }

  // bool def1_defies_ele_weakness_penetration = 76;
  if (this->def1_defies_ele_weakness_penetration() != 0) {
    total_size += 2 + 1;
  }

  // bool def1_defies_debuff = 77;
  if (this->def1_defies_debuff() != 0) {
    total_size += 2 + 1;
  }

  // bool walking_auto_def1 = 79;
  if (this->walking_auto_def1() != 0) {
    total_size += 2 + 1;
  }

  // int32 flying_quota_rdf_cnt = 78;
  if (this->flying_quota_rdf_cnt() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->flying_quota_rdf_cnt());
  }

  // .shared.IfaceCat Ifc = 80;
  if (this->ifc() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->ifc());
  }

  // uint32 ele_weakness = 81;
  if (this->ele_weakness() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->ele_weakness());
  }

  // uint32 ele_resistance = 82;
  if (this->ele_resistance() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->ele_resistance());
  }

  // int32 btn_b_charged_vfx_species_id = 84;
  if (this->btn_b_charged_vfx_species_id() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->btn_b_charged_vfx_species_id());
  }

  // bool has_btn_b_charging = 83;
  if (this->has_btn_b_charging() != 0) {
    total_size += 2 + 1;
  }

  // bool is_key_ch = 85;
  if (this->is_key_ch() != 0) {
    total_size += 2 + 1;
  }

  // bool allows_same_team_soft_pushback = 86;
  if (this->allows_same_team_soft_pushback() != 0) {
    total_size += 2 + 1;
  }

  // bool jumping_instead_of_walking = 88;
  if (this->jumping_instead_of_walking() != 0) {
    total_size += 2 + 1;
  }

  // int32 gauge_inc_when_killed = 87;
  if (this->gauge_inc_when_killed() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->gauge_inc_when_killed());
  }

  // uint32 vision_search_interval_pow2Minus1U = 89;
  if (this->vision_search_interval_pow2minus1u() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->vision_search_interval_pow2minus1u());
  }

  // int32 vision_search_interval_pow2Minus1 = 90;
  if (this->vision_search_interval_pow2minus1() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->vision_search_interval_pow2minus1());
  }

  // bool npc_no_default_air_walking = 91;
  if (this->npc_no_default_air_walking() != 0) {
    total_size += 2 + 1;
  }

  // bool npc_prioritize_bullet_handling = 92;
  if (this->npc_prioritize_bullet_handling() != 0) {
    total_size += 2 + 1;
  }

  // bool npc_prioritize_ally_healing = 93;
  if (this->npc_prioritize_ally_healing() != 0) {
    total_size += 2 + 1;
  }

  // bool npc_not_hunting_in_air_oppo_ch = 94;
  if (this->npc_not_hunting_in_air_oppo_ch() != 0) {
    total_size += 2 + 1;
  }

  // int32 transform_into_frames_to_recover = 95;
  if (this->transform_into_frames_to_recover() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->transform_into_frames_to_recover());
  }

  // int32 transform_into_frames_invinsible = 96;
  if (this->transform_into_frames_invinsible() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->transform_into_frames_invinsible());
  }

  // int32 awaking_frames_to_recover = 97;
  if (this->awaking_frames_to_recover() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->awaking_frames_to_recover());
  }

  // int32 awaking_frames_invinsible = 98;
  if (this->awaking_frames_invinsible() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->awaking_frames_invinsible());
  }

  // bool use_idle1_as_flying_idle = 99;
  if (this->use_idle1_as_flying_idle() != 0) {
    total_size += 2 + 1;
  }

  // bool no_flee = 100;
  if (this->no_flee() != 0) {
    total_size += 2 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CharacterConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:shared.CharacterConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const CharacterConfig* source =
      ::google::protobuf::DynamicCastToGenerated<CharacterConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:shared.CharacterConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:shared.CharacterConfig)
    MergeFrom(*source);
  }
}

void CharacterConfig::MergeFrom(const CharacterConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:shared.CharacterConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  init_inventory_slots_.MergeFrom(from.init_inventory_slots_);
  btn_b_auto_unhold_ch_states_.MergeFrom(from.btn_b_auto_unhold_ch_states_);
  looping_ch_states_.MergeFrom(from.looping_ch_states_);
  if (from.species_name().size() > 0) {

    species_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.species_name_);
  }
  if (from.species_id() != 0) {
    set_species_id(from.species_id());
  }
  if (from.hp() != 0) {
    set_hp(from.hp());
  }
  if (from.mp() != 0) {
    set_mp(from.mp());
  }
  if (from.lay_down_frames() != 0) {
    set_lay_down_frames(from.lay_down_frames());
  }
  if (from.lay_down_frames_to_recover() != 0) {
    set_lay_down_frames_to_recover(from.lay_down_frames_to_recover());
  }
  if (from.get_up_invinsible_frames() != 0) {
    set_get_up_invinsible_frames(from.get_up_invinsible_frames());
  }
  if (from.get_up_frames_to_recover() != 0) {
    set_get_up_frames_to_recover(from.get_up_frames_to_recover());
  }
  if (from.speed() != 0) {
    set_speed(from.speed());
  }
  if (from.mp_regen_per_interval() != 0) {
    set_mp_regen_per_interval(from.mp_regen_per_interval());
  }
  if (from.mp_regen_interval() != 0) {
    set_mp_regen_interval(from.mp_regen_interval());
  }
  if (from.jumping_init_vel_y() != 0) {
    set_jumping_init_vel_y(from.jumping_init_vel_y());
  }
  if (from.inertia_frames_to_recover() != 0) {
    set_inertia_frames_to_recover(from.inertia_frames_to_recover());
  }
  if (from.dashing_enabled() != 0) {
    set_dashing_enabled(from.dashing_enabled());
  }
  if (from.sliding_enabled() != 0) {
    set_sliding_enabled(from.sliding_enabled());
  }
  if (from.on_wall_enabled() != 0) {
    set_on_wall_enabled(from.on_wall_enabled());
  }
  if (from.crouching_enabled() != 0) {
    set_crouching_enabled(from.crouching_enabled());
  }
  if (from.wall_jumping_frames_to_recover() != 0) {
    set_wall_jumping_frames_to_recover(from.wall_jumping_frames_to_recover());
  }
  if (from.wall_jumping_init_vel_x() != 0) {
    set_wall_jumping_init_vel_x(from.wall_jumping_init_vel_x());
  }
  if (from.wall_jumping_init_vel_y() != 0) {
    set_wall_jumping_init_vel_y(from.wall_jumping_init_vel_y());
  }
  if (from.wall_sliding_vel_y() != 0) {
    set_wall_sliding_vel_y(from.wall_sliding_vel_y());
  }
  if (from.min_falling_vel_y() != 0) {
    set_min_falling_vel_y(from.min_falling_vel_y());
  }
  if (from.max_ascending_vel_y() != 0) {
    set_max_ascending_vel_y(from.max_ascending_vel_y());
  }
  if (from.ground_dodge_enabled_by_rdf_cnt_from_beginning() != 0) {
    set_ground_dodge_enabled_by_rdf_cnt_from_beginning(from.ground_dodge_enabled_by_rdf_cnt_from_beginning());
  }
  if (from.ground_dodged_frames_to_recover() != 0) {
    set_ground_dodged_frames_to_recover(from.ground_dodged_frames_to_recover());
  }
  if (from.crouching_atk_enabled() != 0) {
    set_crouching_atk_enabled(from.crouching_atk_enabled());
  }
  if (from.use_inventory_btn_b() != 0) {
    set_use_inventory_btn_b(from.use_inventory_btn_b());
  }
  if (from.ground_dodge_enabled_by_iv_slot_c_in_block_stun() != 0) {
    set_ground_dodge_enabled_by_iv_slot_c_in_block_stun(from.ground_dodge_enabled_by_iv_slot_c_in_block_stun());
  }
  if (from.anti_gravity_when_idle() != 0) {
    set_anti_gravity_when_idle(from.anti_gravity_when_idle());
  }
  if (from.ground_dodged_frames_invinsible() != 0) {
    set_ground_dodged_frames_invinsible(from.ground_dodged_frames_invinsible());
  }
  if (from.ground_dodged_speed() != 0) {
    set_ground_dodged_speed(from.ground_dodged_speed());
  }
  if (from.vision_offset_x() != 0) {
    set_vision_offset_x(from.vision_offset_x());
  }
  if (from.vision_offset_y() != 0) {
    set_vision_offset_y(from.vision_offset_y());
  }
  if (from.vision_size_x() != 0) {
    set_vision_size_x(from.vision_size_x());
  }
  if (from.vision_size_y() != 0) {
    set_vision_size_y(from.vision_size_y());
  }
  if (from.capsule_radius() != 0) {
    set_capsule_radius(from.capsule_radius());
  }
  if (from.capsule_half_height() != 0) {
    set_capsule_half_height(from.capsule_half_height());
  }
  if (from.shrinked_scale_radius() != 0) {
    set_shrinked_scale_radius(from.shrinked_scale_radius());
  }
  if (from.shrinked_scale_height() != 0) {
    set_shrinked_scale_height(from.shrinked_scale_height());
  }
  if (from.lay_down_scale_radius() != 0) {
    set_lay_down_scale_radius(from.lay_down_scale_radius());
  }
  if (from.lay_down_scale_height() != 0) {
    set_lay_down_scale_height(from.lay_down_scale_height());
  }
  if (from.dying_scale_radius() != 0) {
    set_dying_scale_radius(from.dying_scale_radius());
  }
  if (from.dying_scale_height() != 0) {
    set_dying_scale_height(from.dying_scale_height());
  }
  if (from.dimmed_scale_radius() != 0) {
    set_dimmed_scale_radius(from.dimmed_scale_radius());
  }
  if (from.dimmed_scale_height() != 0) {
    set_dimmed_scale_height(from.dimmed_scale_height());
  }
  if (from.anti_gravity_frames_lingering() != 0) {
    set_anti_gravity_frames_lingering(from.anti_gravity_frames_lingering());
  }
  if (from.omit_gravity() != 0) {
    set_omit_gravity(from.omit_gravity());
  }
  if (from.omit_soft_pushback() != 0) {
    set_omit_soft_pushback(from.omit_soft_pushback());
  }
  if (from.repel_soft_pushback() != 0) {
    set_repel_soft_pushback(from.repel_soft_pushback());
  }
  if (from.has_turn_around_anim() != 0) {
    set_has_turn_around_anim(from.has_turn_around_anim());
  }
  if (from.collision_type_mask() != 0) {
    set_collision_type_mask(from.collision_type_mask());
  }
  if (from.has_dimmed_anim() != 0) {
    set_has_dimmed_anim(from.has_dimmed_anim());
  }
  if (from.has_awaking_anim() != 0) {
    set_has_awaking_anim(from.has_awaking_anim());
  }
  if (from.has_walk_stopping_anim() != 0) {
    set_has_walk_stopping_anim(from.has_walk_stopping_anim());
  }
  if (from.has_in_air_walk_stopping_anim() != 0) {
    set_has_in_air_walk_stopping_anim(from.has_in_air_walk_stopping_anim());
  }
  if (from.hardness() != 0) {
    set_hardness(from.hardness());
  }
  if (from.proactive_jump_startup_frames() != 0) {
    set_proactive_jump_startup_frames(from.proactive_jump_startup_frames());
  }
  if (from.default_air_jump_quota() != 0) {
    set_default_air_jump_quota(from.default_air_jump_quota());
  }
  if (from.default_air_dash_quota() != 0) {
    set_default_air_dash_quota(from.default_air_dash_quota());
  }
  if (from.default_def1quota() != 0) {
    set_default_def1quota(from.default_def1quota());
  }
  if (from.air_jump_vfx_species_id() != 0) {
    set_air_jump_vfx_species_id(from.air_jump_vfx_species_id());
  }
  if (from.lay_down_to_recover_from_dimmed() != 0) {
    set_lay_down_to_recover_from_dimmed(from.lay_down_to_recover_from_dimmed());
  }
  if (from.isolated_air_jump_and_dash_quota() != 0) {
    set_isolated_air_jump_and_dash_quota(from.isolated_air_jump_and_dash_quota());
  }
  if (from.jump_holding_to_fly() != 0) {
    set_jump_holding_to_fly(from.jump_holding_to_fly());
  }
  if (from.has_def1() != 0) {
    set_has_def1(from.has_def1());
  }
  if (from.slip_jump_thres_hold_below_top_face() != 0) {
    set_slip_jump_thres_hold_below_top_face(from.slip_jump_thres_hold_below_top_face());
  }
  if (from.slip_jump_character_drop_y() != 0) {
    set_slip_jump_character_drop_y(from.slip_jump_character_drop_y());
  }
  if (from.transform_into_species_id_upon_death() != 0) {
    set_transform_into_species_id_upon_death(from.transform_into_species_id_upon_death());
  }
  if (from.default_def1broken_frames_to_recover() != 0) {
    set_default_def1broken_frames_to_recover(from.default_def1broken_frames_to_recover());
  }
  if (from.def1_active_vfx_species_id() != 0) {
    set_def1_active_vfx_species_id(from.def1_active_vfx_species_id());
  }
  if (from.def1_atked_vfx_species_id() != 0) {
    set_def1_atked_vfx_species_id(from.def1_atked_vfx_species_id());
  }
  if (from.def1_broken_vfx_species_id() != 0) {
    set_def1_broken_vfx_species_id(from.def1_broken_vfx_species_id());
  }
  if (from.def1_startup_frames() != 0) {
    set_def1_startup_frames(from.def1_startup_frames());
  }
  if (from.def1_damage_yield() != 0) {
    set_def1_damage_yield(from.def1_damage_yield());
  }
  if (from.has_def1atked1anim() != 0) {
    set_has_def1atked1anim(from.has_def1atked1anim());
  }
  if (from.def1_defies_ele_weakness_penetration() != 0) {
    set_def1_defies_ele_weakness_penetration(from.def1_defies_ele_weakness_penetration());
  }
  if (from.def1_defies_debuff() != 0) {
    set_def1_defies_debuff(from.def1_defies_debuff());
  }
  if (from.walking_auto_def1() != 0) {
    set_walking_auto_def1(from.walking_auto_def1());
  }
  if (from.flying_quota_rdf_cnt() != 0) {
    set_flying_quota_rdf_cnt(from.flying_quota_rdf_cnt());
  }
  if (from.ifc() != 0) {
    set_ifc(from.ifc());
  }
  if (from.ele_weakness() != 0) {
    set_ele_weakness(from.ele_weakness());
  }
  if (from.ele_resistance() != 0) {
    set_ele_resistance(from.ele_resistance());
  }
  if (from.btn_b_charged_vfx_species_id() != 0) {
    set_btn_b_charged_vfx_species_id(from.btn_b_charged_vfx_species_id());
  }
  if (from.has_btn_b_charging() != 0) {
    set_has_btn_b_charging(from.has_btn_b_charging());
  }
  if (from.is_key_ch() != 0) {
    set_is_key_ch(from.is_key_ch());
  }
  if (from.allows_same_team_soft_pushback() != 0) {
    set_allows_same_team_soft_pushback(from.allows_same_team_soft_pushback());
  }
  if (from.jumping_instead_of_walking() != 0) {
    set_jumping_instead_of_walking(from.jumping_instead_of_walking());
  }
  if (from.gauge_inc_when_killed() != 0) {
    set_gauge_inc_when_killed(from.gauge_inc_when_killed());
  }
  if (from.vision_search_interval_pow2minus1u() != 0) {
    set_vision_search_interval_pow2minus1u(from.vision_search_interval_pow2minus1u());
  }
  if (from.vision_search_interval_pow2minus1() != 0) {
    set_vision_search_interval_pow2minus1(from.vision_search_interval_pow2minus1());
  }
  if (from.npc_no_default_air_walking() != 0) {
    set_npc_no_default_air_walking(from.npc_no_default_air_walking());
  }
  if (from.npc_prioritize_bullet_handling() != 0) {
    set_npc_prioritize_bullet_handling(from.npc_prioritize_bullet_handling());
  }
  if (from.npc_prioritize_ally_healing() != 0) {
    set_npc_prioritize_ally_healing(from.npc_prioritize_ally_healing());
  }
  if (from.npc_not_hunting_in_air_oppo_ch() != 0) {
    set_npc_not_hunting_in_air_oppo_ch(from.npc_not_hunting_in_air_oppo_ch());
  }
  if (from.transform_into_frames_to_recover() != 0) {
    set_transform_into_frames_to_recover(from.transform_into_frames_to_recover());
  }
  if (from.transform_into_frames_invinsible() != 0) {
    set_transform_into_frames_invinsible(from.transform_into_frames_invinsible());
  }
  if (from.awaking_frames_to_recover() != 0) {
    set_awaking_frames_to_recover(from.awaking_frames_to_recover());
  }
  if (from.awaking_frames_invinsible() != 0) {
    set_awaking_frames_invinsible(from.awaking_frames_invinsible());
  }
  if (from.use_idle1_as_flying_idle() != 0) {
    set_use_idle1_as_flying_idle(from.use_idle1_as_flying_idle());
  }
  if (from.no_flee() != 0) {
    set_no_flee(from.no_flee());
  }
}

void CharacterConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:shared.CharacterConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CharacterConfig::CopyFrom(const CharacterConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:shared.CharacterConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CharacterConfig::IsInitialized() const {
  return true;
}

void CharacterConfig::Swap(CharacterConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CharacterConfig::InternalSwap(CharacterConfig* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&init_inventory_slots_)->InternalSwap(CastToBase(&other->init_inventory_slots_));
  btn_b_auto_unhold_ch_states_.InternalSwap(&other->btn_b_auto_unhold_ch_states_);
  looping_ch_states_.Swap(&other->looping_ch_states_);
  species_name_.Swap(&other->species_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(species_id_, other->species_id_);
  swap(hp_, other->hp_);
  swap(mp_, other->mp_);
  swap(lay_down_frames_, other->lay_down_frames_);
  swap(lay_down_frames_to_recover_, other->lay_down_frames_to_recover_);
  swap(get_up_invinsible_frames_, other->get_up_invinsible_frames_);
  swap(get_up_frames_to_recover_, other->get_up_frames_to_recover_);
  swap(speed_, other->speed_);
  swap(mp_regen_per_interval_, other->mp_regen_per_interval_);
  swap(mp_regen_interval_, other->mp_regen_interval_);
  swap(jumping_init_vel_y_, other->jumping_init_vel_y_);
  swap(inertia_frames_to_recover_, other->inertia_frames_to_recover_);
  swap(dashing_enabled_, other->dashing_enabled_);
  swap(sliding_enabled_, other->sliding_enabled_);
  swap(on_wall_enabled_, other->on_wall_enabled_);
  swap(crouching_enabled_, other->crouching_enabled_);
  swap(wall_jumping_frames_to_recover_, other->wall_jumping_frames_to_recover_);
  swap(wall_jumping_init_vel_x_, other->wall_jumping_init_vel_x_);
  swap(wall_jumping_init_vel_y_, other->wall_jumping_init_vel_y_);
  swap(wall_sliding_vel_y_, other->wall_sliding_vel_y_);
  swap(min_falling_vel_y_, other->min_falling_vel_y_);
  swap(max_ascending_vel_y_, other->max_ascending_vel_y_);
  swap(ground_dodge_enabled_by_rdf_cnt_from_beginning_, other->ground_dodge_enabled_by_rdf_cnt_from_beginning_);
  swap(ground_dodged_frames_to_recover_, other->ground_dodged_frames_to_recover_);
  swap(crouching_atk_enabled_, other->crouching_atk_enabled_);
  swap(use_inventory_btn_b_, other->use_inventory_btn_b_);
  swap(ground_dodge_enabled_by_iv_slot_c_in_block_stun_, other->ground_dodge_enabled_by_iv_slot_c_in_block_stun_);
  swap(anti_gravity_when_idle_, other->anti_gravity_when_idle_);
  swap(ground_dodged_frames_invinsible_, other->ground_dodged_frames_invinsible_);
  swap(ground_dodged_speed_, other->ground_dodged_speed_);
  swap(vision_offset_x_, other->vision_offset_x_);
  swap(vision_offset_y_, other->vision_offset_y_);
  swap(vision_size_x_, other->vision_size_x_);
  swap(vision_size_y_, other->vision_size_y_);
  swap(capsule_radius_, other->capsule_radius_);
  swap(capsule_half_height_, other->capsule_half_height_);
  swap(shrinked_scale_radius_, other->shrinked_scale_radius_);
  swap(shrinked_scale_height_, other->shrinked_scale_height_);
  swap(lay_down_scale_radius_, other->lay_down_scale_radius_);
  swap(lay_down_scale_height_, other->lay_down_scale_height_);
  swap(dying_scale_radius_, other->dying_scale_radius_);
  swap(dying_scale_height_, other->dying_scale_height_);
  swap(dimmed_scale_radius_, other->dimmed_scale_radius_);
  swap(dimmed_scale_height_, other->dimmed_scale_height_);
  swap(anti_gravity_frames_lingering_, other->anti_gravity_frames_lingering_);
  swap(omit_gravity_, other->omit_gravity_);
  swap(omit_soft_pushback_, other->omit_soft_pushback_);
  swap(repel_soft_pushback_, other->repel_soft_pushback_);
  swap(has_turn_around_anim_, other->has_turn_around_anim_);
  swap(collision_type_mask_, other->collision_type_mask_);
  swap(has_dimmed_anim_, other->has_dimmed_anim_);
  swap(has_awaking_anim_, other->has_awaking_anim_);
  swap(has_walk_stopping_anim_, other->has_walk_stopping_anim_);
  swap(has_in_air_walk_stopping_anim_, other->has_in_air_walk_stopping_anim_);
  swap(hardness_, other->hardness_);
  swap(proactive_jump_startup_frames_, other->proactive_jump_startup_frames_);
  swap(default_air_jump_quota_, other->default_air_jump_quota_);
  swap(default_air_dash_quota_, other->default_air_dash_quota_);
  swap(default_def1quota_, other->default_def1quota_);
  swap(air_jump_vfx_species_id_, other->air_jump_vfx_species_id_);
  swap(lay_down_to_recover_from_dimmed_, other->lay_down_to_recover_from_dimmed_);
  swap(isolated_air_jump_and_dash_quota_, other->isolated_air_jump_and_dash_quota_);
  swap(jump_holding_to_fly_, other->jump_holding_to_fly_);
  swap(has_def1_, other->has_def1_);
  swap(slip_jump_thres_hold_below_top_face_, other->slip_jump_thres_hold_below_top_face_);
  swap(slip_jump_character_drop_y_, other->slip_jump_character_drop_y_);
  swap(transform_into_species_id_upon_death_, other->transform_into_species_id_upon_death_);
  swap(default_def1broken_frames_to_recover_, other->default_def1broken_frames_to_recover_);
  swap(def1_active_vfx_species_id_, other->def1_active_vfx_species_id_);
  swap(def1_atked_vfx_species_id_, other->def1_atked_vfx_species_id_);
  swap(def1_broken_vfx_species_id_, other->def1_broken_vfx_species_id_);
  swap(def1_startup_frames_, other->def1_startup_frames_);
  swap(def1_damage_yield_, other->def1_damage_yield_);
  swap(has_def1atked1anim_, other->has_def1atked1anim_);
  swap(def1_defies_ele_weakness_penetration_, other->def1_defies_ele_weakness_penetration_);
  swap(def1_defies_debuff_, other->def1_defies_debuff_);
  swap(walking_auto_def1_, other->walking_auto_def1_);
  swap(flying_quota_rdf_cnt_, other->flying_quota_rdf_cnt_);
  swap(ifc_, other->ifc_);
  swap(ele_weakness_, other->ele_weakness_);
  swap(ele_resistance_, other->ele_resistance_);
  swap(btn_b_charged_vfx_species_id_, other->btn_b_charged_vfx_species_id_);
  swap(has_btn_b_charging_, other->has_btn_b_charging_);
  swap(is_key_ch_, other->is_key_ch_);
  swap(allows_same_team_soft_pushback_, other->allows_same_team_soft_pushback_);
  swap(jumping_instead_of_walking_, other->jumping_instead_of_walking_);
  swap(gauge_inc_when_killed_, other->gauge_inc_when_killed_);
  swap(vision_search_interval_pow2minus1u_, other->vision_search_interval_pow2minus1u_);
  swap(vision_search_interval_pow2minus1_, other->vision_search_interval_pow2minus1_);
  swap(npc_no_default_air_walking_, other->npc_no_default_air_walking_);
  swap(npc_prioritize_bullet_handling_, other->npc_prioritize_bullet_handling_);
  swap(npc_prioritize_ally_healing_, other->npc_prioritize_ally_healing_);
  swap(npc_not_hunting_in_air_oppo_ch_, other->npc_not_hunting_in_air_oppo_ch_);
  swap(transform_into_frames_to_recover_, other->transform_into_frames_to_recover_);
  swap(transform_into_frames_invinsible_, other->transform_into_frames_invinsible_);
  swap(awaking_frames_to_recover_, other->awaking_frames_to_recover_);
  swap(awaking_frames_invinsible_, other->awaking_frames_invinsible_);
  swap(use_idle1_as_flying_idle_, other->use_idle1_as_flying_idle_);
  swap(no_flee_, other->no_flee_);
}

::google::protobuf::Metadata CharacterConfig::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_serializable_5fdata_2eproto);
  return ::file_level_metadata_serializable_5fdata_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CharacterDownsync::InitAsDefaultInstance() {
  ::shared::_CharacterDownsync_default_instance_._instance.get_mutable()->inventory_ = const_cast< ::shared::Inventory*>(
      ::shared::Inventory::internal_default_instance());
}
class CharacterDownsync::HasBitSetters {
 public:
  static const ::shared::Inventory& inventory(const CharacterDownsync* msg);
};

const ::shared::Inventory&
CharacterDownsync::HasBitSetters::inventory(const CharacterDownsync* msg) {
  return *msg->inventory_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CharacterDownsync::kIdFieldNumber;
const int CharacterDownsync::kXFieldNumber;
const int CharacterDownsync::kYFieldNumber;
const int CharacterDownsync::kDirXFieldNumber;
const int CharacterDownsync::kDirYFieldNumber;
const int CharacterDownsync::kVelXFieldNumber;
const int CharacterDownsync::kVelYFieldNumber;
const int CharacterDownsync::kSpeedFieldNumber;
const int CharacterDownsync::kSpeciesIdFieldNumber;
const int CharacterDownsync::kJoinIndexFieldNumber;
const int CharacterDownsync::kFramesToRecoverFieldNumber;
const int CharacterDownsync::kFramesCapturedByInertiaFieldNumber;
const int CharacterDownsync::kCapturedByPatrolCueFieldNumber;
const int CharacterDownsync::kFramesInPatrolCueFieldNumber;
const int CharacterDownsync::kBeatsCntFieldNumber;
const int CharacterDownsync::kBeatenCntFieldNumber;
const int CharacterDownsync::kHpFieldNumber;
const int CharacterDownsync::kMpFieldNumber;
const int CharacterDownsync::kBtnBHoldingRdfCountFieldNumber;
const int CharacterDownsync::kCharacterStateFieldNumber;
const int CharacterDownsync::kFramesInChStateFieldNumber;
const int CharacterDownsync::kInAirFieldNumber;
const int CharacterDownsync::kJumpTriggeredFieldNumber;
const int CharacterDownsync::kOnWallFieldNumber;
const int CharacterDownsync::kOnWallNormXFieldNumber;
const int CharacterDownsync::kOnWallNormYFieldNumber;
const int CharacterDownsync::kOmitGravityFieldNumber;
const int CharacterDownsync::kOmitSoftPushbackFieldNumber;
const int CharacterDownsync::kWaivingPatrolCueIdFieldNumber;
const int CharacterDownsync::kGoalAsNpcFieldNumber;
const int CharacterDownsync::kRevivalXFieldNumber;
const int CharacterDownsync::kRevivalYFieldNumber;
const int CharacterDownsync::kRevivalDirXFieldNumber;
const int CharacterDownsync::kRevivalDirYFieldNumber;
const int CharacterDownsync::kOnSlopeFieldNumber;
const int CharacterDownsync::kFrictionVelXFieldNumber;
const int CharacterDownsync::kForcedCrouchingFieldNumber;
const int CharacterDownsync::kSlipJumpTriggeredFieldNumber;
const int CharacterDownsync::kPrimarilyOnSlippableHardPushbackFieldNumber;
const int CharacterDownsync::kPrevWasCrouchingFieldNumber;
const int CharacterDownsync::kNewBirthFieldNumber;
const int CharacterDownsync::kFramesInvinsibleFieldNumber;
const int CharacterDownsync::kJumpStartedFieldNumber;
const int CharacterDownsync::kFramesToStartJumpFieldNumber;
const int CharacterDownsync::kRepelSoftPushbackFieldNumber;
const int CharacterDownsync::kPublishingEvtMaskUponKilledFieldNumber;
const int CharacterDownsync::kPublishingToTriggerLocalIdUponKilledFieldNumber;
const int CharacterDownsync::kSubscribesToTriggerLocalIdFieldNumber;
const int CharacterDownsync::kJumpHoldingRdfCntFieldNumber;
const int CharacterDownsync::kRemainingAirJumpQuotaFieldNumber;
const int CharacterDownsync::kRemainingAirDashQuotaFieldNumber;
const int CharacterDownsync::kKilledToDropConsumableSpeciesIdFieldNumber;
const int CharacterDownsync::kKilledToDropBuffSpeciesIdFieldNumber;
const int CharacterDownsync::kKilledToDropPickupSkillIdFieldNumber;
const int CharacterDownsync::kFrictionVelYFieldNumber;
const int CharacterDownsync::kFramesSinceLastDamagedFieldNumber;
const int CharacterDownsync::kRemainingDef1QuotaFieldNumber;
const int CharacterDownsync::kComboHitCntFieldNumber;
const int CharacterDownsync::kComboFramesRemainedFieldNumber;
const int CharacterDownsync::kDamageElementalAttrsFieldNumber;
const int CharacterDownsync::kOnSlopeFacingDownFieldNumber;
const int CharacterDownsync::kLastDamagedByJoinIndexFieldNumber;
const int CharacterDownsync::kLastDamagedByBulletTeamIdFieldNumber;
const int CharacterDownsync::kActivatedRdfIdFieldNumber;
const int CharacterDownsync::kCachedCueCmdFieldNumber;
const int CharacterDownsync::kActiveSkillIdFieldNumber;
const int CharacterDownsync::kActiveSkillHitFieldNumber;
const int CharacterDownsync::kBulletTeamIdFieldNumber;
const int CharacterDownsync::kChCollisionTeamIdFieldNumber;
const int CharacterDownsync::kBtnCHoldingRdfCountFieldNumber;
const int CharacterDownsync::kBtnDHoldingRdfCountFieldNumber;
const int CharacterDownsync::kBtnEHoldingRdfCountFieldNumber;
const int CharacterDownsync::kParryPrepRdfCntDownFieldNumber;
const int CharacterDownsync::kMpRegenRdfCountdownFieldNumber;
const int CharacterDownsync::kFlyingRdfCountdownFieldNumber;
const int CharacterDownsync::kLockingOnJoinIndexFieldNumber;
const int CharacterDownsync::kBuffListFieldNumber;
const int CharacterDownsync::kDebuffListFieldNumber;
const int CharacterDownsync::kInventoryFieldNumber;
const int CharacterDownsync::kBulletImmuneRecordsFieldNumber;
const int CharacterDownsync::kKinematicKnobsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CharacterDownsync::CharacterDownsync()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:shared.CharacterDownsync)
}
CharacterDownsync::CharacterDownsync(const CharacterDownsync& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      buff_list_(from.buff_list_),
      debuff_list_(from.debuff_list_),
      bullet_immune_records_(from.bullet_immune_records_),
      kinematic_knobs_(from.kinematic_knobs_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_inventory()) {
    inventory_ = new ::shared::Inventory(*from.inventory_);
  } else {
    inventory_ = nullptr;
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&locking_on_join_index_) -
    reinterpret_cast<char*>(&id_)) + sizeof(locking_on_join_index_));
  // @@protoc_insertion_point(copy_constructor:shared.CharacterDownsync)
}

void CharacterDownsync::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CharacterDownsync_serializable_5fdata_2eproto.base);
  ::memset(&inventory_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&locking_on_join_index_) -
      reinterpret_cast<char*>(&inventory_)) + sizeof(locking_on_join_index_));
}

CharacterDownsync::~CharacterDownsync() {
  // @@protoc_insertion_point(destructor:shared.CharacterDownsync)
  SharedDtor();
}

void CharacterDownsync::SharedDtor() {
  if (this != internal_default_instance()) delete inventory_;
}

void CharacterDownsync::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CharacterDownsync& CharacterDownsync::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CharacterDownsync_serializable_5fdata_2eproto.base);
  return *internal_default_instance();
}


void CharacterDownsync::Clear() {
// @@protoc_insertion_point(message_clear_start:shared.CharacterDownsync)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  buff_list_.Clear();
  debuff_list_.Clear();
  bullet_immune_records_.Clear();
  kinematic_knobs_.Clear();
  if (GetArenaNoVirtual() == nullptr && inventory_ != nullptr) {
    delete inventory_;
  }
  inventory_ = nullptr;
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&locking_on_join_index_) -
      reinterpret_cast<char*>(&id_)) + sizeof(locking_on_join_index_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CharacterDownsync::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CharacterDownsync*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // float x = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 21) goto handle_unusual;
        msg->set_x(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // float y = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 29) goto handle_unusual;
        msg->set_y(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // int32 dir_x = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_dir_x(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 dir_y = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_dir_y(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // float vel_x = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 53) goto handle_unusual;
        msg->set_vel_x(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // float vel_y = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 61) goto handle_unusual;
        msg->set_vel_y(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // float speed = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 69) goto handle_unusual;
        msg->set_speed(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // uint32 species_id = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 72) goto handle_unusual;
        msg->set_species_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 join_index = 10;
      case 10: {
        if (static_cast<::google::protobuf::uint8>(tag) != 80) goto handle_unusual;
        msg->set_join_index(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 frames_to_recover = 11;
      case 11: {
        if (static_cast<::google::protobuf::uint8>(tag) != 88) goto handle_unusual;
        msg->set_frames_to_recover(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 frames_captured_by_inertia = 12;
      case 12: {
        if (static_cast<::google::protobuf::uint8>(tag) != 96) goto handle_unusual;
        msg->set_frames_captured_by_inertia(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // bool captured_by_patrol_cue = 13;
      case 13: {
        if (static_cast<::google::protobuf::uint8>(tag) != 104) goto handle_unusual;
        msg->set_captured_by_patrol_cue(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 frames_in_patrol_cue = 14;
      case 14: {
        if (static_cast<::google::protobuf::uint8>(tag) != 112) goto handle_unusual;
        msg->set_frames_in_patrol_cue(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // uint32 beats_cnt = 15;
      case 15: {
        if (static_cast<::google::protobuf::uint8>(tag) != 120) goto handle_unusual;
        msg->set_beats_cnt(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // uint32 beaten_cnt = 16;
      case 16: {
        if (static_cast<::google::protobuf::uint8>(tag) != 128) goto handle_unusual;
        msg->set_beaten_cnt(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 hp = 17;
      case 17: {
        if (static_cast<::google::protobuf::uint8>(tag) != 136) goto handle_unusual;
        msg->set_hp(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 mp = 18;
      case 18: {
        if (static_cast<::google::protobuf::uint8>(tag) != 144) goto handle_unusual;
        msg->set_mp(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 btn_b_holding_rdf_count = 19;
      case 19: {
        if (static_cast<::google::protobuf::uint8>(tag) != 152) goto handle_unusual;
        msg->set_btn_b_holding_rdf_count(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // .shared.CharacterState character_state = 22;
      case 22: {
        if (static_cast<::google::protobuf::uint8>(tag) != 176) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_character_state(static_cast<::shared::CharacterState>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 frames_in_ch_state = 23;
      case 23: {
        if (static_cast<::google::protobuf::uint8>(tag) != 184) goto handle_unusual;
        msg->set_frames_in_ch_state(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // bool in_air = 24;
      case 24: {
        if (static_cast<::google::protobuf::uint8>(tag) != 192) goto handle_unusual;
        msg->set_in_air(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // bool jump_triggered = 25;
      case 25: {
        if (static_cast<::google::protobuf::uint8>(tag) != 200) goto handle_unusual;
        msg->set_jump_triggered(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // bool on_wall = 26;
      case 26: {
        if (static_cast<::google::protobuf::uint8>(tag) != 208) goto handle_unusual;
        msg->set_on_wall(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 on_wall_norm_x = 27;
      case 27: {
        if (static_cast<::google::protobuf::uint8>(tag) != 216) goto handle_unusual;
        msg->set_on_wall_norm_x(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 on_wall_norm_y = 28;
      case 28: {
        if (static_cast<::google::protobuf::uint8>(tag) != 224) goto handle_unusual;
        msg->set_on_wall_norm_y(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // bool omit_gravity = 29;
      case 29: {
        if (static_cast<::google::protobuf::uint8>(tag) != 232) goto handle_unusual;
        msg->set_omit_gravity(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // bool omit_soft_pushback = 30;
      case 30: {
        if (static_cast<::google::protobuf::uint8>(tag) != 240) goto handle_unusual;
        msg->set_omit_soft_pushback(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 waiving_patrol_cue_id = 31;
      case 31: {
        if (static_cast<::google::protobuf::uint8>(tag) != 248) goto handle_unusual;
        msg->set_waiving_patrol_cue_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // .shared.NpcGoal goal_as_npc = 32;
      case 32: {
        if (static_cast<::google::protobuf::uint8>(tag) != 0) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_goal_as_npc(static_cast<::shared::NpcGoal>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // float revival_x = 33;
      case 33: {
        if (static_cast<::google::protobuf::uint8>(tag) != 13) goto handle_unusual;
        msg->set_revival_x(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // float revival_y = 34;
      case 34: {
        if (static_cast<::google::protobuf::uint8>(tag) != 21) goto handle_unusual;
        msg->set_revival_y(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // int32 revival_dir_x = 35;
      case 35: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_revival_dir_x(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 revival_dir_y = 36;
      case 36: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_revival_dir_y(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // bool on_slope = 37;
      case 37: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_on_slope(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 friction_vel_x = 38;
      case 38: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_friction_vel_x(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // bool forced_crouching = 39;
      case 39: {
        if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        msg->set_forced_crouching(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // bool slip_jump_triggered = 40;
      case 40: {
        if (static_cast<::google::protobuf::uint8>(tag) != 64) goto handle_unusual;
        msg->set_slip_jump_triggered(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // bool primarily_on_slippable_hard_pushback = 41;
      case 41: {
        if (static_cast<::google::protobuf::uint8>(tag) != 72) goto handle_unusual;
        msg->set_primarily_on_slippable_hard_pushback(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // bool prev_was_crouching = 42;
      case 42: {
        if (static_cast<::google::protobuf::uint8>(tag) != 80) goto handle_unusual;
        msg->set_prev_was_crouching(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // bool new_birth = 43;
      case 43: {
        if (static_cast<::google::protobuf::uint8>(tag) != 88) goto handle_unusual;
        msg->set_new_birth(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 frames_invinsible = 44;
      case 44: {
        if (static_cast<::google::protobuf::uint8>(tag) != 96) goto handle_unusual;
        msg->set_frames_invinsible(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // bool jump_started = 45;
      case 45: {
        if (static_cast<::google::protobuf::uint8>(tag) != 104) goto handle_unusual;
        msg->set_jump_started(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 frames_to_start_jump = 46;
      case 46: {
        if (static_cast<::google::protobuf::uint8>(tag) != 112) goto handle_unusual;
        msg->set_frames_to_start_jump(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // bool repel_soft_pushback = 47;
      case 47: {
        if (static_cast<::google::protobuf::uint8>(tag) != 120) goto handle_unusual;
        msg->set_repel_soft_pushback(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // uint64 publishing_evt_mask_upon_killed = 48;
      case 48: {
        if (static_cast<::google::protobuf::uint8>(tag) != 128) goto handle_unusual;
        msg->set_publishing_evt_mask_upon_killed(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 publishing_to_trigger_local_id_upon_killed = 49;
      case 49: {
        if (static_cast<::google::protobuf::uint8>(tag) != 136) goto handle_unusual;
        msg->set_publishing_to_trigger_local_id_upon_killed(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 subscribes_to_trigger_local_id = 50;
      case 50: {
        if (static_cast<::google::protobuf::uint8>(tag) != 144) goto handle_unusual;
        msg->set_subscribes_to_trigger_local_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 jump_holding_rdf_cnt = 51;
      case 51: {
        if (static_cast<::google::protobuf::uint8>(tag) != 152) goto handle_unusual;
        msg->set_jump_holding_rdf_cnt(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // uint32 remaining_air_jump_quota = 52;
      case 52: {
        if (static_cast<::google::protobuf::uint8>(tag) != 160) goto handle_unusual;
        msg->set_remaining_air_jump_quota(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // uint32 remaining_air_dash_quota = 53;
      case 53: {
        if (static_cast<::google::protobuf::uint8>(tag) != 168) goto handle_unusual;
        msg->set_remaining_air_dash_quota(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // uint32 killed_to_drop_consumable_species_id = 54;
      case 54: {
        if (static_cast<::google::protobuf::uint8>(tag) != 176) goto handle_unusual;
        msg->set_killed_to_drop_consumable_species_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // uint32 killed_to_drop_buff_species_id = 55;
      case 55: {
        if (static_cast<::google::protobuf::uint8>(tag) != 184) goto handle_unusual;
        msg->set_killed_to_drop_buff_species_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // uint32 killed_to_drop_pickup_skill_id = 56;
      case 56: {
        if (static_cast<::google::protobuf::uint8>(tag) != 192) goto handle_unusual;
        msg->set_killed_to_drop_pickup_skill_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 friction_vel_y = 57;
      case 57: {
        if (static_cast<::google::protobuf::uint8>(tag) != 200) goto handle_unusual;
        msg->set_friction_vel_y(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 frames_since_last_damaged = 58;
      case 58: {
        if (static_cast<::google::protobuf::uint8>(tag) != 208) goto handle_unusual;
        msg->set_frames_since_last_damaged(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // uint32 remaining_def1Quota = 59;
      case 59: {
        if (static_cast<::google::protobuf::uint8>(tag) != 216) goto handle_unusual;
        msg->set_remaining_def1quota(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // uint32 combo_hit_cnt = 60;
      case 60: {
        if (static_cast<::google::protobuf::uint8>(tag) != 224) goto handle_unusual;
        msg->set_combo_hit_cnt(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 combo_frames_remained = 61;
      case 61: {
        if (static_cast<::google::protobuf::uint8>(tag) != 232) goto handle_unusual;
        msg->set_combo_frames_remained(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // uint32 damage_elemental_attrs = 62;
      case 62: {
        if (static_cast<::google::protobuf::uint8>(tag) != 240) goto handle_unusual;
        msg->set_damage_elemental_attrs(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // bool on_slope_facing_down = 63;
      case 63: {
        if (static_cast<::google::protobuf::uint8>(tag) != 248) goto handle_unusual;
        msg->set_on_slope_facing_down(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 last_damaged_by_join_index = 64;
      case 64: {
        if (static_cast<::google::protobuf::uint8>(tag) != 0) goto handle_unusual;
        msg->set_last_damaged_by_join_index(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 last_damaged_by_bullet_team_id = 65;
      case 65: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_last_damaged_by_bullet_team_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 activated_rdf_id = 66;
      case 66: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_activated_rdf_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // uint64 cached_cue_cmd = 67;
      case 67: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_cached_cue_cmd(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // uint32 active_skill_id = 68;
      case 68: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_active_skill_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 active_skill_hit = 69;
      case 69: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_active_skill_hit(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 bullet_team_id = 70;
      case 70: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_bullet_team_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 ch_collision_team_id = 71;
      case 71: {
        if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        msg->set_ch_collision_team_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 btn_c_holding_rdf_count = 72;
      case 72: {
        if (static_cast<::google::protobuf::uint8>(tag) != 64) goto handle_unusual;
        msg->set_btn_c_holding_rdf_count(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 btn_d_Holding_rdf_count = 73;
      case 73: {
        if (static_cast<::google::protobuf::uint8>(tag) != 72) goto handle_unusual;
        msg->set_btn_d_holding_rdf_count(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 btn_e_holding_rdf_count = 74;
      case 74: {
        if (static_cast<::google::protobuf::uint8>(tag) != 80) goto handle_unusual;
        msg->set_btn_e_holding_rdf_count(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 parry_prep_rdf_cnt_down = 75;
      case 75: {
        if (static_cast<::google::protobuf::uint8>(tag) != 88) goto handle_unusual;
        msg->set_parry_prep_rdf_cnt_down(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 mp_regen_rdf_countdown = 76;
      case 76: {
        if (static_cast<::google::protobuf::uint8>(tag) != 96) goto handle_unusual;
        msg->set_mp_regen_rdf_countdown(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 flying_rdf_countdown = 77;
      case 77: {
        if (static_cast<::google::protobuf::uint8>(tag) != 104) goto handle_unusual;
        msg->set_flying_rdf_countdown(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 locking_on_join_index = 78;
      case 78: {
        if (static_cast<::google::protobuf::uint8>(tag) != 112) goto handle_unusual;
        msg->set_locking_on_join_index(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated .shared.Buff buff_list = 90;
      case 90: {
        if (static_cast<::google::protobuf::uint8>(tag) != 210) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::shared::Buff::_InternalParse;
          object = msg->add_buff_list();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 65535) == 1490 && (ptr += 2));
        break;
      }
      // repeated .shared.Debuff debuff_list = 91;
      case 91: {
        if (static_cast<::google::protobuf::uint8>(tag) != 218) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::shared::Debuff::_InternalParse;
          object = msg->add_debuff_list();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 65535) == 1498 && (ptr += 2));
        break;
      }
      // .shared.Inventory inventory = 92;
      case 92: {
        if (static_cast<::google::protobuf::uint8>(tag) != 226) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::shared::Inventory::_InternalParse;
        object = msg->mutable_inventory();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // repeated .shared.BulletImmuneRecord bullet_immune_records = 93;
      case 93: {
        if (static_cast<::google::protobuf::uint8>(tag) != 234) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::shared::BulletImmuneRecord::_InternalParse;
          object = msg->add_bullet_immune_records();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 65535) == 1514 && (ptr += 2));
        break;
      }
      // repeated float kinematic_knobs = 94;
      case 94: {
        if (static_cast<::google::protobuf::uint8>(tag) == 242) {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::protobuf::internal::PackedFloatParser;
          object = msg->mutable_kinematic_knobs();
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          if (size) ptr = parser_till_end(ptr, newend, object, ctx);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 245) goto handle_unusual;
        do {
          msg->add_kinematic_knobs(::google::protobuf::io::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 65535) == 1525 && (ptr += 2));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CharacterDownsync::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:shared.CharacterDownsync)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float x = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (21 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float y = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (29 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 dir_x = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dir_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 dir_y = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dir_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float vel_x = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (53 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &vel_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float vel_y = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (61 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &vel_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float speed = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (69 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &speed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 species_id = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (72 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &species_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 join_index = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (80 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &join_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 frames_to_recover = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (88 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &frames_to_recover_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 frames_captured_by_inertia = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (96 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &frames_captured_by_inertia_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool captured_by_patrol_cue = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (104 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &captured_by_patrol_cue_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 frames_in_patrol_cue = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (112 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &frames_in_patrol_cue_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 beats_cnt = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (120 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &beats_cnt_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 beaten_cnt = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (128 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &beaten_cnt_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 hp = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (136 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 mp = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (144 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 btn_b_holding_rdf_count = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (152 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &btn_b_holding_rdf_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .shared.CharacterState character_state = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (176 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_character_state(static_cast< ::shared::CharacterState >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 frames_in_ch_state = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (184 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &frames_in_ch_state_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool in_air = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (192 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &in_air_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool jump_triggered = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (200 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &jump_triggered_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool on_wall = 26;
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (208 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &on_wall_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 on_wall_norm_x = 27;
      case 27: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (216 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &on_wall_norm_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 on_wall_norm_y = 28;
      case 28: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (224 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &on_wall_norm_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool omit_gravity = 29;
      case 29: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (232 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &omit_gravity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool omit_soft_pushback = 30;
      case 30: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (240 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &omit_soft_pushback_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 waiving_patrol_cue_id = 31;
      case 31: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (248 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &waiving_patrol_cue_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .shared.NpcGoal goal_as_npc = 32;
      case 32: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (256 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_goal_as_npc(static_cast< ::shared::NpcGoal >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float revival_x = 33;
      case 33: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (269 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &revival_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float revival_y = 34;
      case 34: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (277 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &revival_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 revival_dir_x = 35;
      case 35: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (280 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &revival_dir_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 revival_dir_y = 36;
      case 36: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (288 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &revival_dir_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool on_slope = 37;
      case 37: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (296 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &on_slope_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 friction_vel_x = 38;
      case 38: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (304 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &friction_vel_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool forced_crouching = 39;
      case 39: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (312 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &forced_crouching_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool slip_jump_triggered = 40;
      case 40: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (320 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &slip_jump_triggered_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool primarily_on_slippable_hard_pushback = 41;
      case 41: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (328 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &primarily_on_slippable_hard_pushback_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool prev_was_crouching = 42;
      case 42: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (336 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &prev_was_crouching_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool new_birth = 43;
      case 43: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (344 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &new_birth_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 frames_invinsible = 44;
      case 44: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (352 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &frames_invinsible_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool jump_started = 45;
      case 45: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (360 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &jump_started_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 frames_to_start_jump = 46;
      case 46: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (368 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &frames_to_start_jump_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool repel_soft_pushback = 47;
      case 47: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (376 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &repel_soft_pushback_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 publishing_evt_mask_upon_killed = 48;
      case 48: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (384 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &publishing_evt_mask_upon_killed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 publishing_to_trigger_local_id_upon_killed = 49;
      case 49: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (392 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &publishing_to_trigger_local_id_upon_killed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 subscribes_to_trigger_local_id = 50;
      case 50: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (400 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &subscribes_to_trigger_local_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 jump_holding_rdf_cnt = 51;
      case 51: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (408 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &jump_holding_rdf_cnt_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 remaining_air_jump_quota = 52;
      case 52: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (416 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &remaining_air_jump_quota_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 remaining_air_dash_quota = 53;
      case 53: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (424 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &remaining_air_dash_quota_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 killed_to_drop_consumable_species_id = 54;
      case 54: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (432 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &killed_to_drop_consumable_species_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 killed_to_drop_buff_species_id = 55;
      case 55: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (440 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &killed_to_drop_buff_species_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 killed_to_drop_pickup_skill_id = 56;
      case 56: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (448 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &killed_to_drop_pickup_skill_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 friction_vel_y = 57;
      case 57: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (456 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &friction_vel_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 frames_since_last_damaged = 58;
      case 58: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (464 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &frames_since_last_damaged_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 remaining_def1Quota = 59;
      case 59: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (472 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &remaining_def1quota_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 combo_hit_cnt = 60;
      case 60: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (480 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &combo_hit_cnt_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 combo_frames_remained = 61;
      case 61: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (488 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &combo_frames_remained_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 damage_elemental_attrs = 62;
      case 62: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (496 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &damage_elemental_attrs_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool on_slope_facing_down = 63;
      case 63: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (504 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &on_slope_facing_down_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 last_damaged_by_join_index = 64;
      case 64: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (512 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &last_damaged_by_join_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 last_damaged_by_bullet_team_id = 65;
      case 65: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (520 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &last_damaged_by_bullet_team_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 activated_rdf_id = 66;
      case 66: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (528 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &activated_rdf_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 cached_cue_cmd = 67;
      case 67: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (536 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cached_cue_cmd_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 active_skill_id = 68;
      case 68: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (544 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &active_skill_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 active_skill_hit = 69;
      case 69: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (552 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &active_skill_hit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 bullet_team_id = 70;
      case 70: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (560 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bullet_team_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 ch_collision_team_id = 71;
      case 71: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (568 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ch_collision_team_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 btn_c_holding_rdf_count = 72;
      case 72: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (576 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &btn_c_holding_rdf_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 btn_d_Holding_rdf_count = 73;
      case 73: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (584 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &btn_d_holding_rdf_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 btn_e_holding_rdf_count = 74;
      case 74: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (592 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &btn_e_holding_rdf_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 parry_prep_rdf_cnt_down = 75;
      case 75: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (600 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &parry_prep_rdf_cnt_down_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 mp_regen_rdf_countdown = 76;
      case 76: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (608 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mp_regen_rdf_countdown_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 flying_rdf_countdown = 77;
      case 77: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (616 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &flying_rdf_countdown_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 locking_on_join_index = 78;
      case 78: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (624 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &locking_on_join_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .shared.Buff buff_list = 90;
      case 90: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (722 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_buff_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .shared.Debuff debuff_list = 91;
      case 91: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (730 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_debuff_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .shared.Inventory inventory = 92;
      case 92: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (738 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_inventory()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .shared.BulletImmuneRecord bullet_immune_records = 93;
      case 93: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (746 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_bullet_immune_records()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float kinematic_knobs = 94;
      case 94: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (754 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_kinematic_knobs())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (757 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 2, 754u, input, this->mutable_kinematic_knobs())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:shared.CharacterDownsync)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:shared.CharacterDownsync)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CharacterDownsync::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:shared.CharacterDownsync)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // float x = 2;
  if (this->x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->x(), output);
  }

  // float y = 3;
  if (this->y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->y(), output);
  }

  // int32 dir_x = 4;
  if (this->dir_x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->dir_x(), output);
  }

  // int32 dir_y = 5;
  if (this->dir_y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->dir_y(), output);
  }

  // float vel_x = 6;
  if (this->vel_x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->vel_x(), output);
  }

  // float vel_y = 7;
  if (this->vel_y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->vel_y(), output);
  }

  // float speed = 8;
  if (this->speed() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->speed(), output);
  }

  // uint32 species_id = 9;
  if (this->species_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->species_id(), output);
  }

  // int32 join_index = 10;
  if (this->join_index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->join_index(), output);
  }

  // int32 frames_to_recover = 11;
  if (this->frames_to_recover() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->frames_to_recover(), output);
  }

  // int32 frames_captured_by_inertia = 12;
  if (this->frames_captured_by_inertia() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->frames_captured_by_inertia(), output);
  }

  // bool captured_by_patrol_cue = 13;
  if (this->captured_by_patrol_cue() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->captured_by_patrol_cue(), output);
  }

  // int32 frames_in_patrol_cue = 14;
  if (this->frames_in_patrol_cue() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->frames_in_patrol_cue(), output);
  }

  // uint32 beats_cnt = 15;
  if (this->beats_cnt() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->beats_cnt(), output);
  }

  // uint32 beaten_cnt = 16;
  if (this->beaten_cnt() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->beaten_cnt(), output);
  }

  // int32 hp = 17;
  if (this->hp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->hp(), output);
  }

  // int32 mp = 18;
  if (this->mp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->mp(), output);
  }

  // int32 btn_b_holding_rdf_count = 19;
  if (this->btn_b_holding_rdf_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->btn_b_holding_rdf_count(), output);
  }

  // .shared.CharacterState character_state = 22;
  if (this->character_state() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      22, this->character_state(), output);
  }

  // int32 frames_in_ch_state = 23;
  if (this->frames_in_ch_state() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(23, this->frames_in_ch_state(), output);
  }

  // bool in_air = 24;
  if (this->in_air() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(24, this->in_air(), output);
  }

  // bool jump_triggered = 25;
  if (this->jump_triggered() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(25, this->jump_triggered(), output);
  }

  // bool on_wall = 26;
  if (this->on_wall() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(26, this->on_wall(), output);
  }

  // int32 on_wall_norm_x = 27;
  if (this->on_wall_norm_x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(27, this->on_wall_norm_x(), output);
  }

  // int32 on_wall_norm_y = 28;
  if (this->on_wall_norm_y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(28, this->on_wall_norm_y(), output);
  }

  // bool omit_gravity = 29;
  if (this->omit_gravity() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(29, this->omit_gravity(), output);
  }

  // bool omit_soft_pushback = 30;
  if (this->omit_soft_pushback() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(30, this->omit_soft_pushback(), output);
  }

  // int32 waiving_patrol_cue_id = 31;
  if (this->waiving_patrol_cue_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(31, this->waiving_patrol_cue_id(), output);
  }

  // .shared.NpcGoal goal_as_npc = 32;
  if (this->goal_as_npc() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      32, this->goal_as_npc(), output);
  }

  // float revival_x = 33;
  if (this->revival_x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(33, this->revival_x(), output);
  }

  // float revival_y = 34;
  if (this->revival_y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(34, this->revival_y(), output);
  }

  // int32 revival_dir_x = 35;
  if (this->revival_dir_x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(35, this->revival_dir_x(), output);
  }

  // int32 revival_dir_y = 36;
  if (this->revival_dir_y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(36, this->revival_dir_y(), output);
  }

  // bool on_slope = 37;
  if (this->on_slope() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(37, this->on_slope(), output);
  }

  // int32 friction_vel_x = 38;
  if (this->friction_vel_x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(38, this->friction_vel_x(), output);
  }

  // bool forced_crouching = 39;
  if (this->forced_crouching() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(39, this->forced_crouching(), output);
  }

  // bool slip_jump_triggered = 40;
  if (this->slip_jump_triggered() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(40, this->slip_jump_triggered(), output);
  }

  // bool primarily_on_slippable_hard_pushback = 41;
  if (this->primarily_on_slippable_hard_pushback() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(41, this->primarily_on_slippable_hard_pushback(), output);
  }

  // bool prev_was_crouching = 42;
  if (this->prev_was_crouching() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(42, this->prev_was_crouching(), output);
  }

  // bool new_birth = 43;
  if (this->new_birth() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(43, this->new_birth(), output);
  }

  // int32 frames_invinsible = 44;
  if (this->frames_invinsible() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(44, this->frames_invinsible(), output);
  }

  // bool jump_started = 45;
  if (this->jump_started() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(45, this->jump_started(), output);
  }

  // int32 frames_to_start_jump = 46;
  if (this->frames_to_start_jump() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(46, this->frames_to_start_jump(), output);
  }

  // bool repel_soft_pushback = 47;
  if (this->repel_soft_pushback() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(47, this->repel_soft_pushback(), output);
  }

  // uint64 publishing_evt_mask_upon_killed = 48;
  if (this->publishing_evt_mask_upon_killed() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(48, this->publishing_evt_mask_upon_killed(), output);
  }

  // int32 publishing_to_trigger_local_id_upon_killed = 49;
  if (this->publishing_to_trigger_local_id_upon_killed() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(49, this->publishing_to_trigger_local_id_upon_killed(), output);
  }

  // int32 subscribes_to_trigger_local_id = 50;
  if (this->subscribes_to_trigger_local_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(50, this->subscribes_to_trigger_local_id(), output);
  }

  // int32 jump_holding_rdf_cnt = 51;
  if (this->jump_holding_rdf_cnt() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(51, this->jump_holding_rdf_cnt(), output);
  }

  // uint32 remaining_air_jump_quota = 52;
  if (this->remaining_air_jump_quota() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(52, this->remaining_air_jump_quota(), output);
  }

  // uint32 remaining_air_dash_quota = 53;
  if (this->remaining_air_dash_quota() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(53, this->remaining_air_dash_quota(), output);
  }

  // uint32 killed_to_drop_consumable_species_id = 54;
  if (this->killed_to_drop_consumable_species_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(54, this->killed_to_drop_consumable_species_id(), output);
  }

  // uint32 killed_to_drop_buff_species_id = 55;
  if (this->killed_to_drop_buff_species_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(55, this->killed_to_drop_buff_species_id(), output);
  }

  // uint32 killed_to_drop_pickup_skill_id = 56;
  if (this->killed_to_drop_pickup_skill_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(56, this->killed_to_drop_pickup_skill_id(), output);
  }

  // int32 friction_vel_y = 57;
  if (this->friction_vel_y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(57, this->friction_vel_y(), output);
  }

  // int32 frames_since_last_damaged = 58;
  if (this->frames_since_last_damaged() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(58, this->frames_since_last_damaged(), output);
  }

  // uint32 remaining_def1Quota = 59;
  if (this->remaining_def1quota() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(59, this->remaining_def1quota(), output);
  }

  // uint32 combo_hit_cnt = 60;
  if (this->combo_hit_cnt() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(60, this->combo_hit_cnt(), output);
  }

  // int32 combo_frames_remained = 61;
  if (this->combo_frames_remained() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(61, this->combo_frames_remained(), output);
  }

  // uint32 damage_elemental_attrs = 62;
  if (this->damage_elemental_attrs() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(62, this->damage_elemental_attrs(), output);
  }

  // bool on_slope_facing_down = 63;
  if (this->on_slope_facing_down() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(63, this->on_slope_facing_down(), output);
  }

  // int32 last_damaged_by_join_index = 64;
  if (this->last_damaged_by_join_index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(64, this->last_damaged_by_join_index(), output);
  }

  // int32 last_damaged_by_bullet_team_id = 65;
  if (this->last_damaged_by_bullet_team_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(65, this->last_damaged_by_bullet_team_id(), output);
  }

  // int32 activated_rdf_id = 66;
  if (this->activated_rdf_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(66, this->activated_rdf_id(), output);
  }

  // uint64 cached_cue_cmd = 67;
  if (this->cached_cue_cmd() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(67, this->cached_cue_cmd(), output);
  }

  // uint32 active_skill_id = 68;
  if (this->active_skill_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(68, this->active_skill_id(), output);
  }

  // int32 active_skill_hit = 69;
  if (this->active_skill_hit() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(69, this->active_skill_hit(), output);
  }

  // int32 bullet_team_id = 70;
  if (this->bullet_team_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(70, this->bullet_team_id(), output);
  }

  // int32 ch_collision_team_id = 71;
  if (this->ch_collision_team_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(71, this->ch_collision_team_id(), output);
  }

  // int32 btn_c_holding_rdf_count = 72;
  if (this->btn_c_holding_rdf_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(72, this->btn_c_holding_rdf_count(), output);
  }

  // int32 btn_d_Holding_rdf_count = 73;
  if (this->btn_d_holding_rdf_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(73, this->btn_d_holding_rdf_count(), output);
  }

  // int32 btn_e_holding_rdf_count = 74;
  if (this->btn_e_holding_rdf_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(74, this->btn_e_holding_rdf_count(), output);
  }

  // int32 parry_prep_rdf_cnt_down = 75;
  if (this->parry_prep_rdf_cnt_down() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(75, this->parry_prep_rdf_cnt_down(), output);
  }

  // int32 mp_regen_rdf_countdown = 76;
  if (this->mp_regen_rdf_countdown() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(76, this->mp_regen_rdf_countdown(), output);
  }

  // int32 flying_rdf_countdown = 77;
  if (this->flying_rdf_countdown() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(77, this->flying_rdf_countdown(), output);
  }

  // int32 locking_on_join_index = 78;
  if (this->locking_on_join_index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(78, this->locking_on_join_index(), output);
  }

  // repeated .shared.Buff buff_list = 90;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->buff_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      90,
      this->buff_list(static_cast<int>(i)),
      output);
  }

  // repeated .shared.Debuff debuff_list = 91;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->debuff_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      91,
      this->debuff_list(static_cast<int>(i)),
      output);
  }

  // .shared.Inventory inventory = 92;
  if (this->has_inventory()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      92, HasBitSetters::inventory(this), output);
  }

  // repeated .shared.BulletImmuneRecord bullet_immune_records = 93;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->bullet_immune_records_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      93,
      this->bullet_immune_records(static_cast<int>(i)),
      output);
  }

  // repeated float kinematic_knobs = 94;
  if (this->kinematic_knobs_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(94, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_kinematic_knobs_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::google::protobuf::internal::WireFormatLite::WriteFloatArray(
      this->kinematic_knobs().data(), this->kinematic_knobs_size(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:shared.CharacterDownsync)
}

::google::protobuf::uint8* CharacterDownsync::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:shared.CharacterDownsync)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // float x = 2;
  if (this->x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->x(), target);
  }

  // float y = 3;
  if (this->y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->y(), target);
  }

  // int32 dir_x = 4;
  if (this->dir_x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->dir_x(), target);
  }

  // int32 dir_y = 5;
  if (this->dir_y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->dir_y(), target);
  }

  // float vel_x = 6;
  if (this->vel_x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->vel_x(), target);
  }

  // float vel_y = 7;
  if (this->vel_y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->vel_y(), target);
  }

  // float speed = 8;
  if (this->speed() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->speed(), target);
  }

  // uint32 species_id = 9;
  if (this->species_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->species_id(), target);
  }

  // int32 join_index = 10;
  if (this->join_index() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->join_index(), target);
  }

  // int32 frames_to_recover = 11;
  if (this->frames_to_recover() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->frames_to_recover(), target);
  }

  // int32 frames_captured_by_inertia = 12;
  if (this->frames_captured_by_inertia() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->frames_captured_by_inertia(), target);
  }

  // bool captured_by_patrol_cue = 13;
  if (this->captured_by_patrol_cue() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->captured_by_patrol_cue(), target);
  }

  // int32 frames_in_patrol_cue = 14;
  if (this->frames_in_patrol_cue() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->frames_in_patrol_cue(), target);
  }

  // uint32 beats_cnt = 15;
  if (this->beats_cnt() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->beats_cnt(), target);
  }

  // uint32 beaten_cnt = 16;
  if (this->beaten_cnt() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->beaten_cnt(), target);
  }

  // int32 hp = 17;
  if (this->hp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->hp(), target);
  }

  // int32 mp = 18;
  if (this->mp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->mp(), target);
  }

  // int32 btn_b_holding_rdf_count = 19;
  if (this->btn_b_holding_rdf_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->btn_b_holding_rdf_count(), target);
  }

  // .shared.CharacterState character_state = 22;
  if (this->character_state() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      22, this->character_state(), target);
  }

  // int32 frames_in_ch_state = 23;
  if (this->frames_in_ch_state() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(23, this->frames_in_ch_state(), target);
  }

  // bool in_air = 24;
  if (this->in_air() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(24, this->in_air(), target);
  }

  // bool jump_triggered = 25;
  if (this->jump_triggered() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(25, this->jump_triggered(), target);
  }

  // bool on_wall = 26;
  if (this->on_wall() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(26, this->on_wall(), target);
  }

  // int32 on_wall_norm_x = 27;
  if (this->on_wall_norm_x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(27, this->on_wall_norm_x(), target);
  }

  // int32 on_wall_norm_y = 28;
  if (this->on_wall_norm_y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(28, this->on_wall_norm_y(), target);
  }

  // bool omit_gravity = 29;
  if (this->omit_gravity() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(29, this->omit_gravity(), target);
  }

  // bool omit_soft_pushback = 30;
  if (this->omit_soft_pushback() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(30, this->omit_soft_pushback(), target);
  }

  // int32 waiving_patrol_cue_id = 31;
  if (this->waiving_patrol_cue_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(31, this->waiving_patrol_cue_id(), target);
  }

  // .shared.NpcGoal goal_as_npc = 32;
  if (this->goal_as_npc() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      32, this->goal_as_npc(), target);
  }

  // float revival_x = 33;
  if (this->revival_x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(33, this->revival_x(), target);
  }

  // float revival_y = 34;
  if (this->revival_y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(34, this->revival_y(), target);
  }

  // int32 revival_dir_x = 35;
  if (this->revival_dir_x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(35, this->revival_dir_x(), target);
  }

  // int32 revival_dir_y = 36;
  if (this->revival_dir_y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(36, this->revival_dir_y(), target);
  }

  // bool on_slope = 37;
  if (this->on_slope() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(37, this->on_slope(), target);
  }

  // int32 friction_vel_x = 38;
  if (this->friction_vel_x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(38, this->friction_vel_x(), target);
  }

  // bool forced_crouching = 39;
  if (this->forced_crouching() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(39, this->forced_crouching(), target);
  }

  // bool slip_jump_triggered = 40;
  if (this->slip_jump_triggered() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(40, this->slip_jump_triggered(), target);
  }

  // bool primarily_on_slippable_hard_pushback = 41;
  if (this->primarily_on_slippable_hard_pushback() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(41, this->primarily_on_slippable_hard_pushback(), target);
  }

  // bool prev_was_crouching = 42;
  if (this->prev_was_crouching() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(42, this->prev_was_crouching(), target);
  }

  // bool new_birth = 43;
  if (this->new_birth() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(43, this->new_birth(), target);
  }

  // int32 frames_invinsible = 44;
  if (this->frames_invinsible() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(44, this->frames_invinsible(), target);
  }

  // bool jump_started = 45;
  if (this->jump_started() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(45, this->jump_started(), target);
  }

  // int32 frames_to_start_jump = 46;
  if (this->frames_to_start_jump() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(46, this->frames_to_start_jump(), target);
  }

  // bool repel_soft_pushback = 47;
  if (this->repel_soft_pushback() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(47, this->repel_soft_pushback(), target);
  }

  // uint64 publishing_evt_mask_upon_killed = 48;
  if (this->publishing_evt_mask_upon_killed() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(48, this->publishing_evt_mask_upon_killed(), target);
  }

  // int32 publishing_to_trigger_local_id_upon_killed = 49;
  if (this->publishing_to_trigger_local_id_upon_killed() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(49, this->publishing_to_trigger_local_id_upon_killed(), target);
  }

  // int32 subscribes_to_trigger_local_id = 50;
  if (this->subscribes_to_trigger_local_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(50, this->subscribes_to_trigger_local_id(), target);
  }

  // int32 jump_holding_rdf_cnt = 51;
  if (this->jump_holding_rdf_cnt() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(51, this->jump_holding_rdf_cnt(), target);
  }

  // uint32 remaining_air_jump_quota = 52;
  if (this->remaining_air_jump_quota() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(52, this->remaining_air_jump_quota(), target);
  }

  // uint32 remaining_air_dash_quota = 53;
  if (this->remaining_air_dash_quota() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(53, this->remaining_air_dash_quota(), target);
  }

  // uint32 killed_to_drop_consumable_species_id = 54;
  if (this->killed_to_drop_consumable_species_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(54, this->killed_to_drop_consumable_species_id(), target);
  }

  // uint32 killed_to_drop_buff_species_id = 55;
  if (this->killed_to_drop_buff_species_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(55, this->killed_to_drop_buff_species_id(), target);
  }

  // uint32 killed_to_drop_pickup_skill_id = 56;
  if (this->killed_to_drop_pickup_skill_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(56, this->killed_to_drop_pickup_skill_id(), target);
  }

  // int32 friction_vel_y = 57;
  if (this->friction_vel_y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(57, this->friction_vel_y(), target);
  }

  // int32 frames_since_last_damaged = 58;
  if (this->frames_since_last_damaged() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(58, this->frames_since_last_damaged(), target);
  }

  // uint32 remaining_def1Quota = 59;
  if (this->remaining_def1quota() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(59, this->remaining_def1quota(), target);
  }

  // uint32 combo_hit_cnt = 60;
  if (this->combo_hit_cnt() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(60, this->combo_hit_cnt(), target);
  }

  // int32 combo_frames_remained = 61;
  if (this->combo_frames_remained() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(61, this->combo_frames_remained(), target);
  }

  // uint32 damage_elemental_attrs = 62;
  if (this->damage_elemental_attrs() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(62, this->damage_elemental_attrs(), target);
  }

  // bool on_slope_facing_down = 63;
  if (this->on_slope_facing_down() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(63, this->on_slope_facing_down(), target);
  }

  // int32 last_damaged_by_join_index = 64;
  if (this->last_damaged_by_join_index() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(64, this->last_damaged_by_join_index(), target);
  }

  // int32 last_damaged_by_bullet_team_id = 65;
  if (this->last_damaged_by_bullet_team_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(65, this->last_damaged_by_bullet_team_id(), target);
  }

  // int32 activated_rdf_id = 66;
  if (this->activated_rdf_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(66, this->activated_rdf_id(), target);
  }

  // uint64 cached_cue_cmd = 67;
  if (this->cached_cue_cmd() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(67, this->cached_cue_cmd(), target);
  }

  // uint32 active_skill_id = 68;
  if (this->active_skill_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(68, this->active_skill_id(), target);
  }

  // int32 active_skill_hit = 69;
  if (this->active_skill_hit() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(69, this->active_skill_hit(), target);
  }

  // int32 bullet_team_id = 70;
  if (this->bullet_team_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(70, this->bullet_team_id(), target);
  }

  // int32 ch_collision_team_id = 71;
  if (this->ch_collision_team_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(71, this->ch_collision_team_id(), target);
  }

  // int32 btn_c_holding_rdf_count = 72;
  if (this->btn_c_holding_rdf_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(72, this->btn_c_holding_rdf_count(), target);
  }

  // int32 btn_d_Holding_rdf_count = 73;
  if (this->btn_d_holding_rdf_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(73, this->btn_d_holding_rdf_count(), target);
  }

  // int32 btn_e_holding_rdf_count = 74;
  if (this->btn_e_holding_rdf_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(74, this->btn_e_holding_rdf_count(), target);
  }

  // int32 parry_prep_rdf_cnt_down = 75;
  if (this->parry_prep_rdf_cnt_down() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(75, this->parry_prep_rdf_cnt_down(), target);
  }

  // int32 mp_regen_rdf_countdown = 76;
  if (this->mp_regen_rdf_countdown() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(76, this->mp_regen_rdf_countdown(), target);
  }

  // int32 flying_rdf_countdown = 77;
  if (this->flying_rdf_countdown() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(77, this->flying_rdf_countdown(), target);
  }

  // int32 locking_on_join_index = 78;
  if (this->locking_on_join_index() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(78, this->locking_on_join_index(), target);
  }

  // repeated .shared.Buff buff_list = 90;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->buff_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        90, this->buff_list(static_cast<int>(i)), target);
  }

  // repeated .shared.Debuff debuff_list = 91;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->debuff_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        91, this->debuff_list(static_cast<int>(i)), target);
  }

  // .shared.Inventory inventory = 92;
  if (this->has_inventory()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        92, HasBitSetters::inventory(this), target);
  }

  // repeated .shared.BulletImmuneRecord bullet_immune_records = 93;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->bullet_immune_records_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        93, this->bullet_immune_records(static_cast<int>(i)), target);
  }

  // repeated float kinematic_knobs = 94;
  if (this->kinematic_knobs_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      94,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        _kinematic_knobs_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->kinematic_knobs_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:shared.CharacterDownsync)
  return target;
}

size_t CharacterDownsync::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:shared.CharacterDownsync)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .shared.Buff buff_list = 90;
  {
    unsigned int count = static_cast<unsigned int>(this->buff_list_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->buff_list(static_cast<int>(i)));
    }
  }

  // repeated .shared.Debuff debuff_list = 91;
  {
    unsigned int count = static_cast<unsigned int>(this->debuff_list_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->debuff_list(static_cast<int>(i)));
    }
  }

  // repeated .shared.BulletImmuneRecord bullet_immune_records = 93;
  {
    unsigned int count = static_cast<unsigned int>(this->bullet_immune_records_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->bullet_immune_records(static_cast<int>(i)));
    }
  }

  // repeated float kinematic_knobs = 94;
  {
    unsigned int count = static_cast<unsigned int>(this->kinematic_knobs_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast<::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    _kinematic_knobs_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .shared.Inventory inventory = 92;
  if (this->has_inventory()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *inventory_);
  }

  // int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  // float x = 2;
  if (this->x() != 0) {
    total_size += 1 + 4;
  }

  // float y = 3;
  if (this->y() != 0) {
    total_size += 1 + 4;
  }

  // int32 dir_x = 4;
  if (this->dir_x() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->dir_x());
  }

  // int32 dir_y = 5;
  if (this->dir_y() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->dir_y());
  }

  // float vel_x = 6;
  if (this->vel_x() != 0) {
    total_size += 1 + 4;
  }

  // float vel_y = 7;
  if (this->vel_y() != 0) {
    total_size += 1 + 4;
  }

  // float speed = 8;
  if (this->speed() != 0) {
    total_size += 1 + 4;
  }

  // uint32 species_id = 9;
  if (this->species_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->species_id());
  }

  // int32 join_index = 10;
  if (this->join_index() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->join_index());
  }

  // int32 frames_to_recover = 11;
  if (this->frames_to_recover() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->frames_to_recover());
  }

  // int32 frames_captured_by_inertia = 12;
  if (this->frames_captured_by_inertia() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->frames_captured_by_inertia());
  }

  // int32 frames_in_patrol_cue = 14;
  if (this->frames_in_patrol_cue() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->frames_in_patrol_cue());
  }

  // uint32 beats_cnt = 15;
  if (this->beats_cnt() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->beats_cnt());
  }

  // uint32 beaten_cnt = 16;
  if (this->beaten_cnt() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->beaten_cnt());
  }

  // int32 hp = 17;
  if (this->hp() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->hp());
  }

  // int32 mp = 18;
  if (this->mp() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->mp());
  }

  // int32 btn_b_holding_rdf_count = 19;
  if (this->btn_b_holding_rdf_count() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->btn_b_holding_rdf_count());
  }

  // .shared.CharacterState character_state = 22;
  if (this->character_state() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->character_state());
  }

  // bool captured_by_patrol_cue = 13;
  if (this->captured_by_patrol_cue() != 0) {
    total_size += 1 + 1;
  }

  // bool in_air = 24;
  if (this->in_air() != 0) {
    total_size += 2 + 1;
  }

  // bool jump_triggered = 25;
  if (this->jump_triggered() != 0) {
    total_size += 2 + 1;
  }

  // bool on_wall = 26;
  if (this->on_wall() != 0) {
    total_size += 2 + 1;
  }

  // int32 frames_in_ch_state = 23;
  if (this->frames_in_ch_state() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->frames_in_ch_state());
  }

  // int32 on_wall_norm_x = 27;
  if (this->on_wall_norm_x() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->on_wall_norm_x());
  }

  // int32 on_wall_norm_y = 28;
  if (this->on_wall_norm_y() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->on_wall_norm_y());
  }

  // int32 waiving_patrol_cue_id = 31;
  if (this->waiving_patrol_cue_id() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->waiving_patrol_cue_id());
  }

  // .shared.NpcGoal goal_as_npc = 32;
  if (this->goal_as_npc() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->goal_as_npc());
  }

  // float revival_x = 33;
  if (this->revival_x() != 0) {
    total_size += 2 + 4;
  }

  // bool omit_gravity = 29;
  if (this->omit_gravity() != 0) {
    total_size += 2 + 1;
  }

  // bool omit_soft_pushback = 30;
  if (this->omit_soft_pushback() != 0) {
    total_size += 2 + 1;
  }

  // bool on_slope = 37;
  if (this->on_slope() != 0) {
    total_size += 2 + 1;
  }

  // bool forced_crouching = 39;
  if (this->forced_crouching() != 0) {
    total_size += 2 + 1;
  }

  // float revival_y = 34;
  if (this->revival_y() != 0) {
    total_size += 2 + 4;
  }

  // int32 revival_dir_x = 35;
  if (this->revival_dir_x() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->revival_dir_x());
  }

  // int32 revival_dir_y = 36;
  if (this->revival_dir_y() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->revival_dir_y());
  }

  // int32 friction_vel_x = 38;
  if (this->friction_vel_x() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->friction_vel_x());
  }

  // bool slip_jump_triggered = 40;
  if (this->slip_jump_triggered() != 0) {
    total_size += 2 + 1;
  }

  // bool primarily_on_slippable_hard_pushback = 41;
  if (this->primarily_on_slippable_hard_pushback() != 0) {
    total_size += 2 + 1;
  }

  // bool prev_was_crouching = 42;
  if (this->prev_was_crouching() != 0) {
    total_size += 2 + 1;
  }

  // bool new_birth = 43;
  if (this->new_birth() != 0) {
    total_size += 2 + 1;
  }

  // int32 frames_invinsible = 44;
  if (this->frames_invinsible() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->frames_invinsible());
  }

  // int32 frames_to_start_jump = 46;
  if (this->frames_to_start_jump() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->frames_to_start_jump());
  }

  // uint64 publishing_evt_mask_upon_killed = 48;
  if (this->publishing_evt_mask_upon_killed() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->publishing_evt_mask_upon_killed());
  }

  // int32 publishing_to_trigger_local_id_upon_killed = 49;
  if (this->publishing_to_trigger_local_id_upon_killed() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->publishing_to_trigger_local_id_upon_killed());
  }

  // int32 subscribes_to_trigger_local_id = 50;
  if (this->subscribes_to_trigger_local_id() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->subscribes_to_trigger_local_id());
  }

  // int32 jump_holding_rdf_cnt = 51;
  if (this->jump_holding_rdf_cnt() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->jump_holding_rdf_cnt());
  }

  // bool jump_started = 45;
  if (this->jump_started() != 0) {
    total_size += 2 + 1;
  }

  // bool repel_soft_pushback = 47;
  if (this->repel_soft_pushback() != 0) {
    total_size += 2 + 1;
  }

  // bool on_slope_facing_down = 63;
  if (this->on_slope_facing_down() != 0) {
    total_size += 2 + 1;
  }

  // uint32 remaining_air_jump_quota = 52;
  if (this->remaining_air_jump_quota() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->remaining_air_jump_quota());
  }

  // uint32 remaining_air_dash_quota = 53;
  if (this->remaining_air_dash_quota() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->remaining_air_dash_quota());
  }

  // uint32 killed_to_drop_consumable_species_id = 54;
  if (this->killed_to_drop_consumable_species_id() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->killed_to_drop_consumable_species_id());
  }

  // uint32 killed_to_drop_buff_species_id = 55;
  if (this->killed_to_drop_buff_species_id() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->killed_to_drop_buff_species_id());
  }

  // uint32 killed_to_drop_pickup_skill_id = 56;
  if (this->killed_to_drop_pickup_skill_id() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->killed_to_drop_pickup_skill_id());
  }

  // int32 friction_vel_y = 57;
  if (this->friction_vel_y() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->friction_vel_y());
  }

  // int32 frames_since_last_damaged = 58;
  if (this->frames_since_last_damaged() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->frames_since_last_damaged());
  }

  // uint32 remaining_def1Quota = 59;
  if (this->remaining_def1quota() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->remaining_def1quota());
  }

  // uint32 combo_hit_cnt = 60;
  if (this->combo_hit_cnt() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->combo_hit_cnt());
  }

  // int32 combo_frames_remained = 61;
  if (this->combo_frames_remained() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->combo_frames_remained());
  }

  // uint32 damage_elemental_attrs = 62;
  if (this->damage_elemental_attrs() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->damage_elemental_attrs());
  }

  // int32 last_damaged_by_join_index = 64;
  if (this->last_damaged_by_join_index() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->last_damaged_by_join_index());
  }

  // int32 last_damaged_by_bullet_team_id = 65;
  if (this->last_damaged_by_bullet_team_id() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->last_damaged_by_bullet_team_id());
  }

  // int32 activated_rdf_id = 66;
  if (this->activated_rdf_id() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->activated_rdf_id());
  }

  // uint64 cached_cue_cmd = 67;
  if (this->cached_cue_cmd() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->cached_cue_cmd());
  }

  // uint32 active_skill_id = 68;
  if (this->active_skill_id() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->active_skill_id());
  }

  // int32 active_skill_hit = 69;
  if (this->active_skill_hit() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->active_skill_hit());
  }

  // int32 bullet_team_id = 70;
  if (this->bullet_team_id() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->bullet_team_id());
  }

  // int32 ch_collision_team_id = 71;
  if (this->ch_collision_team_id() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->ch_collision_team_id());
  }

  // int32 btn_c_holding_rdf_count = 72;
  if (this->btn_c_holding_rdf_count() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->btn_c_holding_rdf_count());
  }

  // int32 btn_d_Holding_rdf_count = 73;
  if (this->btn_d_holding_rdf_count() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->btn_d_holding_rdf_count());
  }

  // int32 btn_e_holding_rdf_count = 74;
  if (this->btn_e_holding_rdf_count() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->btn_e_holding_rdf_count());
  }

  // int32 parry_prep_rdf_cnt_down = 75;
  if (this->parry_prep_rdf_cnt_down() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->parry_prep_rdf_cnt_down());
  }

  // int32 mp_regen_rdf_countdown = 76;
  if (this->mp_regen_rdf_countdown() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->mp_regen_rdf_countdown());
  }

  // int32 flying_rdf_countdown = 77;
  if (this->flying_rdf_countdown() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->flying_rdf_countdown());
  }

  // int32 locking_on_join_index = 78;
  if (this->locking_on_join_index() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->locking_on_join_index());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CharacterDownsync::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:shared.CharacterDownsync)
  GOOGLE_DCHECK_NE(&from, this);
  const CharacterDownsync* source =
      ::google::protobuf::DynamicCastToGenerated<CharacterDownsync>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:shared.CharacterDownsync)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:shared.CharacterDownsync)
    MergeFrom(*source);
  }
}

void CharacterDownsync::MergeFrom(const CharacterDownsync& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:shared.CharacterDownsync)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  buff_list_.MergeFrom(from.buff_list_);
  debuff_list_.MergeFrom(from.debuff_list_);
  bullet_immune_records_.MergeFrom(from.bullet_immune_records_);
  kinematic_knobs_.MergeFrom(from.kinematic_knobs_);
  if (from.has_inventory()) {
    mutable_inventory()->::shared::Inventory::MergeFrom(from.inventory());
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.x() != 0) {
    set_x(from.x());
  }
  if (from.y() != 0) {
    set_y(from.y());
  }
  if (from.dir_x() != 0) {
    set_dir_x(from.dir_x());
  }
  if (from.dir_y() != 0) {
    set_dir_y(from.dir_y());
  }
  if (from.vel_x() != 0) {
    set_vel_x(from.vel_x());
  }
  if (from.vel_y() != 0) {
    set_vel_y(from.vel_y());
  }
  if (from.speed() != 0) {
    set_speed(from.speed());
  }
  if (from.species_id() != 0) {
    set_species_id(from.species_id());
  }
  if (from.join_index() != 0) {
    set_join_index(from.join_index());
  }
  if (from.frames_to_recover() != 0) {
    set_frames_to_recover(from.frames_to_recover());
  }
  if (from.frames_captured_by_inertia() != 0) {
    set_frames_captured_by_inertia(from.frames_captured_by_inertia());
  }
  if (from.frames_in_patrol_cue() != 0) {
    set_frames_in_patrol_cue(from.frames_in_patrol_cue());
  }
  if (from.beats_cnt() != 0) {
    set_beats_cnt(from.beats_cnt());
  }
  if (from.beaten_cnt() != 0) {
    set_beaten_cnt(from.beaten_cnt());
  }
  if (from.hp() != 0) {
    set_hp(from.hp());
  }
  if (from.mp() != 0) {
    set_mp(from.mp());
  }
  if (from.btn_b_holding_rdf_count() != 0) {
    set_btn_b_holding_rdf_count(from.btn_b_holding_rdf_count());
  }
  if (from.character_state() != 0) {
    set_character_state(from.character_state());
  }
  if (from.captured_by_patrol_cue() != 0) {
    set_captured_by_patrol_cue(from.captured_by_patrol_cue());
  }
  if (from.in_air() != 0) {
    set_in_air(from.in_air());
  }
  if (from.jump_triggered() != 0) {
    set_jump_triggered(from.jump_triggered());
  }
  if (from.on_wall() != 0) {
    set_on_wall(from.on_wall());
  }
  if (from.frames_in_ch_state() != 0) {
    set_frames_in_ch_state(from.frames_in_ch_state());
  }
  if (from.on_wall_norm_x() != 0) {
    set_on_wall_norm_x(from.on_wall_norm_x());
  }
  if (from.on_wall_norm_y() != 0) {
    set_on_wall_norm_y(from.on_wall_norm_y());
  }
  if (from.waiving_patrol_cue_id() != 0) {
    set_waiving_patrol_cue_id(from.waiving_patrol_cue_id());
  }
  if (from.goal_as_npc() != 0) {
    set_goal_as_npc(from.goal_as_npc());
  }
  if (from.revival_x() != 0) {
    set_revival_x(from.revival_x());
  }
  if (from.omit_gravity() != 0) {
    set_omit_gravity(from.omit_gravity());
  }
  if (from.omit_soft_pushback() != 0) {
    set_omit_soft_pushback(from.omit_soft_pushback());
  }
  if (from.on_slope() != 0) {
    set_on_slope(from.on_slope());
  }
  if (from.forced_crouching() != 0) {
    set_forced_crouching(from.forced_crouching());
  }
  if (from.revival_y() != 0) {
    set_revival_y(from.revival_y());
  }
  if (from.revival_dir_x() != 0) {
    set_revival_dir_x(from.revival_dir_x());
  }
  if (from.revival_dir_y() != 0) {
    set_revival_dir_y(from.revival_dir_y());
  }
  if (from.friction_vel_x() != 0) {
    set_friction_vel_x(from.friction_vel_x());
  }
  if (from.slip_jump_triggered() != 0) {
    set_slip_jump_triggered(from.slip_jump_triggered());
  }
  if (from.primarily_on_slippable_hard_pushback() != 0) {
    set_primarily_on_slippable_hard_pushback(from.primarily_on_slippable_hard_pushback());
  }
  if (from.prev_was_crouching() != 0) {
    set_prev_was_crouching(from.prev_was_crouching());
  }
  if (from.new_birth() != 0) {
    set_new_birth(from.new_birth());
  }
  if (from.frames_invinsible() != 0) {
    set_frames_invinsible(from.frames_invinsible());
  }
  if (from.frames_to_start_jump() != 0) {
    set_frames_to_start_jump(from.frames_to_start_jump());
  }
  if (from.publishing_evt_mask_upon_killed() != 0) {
    set_publishing_evt_mask_upon_killed(from.publishing_evt_mask_upon_killed());
  }
  if (from.publishing_to_trigger_local_id_upon_killed() != 0) {
    set_publishing_to_trigger_local_id_upon_killed(from.publishing_to_trigger_local_id_upon_killed());
  }
  if (from.subscribes_to_trigger_local_id() != 0) {
    set_subscribes_to_trigger_local_id(from.subscribes_to_trigger_local_id());
  }
  if (from.jump_holding_rdf_cnt() != 0) {
    set_jump_holding_rdf_cnt(from.jump_holding_rdf_cnt());
  }
  if (from.jump_started() != 0) {
    set_jump_started(from.jump_started());
  }
  if (from.repel_soft_pushback() != 0) {
    set_repel_soft_pushback(from.repel_soft_pushback());
  }
  if (from.on_slope_facing_down() != 0) {
    set_on_slope_facing_down(from.on_slope_facing_down());
  }
  if (from.remaining_air_jump_quota() != 0) {
    set_remaining_air_jump_quota(from.remaining_air_jump_quota());
  }
  if (from.remaining_air_dash_quota() != 0) {
    set_remaining_air_dash_quota(from.remaining_air_dash_quota());
  }
  if (from.killed_to_drop_consumable_species_id() != 0) {
    set_killed_to_drop_consumable_species_id(from.killed_to_drop_consumable_species_id());
  }
  if (from.killed_to_drop_buff_species_id() != 0) {
    set_killed_to_drop_buff_species_id(from.killed_to_drop_buff_species_id());
  }
  if (from.killed_to_drop_pickup_skill_id() != 0) {
    set_killed_to_drop_pickup_skill_id(from.killed_to_drop_pickup_skill_id());
  }
  if (from.friction_vel_y() != 0) {
    set_friction_vel_y(from.friction_vel_y());
  }
  if (from.frames_since_last_damaged() != 0) {
    set_frames_since_last_damaged(from.frames_since_last_damaged());
  }
  if (from.remaining_def1quota() != 0) {
    set_remaining_def1quota(from.remaining_def1quota());
  }
  if (from.combo_hit_cnt() != 0) {
    set_combo_hit_cnt(from.combo_hit_cnt());
  }
  if (from.combo_frames_remained() != 0) {
    set_combo_frames_remained(from.combo_frames_remained());
  }
  if (from.damage_elemental_attrs() != 0) {
    set_damage_elemental_attrs(from.damage_elemental_attrs());
  }
  if (from.last_damaged_by_join_index() != 0) {
    set_last_damaged_by_join_index(from.last_damaged_by_join_index());
  }
  if (from.last_damaged_by_bullet_team_id() != 0) {
    set_last_damaged_by_bullet_team_id(from.last_damaged_by_bullet_team_id());
  }
  if (from.activated_rdf_id() != 0) {
    set_activated_rdf_id(from.activated_rdf_id());
  }
  if (from.cached_cue_cmd() != 0) {
    set_cached_cue_cmd(from.cached_cue_cmd());
  }
  if (from.active_skill_id() != 0) {
    set_active_skill_id(from.active_skill_id());
  }
  if (from.active_skill_hit() != 0) {
    set_active_skill_hit(from.active_skill_hit());
  }
  if (from.bullet_team_id() != 0) {
    set_bullet_team_id(from.bullet_team_id());
  }
  if (from.ch_collision_team_id() != 0) {
    set_ch_collision_team_id(from.ch_collision_team_id());
  }
  if (from.btn_c_holding_rdf_count() != 0) {
    set_btn_c_holding_rdf_count(from.btn_c_holding_rdf_count());
  }
  if (from.btn_d_holding_rdf_count() != 0) {
    set_btn_d_holding_rdf_count(from.btn_d_holding_rdf_count());
  }
  if (from.btn_e_holding_rdf_count() != 0) {
    set_btn_e_holding_rdf_count(from.btn_e_holding_rdf_count());
  }
  if (from.parry_prep_rdf_cnt_down() != 0) {
    set_parry_prep_rdf_cnt_down(from.parry_prep_rdf_cnt_down());
  }
  if (from.mp_regen_rdf_countdown() != 0) {
    set_mp_regen_rdf_countdown(from.mp_regen_rdf_countdown());
  }
  if (from.flying_rdf_countdown() != 0) {
    set_flying_rdf_countdown(from.flying_rdf_countdown());
  }
  if (from.locking_on_join_index() != 0) {
    set_locking_on_join_index(from.locking_on_join_index());
  }
}

void CharacterDownsync::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:shared.CharacterDownsync)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CharacterDownsync::CopyFrom(const CharacterDownsync& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:shared.CharacterDownsync)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CharacterDownsync::IsInitialized() const {
  return true;
}

void CharacterDownsync::Swap(CharacterDownsync* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CharacterDownsync::InternalSwap(CharacterDownsync* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&buff_list_)->InternalSwap(CastToBase(&other->buff_list_));
  CastToBase(&debuff_list_)->InternalSwap(CastToBase(&other->debuff_list_));
  CastToBase(&bullet_immune_records_)->InternalSwap(CastToBase(&other->bullet_immune_records_));
  kinematic_knobs_.InternalSwap(&other->kinematic_knobs_);
  swap(inventory_, other->inventory_);
  swap(id_, other->id_);
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(dir_x_, other->dir_x_);
  swap(dir_y_, other->dir_y_);
  swap(vel_x_, other->vel_x_);
  swap(vel_y_, other->vel_y_);
  swap(speed_, other->speed_);
  swap(species_id_, other->species_id_);
  swap(join_index_, other->join_index_);
  swap(frames_to_recover_, other->frames_to_recover_);
  swap(frames_captured_by_inertia_, other->frames_captured_by_inertia_);
  swap(frames_in_patrol_cue_, other->frames_in_patrol_cue_);
  swap(beats_cnt_, other->beats_cnt_);
  swap(beaten_cnt_, other->beaten_cnt_);
  swap(hp_, other->hp_);
  swap(mp_, other->mp_);
  swap(btn_b_holding_rdf_count_, other->btn_b_holding_rdf_count_);
  swap(character_state_, other->character_state_);
  swap(captured_by_patrol_cue_, other->captured_by_patrol_cue_);
  swap(in_air_, other->in_air_);
  swap(jump_triggered_, other->jump_triggered_);
  swap(on_wall_, other->on_wall_);
  swap(frames_in_ch_state_, other->frames_in_ch_state_);
  swap(on_wall_norm_x_, other->on_wall_norm_x_);
  swap(on_wall_norm_y_, other->on_wall_norm_y_);
  swap(waiving_patrol_cue_id_, other->waiving_patrol_cue_id_);
  swap(goal_as_npc_, other->goal_as_npc_);
  swap(revival_x_, other->revival_x_);
  swap(omit_gravity_, other->omit_gravity_);
  swap(omit_soft_pushback_, other->omit_soft_pushback_);
  swap(on_slope_, other->on_slope_);
  swap(forced_crouching_, other->forced_crouching_);
  swap(revival_y_, other->revival_y_);
  swap(revival_dir_x_, other->revival_dir_x_);
  swap(revival_dir_y_, other->revival_dir_y_);
  swap(friction_vel_x_, other->friction_vel_x_);
  swap(slip_jump_triggered_, other->slip_jump_triggered_);
  swap(primarily_on_slippable_hard_pushback_, other->primarily_on_slippable_hard_pushback_);
  swap(prev_was_crouching_, other->prev_was_crouching_);
  swap(new_birth_, other->new_birth_);
  swap(frames_invinsible_, other->frames_invinsible_);
  swap(frames_to_start_jump_, other->frames_to_start_jump_);
  swap(publishing_evt_mask_upon_killed_, other->publishing_evt_mask_upon_killed_);
  swap(publishing_to_trigger_local_id_upon_killed_, other->publishing_to_trigger_local_id_upon_killed_);
  swap(subscribes_to_trigger_local_id_, other->subscribes_to_trigger_local_id_);
  swap(jump_holding_rdf_cnt_, other->jump_holding_rdf_cnt_);
  swap(jump_started_, other->jump_started_);
  swap(repel_soft_pushback_, other->repel_soft_pushback_);
  swap(on_slope_facing_down_, other->on_slope_facing_down_);
  swap(remaining_air_jump_quota_, other->remaining_air_jump_quota_);
  swap(remaining_air_dash_quota_, other->remaining_air_dash_quota_);
  swap(killed_to_drop_consumable_species_id_, other->killed_to_drop_consumable_species_id_);
  swap(killed_to_drop_buff_species_id_, other->killed_to_drop_buff_species_id_);
  swap(killed_to_drop_pickup_skill_id_, other->killed_to_drop_pickup_skill_id_);
  swap(friction_vel_y_, other->friction_vel_y_);
  swap(frames_since_last_damaged_, other->frames_since_last_damaged_);
  swap(remaining_def1quota_, other->remaining_def1quota_);
  swap(combo_hit_cnt_, other->combo_hit_cnt_);
  swap(combo_frames_remained_, other->combo_frames_remained_);
  swap(damage_elemental_attrs_, other->damage_elemental_attrs_);
  swap(last_damaged_by_join_index_, other->last_damaged_by_join_index_);
  swap(last_damaged_by_bullet_team_id_, other->last_damaged_by_bullet_team_id_);
  swap(activated_rdf_id_, other->activated_rdf_id_);
  swap(cached_cue_cmd_, other->cached_cue_cmd_);
  swap(active_skill_id_, other->active_skill_id_);
  swap(active_skill_hit_, other->active_skill_hit_);
  swap(bullet_team_id_, other->bullet_team_id_);
  swap(ch_collision_team_id_, other->ch_collision_team_id_);
  swap(btn_c_holding_rdf_count_, other->btn_c_holding_rdf_count_);
  swap(btn_d_holding_rdf_count_, other->btn_d_holding_rdf_count_);
  swap(btn_e_holding_rdf_count_, other->btn_e_holding_rdf_count_);
  swap(parry_prep_rdf_cnt_down_, other->parry_prep_rdf_cnt_down_);
  swap(mp_regen_rdf_countdown_, other->mp_regen_rdf_countdown_);
  swap(flying_rdf_countdown_, other->flying_rdf_countdown_);
  swap(locking_on_join_index_, other->locking_on_join_index_);
}

::google::protobuf::Metadata CharacterDownsync::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_serializable_5fdata_2eproto);
  return ::file_level_metadata_serializable_5fdata_2eproto[kIndexInFileMessages];
}


// ===================================================================

void InputFrameDecoded::InitAsDefaultInstance() {
}
class InputFrameDecoded::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InputFrameDecoded::kDxFieldNumber;
const int InputFrameDecoded::kDyFieldNumber;
const int InputFrameDecoded::kBtnALevelFieldNumber;
const int InputFrameDecoded::kBtnBLevelFieldNumber;
const int InputFrameDecoded::kBtnCLevelFieldNumber;
const int InputFrameDecoded::kBtnDLevelFieldNumber;
const int InputFrameDecoded::kBtnELevelFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InputFrameDecoded::InputFrameDecoded()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:shared.InputFrameDecoded)
}
InputFrameDecoded::InputFrameDecoded(const InputFrameDecoded& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&dx_, &from.dx_,
    static_cast<size_t>(reinterpret_cast<char*>(&btn_e_level_) -
    reinterpret_cast<char*>(&dx_)) + sizeof(btn_e_level_));
  // @@protoc_insertion_point(copy_constructor:shared.InputFrameDecoded)
}

void InputFrameDecoded::SharedCtor() {
  ::memset(&dx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&btn_e_level_) -
      reinterpret_cast<char*>(&dx_)) + sizeof(btn_e_level_));
}

InputFrameDecoded::~InputFrameDecoded() {
  // @@protoc_insertion_point(destructor:shared.InputFrameDecoded)
  SharedDtor();
}

void InputFrameDecoded::SharedDtor() {
}

void InputFrameDecoded::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InputFrameDecoded& InputFrameDecoded::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_InputFrameDecoded_serializable_5fdata_2eproto.base);
  return *internal_default_instance();
}


void InputFrameDecoded::Clear() {
// @@protoc_insertion_point(message_clear_start:shared.InputFrameDecoded)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&dx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&btn_e_level_) -
      reinterpret_cast<char*>(&dx_)) + sizeof(btn_e_level_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* InputFrameDecoded::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<InputFrameDecoded*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int32 dx = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_dx(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 dy = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_dy(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 btn_a_level = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_btn_a_level(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 btn_b_level = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_btn_b_level(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 btn_c_level = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_btn_c_level(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 btn_d_level = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_btn_d_level(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 btn_e_level = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        msg->set_btn_e_level(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool InputFrameDecoded::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:shared.InputFrameDecoded)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 dx = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 dy = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dy_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 btn_a_level = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &btn_a_level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 btn_b_level = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &btn_b_level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 btn_c_level = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &btn_c_level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 btn_d_level = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &btn_d_level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 btn_e_level = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (56 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &btn_e_level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:shared.InputFrameDecoded)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:shared.InputFrameDecoded)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void InputFrameDecoded::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:shared.InputFrameDecoded)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 dx = 1;
  if (this->dx() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->dx(), output);
  }

  // int32 dy = 2;
  if (this->dy() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->dy(), output);
  }

  // int32 btn_a_level = 3;
  if (this->btn_a_level() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->btn_a_level(), output);
  }

  // int32 btn_b_level = 4;
  if (this->btn_b_level() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->btn_b_level(), output);
  }

  // int32 btn_c_level = 5;
  if (this->btn_c_level() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->btn_c_level(), output);
  }

  // int32 btn_d_level = 6;
  if (this->btn_d_level() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->btn_d_level(), output);
  }

  // int32 btn_e_level = 7;
  if (this->btn_e_level() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->btn_e_level(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:shared.InputFrameDecoded)
}

::google::protobuf::uint8* InputFrameDecoded::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:shared.InputFrameDecoded)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 dx = 1;
  if (this->dx() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->dx(), target);
  }

  // int32 dy = 2;
  if (this->dy() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->dy(), target);
  }

  // int32 btn_a_level = 3;
  if (this->btn_a_level() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->btn_a_level(), target);
  }

  // int32 btn_b_level = 4;
  if (this->btn_b_level() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->btn_b_level(), target);
  }

  // int32 btn_c_level = 5;
  if (this->btn_c_level() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->btn_c_level(), target);
  }

  // int32 btn_d_level = 6;
  if (this->btn_d_level() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->btn_d_level(), target);
  }

  // int32 btn_e_level = 7;
  if (this->btn_e_level() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->btn_e_level(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:shared.InputFrameDecoded)
  return target;
}

size_t InputFrameDecoded::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:shared.InputFrameDecoded)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 dx = 1;
  if (this->dx() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->dx());
  }

  // int32 dy = 2;
  if (this->dy() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->dy());
  }

  // int32 btn_a_level = 3;
  if (this->btn_a_level() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->btn_a_level());
  }

  // int32 btn_b_level = 4;
  if (this->btn_b_level() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->btn_b_level());
  }

  // int32 btn_c_level = 5;
  if (this->btn_c_level() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->btn_c_level());
  }

  // int32 btn_d_level = 6;
  if (this->btn_d_level() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->btn_d_level());
  }

  // int32 btn_e_level = 7;
  if (this->btn_e_level() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->btn_e_level());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InputFrameDecoded::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:shared.InputFrameDecoded)
  GOOGLE_DCHECK_NE(&from, this);
  const InputFrameDecoded* source =
      ::google::protobuf::DynamicCastToGenerated<InputFrameDecoded>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:shared.InputFrameDecoded)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:shared.InputFrameDecoded)
    MergeFrom(*source);
  }
}

void InputFrameDecoded::MergeFrom(const InputFrameDecoded& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:shared.InputFrameDecoded)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.dx() != 0) {
    set_dx(from.dx());
  }
  if (from.dy() != 0) {
    set_dy(from.dy());
  }
  if (from.btn_a_level() != 0) {
    set_btn_a_level(from.btn_a_level());
  }
  if (from.btn_b_level() != 0) {
    set_btn_b_level(from.btn_b_level());
  }
  if (from.btn_c_level() != 0) {
    set_btn_c_level(from.btn_c_level());
  }
  if (from.btn_d_level() != 0) {
    set_btn_d_level(from.btn_d_level());
  }
  if (from.btn_e_level() != 0) {
    set_btn_e_level(from.btn_e_level());
  }
}

void InputFrameDecoded::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:shared.InputFrameDecoded)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InputFrameDecoded::CopyFrom(const InputFrameDecoded& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:shared.InputFrameDecoded)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InputFrameDecoded::IsInitialized() const {
  return true;
}

void InputFrameDecoded::Swap(InputFrameDecoded* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InputFrameDecoded::InternalSwap(InputFrameDecoded* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(dx_, other->dx_);
  swap(dy_, other->dy_);
  swap(btn_a_level_, other->btn_a_level_);
  swap(btn_b_level_, other->btn_b_level_);
  swap(btn_c_level_, other->btn_c_level_);
  swap(btn_d_level_, other->btn_d_level_);
  swap(btn_e_level_, other->btn_e_level_);
}

::google::protobuf::Metadata InputFrameDecoded::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_serializable_5fdata_2eproto);
  return ::file_level_metadata_serializable_5fdata_2eproto[kIndexInFileMessages];
}


// ===================================================================

void InputFrameUpsync::InitAsDefaultInstance() {
}
class InputFrameUpsync::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InputFrameUpsync::kInputFrameIdFieldNumber;
const int InputFrameUpsync::kEncodedFieldNumber;
const int InputFrameUpsync::kJoinIndexFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InputFrameUpsync::InputFrameUpsync()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:shared.InputFrameUpsync)
}
InputFrameUpsync::InputFrameUpsync(const InputFrameUpsync& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&encoded_, &from.encoded_,
    static_cast<size_t>(reinterpret_cast<char*>(&join_index_) -
    reinterpret_cast<char*>(&encoded_)) + sizeof(join_index_));
  // @@protoc_insertion_point(copy_constructor:shared.InputFrameUpsync)
}

void InputFrameUpsync::SharedCtor() {
  ::memset(&encoded_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&join_index_) -
      reinterpret_cast<char*>(&encoded_)) + sizeof(join_index_));
}

InputFrameUpsync::~InputFrameUpsync() {
  // @@protoc_insertion_point(destructor:shared.InputFrameUpsync)
  SharedDtor();
}

void InputFrameUpsync::SharedDtor() {
}

void InputFrameUpsync::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InputFrameUpsync& InputFrameUpsync::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_InputFrameUpsync_serializable_5fdata_2eproto.base);
  return *internal_default_instance();
}


void InputFrameUpsync::Clear() {
// @@protoc_insertion_point(message_clear_start:shared.InputFrameUpsync)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&encoded_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&join_index_) -
      reinterpret_cast<char*>(&encoded_)) + sizeof(join_index_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* InputFrameUpsync::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<InputFrameUpsync*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int32 input_frame_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_input_frame_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // uint64 encoded = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_encoded(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 join_index = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_join_index(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool InputFrameUpsync::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:shared.InputFrameUpsync)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 input_frame_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &input_frame_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 encoded = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &encoded_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 join_index = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &join_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:shared.InputFrameUpsync)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:shared.InputFrameUpsync)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void InputFrameUpsync::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:shared.InputFrameUpsync)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 input_frame_id = 1;
  if (this->input_frame_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->input_frame_id(), output);
  }

  // uint64 encoded = 2;
  if (this->encoded() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->encoded(), output);
  }

  // int32 join_index = 3;
  if (this->join_index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->join_index(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:shared.InputFrameUpsync)
}

::google::protobuf::uint8* InputFrameUpsync::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:shared.InputFrameUpsync)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 input_frame_id = 1;
  if (this->input_frame_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->input_frame_id(), target);
  }

  // uint64 encoded = 2;
  if (this->encoded() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->encoded(), target);
  }

  // int32 join_index = 3;
  if (this->join_index() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->join_index(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:shared.InputFrameUpsync)
  return target;
}

size_t InputFrameUpsync::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:shared.InputFrameUpsync)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 encoded = 2;
  if (this->encoded() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->encoded());
  }

  // int32 input_frame_id = 1;
  if (this->input_frame_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->input_frame_id());
  }

  // int32 join_index = 3;
  if (this->join_index() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->join_index());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InputFrameUpsync::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:shared.InputFrameUpsync)
  GOOGLE_DCHECK_NE(&from, this);
  const InputFrameUpsync* source =
      ::google::protobuf::DynamicCastToGenerated<InputFrameUpsync>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:shared.InputFrameUpsync)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:shared.InputFrameUpsync)
    MergeFrom(*source);
  }
}

void InputFrameUpsync::MergeFrom(const InputFrameUpsync& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:shared.InputFrameUpsync)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.encoded() != 0) {
    set_encoded(from.encoded());
  }
  if (from.input_frame_id() != 0) {
    set_input_frame_id(from.input_frame_id());
  }
  if (from.join_index() != 0) {
    set_join_index(from.join_index());
  }
}

void InputFrameUpsync::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:shared.InputFrameUpsync)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InputFrameUpsync::CopyFrom(const InputFrameUpsync& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:shared.InputFrameUpsync)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InputFrameUpsync::IsInitialized() const {
  return true;
}

void InputFrameUpsync::Swap(InputFrameUpsync* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InputFrameUpsync::InternalSwap(InputFrameUpsync* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(encoded_, other->encoded_);
  swap(input_frame_id_, other->input_frame_id_);
  swap(join_index_, other->join_index_);
}

::google::protobuf::Metadata InputFrameUpsync::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_serializable_5fdata_2eproto);
  return ::file_level_metadata_serializable_5fdata_2eproto[kIndexInFileMessages];
}


// ===================================================================

void InputFrameDownsync::InitAsDefaultInstance() {
}
class InputFrameDownsync::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InputFrameDownsync::kInputFrameIdFieldNumber;
const int InputFrameDownsync::kInputListFieldNumber;
const int InputFrameDownsync::kConfirmedListFieldNumber;
const int InputFrameDownsync::kUdpConfirmedListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InputFrameDownsync::InputFrameDownsync()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:shared.InputFrameDownsync)
}
InputFrameDownsync::InputFrameDownsync(const InputFrameDownsync& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      input_list_(from.input_list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&confirmed_list_, &from.confirmed_list_,
    static_cast<size_t>(reinterpret_cast<char*>(&input_frame_id_) -
    reinterpret_cast<char*>(&confirmed_list_)) + sizeof(input_frame_id_));
  // @@protoc_insertion_point(copy_constructor:shared.InputFrameDownsync)
}

void InputFrameDownsync::SharedCtor() {
  ::memset(&confirmed_list_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&input_frame_id_) -
      reinterpret_cast<char*>(&confirmed_list_)) + sizeof(input_frame_id_));
}

InputFrameDownsync::~InputFrameDownsync() {
  // @@protoc_insertion_point(destructor:shared.InputFrameDownsync)
  SharedDtor();
}

void InputFrameDownsync::SharedDtor() {
}

void InputFrameDownsync::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InputFrameDownsync& InputFrameDownsync::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_InputFrameDownsync_serializable_5fdata_2eproto.base);
  return *internal_default_instance();
}


void InputFrameDownsync::Clear() {
// @@protoc_insertion_point(message_clear_start:shared.InputFrameDownsync)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  input_list_.Clear();
  ::memset(&confirmed_list_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&input_frame_id_) -
      reinterpret_cast<char*>(&confirmed_list_)) + sizeof(input_frame_id_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* InputFrameDownsync::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<InputFrameDownsync*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int32 input_frame_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_input_frame_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated uint64 input_list = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) == 18) {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::protobuf::internal::PackedUInt64Parser;
          object = msg->mutable_input_list();
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          if (size) ptr = parser_till_end(ptr, newend, object, ctx);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        do {
          msg->add_input_list(::google::protobuf::internal::ReadVarint(&ptr));
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 16 && (ptr += 1));
        break;
      }
      // uint64 confirmed_list = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_confirmed_list(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // uint64 udp_confirmed_list = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_udp_confirmed_list(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool InputFrameDownsync::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:shared.InputFrameDownsync)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 input_frame_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &input_frame_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint64 input_list = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_input_list())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 18u, input, this->mutable_input_list())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 confirmed_list = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &confirmed_list_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 udp_confirmed_list = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &udp_confirmed_list_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:shared.InputFrameDownsync)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:shared.InputFrameDownsync)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void InputFrameDownsync::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:shared.InputFrameDownsync)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 input_frame_id = 1;
  if (this->input_frame_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->input_frame_id(), output);
  }

  // repeated uint64 input_list = 2;
  if (this->input_list_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_input_list_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->input_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64NoTag(
      this->input_list(i), output);
  }

  // uint64 confirmed_list = 3;
  if (this->confirmed_list() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->confirmed_list(), output);
  }

  // uint64 udp_confirmed_list = 4;
  if (this->udp_confirmed_list() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->udp_confirmed_list(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:shared.InputFrameDownsync)
}

::google::protobuf::uint8* InputFrameDownsync::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:shared.InputFrameDownsync)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 input_frame_id = 1;
  if (this->input_frame_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->input_frame_id(), target);
  }

  // repeated uint64 input_list = 2;
  if (this->input_list_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        _input_list_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64NoTagToArray(this->input_list_, target);
  }

  // uint64 confirmed_list = 3;
  if (this->confirmed_list() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->confirmed_list(), target);
  }

  // uint64 udp_confirmed_list = 4;
  if (this->udp_confirmed_list() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->udp_confirmed_list(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:shared.InputFrameDownsync)
  return target;
}

size_t InputFrameDownsync::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:shared.InputFrameDownsync)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 input_list = 2;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt64Size(this->input_list_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast<::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    _input_list_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // uint64 confirmed_list = 3;
  if (this->confirmed_list() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->confirmed_list());
  }

  // uint64 udp_confirmed_list = 4;
  if (this->udp_confirmed_list() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->udp_confirmed_list());
  }

  // int32 input_frame_id = 1;
  if (this->input_frame_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->input_frame_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InputFrameDownsync::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:shared.InputFrameDownsync)
  GOOGLE_DCHECK_NE(&from, this);
  const InputFrameDownsync* source =
      ::google::protobuf::DynamicCastToGenerated<InputFrameDownsync>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:shared.InputFrameDownsync)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:shared.InputFrameDownsync)
    MergeFrom(*source);
  }
}

void InputFrameDownsync::MergeFrom(const InputFrameDownsync& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:shared.InputFrameDownsync)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  input_list_.MergeFrom(from.input_list_);
  if (from.confirmed_list() != 0) {
    set_confirmed_list(from.confirmed_list());
  }
  if (from.udp_confirmed_list() != 0) {
    set_udp_confirmed_list(from.udp_confirmed_list());
  }
  if (from.input_frame_id() != 0) {
    set_input_frame_id(from.input_frame_id());
  }
}

void InputFrameDownsync::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:shared.InputFrameDownsync)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InputFrameDownsync::CopyFrom(const InputFrameDownsync& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:shared.InputFrameDownsync)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InputFrameDownsync::IsInitialized() const {
  return true;
}

void InputFrameDownsync::Swap(InputFrameDownsync* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InputFrameDownsync::InternalSwap(InputFrameDownsync* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  input_list_.InternalSwap(&other->input_list_);
  swap(confirmed_list_, other->confirmed_list_);
  swap(udp_confirmed_list_, other->udp_confirmed_list_);
  swap(input_frame_id_, other->input_frame_id_);
}

::google::protobuf::Metadata InputFrameDownsync::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_serializable_5fdata_2eproto);
  return ::file_level_metadata_serializable_5fdata_2eproto[kIndexInFileMessages];
}


// ===================================================================

void WsReq::InitAsDefaultInstance() {
  ::shared::_WsReq_default_instance_._instance.get_mutable()->self_parsed_rdf_ = const_cast< ::shared::RenderFrame*>(
      ::shared::RenderFrame::internal_default_instance());
  ::shared::_WsReq_default_instance_._instance.get_mutable()->serialized_trap_local_id_to_collider_attrs_ = const_cast< ::shared::SerializedTrapLocalIdToColliderAttrs*>(
      ::shared::SerializedTrapLocalIdToColliderAttrs::internal_default_instance());
  ::shared::_WsReq_default_instance_._instance.get_mutable()->serialized_trigger_editor_id_to_local_id_ = const_cast< ::shared::SerializedTriggerEditorIdToLocalId*>(
      ::shared::SerializedTriggerEditorIdToLocalId::internal_default_instance());
}
class WsReq::HasBitSetters {
 public:
  static const ::shared::RenderFrame& self_parsed_rdf(const WsReq* msg);
  static const ::shared::SerializedTrapLocalIdToColliderAttrs& serialized_trap_local_id_to_collider_attrs(const WsReq* msg);
  static const ::shared::SerializedTriggerEditorIdToLocalId& serialized_trigger_editor_id_to_local_id(const WsReq* msg);
};

const ::shared::RenderFrame&
WsReq::HasBitSetters::self_parsed_rdf(const WsReq* msg) {
  return *msg->self_parsed_rdf_;
}
const ::shared::SerializedTrapLocalIdToColliderAttrs&
WsReq::HasBitSetters::serialized_trap_local_id_to_collider_attrs(const WsReq* msg) {
  return *msg->serialized_trap_local_id_to_collider_attrs_;
}
const ::shared::SerializedTriggerEditorIdToLocalId&
WsReq::HasBitSetters::serialized_trigger_editor_id_to_local_id(const WsReq* msg) {
  return *msg->serialized_trigger_editor_id_to_local_id_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WsReq::kPlayerIdFieldNumber;
const int WsReq::kActFieldNumber;
const int WsReq::kJoinIndexFieldNumber;
const int WsReq::kAckingFrameIdFieldNumber;
const int WsReq::kAckingInputFrameIdFieldNumber;
const int WsReq::kAuthKeyFieldNumber;
const int WsReq::kInputFrameUpsyncBatchFieldNumber;
const int WsReq::kSelfParsedRdfFieldNumber;
const int WsReq::kCollisionSpaceHalfWidthFieldNumber;
const int WsReq::kCollisionSpaceHalfHeightFieldNumber;
const int WsReq::kBattleDurationSecondsFieldNumber;
const int WsReq::kSerializedBarrierPolygonsFieldNumber;
const int WsReq::kSerializedStaticPatrolCuesFieldNumber;
const int WsReq::kSerializedCompletelyStaticTrapsFieldNumber;
const int WsReq::kSerializedStaticTriggersFieldNumber;
const int WsReq::kSerializedTrapLocalIdToColliderAttrsFieldNumber;
const int WsReq::kSerializedTriggerEditorIdToLocalIdFieldNumber;
const int WsReq::kSeqNoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WsReq::WsReq()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:shared.WsReq)
}
WsReq::WsReq(const WsReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      input_frame_upsync_batch_(from.input_frame_upsync_batch_),
      serialized_barrier_polygons_(from.serialized_barrier_polygons_),
      serialized_static_patrol_cues_(from.serialized_static_patrol_cues_),
      serialized_completely_static_traps_(from.serialized_completely_static_traps_),
      serialized_static_triggers_(from.serialized_static_triggers_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  player_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.player_id().size() > 0) {
    player_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.player_id_);
  }
  if (from.has_self_parsed_rdf()) {
    self_parsed_rdf_ = new ::shared::RenderFrame(*from.self_parsed_rdf_);
  } else {
    self_parsed_rdf_ = nullptr;
  }
  if (from.has_serialized_trap_local_id_to_collider_attrs()) {
    serialized_trap_local_id_to_collider_attrs_ = new ::shared::SerializedTrapLocalIdToColliderAttrs(*from.serialized_trap_local_id_to_collider_attrs_);
  } else {
    serialized_trap_local_id_to_collider_attrs_ = nullptr;
  }
  if (from.has_serialized_trigger_editor_id_to_local_id()) {
    serialized_trigger_editor_id_to_local_id_ = new ::shared::SerializedTriggerEditorIdToLocalId(*from.serialized_trigger_editor_id_to_local_id_);
  } else {
    serialized_trigger_editor_id_to_local_id_ = nullptr;
  }
  ::memcpy(&act_, &from.act_,
    static_cast<size_t>(reinterpret_cast<char*>(&seq_no_) -
    reinterpret_cast<char*>(&act_)) + sizeof(seq_no_));
  // @@protoc_insertion_point(copy_constructor:shared.WsReq)
}

void WsReq::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_WsReq_serializable_5fdata_2eproto.base);
  player_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&self_parsed_rdf_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&seq_no_) -
      reinterpret_cast<char*>(&self_parsed_rdf_)) + sizeof(seq_no_));
}

WsReq::~WsReq() {
  // @@protoc_insertion_point(destructor:shared.WsReq)
  SharedDtor();
}

void WsReq::SharedDtor() {
  player_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete self_parsed_rdf_;
  if (this != internal_default_instance()) delete serialized_trap_local_id_to_collider_attrs_;
  if (this != internal_default_instance()) delete serialized_trigger_editor_id_to_local_id_;
}

void WsReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WsReq& WsReq::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_WsReq_serializable_5fdata_2eproto.base);
  return *internal_default_instance();
}


void WsReq::Clear() {
// @@protoc_insertion_point(message_clear_start:shared.WsReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  input_frame_upsync_batch_.Clear();
  serialized_barrier_polygons_.Clear();
  serialized_static_patrol_cues_.Clear();
  serialized_completely_static_traps_.Clear();
  serialized_static_triggers_.Clear();
  player_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && self_parsed_rdf_ != nullptr) {
    delete self_parsed_rdf_;
  }
  self_parsed_rdf_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && serialized_trap_local_id_to_collider_attrs_ != nullptr) {
    delete serialized_trap_local_id_to_collider_attrs_;
  }
  serialized_trap_local_id_to_collider_attrs_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && serialized_trigger_editor_id_to_local_id_ != nullptr) {
    delete serialized_trigger_editor_id_to_local_id_;
  }
  serialized_trigger_editor_id_to_local_id_ = nullptr;
  ::memset(&act_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&seq_no_) -
      reinterpret_cast<char*>(&act_)) + sizeof(seq_no_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* WsReq::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<WsReq*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string player_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("shared.WsReq.player_id");
        object = msg->mutable_player_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // int32 act = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_act(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 join_index = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_join_index(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 acking_frame_id = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_acking_frame_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 acking_input_frame_id = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_acking_input_frame_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 auth_key = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_auth_key(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated .shared.InputFrameUpsync input_frame_upsync_batch = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 58) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::shared::InputFrameUpsync::_InternalParse;
          object = msg->add_input_frame_upsync_batch();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 58 && (ptr += 1));
        break;
      }
      // .shared.RenderFrame self_parsed_rdf = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 66) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::shared::RenderFrame::_InternalParse;
        object = msg->mutable_self_parsed_rdf();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // int32 collision_space_half_width = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 72) goto handle_unusual;
        msg->set_collision_space_half_width(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 collision_space_half_height = 10;
      case 10: {
        if (static_cast<::google::protobuf::uint8>(tag) != 80) goto handle_unusual;
        msg->set_collision_space_half_height(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 battle_duration_seconds = 11;
      case 11: {
        if (static_cast<::google::protobuf::uint8>(tag) != 88) goto handle_unusual;
        msg->set_battle_duration_seconds(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated .shared.SerializableConvexPolygon serialized_barrier_polygons = 12;
      case 12: {
        if (static_cast<::google::protobuf::uint8>(tag) != 98) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::shared::SerializableConvexPolygon::_InternalParse;
          object = msg->add_serialized_barrier_polygons();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 98 && (ptr += 1));
        break;
      }
      // repeated .shared.SerializedCompletelyStaticPatrolCueCollider serialized_static_patrol_cues = 13;
      case 13: {
        if (static_cast<::google::protobuf::uint8>(tag) != 106) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::shared::SerializedCompletelyStaticPatrolCueCollider::_InternalParse;
          object = msg->add_serialized_static_patrol_cues();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 106 && (ptr += 1));
        break;
      }
      // repeated .shared.SerializedCompletelyStaticTrapCollider serialized_completely_static_traps = 14;
      case 14: {
        if (static_cast<::google::protobuf::uint8>(tag) != 114) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::shared::SerializedCompletelyStaticTrapCollider::_InternalParse;
          object = msg->add_serialized_completely_static_traps();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 114 && (ptr += 1));
        break;
      }
      // repeated .shared.SerializedCompletelyStaticTriggerCollider serialized_static_triggers = 15;
      case 15: {
        if (static_cast<::google::protobuf::uint8>(tag) != 122) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::shared::SerializedCompletelyStaticTriggerCollider::_InternalParse;
          object = msg->add_serialized_static_triggers();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 122 && (ptr += 1));
        break;
      }
      // .shared.SerializedTrapLocalIdToColliderAttrs serialized_trap_local_id_to_collider_attrs = 16;
      case 16: {
        if (static_cast<::google::protobuf::uint8>(tag) != 130) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::shared::SerializedTrapLocalIdToColliderAttrs::_InternalParse;
        object = msg->mutable_serialized_trap_local_id_to_collider_attrs();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .shared.SerializedTriggerEditorIdToLocalId serialized_trigger_editor_id_to_local_id = 18;
      case 18: {
        if (static_cast<::google::protobuf::uint8>(tag) != 146) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::shared::SerializedTriggerEditorIdToLocalId::_InternalParse;
        object = msg->mutable_serialized_trigger_editor_id_to_local_id();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // uint32 seq_no = 19;
      case 19: {
        if (static_cast<::google::protobuf::uint8>(tag) != 152) goto handle_unusual;
        msg->set_seq_no(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool WsReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:shared.WsReq)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string player_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_player_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->player_id().data(), static_cast<int>(this->player_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "shared.WsReq.player_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 act = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &act_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 join_index = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &join_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 acking_frame_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &acking_frame_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 acking_input_frame_id = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &acking_input_frame_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 auth_key = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &auth_key_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .shared.InputFrameUpsync input_frame_upsync_batch = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (58 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_input_frame_upsync_batch()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .shared.RenderFrame self_parsed_rdf = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (66 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_self_parsed_rdf()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 collision_space_half_width = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (72 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &collision_space_half_width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 collision_space_half_height = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (80 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &collision_space_half_height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 battle_duration_seconds = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (88 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &battle_duration_seconds_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .shared.SerializableConvexPolygon serialized_barrier_polygons = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (98 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_serialized_barrier_polygons()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .shared.SerializedCompletelyStaticPatrolCueCollider serialized_static_patrol_cues = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (106 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_serialized_static_patrol_cues()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .shared.SerializedCompletelyStaticTrapCollider serialized_completely_static_traps = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (114 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_serialized_completely_static_traps()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .shared.SerializedCompletelyStaticTriggerCollider serialized_static_triggers = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (122 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_serialized_static_triggers()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .shared.SerializedTrapLocalIdToColliderAttrs serialized_trap_local_id_to_collider_attrs = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (130 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_serialized_trap_local_id_to_collider_attrs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .shared.SerializedTriggerEditorIdToLocalId serialized_trigger_editor_id_to_local_id = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (146 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_serialized_trigger_editor_id_to_local_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 seq_no = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (152 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seq_no_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:shared.WsReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:shared.WsReq)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void WsReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:shared.WsReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string player_id = 1;
  if (this->player_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->player_id().data(), static_cast<int>(this->player_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "shared.WsReq.player_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->player_id(), output);
  }

  // int32 act = 2;
  if (this->act() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->act(), output);
  }

  // int32 join_index = 3;
  if (this->join_index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->join_index(), output);
  }

  // int32 acking_frame_id = 4;
  if (this->acking_frame_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->acking_frame_id(), output);
  }

  // int32 acking_input_frame_id = 5;
  if (this->acking_input_frame_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->acking_input_frame_id(), output);
  }

  // int32 auth_key = 6;
  if (this->auth_key() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->auth_key(), output);
  }

  // repeated .shared.InputFrameUpsync input_frame_upsync_batch = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->input_frame_upsync_batch_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7,
      this->input_frame_upsync_batch(static_cast<int>(i)),
      output);
  }

  // .shared.RenderFrame self_parsed_rdf = 8;
  if (this->has_self_parsed_rdf()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, HasBitSetters::self_parsed_rdf(this), output);
  }

  // int32 collision_space_half_width = 9;
  if (this->collision_space_half_width() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->collision_space_half_width(), output);
  }

  // int32 collision_space_half_height = 10;
  if (this->collision_space_half_height() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->collision_space_half_height(), output);
  }

  // int32 battle_duration_seconds = 11;
  if (this->battle_duration_seconds() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->battle_duration_seconds(), output);
  }

  // repeated .shared.SerializableConvexPolygon serialized_barrier_polygons = 12;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->serialized_barrier_polygons_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12,
      this->serialized_barrier_polygons(static_cast<int>(i)),
      output);
  }

  // repeated .shared.SerializedCompletelyStaticPatrolCueCollider serialized_static_patrol_cues = 13;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->serialized_static_patrol_cues_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13,
      this->serialized_static_patrol_cues(static_cast<int>(i)),
      output);
  }

  // repeated .shared.SerializedCompletelyStaticTrapCollider serialized_completely_static_traps = 14;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->serialized_completely_static_traps_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14,
      this->serialized_completely_static_traps(static_cast<int>(i)),
      output);
  }

  // repeated .shared.SerializedCompletelyStaticTriggerCollider serialized_static_triggers = 15;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->serialized_static_triggers_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15,
      this->serialized_static_triggers(static_cast<int>(i)),
      output);
  }

  // .shared.SerializedTrapLocalIdToColliderAttrs serialized_trap_local_id_to_collider_attrs = 16;
  if (this->has_serialized_trap_local_id_to_collider_attrs()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, HasBitSetters::serialized_trap_local_id_to_collider_attrs(this), output);
  }

  // .shared.SerializedTriggerEditorIdToLocalId serialized_trigger_editor_id_to_local_id = 18;
  if (this->has_serialized_trigger_editor_id_to_local_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, HasBitSetters::serialized_trigger_editor_id_to_local_id(this), output);
  }

  // uint32 seq_no = 19;
  if (this->seq_no() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->seq_no(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:shared.WsReq)
}

::google::protobuf::uint8* WsReq::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:shared.WsReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string player_id = 1;
  if (this->player_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->player_id().data(), static_cast<int>(this->player_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "shared.WsReq.player_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->player_id(), target);
  }

  // int32 act = 2;
  if (this->act() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->act(), target);
  }

  // int32 join_index = 3;
  if (this->join_index() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->join_index(), target);
  }

  // int32 acking_frame_id = 4;
  if (this->acking_frame_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->acking_frame_id(), target);
  }

  // int32 acking_input_frame_id = 5;
  if (this->acking_input_frame_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->acking_input_frame_id(), target);
  }

  // int32 auth_key = 6;
  if (this->auth_key() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->auth_key(), target);
  }

  // repeated .shared.InputFrameUpsync input_frame_upsync_batch = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->input_frame_upsync_batch_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->input_frame_upsync_batch(static_cast<int>(i)), target);
  }

  // .shared.RenderFrame self_parsed_rdf = 8;
  if (this->has_self_parsed_rdf()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, HasBitSetters::self_parsed_rdf(this), target);
  }

  // int32 collision_space_half_width = 9;
  if (this->collision_space_half_width() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->collision_space_half_width(), target);
  }

  // int32 collision_space_half_height = 10;
  if (this->collision_space_half_height() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->collision_space_half_height(), target);
  }

  // int32 battle_duration_seconds = 11;
  if (this->battle_duration_seconds() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->battle_duration_seconds(), target);
  }

  // repeated .shared.SerializableConvexPolygon serialized_barrier_polygons = 12;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->serialized_barrier_polygons_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        12, this->serialized_barrier_polygons(static_cast<int>(i)), target);
  }

  // repeated .shared.SerializedCompletelyStaticPatrolCueCollider serialized_static_patrol_cues = 13;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->serialized_static_patrol_cues_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        13, this->serialized_static_patrol_cues(static_cast<int>(i)), target);
  }

  // repeated .shared.SerializedCompletelyStaticTrapCollider serialized_completely_static_traps = 14;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->serialized_completely_static_traps_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        14, this->serialized_completely_static_traps(static_cast<int>(i)), target);
  }

  // repeated .shared.SerializedCompletelyStaticTriggerCollider serialized_static_triggers = 15;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->serialized_static_triggers_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        15, this->serialized_static_triggers(static_cast<int>(i)), target);
  }

  // .shared.SerializedTrapLocalIdToColliderAttrs serialized_trap_local_id_to_collider_attrs = 16;
  if (this->has_serialized_trap_local_id_to_collider_attrs()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        16, HasBitSetters::serialized_trap_local_id_to_collider_attrs(this), target);
  }

  // .shared.SerializedTriggerEditorIdToLocalId serialized_trigger_editor_id_to_local_id = 18;
  if (this->has_serialized_trigger_editor_id_to_local_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        18, HasBitSetters::serialized_trigger_editor_id_to_local_id(this), target);
  }

  // uint32 seq_no = 19;
  if (this->seq_no() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(19, this->seq_no(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:shared.WsReq)
  return target;
}

size_t WsReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:shared.WsReq)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .shared.InputFrameUpsync input_frame_upsync_batch = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->input_frame_upsync_batch_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->input_frame_upsync_batch(static_cast<int>(i)));
    }
  }

  // repeated .shared.SerializableConvexPolygon serialized_barrier_polygons = 12;
  {
    unsigned int count = static_cast<unsigned int>(this->serialized_barrier_polygons_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->serialized_barrier_polygons(static_cast<int>(i)));
    }
  }

  // repeated .shared.SerializedCompletelyStaticPatrolCueCollider serialized_static_patrol_cues = 13;
  {
    unsigned int count = static_cast<unsigned int>(this->serialized_static_patrol_cues_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->serialized_static_patrol_cues(static_cast<int>(i)));
    }
  }

  // repeated .shared.SerializedCompletelyStaticTrapCollider serialized_completely_static_traps = 14;
  {
    unsigned int count = static_cast<unsigned int>(this->serialized_completely_static_traps_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->serialized_completely_static_traps(static_cast<int>(i)));
    }
  }

  // repeated .shared.SerializedCompletelyStaticTriggerCollider serialized_static_triggers = 15;
  {
    unsigned int count = static_cast<unsigned int>(this->serialized_static_triggers_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->serialized_static_triggers(static_cast<int>(i)));
    }
  }

  // string player_id = 1;
  if (this->player_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->player_id());
  }

  // .shared.RenderFrame self_parsed_rdf = 8;
  if (this->has_self_parsed_rdf()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *self_parsed_rdf_);
  }

  // .shared.SerializedTrapLocalIdToColliderAttrs serialized_trap_local_id_to_collider_attrs = 16;
  if (this->has_serialized_trap_local_id_to_collider_attrs()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *serialized_trap_local_id_to_collider_attrs_);
  }

  // .shared.SerializedTriggerEditorIdToLocalId serialized_trigger_editor_id_to_local_id = 18;
  if (this->has_serialized_trigger_editor_id_to_local_id()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *serialized_trigger_editor_id_to_local_id_);
  }

  // int32 act = 2;
  if (this->act() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->act());
  }

  // int32 join_index = 3;
  if (this->join_index() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->join_index());
  }

  // int32 acking_frame_id = 4;
  if (this->acking_frame_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->acking_frame_id());
  }

  // int32 acking_input_frame_id = 5;
  if (this->acking_input_frame_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->acking_input_frame_id());
  }

  // int32 auth_key = 6;
  if (this->auth_key() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->auth_key());
  }

  // int32 collision_space_half_width = 9;
  if (this->collision_space_half_width() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->collision_space_half_width());
  }

  // int32 collision_space_half_height = 10;
  if (this->collision_space_half_height() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->collision_space_half_height());
  }

  // int32 battle_duration_seconds = 11;
  if (this->battle_duration_seconds() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->battle_duration_seconds());
  }

  // uint32 seq_no = 19;
  if (this->seq_no() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->seq_no());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WsReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:shared.WsReq)
  GOOGLE_DCHECK_NE(&from, this);
  const WsReq* source =
      ::google::protobuf::DynamicCastToGenerated<WsReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:shared.WsReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:shared.WsReq)
    MergeFrom(*source);
  }
}

void WsReq::MergeFrom(const WsReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:shared.WsReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  input_frame_upsync_batch_.MergeFrom(from.input_frame_upsync_batch_);
  serialized_barrier_polygons_.MergeFrom(from.serialized_barrier_polygons_);
  serialized_static_patrol_cues_.MergeFrom(from.serialized_static_patrol_cues_);
  serialized_completely_static_traps_.MergeFrom(from.serialized_completely_static_traps_);
  serialized_static_triggers_.MergeFrom(from.serialized_static_triggers_);
  if (from.player_id().size() > 0) {

    player_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.player_id_);
  }
  if (from.has_self_parsed_rdf()) {
    mutable_self_parsed_rdf()->::shared::RenderFrame::MergeFrom(from.self_parsed_rdf());
  }
  if (from.has_serialized_trap_local_id_to_collider_attrs()) {
    mutable_serialized_trap_local_id_to_collider_attrs()->::shared::SerializedTrapLocalIdToColliderAttrs::MergeFrom(from.serialized_trap_local_id_to_collider_attrs());
  }
  if (from.has_serialized_trigger_editor_id_to_local_id()) {
    mutable_serialized_trigger_editor_id_to_local_id()->::shared::SerializedTriggerEditorIdToLocalId::MergeFrom(from.serialized_trigger_editor_id_to_local_id());
  }
  if (from.act() != 0) {
    set_act(from.act());
  }
  if (from.join_index() != 0) {
    set_join_index(from.join_index());
  }
  if (from.acking_frame_id() != 0) {
    set_acking_frame_id(from.acking_frame_id());
  }
  if (from.acking_input_frame_id() != 0) {
    set_acking_input_frame_id(from.acking_input_frame_id());
  }
  if (from.auth_key() != 0) {
    set_auth_key(from.auth_key());
  }
  if (from.collision_space_half_width() != 0) {
    set_collision_space_half_width(from.collision_space_half_width());
  }
  if (from.collision_space_half_height() != 0) {
    set_collision_space_half_height(from.collision_space_half_height());
  }
  if (from.battle_duration_seconds() != 0) {
    set_battle_duration_seconds(from.battle_duration_seconds());
  }
  if (from.seq_no() != 0) {
    set_seq_no(from.seq_no());
  }
}

void WsReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:shared.WsReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WsReq::CopyFrom(const WsReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:shared.WsReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WsReq::IsInitialized() const {
  return true;
}

void WsReq::Swap(WsReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WsReq::InternalSwap(WsReq* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&input_frame_upsync_batch_)->InternalSwap(CastToBase(&other->input_frame_upsync_batch_));
  CastToBase(&serialized_barrier_polygons_)->InternalSwap(CastToBase(&other->serialized_barrier_polygons_));
  CastToBase(&serialized_static_patrol_cues_)->InternalSwap(CastToBase(&other->serialized_static_patrol_cues_));
  CastToBase(&serialized_completely_static_traps_)->InternalSwap(CastToBase(&other->serialized_completely_static_traps_));
  CastToBase(&serialized_static_triggers_)->InternalSwap(CastToBase(&other->serialized_static_triggers_));
  player_id_.Swap(&other->player_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(self_parsed_rdf_, other->self_parsed_rdf_);
  swap(serialized_trap_local_id_to_collider_attrs_, other->serialized_trap_local_id_to_collider_attrs_);
  swap(serialized_trigger_editor_id_to_local_id_, other->serialized_trigger_editor_id_to_local_id_);
  swap(act_, other->act_);
  swap(join_index_, other->join_index_);
  swap(acking_frame_id_, other->acking_frame_id_);
  swap(acking_input_frame_id_, other->acking_input_frame_id_);
  swap(auth_key_, other->auth_key_);
  swap(collision_space_half_width_, other->collision_space_half_width_);
  swap(collision_space_half_height_, other->collision_space_half_height_);
  swap(battle_duration_seconds_, other->battle_duration_seconds_);
  swap(seq_no_, other->seq_no_);
}

::google::protobuf::Metadata WsReq::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_serializable_5fdata_2eproto);
  return ::file_level_metadata_serializable_5fdata_2eproto[kIndexInFileMessages];
}


// ===================================================================

void InputBufferSnapshot::InitAsDefaultInstance() {
}
class InputBufferSnapshot::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InputBufferSnapshot::kRefRenderFrameIdFieldNumber;
const int InputBufferSnapshot::kUnconfirmedMaskFieldNumber;
const int InputBufferSnapshot::kToSendInputFrameDownsyncsFieldNumber;
const int InputBufferSnapshot::kShouldForceResyncFieldNumber;
const int InputBufferSnapshot::kPeerJoinIndexFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InputBufferSnapshot::InputBufferSnapshot()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:shared.InputBufferSnapshot)
}
InputBufferSnapshot::InputBufferSnapshot(const InputBufferSnapshot& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      to_send_input_frame_downsyncs_(from.to_send_input_frame_downsyncs_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&unconfirmed_mask_, &from.unconfirmed_mask_,
    static_cast<size_t>(reinterpret_cast<char*>(&peer_join_index_) -
    reinterpret_cast<char*>(&unconfirmed_mask_)) + sizeof(peer_join_index_));
  // @@protoc_insertion_point(copy_constructor:shared.InputBufferSnapshot)
}

void InputBufferSnapshot::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_InputBufferSnapshot_serializable_5fdata_2eproto.base);
  ::memset(&unconfirmed_mask_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&peer_join_index_) -
      reinterpret_cast<char*>(&unconfirmed_mask_)) + sizeof(peer_join_index_));
}

InputBufferSnapshot::~InputBufferSnapshot() {
  // @@protoc_insertion_point(destructor:shared.InputBufferSnapshot)
  SharedDtor();
}

void InputBufferSnapshot::SharedDtor() {
}

void InputBufferSnapshot::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InputBufferSnapshot& InputBufferSnapshot::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_InputBufferSnapshot_serializable_5fdata_2eproto.base);
  return *internal_default_instance();
}


void InputBufferSnapshot::Clear() {
// @@protoc_insertion_point(message_clear_start:shared.InputBufferSnapshot)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  to_send_input_frame_downsyncs_.Clear();
  ::memset(&unconfirmed_mask_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&peer_join_index_) -
      reinterpret_cast<char*>(&unconfirmed_mask_)) + sizeof(peer_join_index_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* InputBufferSnapshot::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<InputBufferSnapshot*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int32 ref_render_frame_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_ref_render_frame_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // uint64 unconfirmed_mask = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_unconfirmed_mask(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated .shared.InputFrameDownsync to_send_input_frame_downsyncs = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::shared::InputFrameDownsync::_InternalParse;
          object = msg->add_to_send_input_frame_downsyncs();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 26 && (ptr += 1));
        break;
      }
      // bool should_force_resync = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_should_force_resync(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 peer_join_index = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_peer_join_index(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool InputBufferSnapshot::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:shared.InputBufferSnapshot)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 ref_render_frame_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ref_render_frame_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 unconfirmed_mask = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &unconfirmed_mask_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .shared.InputFrameDownsync to_send_input_frame_downsyncs = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_to_send_input_frame_downsyncs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool should_force_resync = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &should_force_resync_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 peer_join_index = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &peer_join_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:shared.InputBufferSnapshot)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:shared.InputBufferSnapshot)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void InputBufferSnapshot::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:shared.InputBufferSnapshot)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 ref_render_frame_id = 1;
  if (this->ref_render_frame_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ref_render_frame_id(), output);
  }

  // uint64 unconfirmed_mask = 2;
  if (this->unconfirmed_mask() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->unconfirmed_mask(), output);
  }

  // repeated .shared.InputFrameDownsync to_send_input_frame_downsyncs = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->to_send_input_frame_downsyncs_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->to_send_input_frame_downsyncs(static_cast<int>(i)),
      output);
  }

  // bool should_force_resync = 4;
  if (this->should_force_resync() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->should_force_resync(), output);
  }

  // int32 peer_join_index = 5;
  if (this->peer_join_index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->peer_join_index(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:shared.InputBufferSnapshot)
}

::google::protobuf::uint8* InputBufferSnapshot::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:shared.InputBufferSnapshot)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 ref_render_frame_id = 1;
  if (this->ref_render_frame_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ref_render_frame_id(), target);
  }

  // uint64 unconfirmed_mask = 2;
  if (this->unconfirmed_mask() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->unconfirmed_mask(), target);
  }

  // repeated .shared.InputFrameDownsync to_send_input_frame_downsyncs = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->to_send_input_frame_downsyncs_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->to_send_input_frame_downsyncs(static_cast<int>(i)), target);
  }

  // bool should_force_resync = 4;
  if (this->should_force_resync() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->should_force_resync(), target);
  }

  // int32 peer_join_index = 5;
  if (this->peer_join_index() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->peer_join_index(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:shared.InputBufferSnapshot)
  return target;
}

size_t InputBufferSnapshot::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:shared.InputBufferSnapshot)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .shared.InputFrameDownsync to_send_input_frame_downsyncs = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->to_send_input_frame_downsyncs_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->to_send_input_frame_downsyncs(static_cast<int>(i)));
    }
  }

  // uint64 unconfirmed_mask = 2;
  if (this->unconfirmed_mask() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->unconfirmed_mask());
  }

  // int32 ref_render_frame_id = 1;
  if (this->ref_render_frame_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->ref_render_frame_id());
  }

  // bool should_force_resync = 4;
  if (this->should_force_resync() != 0) {
    total_size += 1 + 1;
  }

  // int32 peer_join_index = 5;
  if (this->peer_join_index() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->peer_join_index());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InputBufferSnapshot::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:shared.InputBufferSnapshot)
  GOOGLE_DCHECK_NE(&from, this);
  const InputBufferSnapshot* source =
      ::google::protobuf::DynamicCastToGenerated<InputBufferSnapshot>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:shared.InputBufferSnapshot)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:shared.InputBufferSnapshot)
    MergeFrom(*source);
  }
}

void InputBufferSnapshot::MergeFrom(const InputBufferSnapshot& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:shared.InputBufferSnapshot)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  to_send_input_frame_downsyncs_.MergeFrom(from.to_send_input_frame_downsyncs_);
  if (from.unconfirmed_mask() != 0) {
    set_unconfirmed_mask(from.unconfirmed_mask());
  }
  if (from.ref_render_frame_id() != 0) {
    set_ref_render_frame_id(from.ref_render_frame_id());
  }
  if (from.should_force_resync() != 0) {
    set_should_force_resync(from.should_force_resync());
  }
  if (from.peer_join_index() != 0) {
    set_peer_join_index(from.peer_join_index());
  }
}

void InputBufferSnapshot::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:shared.InputBufferSnapshot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InputBufferSnapshot::CopyFrom(const InputBufferSnapshot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:shared.InputBufferSnapshot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InputBufferSnapshot::IsInitialized() const {
  return true;
}

void InputBufferSnapshot::Swap(InputBufferSnapshot* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InputBufferSnapshot::InternalSwap(InputBufferSnapshot* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&to_send_input_frame_downsyncs_)->InternalSwap(CastToBase(&other->to_send_input_frame_downsyncs_));
  swap(unconfirmed_mask_, other->unconfirmed_mask_);
  swap(ref_render_frame_id_, other->ref_render_frame_id_);
  swap(should_force_resync_, other->should_force_resync_);
  swap(peer_join_index_, other->peer_join_index_);
}

::google::protobuf::Metadata InputBufferSnapshot::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_serializable_5fdata_2eproto);
  return ::file_level_metadata_serializable_5fdata_2eproto[kIndexInFileMessages];
}


// ===================================================================

void PatrolCue::InitAsDefaultInstance() {
}
class PatrolCue::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PatrolCue::kIdFieldNumber;
const int PatrolCue::kFlActFieldNumber;
const int PatrolCue::kFrActFieldNumber;
const int PatrolCue::kFlCaptureFramesFieldNumber;
const int PatrolCue::kFrCaptureFramesFieldNumber;
const int PatrolCue::kFdActFieldNumber;
const int PatrolCue::kFuActFieldNumber;
const int PatrolCue::kFdCaptureFramesFieldNumber;
const int PatrolCue::kFuCaptureFramesFieldNumber;
const int PatrolCue::kCollisionTypeMaskFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PatrolCue::PatrolCue()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:shared.PatrolCue)
}
PatrolCue::PatrolCue(const PatrolCue& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&fl_act_, &from.fl_act_,
    static_cast<size_t>(reinterpret_cast<char*>(&collision_type_mask_) -
    reinterpret_cast<char*>(&fl_act_)) + sizeof(collision_type_mask_));
  // @@protoc_insertion_point(copy_constructor:shared.PatrolCue)
}

void PatrolCue::SharedCtor() {
  ::memset(&fl_act_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&collision_type_mask_) -
      reinterpret_cast<char*>(&fl_act_)) + sizeof(collision_type_mask_));
}

PatrolCue::~PatrolCue() {
  // @@protoc_insertion_point(destructor:shared.PatrolCue)
  SharedDtor();
}

void PatrolCue::SharedDtor() {
}

void PatrolCue::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PatrolCue& PatrolCue::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_PatrolCue_serializable_5fdata_2eproto.base);
  return *internal_default_instance();
}


void PatrolCue::Clear() {
// @@protoc_insertion_point(message_clear_start:shared.PatrolCue)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&fl_act_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&collision_type_mask_) -
      reinterpret_cast<char*>(&fl_act_)) + sizeof(collision_type_mask_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PatrolCue::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<PatrolCue*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // uint64 fl_act = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_fl_act(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // uint64 fr_act = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_fr_act(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 fl_capture_frames = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_fl_capture_frames(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 fr_capture_frames = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_fr_capture_frames(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // uint64 fd_act = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_fd_act(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // uint64 fu_act = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        msg->set_fu_act(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 fd_capture_frames = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 64) goto handle_unusual;
        msg->set_fd_capture_frames(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 fu_capture_frames = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 72) goto handle_unusual;
        msg->set_fu_capture_frames(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // uint64 collision_type_mask = 1029;
      case 1029: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_collision_type_mask(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PatrolCue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:shared.PatrolCue)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 fl_act = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &fl_act_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 fr_act = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &fr_act_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 fl_capture_frames = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fl_capture_frames_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 fr_capture_frames = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fr_capture_frames_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 fd_act = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &fd_act_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 fu_act = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (56 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &fu_act_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 fd_capture_frames = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (64 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fd_capture_frames_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 fu_capture_frames = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (72 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fu_capture_frames_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 collision_type_mask = 1029;
      case 1029: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8232 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &collision_type_mask_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:shared.PatrolCue)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:shared.PatrolCue)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PatrolCue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:shared.PatrolCue)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // uint64 fl_act = 2;
  if (this->fl_act() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->fl_act(), output);
  }

  // uint64 fr_act = 3;
  if (this->fr_act() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->fr_act(), output);
  }

  // int32 fl_capture_frames = 4;
  if (this->fl_capture_frames() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->fl_capture_frames(), output);
  }

  // int32 fr_capture_frames = 5;
  if (this->fr_capture_frames() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->fr_capture_frames(), output);
  }

  // uint64 fd_act = 6;
  if (this->fd_act() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->fd_act(), output);
  }

  // uint64 fu_act = 7;
  if (this->fu_act() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->fu_act(), output);
  }

  // int32 fd_capture_frames = 8;
  if (this->fd_capture_frames() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->fd_capture_frames(), output);
  }

  // int32 fu_capture_frames = 9;
  if (this->fu_capture_frames() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->fu_capture_frames(), output);
  }

  // uint64 collision_type_mask = 1029;
  if (this->collision_type_mask() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1029, this->collision_type_mask(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:shared.PatrolCue)
}

::google::protobuf::uint8* PatrolCue::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:shared.PatrolCue)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // uint64 fl_act = 2;
  if (this->fl_act() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->fl_act(), target);
  }

  // uint64 fr_act = 3;
  if (this->fr_act() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->fr_act(), target);
  }

  // int32 fl_capture_frames = 4;
  if (this->fl_capture_frames() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->fl_capture_frames(), target);
  }

  // int32 fr_capture_frames = 5;
  if (this->fr_capture_frames() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->fr_capture_frames(), target);
  }

  // uint64 fd_act = 6;
  if (this->fd_act() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->fd_act(), target);
  }

  // uint64 fu_act = 7;
  if (this->fu_act() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->fu_act(), target);
  }

  // int32 fd_capture_frames = 8;
  if (this->fd_capture_frames() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->fd_capture_frames(), target);
  }

  // int32 fu_capture_frames = 9;
  if (this->fu_capture_frames() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->fu_capture_frames(), target);
  }

  // uint64 collision_type_mask = 1029;
  if (this->collision_type_mask() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1029, this->collision_type_mask(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:shared.PatrolCue)
  return target;
}

size_t PatrolCue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:shared.PatrolCue)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 fl_act = 2;
  if (this->fl_act() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->fl_act());
  }

  // int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  // int32 fl_capture_frames = 4;
  if (this->fl_capture_frames() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->fl_capture_frames());
  }

  // uint64 fr_act = 3;
  if (this->fr_act() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->fr_act());
  }

  // uint64 fd_act = 6;
  if (this->fd_act() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->fd_act());
  }

  // int32 fr_capture_frames = 5;
  if (this->fr_capture_frames() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->fr_capture_frames());
  }

  // int32 fd_capture_frames = 8;
  if (this->fd_capture_frames() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->fd_capture_frames());
  }

  // uint64 fu_act = 7;
  if (this->fu_act() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->fu_act());
  }

  // int32 fu_capture_frames = 9;
  if (this->fu_capture_frames() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->fu_capture_frames());
  }

  // uint64 collision_type_mask = 1029;
  if (this->collision_type_mask() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->collision_type_mask());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PatrolCue::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:shared.PatrolCue)
  GOOGLE_DCHECK_NE(&from, this);
  const PatrolCue* source =
      ::google::protobuf::DynamicCastToGenerated<PatrolCue>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:shared.PatrolCue)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:shared.PatrolCue)
    MergeFrom(*source);
  }
}

void PatrolCue::MergeFrom(const PatrolCue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:shared.PatrolCue)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.fl_act() != 0) {
    set_fl_act(from.fl_act());
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.fl_capture_frames() != 0) {
    set_fl_capture_frames(from.fl_capture_frames());
  }
  if (from.fr_act() != 0) {
    set_fr_act(from.fr_act());
  }
  if (from.fd_act() != 0) {
    set_fd_act(from.fd_act());
  }
  if (from.fr_capture_frames() != 0) {
    set_fr_capture_frames(from.fr_capture_frames());
  }
  if (from.fd_capture_frames() != 0) {
    set_fd_capture_frames(from.fd_capture_frames());
  }
  if (from.fu_act() != 0) {
    set_fu_act(from.fu_act());
  }
  if (from.fu_capture_frames() != 0) {
    set_fu_capture_frames(from.fu_capture_frames());
  }
  if (from.collision_type_mask() != 0) {
    set_collision_type_mask(from.collision_type_mask());
  }
}

void PatrolCue::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:shared.PatrolCue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PatrolCue::CopyFrom(const PatrolCue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:shared.PatrolCue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PatrolCue::IsInitialized() const {
  return true;
}

void PatrolCue::Swap(PatrolCue* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PatrolCue::InternalSwap(PatrolCue* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(fl_act_, other->fl_act_);
  swap(id_, other->id_);
  swap(fl_capture_frames_, other->fl_capture_frames_);
  swap(fr_act_, other->fr_act_);
  swap(fd_act_, other->fd_act_);
  swap(fr_capture_frames_, other->fr_capture_frames_);
  swap(fd_capture_frames_, other->fd_capture_frames_);
  swap(fu_act_, other->fu_act_);
  swap(fu_capture_frames_, other->fu_capture_frames_);
  swap(collision_type_mask_, other->collision_type_mask_);
}

::google::protobuf::Metadata PatrolCue::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_serializable_5fdata_2eproto);
  return ::file_level_metadata_serializable_5fdata_2eproto[kIndexInFileMessages];
}


// ===================================================================

void VfxConfig::InitAsDefaultInstance() {
}
class VfxConfig::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VfxConfig::kSpeciesIdFieldNumber;
const int VfxConfig::kMotionTypeFieldNumber;
const int VfxConfig::kDurationTypeFieldNumber;
const int VfxConfig::kOnCharacterFieldNumber;
const int VfxConfig::kOnBulletFieldNumber;
const int VfxConfig::kOnTrapFieldNumber;
const int VfxConfig::kUsePixelatedVerFieldNumber;
const int VfxConfig::kNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VfxConfig::VfxConfig()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:shared.VfxConfig)
}
VfxConfig::VfxConfig(const VfxConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&species_id_, &from.species_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&use_pixelated_ver_) -
    reinterpret_cast<char*>(&species_id_)) + sizeof(use_pixelated_ver_));
  // @@protoc_insertion_point(copy_constructor:shared.VfxConfig)
}

void VfxConfig::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_VfxConfig_serializable_5fdata_2eproto.base);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&species_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&use_pixelated_ver_) -
      reinterpret_cast<char*>(&species_id_)) + sizeof(use_pixelated_ver_));
}

VfxConfig::~VfxConfig() {
  // @@protoc_insertion_point(destructor:shared.VfxConfig)
  SharedDtor();
}

void VfxConfig::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void VfxConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VfxConfig& VfxConfig::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_VfxConfig_serializable_5fdata_2eproto.base);
  return *internal_default_instance();
}


void VfxConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:shared.VfxConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&species_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&use_pixelated_ver_) -
      reinterpret_cast<char*>(&species_id_)) + sizeof(use_pixelated_ver_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* VfxConfig::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<VfxConfig*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int32 species_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_species_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // .shared.VfxMotionType motion_type = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_motion_type(static_cast<::shared::VfxMotionType>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // .shared.VfxDurationType duration_type = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_duration_type(static_cast<::shared::VfxDurationType>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // bool on_character = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_on_character(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // bool on_bullet = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_on_bullet(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // bool on_trap = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_on_trap(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // bool use_pixelated_ver = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        msg->set_use_pixelated_ver(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string name = 1024;
      case 1024: {
        if (static_cast<::google::protobuf::uint8>(tag) != 2) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("shared.VfxConfig.name");
        object = msg->mutable_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool VfxConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:shared.VfxConfig)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 species_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &species_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .shared.VfxMotionType motion_type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_motion_type(static_cast< ::shared::VfxMotionType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .shared.VfxDurationType duration_type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_duration_type(static_cast< ::shared::VfxDurationType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool on_character = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &on_character_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool on_bullet = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &on_bullet_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool on_trap = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &on_trap_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool use_pixelated_ver = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (56 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_pixelated_ver_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string name = 1024;
      case 1024: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8194 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "shared.VfxConfig.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:shared.VfxConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:shared.VfxConfig)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void VfxConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:shared.VfxConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 species_id = 1;
  if (this->species_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->species_id(), output);
  }

  // .shared.VfxMotionType motion_type = 2;
  if (this->motion_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->motion_type(), output);
  }

  // .shared.VfxDurationType duration_type = 3;
  if (this->duration_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->duration_type(), output);
  }

  // bool on_character = 4;
  if (this->on_character() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->on_character(), output);
  }

  // bool on_bullet = 5;
  if (this->on_bullet() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->on_bullet(), output);
  }

  // bool on_trap = 6;
  if (this->on_trap() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->on_trap(), output);
  }

  // bool use_pixelated_ver = 7;
  if (this->use_pixelated_ver() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->use_pixelated_ver(), output);
  }

  // string name = 1024;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "shared.VfxConfig.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1024, this->name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:shared.VfxConfig)
}

::google::protobuf::uint8* VfxConfig::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:shared.VfxConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 species_id = 1;
  if (this->species_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->species_id(), target);
  }

  // .shared.VfxMotionType motion_type = 2;
  if (this->motion_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->motion_type(), target);
  }

  // .shared.VfxDurationType duration_type = 3;
  if (this->duration_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->duration_type(), target);
  }

  // bool on_character = 4;
  if (this->on_character() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->on_character(), target);
  }

  // bool on_bullet = 5;
  if (this->on_bullet() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->on_bullet(), target);
  }

  // bool on_trap = 6;
  if (this->on_trap() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->on_trap(), target);
  }

  // bool use_pixelated_ver = 7;
  if (this->use_pixelated_ver() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->use_pixelated_ver(), target);
  }

  // string name = 1024;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "shared.VfxConfig.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1024, this->name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:shared.VfxConfig)
  return target;
}

size_t VfxConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:shared.VfxConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1024;
  if (this->name().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // int32 species_id = 1;
  if (this->species_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->species_id());
  }

  // .shared.VfxMotionType motion_type = 2;
  if (this->motion_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->motion_type());
  }

  // .shared.VfxDurationType duration_type = 3;
  if (this->duration_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->duration_type());
  }

  // bool on_character = 4;
  if (this->on_character() != 0) {
    total_size += 1 + 1;
  }

  // bool on_bullet = 5;
  if (this->on_bullet() != 0) {
    total_size += 1 + 1;
  }

  // bool on_trap = 6;
  if (this->on_trap() != 0) {
    total_size += 1 + 1;
  }

  // bool use_pixelated_ver = 7;
  if (this->use_pixelated_ver() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VfxConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:shared.VfxConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const VfxConfig* source =
      ::google::protobuf::DynamicCastToGenerated<VfxConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:shared.VfxConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:shared.VfxConfig)
    MergeFrom(*source);
  }
}

void VfxConfig::MergeFrom(const VfxConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:shared.VfxConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.species_id() != 0) {
    set_species_id(from.species_id());
  }
  if (from.motion_type() != 0) {
    set_motion_type(from.motion_type());
  }
  if (from.duration_type() != 0) {
    set_duration_type(from.duration_type());
  }
  if (from.on_character() != 0) {
    set_on_character(from.on_character());
  }
  if (from.on_bullet() != 0) {
    set_on_bullet(from.on_bullet());
  }
  if (from.on_trap() != 0) {
    set_on_trap(from.on_trap());
  }
  if (from.use_pixelated_ver() != 0) {
    set_use_pixelated_ver(from.use_pixelated_ver());
  }
}

void VfxConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:shared.VfxConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VfxConfig::CopyFrom(const VfxConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:shared.VfxConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VfxConfig::IsInitialized() const {
  return true;
}

void VfxConfig::Swap(VfxConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VfxConfig::InternalSwap(VfxConfig* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(species_id_, other->species_id_);
  swap(motion_type_, other->motion_type_);
  swap(duration_type_, other->duration_type_);
  swap(on_character_, other->on_character_);
  swap(on_bullet_, other->on_bullet_);
  swap(on_trap_, other->on_trap_);
  swap(use_pixelated_ver_, other->use_pixelated_ver_);
}

::google::protobuf::Metadata VfxConfig::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_serializable_5fdata_2eproto);
  return ::file_level_metadata_serializable_5fdata_2eproto[kIndexInFileMessages];
}


// ===================================================================

BulletConfig_CancelTransitEntry_DoNotUse::BulletConfig_CancelTransitEntry_DoNotUse() {}
BulletConfig_CancelTransitEntry_DoNotUse::BulletConfig_CancelTransitEntry_DoNotUse(::google::protobuf::Arena* arena)
    : SuperType(arena) {}
void BulletConfig_CancelTransitEntry_DoNotUse::MergeFrom(const BulletConfig_CancelTransitEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata BulletConfig_CancelTransitEntry_DoNotUse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_serializable_5fdata_2eproto);
  return ::file_level_metadata_serializable_5fdata_2eproto[16];
}
void BulletConfig_CancelTransitEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool BulletConfig_CancelTransitEntry_DoNotUse::_ParseMap(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx) {
  using MF = ::google::protobuf::internal::MapField<
      BulletConfig_CancelTransitEntry_DoNotUse, EntryKeyType, EntryValueType,
      kEntryKeyFieldType, kEntryValueFieldType,
      kEntryDefaultEnumValue>;
  auto mf = static_cast<MF*>(object);
  Parser<MF, ::google::protobuf::Map<EntryKeyType, EntryValueType>> parser(mf);
#define DO_(x) if (!(x)) return false
  DO_(parser.ParseMap(begin, end));
#undef DO_
  return true;
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER


// ===================================================================

void BulletConfig::InitAsDefaultInstance() {
  ::shared::_BulletConfig_default_instance_._instance.get_mutable()->buff_config_ = const_cast< ::shared::BuffConfig*>(
      ::shared::BuffConfig::internal_default_instance());
}
class BulletConfig::HasBitSetters {
 public:
  static const ::shared::BuffConfig& buff_config(const BulletConfig* msg);
};

const ::shared::BuffConfig&
BulletConfig::HasBitSetters::buff_config(const BulletConfig* msg) {
  return *msg->buff_config_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BulletConfig::kStartupFramesFieldNumber;
const int BulletConfig::kCancellableStFrameFieldNumber;
const int BulletConfig::kCancellableEdFrameFieldNumber;
const int BulletConfig::kActiveFramesFieldNumber;
const int BulletConfig::kHitStunFramesFieldNumber;
const int BulletConfig::kBlockStunFramesFieldNumber;
const int BulletConfig::kPushbackVelXFieldNumber;
const int BulletConfig::kPushbackVelYFieldNumber;
const int BulletConfig::kDamageFieldNumber;
const int BulletConfig::kSelfLockVelXFieldNumber;
const int BulletConfig::kSelfLockVelYFieldNumber;
const int BulletConfig::kHitboxOffsetXFieldNumber;
const int BulletConfig::kHitboxOffsetYFieldNumber;
const int BulletConfig::kHitboxSizeXFieldNumber;
const int BulletConfig::kHitboxSizeYFieldNumber;
const int BulletConfig::kBlowUpFieldNumber;
const int BulletConfig::kSpeciesIdFieldNumber;
const int BulletConfig::kExplosionFramesFieldNumber;
const int BulletConfig::kBTypeFieldNumber;
const int BulletConfig::kMhTypeFieldNumber;
const int BulletConfig::kSimultaneousMultiHitCntFieldNumber;
const int BulletConfig::kSpeedFieldNumber;
const int BulletConfig::kDirXFieldNumber;
const int BulletConfig::kDirYFieldNumber;
const int BulletConfig::kCancelTransitFieldNumber;
const int BulletConfig::kRepeatQuotaFieldNumber;
const int BulletConfig::kActiveVfxSpeciesIdFieldNumber;
const int BulletConfig::kExplosionVfxSpeciesIdFieldNumber;
const int BulletConfig::kAllowsWalkingFieldNumber;
const int BulletConfig::kAllowsCrouchingFieldNumber;
const int BulletConfig::kHardnessFieldNumber;
const int BulletConfig::kStartupInvinsibleFramesFieldNumber;
const int BulletConfig::kHitInvinsibleFramesFieldNumber;
const int BulletConfig::kExplosionSpeciesIdFieldNumber;
const int BulletConfig::kPerpAccMagFieldNumber;
const int BulletConfig::kDelaySelfVelToActiveFieldNumber;
const int BulletConfig::kSpeedIfNotHitFieldNumber;
const int BulletConfig::kOmitSoftPushbackFieldNumber;
const int BulletConfig::kHitboxSizeIncXFieldNumber;
const int BulletConfig::kHitboxSizeIncYFieldNumber;
const int BulletConfig::kRemainsUponHitFieldNumber;
const int BulletConfig::kRotatesAlongVelocityFieldNumber;
const int BulletConfig::kDefaultHardPushbackBounceQuotaFieldNumber;
const int BulletConfig::kHardPushbackBounceNormFactorFieldNumber;
const int BulletConfig::kHardPushbackBounceSheerFactorFieldNumber;
const int BulletConfig::kIsPixelatedActiveVfxFieldNumber;
const int BulletConfig::kIsPixelatedExplostionVfxFieldNumber;
const int BulletConfig::kMhVanishOnMeleeHitFieldNumber;
const int BulletConfig::kDownSlopePrimerVelYFieldNumber;
const int BulletConfig::kMhUpdatesOriginPosFieldNumber;
const int BulletConfig::kBeamCollisionFieldNumber;
const int BulletConfig::kAngularFrameVelCosFieldNumber;
const int BulletConfig::kAngularFrameVelSinFieldNumber;
const int BulletConfig::kVisionOffsetXFieldNumber;
const int BulletConfig::kVisionOffsetYFieldNumber;
const int BulletConfig::kVisionSizeXFieldNumber;
const int BulletConfig::kVisionSizeYFieldNumber;
const int BulletConfig::kSelfLockVelYWhenFlyingFieldNumber;
const int BulletConfig::kElementalAttrsFieldNumber;
const int BulletConfig::kCancellableByInventorySlotCFieldNumber;
const int BulletConfig::kCancellableByInventorySlotDFieldNumber;
const int BulletConfig::kSpinAnchorXFieldNumber;
const int BulletConfig::kSpinAnchorYFieldNumber;
const int BulletConfig::kBeamVisualSizeYFieldNumber;
const int BulletConfig::kTouchExplosionBombCollisionFieldNumber;
const int BulletConfig::kAirRidingGroundWaveFieldNumber;
const int BulletConfig::kGroundImpactMeleeCollisionFieldNumber;
const int BulletConfig::kWallImpactMeleeCollisionFieldNumber;
const int BulletConfig::kMhInheritsSpinFieldNumber;
const int BulletConfig::kInitSpinCosFieldNumber;
const int BulletConfig::kInitSpinSinFieldNumber;
const int BulletConfig::kFinishingFramesFieldNumber;
const int BulletConfig::kNoExplosionOnHardPushbackFieldNumber;
const int BulletConfig::kStartupVfxSpeciesIdFieldNumber;
const int BulletConfig::kIfcFieldNumber;
const int BulletConfig::kReflectFireballXIfNotHarderFieldNumber;
const int BulletConfig::kRejectsReflectionFromAnotherBulletFieldNumber;
const int BulletConfig::kProvidesXHardPushbackFieldNumber;
const int BulletConfig::kProvidesYHardPushbackTopFieldNumber;
const int BulletConfig::kProvidesYHardPushbackBottomFieldNumber;
const int BulletConfig::kIgnoreSlopeDecelerationFieldNumber;
const int BulletConfig::kRotateOffenderWithSpinFieldNumber;
const int BulletConfig::kMhNotTriggerOnChHitFieldNumber;
const int BulletConfig::kMhNotTriggerOnHarderBulletHitFieldNumber;
const int BulletConfig::kMhNotTriggerOnHardPushbackHitFieldNumber;
const int BulletConfig::kHopperMissileFieldNumber;
const int BulletConfig::kBeamRenderingFieldNumber;
const int BulletConfig::kMissileSearchIntervalPow2Minus1FieldNumber;
const int BulletConfig::kUseChOffsetRegardlessOfEmissionMhFieldNumber;
const int BulletConfig::kInplaceVanishExplosionSpeciesIdFieldNumber;
const int BulletConfig::kAnimLoopingRdfOffsetFieldNumber;
const int BulletConfig::kExplosionAnimLoopingRdfOffsetFieldNumber;
const int BulletConfig::kGaugeIncReductionRatioFieldNumber;
const int BulletConfig::kMhInheritsFramesInBlStateFieldNumber;
const int BulletConfig::kGuardBreakerExtraHitCntFieldNumber;
const int BulletConfig::kTakesDef1AsHardPushbackFieldNumber;
const int BulletConfig::kCollisionTypeMaskFieldNumber;
const int BulletConfig::kTakesGravityFieldNumber;
const int BulletConfig::kBuffConfigFieldNumber;
const int BulletConfig::kCharacterEmitSfxNameFieldNumber;
const int BulletConfig::kFireballEmitSfxNameFieldNumber;
const int BulletConfig::kExplosionSfxNameFieldNumber;
const int BulletConfig::kActiveSfxNameFieldNumber;
const int BulletConfig::kExplosionOnFleshSfxNameFieldNumber;
const int BulletConfig::kExplosionOnRockSfxNameFieldNumber;
const int BulletConfig::kExplosionOnMetalSfxNameFieldNumber;
const int BulletConfig::kExplosionOnWoodSfxNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BulletConfig::BulletConfig()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:shared.BulletConfig)
}
BulletConfig::BulletConfig(const BulletConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  cancel_transit_.MergeFrom(from.cancel_transit_);
  character_emit_sfx_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.character_emit_sfx_name().size() > 0) {
    character_emit_sfx_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.character_emit_sfx_name_);
  }
  fireball_emit_sfx_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.fireball_emit_sfx_name().size() > 0) {
    fireball_emit_sfx_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fireball_emit_sfx_name_);
  }
  explosion_sfx_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.explosion_sfx_name().size() > 0) {
    explosion_sfx_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.explosion_sfx_name_);
  }
  active_sfx_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.active_sfx_name().size() > 0) {
    active_sfx_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.active_sfx_name_);
  }
  explosion_on_flesh_sfx_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.explosion_on_flesh_sfx_name().size() > 0) {
    explosion_on_flesh_sfx_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.explosion_on_flesh_sfx_name_);
  }
  explosion_on_rock_sfx_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.explosion_on_rock_sfx_name().size() > 0) {
    explosion_on_rock_sfx_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.explosion_on_rock_sfx_name_);
  }
  explosion_on_metal_sfx_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.explosion_on_metal_sfx_name().size() > 0) {
    explosion_on_metal_sfx_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.explosion_on_metal_sfx_name_);
  }
  explosion_on_wood_sfx_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.explosion_on_wood_sfx_name().size() > 0) {
    explosion_on_wood_sfx_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.explosion_on_wood_sfx_name_);
  }
  if (from.has_buff_config()) {
    buff_config_ = new ::shared::BuffConfig(*from.buff_config_);
  } else {
    buff_config_ = nullptr;
  }
  ::memcpy(&startup_frames_, &from.startup_frames_,
    static_cast<size_t>(reinterpret_cast<char*>(&collision_type_mask_) -
    reinterpret_cast<char*>(&startup_frames_)) + sizeof(collision_type_mask_));
  // @@protoc_insertion_point(copy_constructor:shared.BulletConfig)
}

void BulletConfig::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_BulletConfig_serializable_5fdata_2eproto.base);
  character_emit_sfx_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fireball_emit_sfx_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  explosion_sfx_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  active_sfx_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  explosion_on_flesh_sfx_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  explosion_on_rock_sfx_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  explosion_on_metal_sfx_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  explosion_on_wood_sfx_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&buff_config_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&collision_type_mask_) -
      reinterpret_cast<char*>(&buff_config_)) + sizeof(collision_type_mask_));
}

BulletConfig::~BulletConfig() {
  // @@protoc_insertion_point(destructor:shared.BulletConfig)
  SharedDtor();
}

void BulletConfig::SharedDtor() {
  character_emit_sfx_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fireball_emit_sfx_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  explosion_sfx_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  active_sfx_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  explosion_on_flesh_sfx_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  explosion_on_rock_sfx_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  explosion_on_metal_sfx_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  explosion_on_wood_sfx_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete buff_config_;
}

void BulletConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BulletConfig& BulletConfig::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_BulletConfig_serializable_5fdata_2eproto.base);
  return *internal_default_instance();
}


void BulletConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:shared.BulletConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cancel_transit_.Clear();
  character_emit_sfx_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fireball_emit_sfx_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  explosion_sfx_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  active_sfx_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  explosion_on_flesh_sfx_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  explosion_on_rock_sfx_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  explosion_on_metal_sfx_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  explosion_on_wood_sfx_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && buff_config_ != nullptr) {
    delete buff_config_;
  }
  buff_config_ = nullptr;
  ::memset(&startup_frames_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&collision_type_mask_) -
      reinterpret_cast<char*>(&startup_frames_)) + sizeof(collision_type_mask_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* BulletConfig::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<BulletConfig*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int32 startup_frames = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_startup_frames(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 cancellable_st_frame = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_cancellable_st_frame(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 cancellable_ed_frame = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_cancellable_ed_frame(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 active_frames = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_active_frames(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 hit_stun_frames = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_hit_stun_frames(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 block_stun_frames = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_block_stun_frames(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // float pushback_vel_x = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 61) goto handle_unusual;
        msg->set_pushback_vel_x(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // float pushback_vel_y = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 69) goto handle_unusual;
        msg->set_pushback_vel_y(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // int32 damage = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 72) goto handle_unusual;
        msg->set_damage(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // float self_lock_vel_x = 10;
      case 10: {
        if (static_cast<::google::protobuf::uint8>(tag) != 85) goto handle_unusual;
        msg->set_self_lock_vel_x(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // float self_lock_vel_y = 11;
      case 11: {
        if (static_cast<::google::protobuf::uint8>(tag) != 93) goto handle_unusual;
        msg->set_self_lock_vel_y(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // float hitbox_offset_x = 12;
      case 12: {
        if (static_cast<::google::protobuf::uint8>(tag) != 101) goto handle_unusual;
        msg->set_hitbox_offset_x(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // float hitbox_offset_y = 13;
      case 13: {
        if (static_cast<::google::protobuf::uint8>(tag) != 109) goto handle_unusual;
        msg->set_hitbox_offset_y(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // float hitbox_size_x = 14;
      case 14: {
        if (static_cast<::google::protobuf::uint8>(tag) != 117) goto handle_unusual;
        msg->set_hitbox_size_x(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // float hitbox_size_y = 15;
      case 15: {
        if (static_cast<::google::protobuf::uint8>(tag) != 125) goto handle_unusual;
        msg->set_hitbox_size_y(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // bool blow_up = 16;
      case 16: {
        if (static_cast<::google::protobuf::uint8>(tag) != 128) goto handle_unusual;
        msg->set_blow_up(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 species_id = 17;
      case 17: {
        if (static_cast<::google::protobuf::uint8>(tag) != 136) goto handle_unusual;
        msg->set_species_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 explosion_frames = 18;
      case 18: {
        if (static_cast<::google::protobuf::uint8>(tag) != 144) goto handle_unusual;
        msg->set_explosion_frames(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // .shared.BulletType b_type = 19;
      case 19: {
        if (static_cast<::google::protobuf::uint8>(tag) != 152) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_b_type(static_cast<::shared::BulletType>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // .shared.MultiHitType mh_type = 20;
      case 20: {
        if (static_cast<::google::protobuf::uint8>(tag) != 160) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_mh_type(static_cast<::shared::MultiHitType>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // uint32 simultaneous_multi_hit_cnt = 21;
      case 21: {
        if (static_cast<::google::protobuf::uint8>(tag) != 168) goto handle_unusual;
        msg->set_simultaneous_multi_hit_cnt(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // float speed = 22;
      case 22: {
        if (static_cast<::google::protobuf::uint8>(tag) != 181) goto handle_unusual;
        msg->set_speed(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // int32 dir_x = 23;
      case 23: {
        if (static_cast<::google::protobuf::uint8>(tag) != 184) goto handle_unusual;
        msg->set_dir_x(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 dir_y = 24;
      case 24: {
        if (static_cast<::google::protobuf::uint8>(tag) != 192) goto handle_unusual;
        msg->set_dir_y(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // map<int32, uint32> cancel_transit = 25;
      case 25: {
        if (static_cast<::google::protobuf::uint8>(tag) != 202) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::protobuf::internal::SlowMapEntryParser;
          auto parse_map = ::shared::BulletConfig_CancelTransitEntry_DoNotUse::_ParseMap;
          ctx->extra_parse_data().payload.clear();
          ctx->extra_parse_data().parse_map = parse_map;
          object = &msg->cancel_transit_;
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(parse_map(ptr, newend, object, ctx));
          ptr = newend;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 65535) == 458 && (ptr += 2));
        break;
      }
      // int32 repeat_quota = 26;
      case 26: {
        if (static_cast<::google::protobuf::uint8>(tag) != 208) goto handle_unusual;
        msg->set_repeat_quota(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 active_vfx_species_id = 27;
      case 27: {
        if (static_cast<::google::protobuf::uint8>(tag) != 216) goto handle_unusual;
        msg->set_active_vfx_species_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 explosion_vfx_species_id = 28;
      case 28: {
        if (static_cast<::google::protobuf::uint8>(tag) != 224) goto handle_unusual;
        msg->set_explosion_vfx_species_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // bool allows_walking = 29;
      case 29: {
        if (static_cast<::google::protobuf::uint8>(tag) != 232) goto handle_unusual;
        msg->set_allows_walking(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // bool allows_crouching = 30;
      case 30: {
        if (static_cast<::google::protobuf::uint8>(tag) != 240) goto handle_unusual;
        msg->set_allows_crouching(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 hardness = 31;
      case 31: {
        if (static_cast<::google::protobuf::uint8>(tag) != 248) goto handle_unusual;
        msg->set_hardness(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 startup_invinsible_frames = 32;
      case 32: {
        if (static_cast<::google::protobuf::uint8>(tag) != 0) goto handle_unusual;
        msg->set_startup_invinsible_frames(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 hit_invinsible_frames = 33;
      case 33: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_hit_invinsible_frames(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 explosion_species_id = 34;
      case 34: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_explosion_species_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 perp_acc_mag = 35;
      case 35: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_perp_acc_mag(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // bool delay_self_vel_to_active = 36;
      case 36: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_delay_self_vel_to_active(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // float speed_if_not_hit = 37;
      case 37: {
        if (static_cast<::google::protobuf::uint8>(tag) != 45) goto handle_unusual;
        msg->set_speed_if_not_hit(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // bool omit_soft_pushback = 38;
      case 38: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_omit_soft_pushback(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // float hitbox_size_inc_x = 39;
      case 39: {
        if (static_cast<::google::protobuf::uint8>(tag) != 61) goto handle_unusual;
        msg->set_hitbox_size_inc_x(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // float hitbox_size_inc_y = 40;
      case 40: {
        if (static_cast<::google::protobuf::uint8>(tag) != 69) goto handle_unusual;
        msg->set_hitbox_size_inc_y(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // bool remains_upon_hit = 41;
      case 41: {
        if (static_cast<::google::protobuf::uint8>(tag) != 72) goto handle_unusual;
        msg->set_remains_upon_hit(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // bool rotates_along_velocity = 42;
      case 42: {
        if (static_cast<::google::protobuf::uint8>(tag) != 80) goto handle_unusual;
        msg->set_rotates_along_velocity(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 default_hard_pushback_bounce_quota = 43;
      case 43: {
        if (static_cast<::google::protobuf::uint8>(tag) != 88) goto handle_unusual;
        msg->set_default_hard_pushback_bounce_quota(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // float hard_pushback_bounce_norm_factor = 44;
      case 44: {
        if (static_cast<::google::protobuf::uint8>(tag) != 101) goto handle_unusual;
        msg->set_hard_pushback_bounce_norm_factor(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // float hard_pushback_bounce_sheer_factor = 45;
      case 45: {
        if (static_cast<::google::protobuf::uint8>(tag) != 109) goto handle_unusual;
        msg->set_hard_pushback_bounce_sheer_factor(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // bool is_pixelated_active_vfx = 46;
      case 46: {
        if (static_cast<::google::protobuf::uint8>(tag) != 112) goto handle_unusual;
        msg->set_is_pixelated_active_vfx(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // bool is_pixelated_explostion_vfx = 47;
      case 47: {
        if (static_cast<::google::protobuf::uint8>(tag) != 120) goto handle_unusual;
        msg->set_is_pixelated_explostion_vfx(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // bool mh_vanish_on_melee_hit = 48;
      case 48: {
        if (static_cast<::google::protobuf::uint8>(tag) != 128) goto handle_unusual;
        msg->set_mh_vanish_on_melee_hit(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // float down_slope_primer_vel_y = 49;
      case 49: {
        if (static_cast<::google::protobuf::uint8>(tag) != 141) goto handle_unusual;
        msg->set_down_slope_primer_vel_y(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // bool mh_updates_origin_pos = 50;
      case 50: {
        if (static_cast<::google::protobuf::uint8>(tag) != 144) goto handle_unusual;
        msg->set_mh_updates_origin_pos(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // bool beam_collision = 51;
      case 51: {
        if (static_cast<::google::protobuf::uint8>(tag) != 152) goto handle_unusual;
        msg->set_beam_collision(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // float angular_frame_vel_cos = 52;
      case 52: {
        if (static_cast<::google::protobuf::uint8>(tag) != 165) goto handle_unusual;
        msg->set_angular_frame_vel_cos(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // float angular_frame_vel_sin = 53;
      case 53: {
        if (static_cast<::google::protobuf::uint8>(tag) != 173) goto handle_unusual;
        msg->set_angular_frame_vel_sin(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // float vision_offset_x = 54;
      case 54: {
        if (static_cast<::google::protobuf::uint8>(tag) != 181) goto handle_unusual;
        msg->set_vision_offset_x(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // float vision_offset_y = 55;
      case 55: {
        if (static_cast<::google::protobuf::uint8>(tag) != 189) goto handle_unusual;
        msg->set_vision_offset_y(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // float vision_size_x = 56;
      case 56: {
        if (static_cast<::google::protobuf::uint8>(tag) != 197) goto handle_unusual;
        msg->set_vision_size_x(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // float vision_size_y = 57;
      case 57: {
        if (static_cast<::google::protobuf::uint8>(tag) != 205) goto handle_unusual;
        msg->set_vision_size_y(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // int32 self_lock_vel_yWhen_flying = 58;
      case 58: {
        if (static_cast<::google::protobuf::uint8>(tag) != 208) goto handle_unusual;
        msg->set_self_lock_vel_ywhen_flying(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // uint32 elemental_attrs = 59;
      case 59: {
        if (static_cast<::google::protobuf::uint8>(tag) != 216) goto handle_unusual;
        msg->set_elemental_attrs(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // bool cancellable_by_inventory_slot_c = 60;
      case 60: {
        if (static_cast<::google::protobuf::uint8>(tag) != 224) goto handle_unusual;
        msg->set_cancellable_by_inventory_slot_c(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // bool cancellable_by_inventory_slot_d = 61;
      case 61: {
        if (static_cast<::google::protobuf::uint8>(tag) != 232) goto handle_unusual;
        msg->set_cancellable_by_inventory_slot_d(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // float spin_anchor_x = 62;
      case 62: {
        if (static_cast<::google::protobuf::uint8>(tag) != 245) goto handle_unusual;
        msg->set_spin_anchor_x(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // float spin_anchor_y = 63;
      case 63: {
        if (static_cast<::google::protobuf::uint8>(tag) != 253) goto handle_unusual;
        msg->set_spin_anchor_y(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // float beam_visual_size_y = 64;
      case 64: {
        if (static_cast<::google::protobuf::uint8>(tag) != 5) goto handle_unusual;
        msg->set_beam_visual_size_y(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // bool touch_explosion_bomb_collision = 65;
      case 65: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_touch_explosion_bomb_collision(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // bool air_riding_ground_wave = 66;
      case 66: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_air_riding_ground_wave(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // bool ground_impact_melee_collision = 67;
      case 67: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_ground_impact_melee_collision(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // bool wall_impact_melee_collision = 68;
      case 68: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_wall_impact_melee_collision(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // bool mh_inherits_spin = 69;
      case 69: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_mh_inherits_spin(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // float init_spin_cos = 70;
      case 70: {
        if (static_cast<::google::protobuf::uint8>(tag) != 53) goto handle_unusual;
        msg->set_init_spin_cos(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // float init_spin_sin = 71;
      case 71: {
        if (static_cast<::google::protobuf::uint8>(tag) != 61) goto handle_unusual;
        msg->set_init_spin_sin(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // int32 finishing_frames = 72;
      case 72: {
        if (static_cast<::google::protobuf::uint8>(tag) != 64) goto handle_unusual;
        msg->set_finishing_frames(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // bool no_explosion_on_hard_pushback = 73;
      case 73: {
        if (static_cast<::google::protobuf::uint8>(tag) != 72) goto handle_unusual;
        msg->set_no_explosion_on_hard_pushback(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 startup_vfx_species_id = 74;
      case 74: {
        if (static_cast<::google::protobuf::uint8>(tag) != 80) goto handle_unusual;
        msg->set_startup_vfx_species_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // .shared.IfaceCat ifc = 75;
      case 75: {
        if (static_cast<::google::protobuf::uint8>(tag) != 88) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_ifc(static_cast<::shared::IfaceCat>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // bool reflect_fireball_xIf_not_harder = 76;
      case 76: {
        if (static_cast<::google::protobuf::uint8>(tag) != 96) goto handle_unusual;
        msg->set_reflect_fireball_xif_not_harder(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // bool rejects_reflection_from_another_bullet = 77;
      case 77: {
        if (static_cast<::google::protobuf::uint8>(tag) != 104) goto handle_unusual;
        msg->set_rejects_reflection_from_another_bullet(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // bool provides_xHard_pushback = 78;
      case 78: {
        if (static_cast<::google::protobuf::uint8>(tag) != 112) goto handle_unusual;
        msg->set_provides_xhard_pushback(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // bool provides_yHard_pushback_top = 79;
      case 79: {
        if (static_cast<::google::protobuf::uint8>(tag) != 120) goto handle_unusual;
        msg->set_provides_yhard_pushback_top(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // bool provides_yHard_pushback_bottom = 80;
      case 80: {
        if (static_cast<::google::protobuf::uint8>(tag) != 128) goto handle_unusual;
        msg->set_provides_yhard_pushback_bottom(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // bool ignore_slope_deceleration = 81;
      case 81: {
        if (static_cast<::google::protobuf::uint8>(tag) != 136) goto handle_unusual;
        msg->set_ignore_slope_deceleration(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // bool rotate_offender_with_spin = 82;
      case 82: {
        if (static_cast<::google::protobuf::uint8>(tag) != 144) goto handle_unusual;
        msg->set_rotate_offender_with_spin(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // bool mh_not_trigger_on_ch_hit = 83;
      case 83: {
        if (static_cast<::google::protobuf::uint8>(tag) != 152) goto handle_unusual;
        msg->set_mh_not_trigger_on_ch_hit(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // bool mh_not_trigger_on_harder_bullet_hit = 84;
      case 84: {
        if (static_cast<::google::protobuf::uint8>(tag) != 160) goto handle_unusual;
        msg->set_mh_not_trigger_on_harder_bullet_hit(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // bool mh_not_trigger_on_hard_pushback_hit = 85;
      case 85: {
        if (static_cast<::google::protobuf::uint8>(tag) != 168) goto handle_unusual;
        msg->set_mh_not_trigger_on_hard_pushback_hit(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // bool hopper_missile = 86;
      case 86: {
        if (static_cast<::google::protobuf::uint8>(tag) != 176) goto handle_unusual;
        msg->set_hopper_missile(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // bool beam_rendering = 87;
      case 87: {
        if (static_cast<::google::protobuf::uint8>(tag) != 184) goto handle_unusual;
        msg->set_beam_rendering(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // uint32 missile_search_interval_pow2Minus1 = 88;
      case 88: {
        if (static_cast<::google::protobuf::uint8>(tag) != 192) goto handle_unusual;
        msg->set_missile_search_interval_pow2minus1(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // bool use_ch_offset_regardless_of_emission_mh = 89;
      case 89: {
        if (static_cast<::google::protobuf::uint8>(tag) != 200) goto handle_unusual;
        msg->set_use_ch_offset_regardless_of_emission_mh(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 inplace_vanish_explosion_species_id = 90;
      case 90: {
        if (static_cast<::google::protobuf::uint8>(tag) != 208) goto handle_unusual;
        msg->set_inplace_vanish_explosion_species_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 anim_looping_rdf_offset = 91;
      case 91: {
        if (static_cast<::google::protobuf::uint8>(tag) != 216) goto handle_unusual;
        msg->set_anim_looping_rdf_offset(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 explosion_anim_looping_rdf_offset = 92;
      case 92: {
        if (static_cast<::google::protobuf::uint8>(tag) != 224) goto handle_unusual;
        msg->set_explosion_anim_looping_rdf_offset(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // float gauge_inc_reduction_ratio = 93;
      case 93: {
        if (static_cast<::google::protobuf::uint8>(tag) != 237) goto handle_unusual;
        msg->set_gauge_inc_reduction_ratio(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // bool mh_inherits_frames_in_bl_state = 94;
      case 94: {
        if (static_cast<::google::protobuf::uint8>(tag) != 240) goto handle_unusual;
        msg->set_mh_inherits_frames_in_bl_state(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // uint32 guard_breaker_extra_hit_cnt = 95;
      case 95: {
        if (static_cast<::google::protobuf::uint8>(tag) != 248) goto handle_unusual;
        msg->set_guard_breaker_extra_hit_cnt(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // bool takes_def1As_hard_pushback = 96;
      case 96: {
        if (static_cast<::google::protobuf::uint8>(tag) != 0) goto handle_unusual;
        msg->set_takes_def1as_hard_pushback(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // uint64 collision_type_mask = 1029;
      case 1029: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_collision_type_mask(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // bool takes_gravity = 1030;
      case 1030: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_takes_gravity(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // .shared.BuffConfig buff_config = 1031;
      case 1031: {
        if (static_cast<::google::protobuf::uint8>(tag) != 58) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::shared::BuffConfig::_InternalParse;
        object = msg->mutable_buff_config();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // string character_emit_sfx_name = 2048;
      case 2048: {
        if (static_cast<::google::protobuf::uint8>(tag) != 2) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("shared.BulletConfig.character_emit_sfx_name");
        object = msg->mutable_character_emit_sfx_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string fireball_emit_sfx_name = 2049;
      case 2049: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("shared.BulletConfig.fireball_emit_sfx_name");
        object = msg->mutable_fireball_emit_sfx_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string explosion_sfx_name = 2050;
      case 2050: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("shared.BulletConfig.explosion_sfx_name");
        object = msg->mutable_explosion_sfx_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string active_sfx_name = 2051;
      case 2051: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("shared.BulletConfig.active_sfx_name");
        object = msg->mutable_active_sfx_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string explosion_on_flesh_sfx_name = 2052;
      case 2052: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("shared.BulletConfig.explosion_on_flesh_sfx_name");
        object = msg->mutable_explosion_on_flesh_sfx_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string explosion_on_rock_sfx_name = 2053;
      case 2053: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("shared.BulletConfig.explosion_on_rock_sfx_name");
        object = msg->mutable_explosion_on_rock_sfx_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string explosion_on_metal_sfx_name = 2054;
      case 2054: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("shared.BulletConfig.explosion_on_metal_sfx_name");
        object = msg->mutable_explosion_on_metal_sfx_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string explosion_on_wood_sfx_name = 2055;
      case 2055: {
        if (static_cast<::google::protobuf::uint8>(tag) != 58) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("shared.BulletConfig.explosion_on_wood_sfx_name");
        object = msg->mutable_explosion_on_wood_sfx_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool BulletConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:shared.BulletConfig)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16445u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 startup_frames = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &startup_frames_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 cancellable_st_frame = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cancellable_st_frame_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 cancellable_ed_frame = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cancellable_ed_frame_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 active_frames = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &active_frames_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 hit_stun_frames = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hit_stun_frames_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 block_stun_frames = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &block_stun_frames_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float pushback_vel_x = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (61 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pushback_vel_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float pushback_vel_y = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (69 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pushback_vel_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 damage = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (72 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &damage_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float self_lock_vel_x = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (85 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &self_lock_vel_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float self_lock_vel_y = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (93 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &self_lock_vel_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float hitbox_offset_x = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (101 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &hitbox_offset_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float hitbox_offset_y = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (109 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &hitbox_offset_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float hitbox_size_x = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (117 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &hitbox_size_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float hitbox_size_y = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (125 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &hitbox_size_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool blow_up = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (128 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &blow_up_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 species_id = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (136 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &species_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 explosion_frames = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (144 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &explosion_frames_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .shared.BulletType b_type = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (152 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_b_type(static_cast< ::shared::BulletType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .shared.MultiHitType mh_type = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (160 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_mh_type(static_cast< ::shared::MultiHitType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 simultaneous_multi_hit_cnt = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (168 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &simultaneous_multi_hit_cnt_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float speed = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (181 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &speed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 dir_x = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (184 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dir_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 dir_y = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (192 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dir_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<int32, uint32> cancel_transit = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (202 & 0xFF)) {
          BulletConfig_CancelTransitEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              BulletConfig_CancelTransitEntry_DoNotUse,
              ::google::protobuf::int32, ::google::protobuf::uint32,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
              ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
              0 >,
            ::google::protobuf::Map< ::google::protobuf::int32, ::google::protobuf::uint32 > > parser(&cancel_transit_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 repeat_quota = 26;
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (208 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &repeat_quota_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 active_vfx_species_id = 27;
      case 27: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (216 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &active_vfx_species_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 explosion_vfx_species_id = 28;
      case 28: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (224 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &explosion_vfx_species_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool allows_walking = 29;
      case 29: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (232 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &allows_walking_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool allows_crouching = 30;
      case 30: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (240 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &allows_crouching_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 hardness = 31;
      case 31: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (248 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hardness_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 startup_invinsible_frames = 32;
      case 32: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (256 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &startup_invinsible_frames_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 hit_invinsible_frames = 33;
      case 33: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (264 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hit_invinsible_frames_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 explosion_species_id = 34;
      case 34: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (272 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &explosion_species_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 perp_acc_mag = 35;
      case 35: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (280 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &perp_acc_mag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool delay_self_vel_to_active = 36;
      case 36: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (288 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &delay_self_vel_to_active_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float speed_if_not_hit = 37;
      case 37: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (301 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &speed_if_not_hit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool omit_soft_pushback = 38;
      case 38: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (304 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &omit_soft_pushback_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float hitbox_size_inc_x = 39;
      case 39: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (317 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &hitbox_size_inc_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float hitbox_size_inc_y = 40;
      case 40: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (325 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &hitbox_size_inc_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool remains_upon_hit = 41;
      case 41: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (328 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &remains_upon_hit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool rotates_along_velocity = 42;
      case 42: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (336 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &rotates_along_velocity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 default_hard_pushback_bounce_quota = 43;
      case 43: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (344 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &default_hard_pushback_bounce_quota_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float hard_pushback_bounce_norm_factor = 44;
      case 44: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (357 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &hard_pushback_bounce_norm_factor_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float hard_pushback_bounce_sheer_factor = 45;
      case 45: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (365 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &hard_pushback_bounce_sheer_factor_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_pixelated_active_vfx = 46;
      case 46: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (368 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_pixelated_active_vfx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_pixelated_explostion_vfx = 47;
      case 47: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (376 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_pixelated_explostion_vfx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool mh_vanish_on_melee_hit = 48;
      case 48: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (384 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &mh_vanish_on_melee_hit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float down_slope_primer_vel_y = 49;
      case 49: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (397 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &down_slope_primer_vel_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool mh_updates_origin_pos = 50;
      case 50: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (400 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &mh_updates_origin_pos_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool beam_collision = 51;
      case 51: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (408 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &beam_collision_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float angular_frame_vel_cos = 52;
      case 52: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (421 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &angular_frame_vel_cos_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float angular_frame_vel_sin = 53;
      case 53: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (429 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &angular_frame_vel_sin_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float vision_offset_x = 54;
      case 54: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (437 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &vision_offset_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float vision_offset_y = 55;
      case 55: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (445 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &vision_offset_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float vision_size_x = 56;
      case 56: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (453 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &vision_size_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float vision_size_y = 57;
      case 57: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (461 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &vision_size_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 self_lock_vel_yWhen_flying = 58;
      case 58: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (464 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &self_lock_vel_ywhen_flying_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 elemental_attrs = 59;
      case 59: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (472 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &elemental_attrs_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool cancellable_by_inventory_slot_c = 60;
      case 60: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (480 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &cancellable_by_inventory_slot_c_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool cancellable_by_inventory_slot_d = 61;
      case 61: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (488 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &cancellable_by_inventory_slot_d_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float spin_anchor_x = 62;
      case 62: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (501 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &spin_anchor_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float spin_anchor_y = 63;
      case 63: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (509 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &spin_anchor_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float beam_visual_size_y = 64;
      case 64: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (517 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &beam_visual_size_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool touch_explosion_bomb_collision = 65;
      case 65: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (520 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &touch_explosion_bomb_collision_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool air_riding_ground_wave = 66;
      case 66: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (528 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &air_riding_ground_wave_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool ground_impact_melee_collision = 67;
      case 67: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (536 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ground_impact_melee_collision_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool wall_impact_melee_collision = 68;
      case 68: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (544 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &wall_impact_melee_collision_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool mh_inherits_spin = 69;
      case 69: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (552 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &mh_inherits_spin_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float init_spin_cos = 70;
      case 70: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (565 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &init_spin_cos_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float init_spin_sin = 71;
      case 71: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (573 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &init_spin_sin_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 finishing_frames = 72;
      case 72: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (576 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &finishing_frames_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool no_explosion_on_hard_pushback = 73;
      case 73: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (584 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &no_explosion_on_hard_pushback_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 startup_vfx_species_id = 74;
      case 74: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (592 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &startup_vfx_species_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .shared.IfaceCat ifc = 75;
      case 75: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (600 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_ifc(static_cast< ::shared::IfaceCat >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool reflect_fireball_xIf_not_harder = 76;
      case 76: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (608 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &reflect_fireball_xif_not_harder_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool rejects_reflection_from_another_bullet = 77;
      case 77: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (616 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &rejects_reflection_from_another_bullet_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool provides_xHard_pushback = 78;
      case 78: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (624 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &provides_xhard_pushback_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool provides_yHard_pushback_top = 79;
      case 79: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (632 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &provides_yhard_pushback_top_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool provides_yHard_pushback_bottom = 80;
      case 80: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (640 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &provides_yhard_pushback_bottom_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool ignore_slope_deceleration = 81;
      case 81: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (648 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ignore_slope_deceleration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool rotate_offender_with_spin = 82;
      case 82: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (656 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &rotate_offender_with_spin_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool mh_not_trigger_on_ch_hit = 83;
      case 83: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (664 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &mh_not_trigger_on_ch_hit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool mh_not_trigger_on_harder_bullet_hit = 84;
      case 84: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (672 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &mh_not_trigger_on_harder_bullet_hit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool mh_not_trigger_on_hard_pushback_hit = 85;
      case 85: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (680 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &mh_not_trigger_on_hard_pushback_hit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool hopper_missile = 86;
      case 86: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (688 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &hopper_missile_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool beam_rendering = 87;
      case 87: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (696 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &beam_rendering_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 missile_search_interval_pow2Minus1 = 88;
      case 88: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (704 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &missile_search_interval_pow2minus1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool use_ch_offset_regardless_of_emission_mh = 89;
      case 89: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (712 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_ch_offset_regardless_of_emission_mh_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 inplace_vanish_explosion_species_id = 90;
      case 90: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (720 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &inplace_vanish_explosion_species_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 anim_looping_rdf_offset = 91;
      case 91: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (728 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &anim_looping_rdf_offset_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 explosion_anim_looping_rdf_offset = 92;
      case 92: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (736 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &explosion_anim_looping_rdf_offset_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float gauge_inc_reduction_ratio = 93;
      case 93: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (749 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &gauge_inc_reduction_ratio_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool mh_inherits_frames_in_bl_state = 94;
      case 94: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (752 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &mh_inherits_frames_in_bl_state_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 guard_breaker_extra_hit_cnt = 95;
      case 95: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (760 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &guard_breaker_extra_hit_cnt_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool takes_def1As_hard_pushback = 96;
      case 96: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (768 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &takes_def1as_hard_pushback_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 collision_type_mask = 1029;
      case 1029: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8232 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &collision_type_mask_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool takes_gravity = 1030;
      case 1030: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8240 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &takes_gravity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .shared.BuffConfig buff_config = 1031;
      case 1031: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8250 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_buff_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string character_emit_sfx_name = 2048;
      case 2048: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16386 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_character_emit_sfx_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->character_emit_sfx_name().data(), static_cast<int>(this->character_emit_sfx_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "shared.BulletConfig.character_emit_sfx_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string fireball_emit_sfx_name = 2049;
      case 2049: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16394 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fireball_emit_sfx_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->fireball_emit_sfx_name().data(), static_cast<int>(this->fireball_emit_sfx_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "shared.BulletConfig.fireball_emit_sfx_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string explosion_sfx_name = 2050;
      case 2050: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16402 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_explosion_sfx_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->explosion_sfx_name().data(), static_cast<int>(this->explosion_sfx_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "shared.BulletConfig.explosion_sfx_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string active_sfx_name = 2051;
      case 2051: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16410 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_active_sfx_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->active_sfx_name().data(), static_cast<int>(this->active_sfx_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "shared.BulletConfig.active_sfx_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string explosion_on_flesh_sfx_name = 2052;
      case 2052: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16418 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_explosion_on_flesh_sfx_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->explosion_on_flesh_sfx_name().data(), static_cast<int>(this->explosion_on_flesh_sfx_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "shared.BulletConfig.explosion_on_flesh_sfx_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string explosion_on_rock_sfx_name = 2053;
      case 2053: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16426 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_explosion_on_rock_sfx_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->explosion_on_rock_sfx_name().data(), static_cast<int>(this->explosion_on_rock_sfx_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "shared.BulletConfig.explosion_on_rock_sfx_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string explosion_on_metal_sfx_name = 2054;
      case 2054: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16434 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_explosion_on_metal_sfx_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->explosion_on_metal_sfx_name().data(), static_cast<int>(this->explosion_on_metal_sfx_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "shared.BulletConfig.explosion_on_metal_sfx_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string explosion_on_wood_sfx_name = 2055;
      case 2055: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16442 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_explosion_on_wood_sfx_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->explosion_on_wood_sfx_name().data(), static_cast<int>(this->explosion_on_wood_sfx_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "shared.BulletConfig.explosion_on_wood_sfx_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:shared.BulletConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:shared.BulletConfig)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void BulletConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:shared.BulletConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 startup_frames = 1;
  if (this->startup_frames() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->startup_frames(), output);
  }

  // int32 cancellable_st_frame = 2;
  if (this->cancellable_st_frame() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->cancellable_st_frame(), output);
  }

  // int32 cancellable_ed_frame = 3;
  if (this->cancellable_ed_frame() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->cancellable_ed_frame(), output);
  }

  // int32 active_frames = 4;
  if (this->active_frames() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->active_frames(), output);
  }

  // int32 hit_stun_frames = 5;
  if (this->hit_stun_frames() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->hit_stun_frames(), output);
  }

  // int32 block_stun_frames = 6;
  if (this->block_stun_frames() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->block_stun_frames(), output);
  }

  // float pushback_vel_x = 7;
  if (this->pushback_vel_x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->pushback_vel_x(), output);
  }

  // float pushback_vel_y = 8;
  if (this->pushback_vel_y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->pushback_vel_y(), output);
  }

  // int32 damage = 9;
  if (this->damage() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->damage(), output);
  }

  // float self_lock_vel_x = 10;
  if (this->self_lock_vel_x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->self_lock_vel_x(), output);
  }

  // float self_lock_vel_y = 11;
  if (this->self_lock_vel_y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->self_lock_vel_y(), output);
  }

  // float hitbox_offset_x = 12;
  if (this->hitbox_offset_x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->hitbox_offset_x(), output);
  }

  // float hitbox_offset_y = 13;
  if (this->hitbox_offset_y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(13, this->hitbox_offset_y(), output);
  }

  // float hitbox_size_x = 14;
  if (this->hitbox_size_x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(14, this->hitbox_size_x(), output);
  }

  // float hitbox_size_y = 15;
  if (this->hitbox_size_y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(15, this->hitbox_size_y(), output);
  }

  // bool blow_up = 16;
  if (this->blow_up() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(16, this->blow_up(), output);
  }

  // int32 species_id = 17;
  if (this->species_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->species_id(), output);
  }

  // int32 explosion_frames = 18;
  if (this->explosion_frames() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->explosion_frames(), output);
  }

  // .shared.BulletType b_type = 19;
  if (this->b_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      19, this->b_type(), output);
  }

  // .shared.MultiHitType mh_type = 20;
  if (this->mh_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      20, this->mh_type(), output);
  }

  // uint32 simultaneous_multi_hit_cnt = 21;
  if (this->simultaneous_multi_hit_cnt() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(21, this->simultaneous_multi_hit_cnt(), output);
  }

  // float speed = 22;
  if (this->speed() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(22, this->speed(), output);
  }

  // int32 dir_x = 23;
  if (this->dir_x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(23, this->dir_x(), output);
  }

  // int32 dir_y = 24;
  if (this->dir_y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(24, this->dir_y(), output);
  }

  // map<int32, uint32> cancel_transit = 25;
  if (!this->cancel_transit().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::int32, ::google::protobuf::uint32 >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::int32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (output->IsSerializationDeterministic() &&
        this->cancel_transit().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->cancel_transit().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::int32, ::google::protobuf::uint32 >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::google::protobuf::uint32 >::const_iterator
          it = this->cancel_transit().begin();
          it != this->cancel_transit().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<BulletConfig_CancelTransitEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(cancel_transit_.NewEntryWrapper(items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(25, *entry, output);
      }
    } else {
      ::std::unique_ptr<BulletConfig_CancelTransitEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::google::protobuf::uint32 >::const_iterator
          it = this->cancel_transit().begin();
          it != this->cancel_transit().end(); ++it) {
        entry.reset(cancel_transit_.NewEntryWrapper(it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(25, *entry, output);
      }
    }
  }

  // int32 repeat_quota = 26;
  if (this->repeat_quota() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(26, this->repeat_quota(), output);
  }

  // int32 active_vfx_species_id = 27;
  if (this->active_vfx_species_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(27, this->active_vfx_species_id(), output);
  }

  // int32 explosion_vfx_species_id = 28;
  if (this->explosion_vfx_species_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(28, this->explosion_vfx_species_id(), output);
  }

  // bool allows_walking = 29;
  if (this->allows_walking() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(29, this->allows_walking(), output);
  }

  // bool allows_crouching = 30;
  if (this->allows_crouching() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(30, this->allows_crouching(), output);
  }

  // int32 hardness = 31;
  if (this->hardness() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(31, this->hardness(), output);
  }

  // int32 startup_invinsible_frames = 32;
  if (this->startup_invinsible_frames() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(32, this->startup_invinsible_frames(), output);
  }

  // int32 hit_invinsible_frames = 33;
  if (this->hit_invinsible_frames() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(33, this->hit_invinsible_frames(), output);
  }

  // int32 explosion_species_id = 34;
  if (this->explosion_species_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(34, this->explosion_species_id(), output);
  }

  // int32 perp_acc_mag = 35;
  if (this->perp_acc_mag() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(35, this->perp_acc_mag(), output);
  }

  // bool delay_self_vel_to_active = 36;
  if (this->delay_self_vel_to_active() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(36, this->delay_self_vel_to_active(), output);
  }

  // float speed_if_not_hit = 37;
  if (this->speed_if_not_hit() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(37, this->speed_if_not_hit(), output);
  }

  // bool omit_soft_pushback = 38;
  if (this->omit_soft_pushback() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(38, this->omit_soft_pushback(), output);
  }

  // float hitbox_size_inc_x = 39;
  if (this->hitbox_size_inc_x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(39, this->hitbox_size_inc_x(), output);
  }

  // float hitbox_size_inc_y = 40;
  if (this->hitbox_size_inc_y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(40, this->hitbox_size_inc_y(), output);
  }

  // bool remains_upon_hit = 41;
  if (this->remains_upon_hit() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(41, this->remains_upon_hit(), output);
  }

  // bool rotates_along_velocity = 42;
  if (this->rotates_along_velocity() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(42, this->rotates_along_velocity(), output);
  }

  // int32 default_hard_pushback_bounce_quota = 43;
  if (this->default_hard_pushback_bounce_quota() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(43, this->default_hard_pushback_bounce_quota(), output);
  }

  // float hard_pushback_bounce_norm_factor = 44;
  if (this->hard_pushback_bounce_norm_factor() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(44, this->hard_pushback_bounce_norm_factor(), output);
  }

  // float hard_pushback_bounce_sheer_factor = 45;
  if (this->hard_pushback_bounce_sheer_factor() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(45, this->hard_pushback_bounce_sheer_factor(), output);
  }

  // bool is_pixelated_active_vfx = 46;
  if (this->is_pixelated_active_vfx() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(46, this->is_pixelated_active_vfx(), output);
  }

  // bool is_pixelated_explostion_vfx = 47;
  if (this->is_pixelated_explostion_vfx() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(47, this->is_pixelated_explostion_vfx(), output);
  }

  // bool mh_vanish_on_melee_hit = 48;
  if (this->mh_vanish_on_melee_hit() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(48, this->mh_vanish_on_melee_hit(), output);
  }

  // float down_slope_primer_vel_y = 49;
  if (this->down_slope_primer_vel_y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(49, this->down_slope_primer_vel_y(), output);
  }

  // bool mh_updates_origin_pos = 50;
  if (this->mh_updates_origin_pos() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(50, this->mh_updates_origin_pos(), output);
  }

  // bool beam_collision = 51;
  if (this->beam_collision() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(51, this->beam_collision(), output);
  }

  // float angular_frame_vel_cos = 52;
  if (this->angular_frame_vel_cos() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(52, this->angular_frame_vel_cos(), output);
  }

  // float angular_frame_vel_sin = 53;
  if (this->angular_frame_vel_sin() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(53, this->angular_frame_vel_sin(), output);
  }

  // float vision_offset_x = 54;
  if (this->vision_offset_x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(54, this->vision_offset_x(), output);
  }

  // float vision_offset_y = 55;
  if (this->vision_offset_y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(55, this->vision_offset_y(), output);
  }

  // float vision_size_x = 56;
  if (this->vision_size_x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(56, this->vision_size_x(), output);
  }

  // float vision_size_y = 57;
  if (this->vision_size_y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(57, this->vision_size_y(), output);
  }

  // int32 self_lock_vel_yWhen_flying = 58;
  if (this->self_lock_vel_ywhen_flying() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(58, this->self_lock_vel_ywhen_flying(), output);
  }

  // uint32 elemental_attrs = 59;
  if (this->elemental_attrs() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(59, this->elemental_attrs(), output);
  }

  // bool cancellable_by_inventory_slot_c = 60;
  if (this->cancellable_by_inventory_slot_c() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(60, this->cancellable_by_inventory_slot_c(), output);
  }

  // bool cancellable_by_inventory_slot_d = 61;
  if (this->cancellable_by_inventory_slot_d() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(61, this->cancellable_by_inventory_slot_d(), output);
  }

  // float spin_anchor_x = 62;
  if (this->spin_anchor_x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(62, this->spin_anchor_x(), output);
  }

  // float spin_anchor_y = 63;
  if (this->spin_anchor_y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(63, this->spin_anchor_y(), output);
  }

  // float beam_visual_size_y = 64;
  if (this->beam_visual_size_y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(64, this->beam_visual_size_y(), output);
  }

  // bool touch_explosion_bomb_collision = 65;
  if (this->touch_explosion_bomb_collision() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(65, this->touch_explosion_bomb_collision(), output);
  }

  // bool air_riding_ground_wave = 66;
  if (this->air_riding_ground_wave() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(66, this->air_riding_ground_wave(), output);
  }

  // bool ground_impact_melee_collision = 67;
  if (this->ground_impact_melee_collision() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(67, this->ground_impact_melee_collision(), output);
  }

  // bool wall_impact_melee_collision = 68;
  if (this->wall_impact_melee_collision() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(68, this->wall_impact_melee_collision(), output);
  }

  // bool mh_inherits_spin = 69;
  if (this->mh_inherits_spin() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(69, this->mh_inherits_spin(), output);
  }

  // float init_spin_cos = 70;
  if (this->init_spin_cos() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(70, this->init_spin_cos(), output);
  }

  // float init_spin_sin = 71;
  if (this->init_spin_sin() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(71, this->init_spin_sin(), output);
  }

  // int32 finishing_frames = 72;
  if (this->finishing_frames() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(72, this->finishing_frames(), output);
  }

  // bool no_explosion_on_hard_pushback = 73;
  if (this->no_explosion_on_hard_pushback() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(73, this->no_explosion_on_hard_pushback(), output);
  }

  // int32 startup_vfx_species_id = 74;
  if (this->startup_vfx_species_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(74, this->startup_vfx_species_id(), output);
  }

  // .shared.IfaceCat ifc = 75;
  if (this->ifc() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      75, this->ifc(), output);
  }

  // bool reflect_fireball_xIf_not_harder = 76;
  if (this->reflect_fireball_xif_not_harder() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(76, this->reflect_fireball_xif_not_harder(), output);
  }

  // bool rejects_reflection_from_another_bullet = 77;
  if (this->rejects_reflection_from_another_bullet() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(77, this->rejects_reflection_from_another_bullet(), output);
  }

  // bool provides_xHard_pushback = 78;
  if (this->provides_xhard_pushback() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(78, this->provides_xhard_pushback(), output);
  }

  // bool provides_yHard_pushback_top = 79;
  if (this->provides_yhard_pushback_top() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(79, this->provides_yhard_pushback_top(), output);
  }

  // bool provides_yHard_pushback_bottom = 80;
  if (this->provides_yhard_pushback_bottom() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(80, this->provides_yhard_pushback_bottom(), output);
  }

  // bool ignore_slope_deceleration = 81;
  if (this->ignore_slope_deceleration() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(81, this->ignore_slope_deceleration(), output);
  }

  // bool rotate_offender_with_spin = 82;
  if (this->rotate_offender_with_spin() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(82, this->rotate_offender_with_spin(), output);
  }

  // bool mh_not_trigger_on_ch_hit = 83;
  if (this->mh_not_trigger_on_ch_hit() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(83, this->mh_not_trigger_on_ch_hit(), output);
  }

  // bool mh_not_trigger_on_harder_bullet_hit = 84;
  if (this->mh_not_trigger_on_harder_bullet_hit() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(84, this->mh_not_trigger_on_harder_bullet_hit(), output);
  }

  // bool mh_not_trigger_on_hard_pushback_hit = 85;
  if (this->mh_not_trigger_on_hard_pushback_hit() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(85, this->mh_not_trigger_on_hard_pushback_hit(), output);
  }

  // bool hopper_missile = 86;
  if (this->hopper_missile() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(86, this->hopper_missile(), output);
  }

  // bool beam_rendering = 87;
  if (this->beam_rendering() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(87, this->beam_rendering(), output);
  }

  // uint32 missile_search_interval_pow2Minus1 = 88;
  if (this->missile_search_interval_pow2minus1() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(88, this->missile_search_interval_pow2minus1(), output);
  }

  // bool use_ch_offset_regardless_of_emission_mh = 89;
  if (this->use_ch_offset_regardless_of_emission_mh() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(89, this->use_ch_offset_regardless_of_emission_mh(), output);
  }

  // int32 inplace_vanish_explosion_species_id = 90;
  if (this->inplace_vanish_explosion_species_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(90, this->inplace_vanish_explosion_species_id(), output);
  }

  // int32 anim_looping_rdf_offset = 91;
  if (this->anim_looping_rdf_offset() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(91, this->anim_looping_rdf_offset(), output);
  }

  // int32 explosion_anim_looping_rdf_offset = 92;
  if (this->explosion_anim_looping_rdf_offset() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(92, this->explosion_anim_looping_rdf_offset(), output);
  }

  // float gauge_inc_reduction_ratio = 93;
  if (this->gauge_inc_reduction_ratio() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(93, this->gauge_inc_reduction_ratio(), output);
  }

  // bool mh_inherits_frames_in_bl_state = 94;
  if (this->mh_inherits_frames_in_bl_state() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(94, this->mh_inherits_frames_in_bl_state(), output);
  }

  // uint32 guard_breaker_extra_hit_cnt = 95;
  if (this->guard_breaker_extra_hit_cnt() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(95, this->guard_breaker_extra_hit_cnt(), output);
  }

  // bool takes_def1As_hard_pushback = 96;
  if (this->takes_def1as_hard_pushback() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(96, this->takes_def1as_hard_pushback(), output);
  }

  // uint64 collision_type_mask = 1029;
  if (this->collision_type_mask() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1029, this->collision_type_mask(), output);
  }

  // bool takes_gravity = 1030;
  if (this->takes_gravity() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1030, this->takes_gravity(), output);
  }

  // .shared.BuffConfig buff_config = 1031;
  if (this->has_buff_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1031, HasBitSetters::buff_config(this), output);
  }

  // string character_emit_sfx_name = 2048;
  if (this->character_emit_sfx_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->character_emit_sfx_name().data(), static_cast<int>(this->character_emit_sfx_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "shared.BulletConfig.character_emit_sfx_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2048, this->character_emit_sfx_name(), output);
  }

  // string fireball_emit_sfx_name = 2049;
  if (this->fireball_emit_sfx_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->fireball_emit_sfx_name().data(), static_cast<int>(this->fireball_emit_sfx_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "shared.BulletConfig.fireball_emit_sfx_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2049, this->fireball_emit_sfx_name(), output);
  }

  // string explosion_sfx_name = 2050;
  if (this->explosion_sfx_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->explosion_sfx_name().data(), static_cast<int>(this->explosion_sfx_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "shared.BulletConfig.explosion_sfx_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2050, this->explosion_sfx_name(), output);
  }

  // string active_sfx_name = 2051;
  if (this->active_sfx_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->active_sfx_name().data(), static_cast<int>(this->active_sfx_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "shared.BulletConfig.active_sfx_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2051, this->active_sfx_name(), output);
  }

  // string explosion_on_flesh_sfx_name = 2052;
  if (this->explosion_on_flesh_sfx_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->explosion_on_flesh_sfx_name().data(), static_cast<int>(this->explosion_on_flesh_sfx_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "shared.BulletConfig.explosion_on_flesh_sfx_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2052, this->explosion_on_flesh_sfx_name(), output);
  }

  // string explosion_on_rock_sfx_name = 2053;
  if (this->explosion_on_rock_sfx_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->explosion_on_rock_sfx_name().data(), static_cast<int>(this->explosion_on_rock_sfx_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "shared.BulletConfig.explosion_on_rock_sfx_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2053, this->explosion_on_rock_sfx_name(), output);
  }

  // string explosion_on_metal_sfx_name = 2054;
  if (this->explosion_on_metal_sfx_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->explosion_on_metal_sfx_name().data(), static_cast<int>(this->explosion_on_metal_sfx_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "shared.BulletConfig.explosion_on_metal_sfx_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2054, this->explosion_on_metal_sfx_name(), output);
  }

  // string explosion_on_wood_sfx_name = 2055;
  if (this->explosion_on_wood_sfx_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->explosion_on_wood_sfx_name().data(), static_cast<int>(this->explosion_on_wood_sfx_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "shared.BulletConfig.explosion_on_wood_sfx_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2055, this->explosion_on_wood_sfx_name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:shared.BulletConfig)
}

::google::protobuf::uint8* BulletConfig::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:shared.BulletConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 startup_frames = 1;
  if (this->startup_frames() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->startup_frames(), target);
  }

  // int32 cancellable_st_frame = 2;
  if (this->cancellable_st_frame() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->cancellable_st_frame(), target);
  }

  // int32 cancellable_ed_frame = 3;
  if (this->cancellable_ed_frame() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->cancellable_ed_frame(), target);
  }

  // int32 active_frames = 4;
  if (this->active_frames() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->active_frames(), target);
  }

  // int32 hit_stun_frames = 5;
  if (this->hit_stun_frames() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->hit_stun_frames(), target);
  }

  // int32 block_stun_frames = 6;
  if (this->block_stun_frames() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->block_stun_frames(), target);
  }

  // float pushback_vel_x = 7;
  if (this->pushback_vel_x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->pushback_vel_x(), target);
  }

  // float pushback_vel_y = 8;
  if (this->pushback_vel_y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->pushback_vel_y(), target);
  }

  // int32 damage = 9;
  if (this->damage() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->damage(), target);
  }

  // float self_lock_vel_x = 10;
  if (this->self_lock_vel_x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->self_lock_vel_x(), target);
  }

  // float self_lock_vel_y = 11;
  if (this->self_lock_vel_y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(11, this->self_lock_vel_y(), target);
  }

  // float hitbox_offset_x = 12;
  if (this->hitbox_offset_x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(12, this->hitbox_offset_x(), target);
  }

  // float hitbox_offset_y = 13;
  if (this->hitbox_offset_y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(13, this->hitbox_offset_y(), target);
  }

  // float hitbox_size_x = 14;
  if (this->hitbox_size_x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(14, this->hitbox_size_x(), target);
  }

  // float hitbox_size_y = 15;
  if (this->hitbox_size_y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(15, this->hitbox_size_y(), target);
  }

  // bool blow_up = 16;
  if (this->blow_up() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(16, this->blow_up(), target);
  }

  // int32 species_id = 17;
  if (this->species_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->species_id(), target);
  }

  // int32 explosion_frames = 18;
  if (this->explosion_frames() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->explosion_frames(), target);
  }

  // .shared.BulletType b_type = 19;
  if (this->b_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      19, this->b_type(), target);
  }

  // .shared.MultiHitType mh_type = 20;
  if (this->mh_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      20, this->mh_type(), target);
  }

  // uint32 simultaneous_multi_hit_cnt = 21;
  if (this->simultaneous_multi_hit_cnt() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(21, this->simultaneous_multi_hit_cnt(), target);
  }

  // float speed = 22;
  if (this->speed() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(22, this->speed(), target);
  }

  // int32 dir_x = 23;
  if (this->dir_x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(23, this->dir_x(), target);
  }

  // int32 dir_y = 24;
  if (this->dir_y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(24, this->dir_y(), target);
  }

  // map<int32, uint32> cancel_transit = 25;
  if (!this->cancel_transit().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::int32, ::google::protobuf::uint32 >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::int32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (false &&
        this->cancel_transit().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->cancel_transit().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::int32, ::google::protobuf::uint32 >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::google::protobuf::uint32 >::const_iterator
          it = this->cancel_transit().begin();
          it != this->cancel_transit().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<BulletConfig_CancelTransitEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(cancel_transit_.NewEntryWrapper(items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(25, *entry, target);
      }
    } else {
      ::std::unique_ptr<BulletConfig_CancelTransitEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::google::protobuf::uint32 >::const_iterator
          it = this->cancel_transit().begin();
          it != this->cancel_transit().end(); ++it) {
        entry.reset(cancel_transit_.NewEntryWrapper(it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(25, *entry, target);
      }
    }
  }

  // int32 repeat_quota = 26;
  if (this->repeat_quota() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(26, this->repeat_quota(), target);
  }

  // int32 active_vfx_species_id = 27;
  if (this->active_vfx_species_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(27, this->active_vfx_species_id(), target);
  }

  // int32 explosion_vfx_species_id = 28;
  if (this->explosion_vfx_species_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(28, this->explosion_vfx_species_id(), target);
  }

  // bool allows_walking = 29;
  if (this->allows_walking() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(29, this->allows_walking(), target);
  }

  // bool allows_crouching = 30;
  if (this->allows_crouching() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(30, this->allows_crouching(), target);
  }

  // int32 hardness = 31;
  if (this->hardness() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(31, this->hardness(), target);
  }

  // int32 startup_invinsible_frames = 32;
  if (this->startup_invinsible_frames() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(32, this->startup_invinsible_frames(), target);
  }

  // int32 hit_invinsible_frames = 33;
  if (this->hit_invinsible_frames() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(33, this->hit_invinsible_frames(), target);
  }

  // int32 explosion_species_id = 34;
  if (this->explosion_species_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(34, this->explosion_species_id(), target);
  }

  // int32 perp_acc_mag = 35;
  if (this->perp_acc_mag() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(35, this->perp_acc_mag(), target);
  }

  // bool delay_self_vel_to_active = 36;
  if (this->delay_self_vel_to_active() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(36, this->delay_self_vel_to_active(), target);
  }

  // float speed_if_not_hit = 37;
  if (this->speed_if_not_hit() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(37, this->speed_if_not_hit(), target);
  }

  // bool omit_soft_pushback = 38;
  if (this->omit_soft_pushback() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(38, this->omit_soft_pushback(), target);
  }

  // float hitbox_size_inc_x = 39;
  if (this->hitbox_size_inc_x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(39, this->hitbox_size_inc_x(), target);
  }

  // float hitbox_size_inc_y = 40;
  if (this->hitbox_size_inc_y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(40, this->hitbox_size_inc_y(), target);
  }

  // bool remains_upon_hit = 41;
  if (this->remains_upon_hit() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(41, this->remains_upon_hit(), target);
  }

  // bool rotates_along_velocity = 42;
  if (this->rotates_along_velocity() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(42, this->rotates_along_velocity(), target);
  }

  // int32 default_hard_pushback_bounce_quota = 43;
  if (this->default_hard_pushback_bounce_quota() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(43, this->default_hard_pushback_bounce_quota(), target);
  }

  // float hard_pushback_bounce_norm_factor = 44;
  if (this->hard_pushback_bounce_norm_factor() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(44, this->hard_pushback_bounce_norm_factor(), target);
  }

  // float hard_pushback_bounce_sheer_factor = 45;
  if (this->hard_pushback_bounce_sheer_factor() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(45, this->hard_pushback_bounce_sheer_factor(), target);
  }

  // bool is_pixelated_active_vfx = 46;
  if (this->is_pixelated_active_vfx() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(46, this->is_pixelated_active_vfx(), target);
  }

  // bool is_pixelated_explostion_vfx = 47;
  if (this->is_pixelated_explostion_vfx() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(47, this->is_pixelated_explostion_vfx(), target);
  }

  // bool mh_vanish_on_melee_hit = 48;
  if (this->mh_vanish_on_melee_hit() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(48, this->mh_vanish_on_melee_hit(), target);
  }

  // float down_slope_primer_vel_y = 49;
  if (this->down_slope_primer_vel_y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(49, this->down_slope_primer_vel_y(), target);
  }

  // bool mh_updates_origin_pos = 50;
  if (this->mh_updates_origin_pos() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(50, this->mh_updates_origin_pos(), target);
  }

  // bool beam_collision = 51;
  if (this->beam_collision() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(51, this->beam_collision(), target);
  }

  // float angular_frame_vel_cos = 52;
  if (this->angular_frame_vel_cos() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(52, this->angular_frame_vel_cos(), target);
  }

  // float angular_frame_vel_sin = 53;
  if (this->angular_frame_vel_sin() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(53, this->angular_frame_vel_sin(), target);
  }

  // float vision_offset_x = 54;
  if (this->vision_offset_x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(54, this->vision_offset_x(), target);
  }

  // float vision_offset_y = 55;
  if (this->vision_offset_y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(55, this->vision_offset_y(), target);
  }

  // float vision_size_x = 56;
  if (this->vision_size_x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(56, this->vision_size_x(), target);
  }

  // float vision_size_y = 57;
  if (this->vision_size_y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(57, this->vision_size_y(), target);
  }

  // int32 self_lock_vel_yWhen_flying = 58;
  if (this->self_lock_vel_ywhen_flying() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(58, this->self_lock_vel_ywhen_flying(), target);
  }

  // uint32 elemental_attrs = 59;
  if (this->elemental_attrs() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(59, this->elemental_attrs(), target);
  }

  // bool cancellable_by_inventory_slot_c = 60;
  if (this->cancellable_by_inventory_slot_c() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(60, this->cancellable_by_inventory_slot_c(), target);
  }

  // bool cancellable_by_inventory_slot_d = 61;
  if (this->cancellable_by_inventory_slot_d() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(61, this->cancellable_by_inventory_slot_d(), target);
  }

  // float spin_anchor_x = 62;
  if (this->spin_anchor_x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(62, this->spin_anchor_x(), target);
  }

  // float spin_anchor_y = 63;
  if (this->spin_anchor_y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(63, this->spin_anchor_y(), target);
  }

  // float beam_visual_size_y = 64;
  if (this->beam_visual_size_y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(64, this->beam_visual_size_y(), target);
  }

  // bool touch_explosion_bomb_collision = 65;
  if (this->touch_explosion_bomb_collision() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(65, this->touch_explosion_bomb_collision(), target);
  }

  // bool air_riding_ground_wave = 66;
  if (this->air_riding_ground_wave() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(66, this->air_riding_ground_wave(), target);
  }

  // bool ground_impact_melee_collision = 67;
  if (this->ground_impact_melee_collision() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(67, this->ground_impact_melee_collision(), target);
  }

  // bool wall_impact_melee_collision = 68;
  if (this->wall_impact_melee_collision() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(68, this->wall_impact_melee_collision(), target);
  }

  // bool mh_inherits_spin = 69;
  if (this->mh_inherits_spin() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(69, this->mh_inherits_spin(), target);
  }

  // float init_spin_cos = 70;
  if (this->init_spin_cos() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(70, this->init_spin_cos(), target);
  }

  // float init_spin_sin = 71;
  if (this->init_spin_sin() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(71, this->init_spin_sin(), target);
  }

  // int32 finishing_frames = 72;
  if (this->finishing_frames() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(72, this->finishing_frames(), target);
  }

  // bool no_explosion_on_hard_pushback = 73;
  if (this->no_explosion_on_hard_pushback() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(73, this->no_explosion_on_hard_pushback(), target);
  }

  // int32 startup_vfx_species_id = 74;
  if (this->startup_vfx_species_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(74, this->startup_vfx_species_id(), target);
  }

  // .shared.IfaceCat ifc = 75;
  if (this->ifc() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      75, this->ifc(), target);
  }

  // bool reflect_fireball_xIf_not_harder = 76;
  if (this->reflect_fireball_xif_not_harder() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(76, this->reflect_fireball_xif_not_harder(), target);
  }

  // bool rejects_reflection_from_another_bullet = 77;
  if (this->rejects_reflection_from_another_bullet() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(77, this->rejects_reflection_from_another_bullet(), target);
  }

  // bool provides_xHard_pushback = 78;
  if (this->provides_xhard_pushback() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(78, this->provides_xhard_pushback(), target);
  }

  // bool provides_yHard_pushback_top = 79;
  if (this->provides_yhard_pushback_top() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(79, this->provides_yhard_pushback_top(), target);
  }

  // bool provides_yHard_pushback_bottom = 80;
  if (this->provides_yhard_pushback_bottom() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(80, this->provides_yhard_pushback_bottom(), target);
  }

  // bool ignore_slope_deceleration = 81;
  if (this->ignore_slope_deceleration() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(81, this->ignore_slope_deceleration(), target);
  }

  // bool rotate_offender_with_spin = 82;
  if (this->rotate_offender_with_spin() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(82, this->rotate_offender_with_spin(), target);
  }

  // bool mh_not_trigger_on_ch_hit = 83;
  if (this->mh_not_trigger_on_ch_hit() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(83, this->mh_not_trigger_on_ch_hit(), target);
  }

  // bool mh_not_trigger_on_harder_bullet_hit = 84;
  if (this->mh_not_trigger_on_harder_bullet_hit() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(84, this->mh_not_trigger_on_harder_bullet_hit(), target);
  }

  // bool mh_not_trigger_on_hard_pushback_hit = 85;
  if (this->mh_not_trigger_on_hard_pushback_hit() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(85, this->mh_not_trigger_on_hard_pushback_hit(), target);
  }

  // bool hopper_missile = 86;
  if (this->hopper_missile() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(86, this->hopper_missile(), target);
  }

  // bool beam_rendering = 87;
  if (this->beam_rendering() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(87, this->beam_rendering(), target);
  }

  // uint32 missile_search_interval_pow2Minus1 = 88;
  if (this->missile_search_interval_pow2minus1() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(88, this->missile_search_interval_pow2minus1(), target);
  }

  // bool use_ch_offset_regardless_of_emission_mh = 89;
  if (this->use_ch_offset_regardless_of_emission_mh() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(89, this->use_ch_offset_regardless_of_emission_mh(), target);
  }

  // int32 inplace_vanish_explosion_species_id = 90;
  if (this->inplace_vanish_explosion_species_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(90, this->inplace_vanish_explosion_species_id(), target);
  }

  // int32 anim_looping_rdf_offset = 91;
  if (this->anim_looping_rdf_offset() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(91, this->anim_looping_rdf_offset(), target);
  }

  // int32 explosion_anim_looping_rdf_offset = 92;
  if (this->explosion_anim_looping_rdf_offset() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(92, this->explosion_anim_looping_rdf_offset(), target);
  }

  // float gauge_inc_reduction_ratio = 93;
  if (this->gauge_inc_reduction_ratio() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(93, this->gauge_inc_reduction_ratio(), target);
  }

  // bool mh_inherits_frames_in_bl_state = 94;
  if (this->mh_inherits_frames_in_bl_state() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(94, this->mh_inherits_frames_in_bl_state(), target);
  }

  // uint32 guard_breaker_extra_hit_cnt = 95;
  if (this->guard_breaker_extra_hit_cnt() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(95, this->guard_breaker_extra_hit_cnt(), target);
  }

  // bool takes_def1As_hard_pushback = 96;
  if (this->takes_def1as_hard_pushback() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(96, this->takes_def1as_hard_pushback(), target);
  }

  // uint64 collision_type_mask = 1029;
  if (this->collision_type_mask() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1029, this->collision_type_mask(), target);
  }

  // bool takes_gravity = 1030;
  if (this->takes_gravity() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1030, this->takes_gravity(), target);
  }

  // .shared.BuffConfig buff_config = 1031;
  if (this->has_buff_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1031, HasBitSetters::buff_config(this), target);
  }

  // string character_emit_sfx_name = 2048;
  if (this->character_emit_sfx_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->character_emit_sfx_name().data(), static_cast<int>(this->character_emit_sfx_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "shared.BulletConfig.character_emit_sfx_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2048, this->character_emit_sfx_name(), target);
  }

  // string fireball_emit_sfx_name = 2049;
  if (this->fireball_emit_sfx_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->fireball_emit_sfx_name().data(), static_cast<int>(this->fireball_emit_sfx_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "shared.BulletConfig.fireball_emit_sfx_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2049, this->fireball_emit_sfx_name(), target);
  }

  // string explosion_sfx_name = 2050;
  if (this->explosion_sfx_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->explosion_sfx_name().data(), static_cast<int>(this->explosion_sfx_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "shared.BulletConfig.explosion_sfx_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2050, this->explosion_sfx_name(), target);
  }

  // string active_sfx_name = 2051;
  if (this->active_sfx_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->active_sfx_name().data(), static_cast<int>(this->active_sfx_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "shared.BulletConfig.active_sfx_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2051, this->active_sfx_name(), target);
  }

  // string explosion_on_flesh_sfx_name = 2052;
  if (this->explosion_on_flesh_sfx_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->explosion_on_flesh_sfx_name().data(), static_cast<int>(this->explosion_on_flesh_sfx_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "shared.BulletConfig.explosion_on_flesh_sfx_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2052, this->explosion_on_flesh_sfx_name(), target);
  }

  // string explosion_on_rock_sfx_name = 2053;
  if (this->explosion_on_rock_sfx_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->explosion_on_rock_sfx_name().data(), static_cast<int>(this->explosion_on_rock_sfx_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "shared.BulletConfig.explosion_on_rock_sfx_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2053, this->explosion_on_rock_sfx_name(), target);
  }

  // string explosion_on_metal_sfx_name = 2054;
  if (this->explosion_on_metal_sfx_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->explosion_on_metal_sfx_name().data(), static_cast<int>(this->explosion_on_metal_sfx_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "shared.BulletConfig.explosion_on_metal_sfx_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2054, this->explosion_on_metal_sfx_name(), target);
  }

  // string explosion_on_wood_sfx_name = 2055;
  if (this->explosion_on_wood_sfx_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->explosion_on_wood_sfx_name().data(), static_cast<int>(this->explosion_on_wood_sfx_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "shared.BulletConfig.explosion_on_wood_sfx_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2055, this->explosion_on_wood_sfx_name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:shared.BulletConfig)
  return target;
}

size_t BulletConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:shared.BulletConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<int32, uint32> cancel_transit = 25;
  total_size += 2 *
      ::google::protobuf::internal::FromIntSize(this->cancel_transit_size());
  {
    ::std::unique_ptr<BulletConfig_CancelTransitEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::google::protobuf::int32, ::google::protobuf::uint32 >::const_iterator
        it = this->cancel_transit().begin();
        it != this->cancel_transit().end(); ++it) {
      entry.reset(cancel_transit_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // string character_emit_sfx_name = 2048;
  if (this->character_emit_sfx_name().size() > 0) {
    total_size += 3 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->character_emit_sfx_name());
  }

  // string fireball_emit_sfx_name = 2049;
  if (this->fireball_emit_sfx_name().size() > 0) {
    total_size += 3 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->fireball_emit_sfx_name());
  }

  // string explosion_sfx_name = 2050;
  if (this->explosion_sfx_name().size() > 0) {
    total_size += 3 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->explosion_sfx_name());
  }

  // string active_sfx_name = 2051;
  if (this->active_sfx_name().size() > 0) {
    total_size += 3 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->active_sfx_name());
  }

  // string explosion_on_flesh_sfx_name = 2052;
  if (this->explosion_on_flesh_sfx_name().size() > 0) {
    total_size += 3 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->explosion_on_flesh_sfx_name());
  }

  // string explosion_on_rock_sfx_name = 2053;
  if (this->explosion_on_rock_sfx_name().size() > 0) {
    total_size += 3 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->explosion_on_rock_sfx_name());
  }

  // string explosion_on_metal_sfx_name = 2054;
  if (this->explosion_on_metal_sfx_name().size() > 0) {
    total_size += 3 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->explosion_on_metal_sfx_name());
  }

  // string explosion_on_wood_sfx_name = 2055;
  if (this->explosion_on_wood_sfx_name().size() > 0) {
    total_size += 3 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->explosion_on_wood_sfx_name());
  }

  // .shared.BuffConfig buff_config = 1031;
  if (this->has_buff_config()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *buff_config_);
  }

  // int32 startup_frames = 1;
  if (this->startup_frames() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->startup_frames());
  }

  // int32 cancellable_st_frame = 2;
  if (this->cancellable_st_frame() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->cancellable_st_frame());
  }

  // int32 cancellable_ed_frame = 3;
  if (this->cancellable_ed_frame() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->cancellable_ed_frame());
  }

  // int32 active_frames = 4;
  if (this->active_frames() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->active_frames());
  }

  // int32 hit_stun_frames = 5;
  if (this->hit_stun_frames() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->hit_stun_frames());
  }

  // int32 block_stun_frames = 6;
  if (this->block_stun_frames() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->block_stun_frames());
  }

  // float pushback_vel_x = 7;
  if (this->pushback_vel_x() != 0) {
    total_size += 1 + 4;
  }

  // float pushback_vel_y = 8;
  if (this->pushback_vel_y() != 0) {
    total_size += 1 + 4;
  }

  // int32 damage = 9;
  if (this->damage() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->damage());
  }

  // float self_lock_vel_x = 10;
  if (this->self_lock_vel_x() != 0) {
    total_size += 1 + 4;
  }

  // float self_lock_vel_y = 11;
  if (this->self_lock_vel_y() != 0) {
    total_size += 1 + 4;
  }

  // float hitbox_offset_x = 12;
  if (this->hitbox_offset_x() != 0) {
    total_size += 1 + 4;
  }

  // float hitbox_offset_y = 13;
  if (this->hitbox_offset_y() != 0) {
    total_size += 1 + 4;
  }

  // float hitbox_size_x = 14;
  if (this->hitbox_size_x() != 0) {
    total_size += 1 + 4;
  }

  // float hitbox_size_y = 15;
  if (this->hitbox_size_y() != 0) {
    total_size += 1 + 4;
  }

  // int32 species_id = 17;
  if (this->species_id() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->species_id());
  }

  // int32 explosion_frames = 18;
  if (this->explosion_frames() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->explosion_frames());
  }

  // .shared.BulletType b_type = 19;
  if (this->b_type() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->b_type());
  }

  // .shared.MultiHitType mh_type = 20;
  if (this->mh_type() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->mh_type());
  }

  // uint32 simultaneous_multi_hit_cnt = 21;
  if (this->simultaneous_multi_hit_cnt() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->simultaneous_multi_hit_cnt());
  }

  // float speed = 22;
  if (this->speed() != 0) {
    total_size += 2 + 4;
  }

  // int32 dir_x = 23;
  if (this->dir_x() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->dir_x());
  }

  // int32 dir_y = 24;
  if (this->dir_y() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->dir_y());
  }

  // int32 repeat_quota = 26;
  if (this->repeat_quota() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->repeat_quota());
  }

  // int32 active_vfx_species_id = 27;
  if (this->active_vfx_species_id() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->active_vfx_species_id());
  }

  // bool blow_up = 16;
  if (this->blow_up() != 0) {
    total_size += 2 + 1;
  }

  // bool allows_walking = 29;
  if (this->allows_walking() != 0) {
    total_size += 2 + 1;
  }

  // bool allows_crouching = 30;
  if (this->allows_crouching() != 0) {
    total_size += 2 + 1;
  }

  // bool delay_self_vel_to_active = 36;
  if (this->delay_self_vel_to_active() != 0) {
    total_size += 2 + 1;
  }

  // int32 explosion_vfx_species_id = 28;
  if (this->explosion_vfx_species_id() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->explosion_vfx_species_id());
  }

  // int32 hardness = 31;
  if (this->hardness() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->hardness());
  }

  // int32 startup_invinsible_frames = 32;
  if (this->startup_invinsible_frames() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->startup_invinsible_frames());
  }

  // int32 hit_invinsible_frames = 33;
  if (this->hit_invinsible_frames() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->hit_invinsible_frames());
  }

  // int32 explosion_species_id = 34;
  if (this->explosion_species_id() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->explosion_species_id());
  }

  // int32 perp_acc_mag = 35;
  if (this->perp_acc_mag() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->perp_acc_mag());
  }

  // float speed_if_not_hit = 37;
  if (this->speed_if_not_hit() != 0) {
    total_size += 2 + 4;
  }

  // float hitbox_size_inc_x = 39;
  if (this->hitbox_size_inc_x() != 0) {
    total_size += 2 + 4;
  }

  // float hitbox_size_inc_y = 40;
  if (this->hitbox_size_inc_y() != 0) {
    total_size += 2 + 4;
  }

  // bool omit_soft_pushback = 38;
  if (this->omit_soft_pushback() != 0) {
    total_size += 2 + 1;
  }

  // bool remains_upon_hit = 41;
  if (this->remains_upon_hit() != 0) {
    total_size += 2 + 1;
  }

  // bool rotates_along_velocity = 42;
  if (this->rotates_along_velocity() != 0) {
    total_size += 2 + 1;
  }

  // bool is_pixelated_active_vfx = 46;
  if (this->is_pixelated_active_vfx() != 0) {
    total_size += 2 + 1;
  }

  // int32 default_hard_pushback_bounce_quota = 43;
  if (this->default_hard_pushback_bounce_quota() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->default_hard_pushback_bounce_quota());
  }

  // float hard_pushback_bounce_norm_factor = 44;
  if (this->hard_pushback_bounce_norm_factor() != 0) {
    total_size += 2 + 4;
  }

  // float hard_pushback_bounce_sheer_factor = 45;
  if (this->hard_pushback_bounce_sheer_factor() != 0) {
    total_size += 2 + 4;
  }

  // float down_slope_primer_vel_y = 49;
  if (this->down_slope_primer_vel_y() != 0) {
    total_size += 2 + 4;
  }

  // bool is_pixelated_explostion_vfx = 47;
  if (this->is_pixelated_explostion_vfx() != 0) {
    total_size += 2 + 1;
  }

  // bool mh_vanish_on_melee_hit = 48;
  if (this->mh_vanish_on_melee_hit() != 0) {
    total_size += 2 + 1;
  }

  // bool mh_updates_origin_pos = 50;
  if (this->mh_updates_origin_pos() != 0) {
    total_size += 2 + 1;
  }

  // bool beam_collision = 51;
  if (this->beam_collision() != 0) {
    total_size += 2 + 1;
  }

  // float angular_frame_vel_cos = 52;
  if (this->angular_frame_vel_cos() != 0) {
    total_size += 2 + 4;
  }

  // float angular_frame_vel_sin = 53;
  if (this->angular_frame_vel_sin() != 0) {
    total_size += 2 + 4;
  }

  // float vision_offset_x = 54;
  if (this->vision_offset_x() != 0) {
    total_size += 2 + 4;
  }

  // float vision_offset_y = 55;
  if (this->vision_offset_y() != 0) {
    total_size += 2 + 4;
  }

  // float vision_size_x = 56;
  if (this->vision_size_x() != 0) {
    total_size += 2 + 4;
  }

  // float vision_size_y = 57;
  if (this->vision_size_y() != 0) {
    total_size += 2 + 4;
  }

  // int32 self_lock_vel_yWhen_flying = 58;
  if (this->self_lock_vel_ywhen_flying() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->self_lock_vel_ywhen_flying());
  }

  // uint32 elemental_attrs = 59;
  if (this->elemental_attrs() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->elemental_attrs());
  }

  // float spin_anchor_x = 62;
  if (this->spin_anchor_x() != 0) {
    total_size += 2 + 4;
  }

  // float spin_anchor_y = 63;
  if (this->spin_anchor_y() != 0) {
    total_size += 2 + 4;
  }

  // bool cancellable_by_inventory_slot_c = 60;
  if (this->cancellable_by_inventory_slot_c() != 0) {
    total_size += 2 + 1;
  }

  // bool cancellable_by_inventory_slot_d = 61;
  if (this->cancellable_by_inventory_slot_d() != 0) {
    total_size += 2 + 1;
  }

  // bool touch_explosion_bomb_collision = 65;
  if (this->touch_explosion_bomb_collision() != 0) {
    total_size += 2 + 1;
  }

  // bool air_riding_ground_wave = 66;
  if (this->air_riding_ground_wave() != 0) {
    total_size += 2 + 1;
  }

  // float beam_visual_size_y = 64;
  if (this->beam_visual_size_y() != 0) {
    total_size += 2 + 4;
  }

  // bool ground_impact_melee_collision = 67;
  if (this->ground_impact_melee_collision() != 0) {
    total_size += 2 + 1;
  }

  // bool wall_impact_melee_collision = 68;
  if (this->wall_impact_melee_collision() != 0) {
    total_size += 2 + 1;
  }

  // bool mh_inherits_spin = 69;
  if (this->mh_inherits_spin() != 0) {
    total_size += 2 + 1;
  }

  // bool no_explosion_on_hard_pushback = 73;
  if (this->no_explosion_on_hard_pushback() != 0) {
    total_size += 2 + 1;
  }

  // float init_spin_cos = 70;
  if (this->init_spin_cos() != 0) {
    total_size += 2 + 4;
  }

  // float init_spin_sin = 71;
  if (this->init_spin_sin() != 0) {
    total_size += 2 + 4;
  }

  // int32 finishing_frames = 72;
  if (this->finishing_frames() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->finishing_frames());
  }

  // int32 startup_vfx_species_id = 74;
  if (this->startup_vfx_species_id() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->startup_vfx_species_id());
  }

  // .shared.IfaceCat ifc = 75;
  if (this->ifc() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->ifc());
  }

  // bool reflect_fireball_xIf_not_harder = 76;
  if (this->reflect_fireball_xif_not_harder() != 0) {
    total_size += 2 + 1;
  }

  // bool rejects_reflection_from_another_bullet = 77;
  if (this->rejects_reflection_from_another_bullet() != 0) {
    total_size += 2 + 1;
  }

  // bool provides_xHard_pushback = 78;
  if (this->provides_xhard_pushback() != 0) {
    total_size += 2 + 1;
  }

  // bool provides_yHard_pushback_top = 79;
  if (this->provides_yhard_pushback_top() != 0) {
    total_size += 2 + 1;
  }

  // bool provides_yHard_pushback_bottom = 80;
  if (this->provides_yhard_pushback_bottom() != 0) {
    total_size += 2 + 1;
  }

  // bool ignore_slope_deceleration = 81;
  if (this->ignore_slope_deceleration() != 0) {
    total_size += 2 + 1;
  }

  // bool rotate_offender_with_spin = 82;
  if (this->rotate_offender_with_spin() != 0) {
    total_size += 2 + 1;
  }

  // bool mh_not_trigger_on_ch_hit = 83;
  if (this->mh_not_trigger_on_ch_hit() != 0) {
    total_size += 2 + 1;
  }

  // bool mh_not_trigger_on_harder_bullet_hit = 84;
  if (this->mh_not_trigger_on_harder_bullet_hit() != 0) {
    total_size += 2 + 1;
  }

  // bool mh_not_trigger_on_hard_pushback_hit = 85;
  if (this->mh_not_trigger_on_hard_pushback_hit() != 0) {
    total_size += 2 + 1;
  }

  // bool hopper_missile = 86;
  if (this->hopper_missile() != 0) {
    total_size += 2 + 1;
  }

  // bool beam_rendering = 87;
  if (this->beam_rendering() != 0) {
    total_size += 2 + 1;
  }

  // uint32 missile_search_interval_pow2Minus1 = 88;
  if (this->missile_search_interval_pow2minus1() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->missile_search_interval_pow2minus1());
  }

  // int32 inplace_vanish_explosion_species_id = 90;
  if (this->inplace_vanish_explosion_species_id() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->inplace_vanish_explosion_species_id());
  }

  // int32 anim_looping_rdf_offset = 91;
  if (this->anim_looping_rdf_offset() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->anim_looping_rdf_offset());
  }

  // int32 explosion_anim_looping_rdf_offset = 92;
  if (this->explosion_anim_looping_rdf_offset() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->explosion_anim_looping_rdf_offset());
  }

  // float gauge_inc_reduction_ratio = 93;
  if (this->gauge_inc_reduction_ratio() != 0) {
    total_size += 2 + 4;
  }

  // uint32 guard_breaker_extra_hit_cnt = 95;
  if (this->guard_breaker_extra_hit_cnt() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->guard_breaker_extra_hit_cnt());
  }

  // bool use_ch_offset_regardless_of_emission_mh = 89;
  if (this->use_ch_offset_regardless_of_emission_mh() != 0) {
    total_size += 2 + 1;
  }

  // bool mh_inherits_frames_in_bl_state = 94;
  if (this->mh_inherits_frames_in_bl_state() != 0) {
    total_size += 2 + 1;
  }

  // bool takes_def1As_hard_pushback = 96;
  if (this->takes_def1as_hard_pushback() != 0) {
    total_size += 2 + 1;
  }

  // bool takes_gravity = 1030;
  if (this->takes_gravity() != 0) {
    total_size += 2 + 1;
  }

  // uint64 collision_type_mask = 1029;
  if (this->collision_type_mask() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->collision_type_mask());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BulletConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:shared.BulletConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const BulletConfig* source =
      ::google::protobuf::DynamicCastToGenerated<BulletConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:shared.BulletConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:shared.BulletConfig)
    MergeFrom(*source);
  }
}

void BulletConfig::MergeFrom(const BulletConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:shared.BulletConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cancel_transit_.MergeFrom(from.cancel_transit_);
  if (from.character_emit_sfx_name().size() > 0) {

    character_emit_sfx_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.character_emit_sfx_name_);
  }
  if (from.fireball_emit_sfx_name().size() > 0) {

    fireball_emit_sfx_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fireball_emit_sfx_name_);
  }
  if (from.explosion_sfx_name().size() > 0) {

    explosion_sfx_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.explosion_sfx_name_);
  }
  if (from.active_sfx_name().size() > 0) {

    active_sfx_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.active_sfx_name_);
  }
  if (from.explosion_on_flesh_sfx_name().size() > 0) {

    explosion_on_flesh_sfx_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.explosion_on_flesh_sfx_name_);
  }
  if (from.explosion_on_rock_sfx_name().size() > 0) {

    explosion_on_rock_sfx_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.explosion_on_rock_sfx_name_);
  }
  if (from.explosion_on_metal_sfx_name().size() > 0) {

    explosion_on_metal_sfx_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.explosion_on_metal_sfx_name_);
  }
  if (from.explosion_on_wood_sfx_name().size() > 0) {

    explosion_on_wood_sfx_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.explosion_on_wood_sfx_name_);
  }
  if (from.has_buff_config()) {
    mutable_buff_config()->::shared::BuffConfig::MergeFrom(from.buff_config());
  }
  if (from.startup_frames() != 0) {
    set_startup_frames(from.startup_frames());
  }
  if (from.cancellable_st_frame() != 0) {
    set_cancellable_st_frame(from.cancellable_st_frame());
  }
  if (from.cancellable_ed_frame() != 0) {
    set_cancellable_ed_frame(from.cancellable_ed_frame());
  }
  if (from.active_frames() != 0) {
    set_active_frames(from.active_frames());
  }
  if (from.hit_stun_frames() != 0) {
    set_hit_stun_frames(from.hit_stun_frames());
  }
  if (from.block_stun_frames() != 0) {
    set_block_stun_frames(from.block_stun_frames());
  }
  if (from.pushback_vel_x() != 0) {
    set_pushback_vel_x(from.pushback_vel_x());
  }
  if (from.pushback_vel_y() != 0) {
    set_pushback_vel_y(from.pushback_vel_y());
  }
  if (from.damage() != 0) {
    set_damage(from.damage());
  }
  if (from.self_lock_vel_x() != 0) {
    set_self_lock_vel_x(from.self_lock_vel_x());
  }
  if (from.self_lock_vel_y() != 0) {
    set_self_lock_vel_y(from.self_lock_vel_y());
  }
  if (from.hitbox_offset_x() != 0) {
    set_hitbox_offset_x(from.hitbox_offset_x());
  }
  if (from.hitbox_offset_y() != 0) {
    set_hitbox_offset_y(from.hitbox_offset_y());
  }
  if (from.hitbox_size_x() != 0) {
    set_hitbox_size_x(from.hitbox_size_x());
  }
  if (from.hitbox_size_y() != 0) {
    set_hitbox_size_y(from.hitbox_size_y());
  }
  if (from.species_id() != 0) {
    set_species_id(from.species_id());
  }
  if (from.explosion_frames() != 0) {
    set_explosion_frames(from.explosion_frames());
  }
  if (from.b_type() != 0) {
    set_b_type(from.b_type());
  }
  if (from.mh_type() != 0) {
    set_mh_type(from.mh_type());
  }
  if (from.simultaneous_multi_hit_cnt() != 0) {
    set_simultaneous_multi_hit_cnt(from.simultaneous_multi_hit_cnt());
  }
  if (from.speed() != 0) {
    set_speed(from.speed());
  }
  if (from.dir_x() != 0) {
    set_dir_x(from.dir_x());
  }
  if (from.dir_y() != 0) {
    set_dir_y(from.dir_y());
  }
  if (from.repeat_quota() != 0) {
    set_repeat_quota(from.repeat_quota());
  }
  if (from.active_vfx_species_id() != 0) {
    set_active_vfx_species_id(from.active_vfx_species_id());
  }
  if (from.blow_up() != 0) {
    set_blow_up(from.blow_up());
  }
  if (from.allows_walking() != 0) {
    set_allows_walking(from.allows_walking());
  }
  if (from.allows_crouching() != 0) {
    set_allows_crouching(from.allows_crouching());
  }
  if (from.delay_self_vel_to_active() != 0) {
    set_delay_self_vel_to_active(from.delay_self_vel_to_active());
  }
  if (from.explosion_vfx_species_id() != 0) {
    set_explosion_vfx_species_id(from.explosion_vfx_species_id());
  }
  if (from.hardness() != 0) {
    set_hardness(from.hardness());
  }
  if (from.startup_invinsible_frames() != 0) {
    set_startup_invinsible_frames(from.startup_invinsible_frames());
  }
  if (from.hit_invinsible_frames() != 0) {
    set_hit_invinsible_frames(from.hit_invinsible_frames());
  }
  if (from.explosion_species_id() != 0) {
    set_explosion_species_id(from.explosion_species_id());
  }
  if (from.perp_acc_mag() != 0) {
    set_perp_acc_mag(from.perp_acc_mag());
  }
  if (from.speed_if_not_hit() != 0) {
    set_speed_if_not_hit(from.speed_if_not_hit());
  }
  if (from.hitbox_size_inc_x() != 0) {
    set_hitbox_size_inc_x(from.hitbox_size_inc_x());
  }
  if (from.hitbox_size_inc_y() != 0) {
    set_hitbox_size_inc_y(from.hitbox_size_inc_y());
  }
  if (from.omit_soft_pushback() != 0) {
    set_omit_soft_pushback(from.omit_soft_pushback());
  }
  if (from.remains_upon_hit() != 0) {
    set_remains_upon_hit(from.remains_upon_hit());
  }
  if (from.rotates_along_velocity() != 0) {
    set_rotates_along_velocity(from.rotates_along_velocity());
  }
  if (from.is_pixelated_active_vfx() != 0) {
    set_is_pixelated_active_vfx(from.is_pixelated_active_vfx());
  }
  if (from.default_hard_pushback_bounce_quota() != 0) {
    set_default_hard_pushback_bounce_quota(from.default_hard_pushback_bounce_quota());
  }
  if (from.hard_pushback_bounce_norm_factor() != 0) {
    set_hard_pushback_bounce_norm_factor(from.hard_pushback_bounce_norm_factor());
  }
  if (from.hard_pushback_bounce_sheer_factor() != 0) {
    set_hard_pushback_bounce_sheer_factor(from.hard_pushback_bounce_sheer_factor());
  }
  if (from.down_slope_primer_vel_y() != 0) {
    set_down_slope_primer_vel_y(from.down_slope_primer_vel_y());
  }
  if (from.is_pixelated_explostion_vfx() != 0) {
    set_is_pixelated_explostion_vfx(from.is_pixelated_explostion_vfx());
  }
  if (from.mh_vanish_on_melee_hit() != 0) {
    set_mh_vanish_on_melee_hit(from.mh_vanish_on_melee_hit());
  }
  if (from.mh_updates_origin_pos() != 0) {
    set_mh_updates_origin_pos(from.mh_updates_origin_pos());
  }
  if (from.beam_collision() != 0) {
    set_beam_collision(from.beam_collision());
  }
  if (from.angular_frame_vel_cos() != 0) {
    set_angular_frame_vel_cos(from.angular_frame_vel_cos());
  }
  if (from.angular_frame_vel_sin() != 0) {
    set_angular_frame_vel_sin(from.angular_frame_vel_sin());
  }
  if (from.vision_offset_x() != 0) {
    set_vision_offset_x(from.vision_offset_x());
  }
  if (from.vision_offset_y() != 0) {
    set_vision_offset_y(from.vision_offset_y());
  }
  if (from.vision_size_x() != 0) {
    set_vision_size_x(from.vision_size_x());
  }
  if (from.vision_size_y() != 0) {
    set_vision_size_y(from.vision_size_y());
  }
  if (from.self_lock_vel_ywhen_flying() != 0) {
    set_self_lock_vel_ywhen_flying(from.self_lock_vel_ywhen_flying());
  }
  if (from.elemental_attrs() != 0) {
    set_elemental_attrs(from.elemental_attrs());
  }
  if (from.spin_anchor_x() != 0) {
    set_spin_anchor_x(from.spin_anchor_x());
  }
  if (from.spin_anchor_y() != 0) {
    set_spin_anchor_y(from.spin_anchor_y());
  }
  if (from.cancellable_by_inventory_slot_c() != 0) {
    set_cancellable_by_inventory_slot_c(from.cancellable_by_inventory_slot_c());
  }
  if (from.cancellable_by_inventory_slot_d() != 0) {
    set_cancellable_by_inventory_slot_d(from.cancellable_by_inventory_slot_d());
  }
  if (from.touch_explosion_bomb_collision() != 0) {
    set_touch_explosion_bomb_collision(from.touch_explosion_bomb_collision());
  }
  if (from.air_riding_ground_wave() != 0) {
    set_air_riding_ground_wave(from.air_riding_ground_wave());
  }
  if (from.beam_visual_size_y() != 0) {
    set_beam_visual_size_y(from.beam_visual_size_y());
  }
  if (from.ground_impact_melee_collision() != 0) {
    set_ground_impact_melee_collision(from.ground_impact_melee_collision());
  }
  if (from.wall_impact_melee_collision() != 0) {
    set_wall_impact_melee_collision(from.wall_impact_melee_collision());
  }
  if (from.mh_inherits_spin() != 0) {
    set_mh_inherits_spin(from.mh_inherits_spin());
  }
  if (from.no_explosion_on_hard_pushback() != 0) {
    set_no_explosion_on_hard_pushback(from.no_explosion_on_hard_pushback());
  }
  if (from.init_spin_cos() != 0) {
    set_init_spin_cos(from.init_spin_cos());
  }
  if (from.init_spin_sin() != 0) {
    set_init_spin_sin(from.init_spin_sin());
  }
  if (from.finishing_frames() != 0) {
    set_finishing_frames(from.finishing_frames());
  }
  if (from.startup_vfx_species_id() != 0) {
    set_startup_vfx_species_id(from.startup_vfx_species_id());
  }
  if (from.ifc() != 0) {
    set_ifc(from.ifc());
  }
  if (from.reflect_fireball_xif_not_harder() != 0) {
    set_reflect_fireball_xif_not_harder(from.reflect_fireball_xif_not_harder());
  }
  if (from.rejects_reflection_from_another_bullet() != 0) {
    set_rejects_reflection_from_another_bullet(from.rejects_reflection_from_another_bullet());
  }
  if (from.provides_xhard_pushback() != 0) {
    set_provides_xhard_pushback(from.provides_xhard_pushback());
  }
  if (from.provides_yhard_pushback_top() != 0) {
    set_provides_yhard_pushback_top(from.provides_yhard_pushback_top());
  }
  if (from.provides_yhard_pushback_bottom() != 0) {
    set_provides_yhard_pushback_bottom(from.provides_yhard_pushback_bottom());
  }
  if (from.ignore_slope_deceleration() != 0) {
    set_ignore_slope_deceleration(from.ignore_slope_deceleration());
  }
  if (from.rotate_offender_with_spin() != 0) {
    set_rotate_offender_with_spin(from.rotate_offender_with_spin());
  }
  if (from.mh_not_trigger_on_ch_hit() != 0) {
    set_mh_not_trigger_on_ch_hit(from.mh_not_trigger_on_ch_hit());
  }
  if (from.mh_not_trigger_on_harder_bullet_hit() != 0) {
    set_mh_not_trigger_on_harder_bullet_hit(from.mh_not_trigger_on_harder_bullet_hit());
  }
  if (from.mh_not_trigger_on_hard_pushback_hit() != 0) {
    set_mh_not_trigger_on_hard_pushback_hit(from.mh_not_trigger_on_hard_pushback_hit());
  }
  if (from.hopper_missile() != 0) {
    set_hopper_missile(from.hopper_missile());
  }
  if (from.beam_rendering() != 0) {
    set_beam_rendering(from.beam_rendering());
  }
  if (from.missile_search_interval_pow2minus1() != 0) {
    set_missile_search_interval_pow2minus1(from.missile_search_interval_pow2minus1());
  }
  if (from.inplace_vanish_explosion_species_id() != 0) {
    set_inplace_vanish_explosion_species_id(from.inplace_vanish_explosion_species_id());
  }
  if (from.anim_looping_rdf_offset() != 0) {
    set_anim_looping_rdf_offset(from.anim_looping_rdf_offset());
  }
  if (from.explosion_anim_looping_rdf_offset() != 0) {
    set_explosion_anim_looping_rdf_offset(from.explosion_anim_looping_rdf_offset());
  }
  if (from.gauge_inc_reduction_ratio() != 0) {
    set_gauge_inc_reduction_ratio(from.gauge_inc_reduction_ratio());
  }
  if (from.guard_breaker_extra_hit_cnt() != 0) {
    set_guard_breaker_extra_hit_cnt(from.guard_breaker_extra_hit_cnt());
  }
  if (from.use_ch_offset_regardless_of_emission_mh() != 0) {
    set_use_ch_offset_regardless_of_emission_mh(from.use_ch_offset_regardless_of_emission_mh());
  }
  if (from.mh_inherits_frames_in_bl_state() != 0) {
    set_mh_inherits_frames_in_bl_state(from.mh_inherits_frames_in_bl_state());
  }
  if (from.takes_def1as_hard_pushback() != 0) {
    set_takes_def1as_hard_pushback(from.takes_def1as_hard_pushback());
  }
  if (from.takes_gravity() != 0) {
    set_takes_gravity(from.takes_gravity());
  }
  if (from.collision_type_mask() != 0) {
    set_collision_type_mask(from.collision_type_mask());
  }
}

void BulletConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:shared.BulletConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BulletConfig::CopyFrom(const BulletConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:shared.BulletConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BulletConfig::IsInitialized() const {
  return true;
}

void BulletConfig::Swap(BulletConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BulletConfig::InternalSwap(BulletConfig* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  cancel_transit_.Swap(&other->cancel_transit_);
  character_emit_sfx_name_.Swap(&other->character_emit_sfx_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  fireball_emit_sfx_name_.Swap(&other->fireball_emit_sfx_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  explosion_sfx_name_.Swap(&other->explosion_sfx_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  active_sfx_name_.Swap(&other->active_sfx_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  explosion_on_flesh_sfx_name_.Swap(&other->explosion_on_flesh_sfx_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  explosion_on_rock_sfx_name_.Swap(&other->explosion_on_rock_sfx_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  explosion_on_metal_sfx_name_.Swap(&other->explosion_on_metal_sfx_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  explosion_on_wood_sfx_name_.Swap(&other->explosion_on_wood_sfx_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(buff_config_, other->buff_config_);
  swap(startup_frames_, other->startup_frames_);
  swap(cancellable_st_frame_, other->cancellable_st_frame_);
  swap(cancellable_ed_frame_, other->cancellable_ed_frame_);
  swap(active_frames_, other->active_frames_);
  swap(hit_stun_frames_, other->hit_stun_frames_);
  swap(block_stun_frames_, other->block_stun_frames_);
  swap(pushback_vel_x_, other->pushback_vel_x_);
  swap(pushback_vel_y_, other->pushback_vel_y_);
  swap(damage_, other->damage_);
  swap(self_lock_vel_x_, other->self_lock_vel_x_);
  swap(self_lock_vel_y_, other->self_lock_vel_y_);
  swap(hitbox_offset_x_, other->hitbox_offset_x_);
  swap(hitbox_offset_y_, other->hitbox_offset_y_);
  swap(hitbox_size_x_, other->hitbox_size_x_);
  swap(hitbox_size_y_, other->hitbox_size_y_);
  swap(species_id_, other->species_id_);
  swap(explosion_frames_, other->explosion_frames_);
  swap(b_type_, other->b_type_);
  swap(mh_type_, other->mh_type_);
  swap(simultaneous_multi_hit_cnt_, other->simultaneous_multi_hit_cnt_);
  swap(speed_, other->speed_);
  swap(dir_x_, other->dir_x_);
  swap(dir_y_, other->dir_y_);
  swap(repeat_quota_, other->repeat_quota_);
  swap(active_vfx_species_id_, other->active_vfx_species_id_);
  swap(blow_up_, other->blow_up_);
  swap(allows_walking_, other->allows_walking_);
  swap(allows_crouching_, other->allows_crouching_);
  swap(delay_self_vel_to_active_, other->delay_self_vel_to_active_);
  swap(explosion_vfx_species_id_, other->explosion_vfx_species_id_);
  swap(hardness_, other->hardness_);
  swap(startup_invinsible_frames_, other->startup_invinsible_frames_);
  swap(hit_invinsible_frames_, other->hit_invinsible_frames_);
  swap(explosion_species_id_, other->explosion_species_id_);
  swap(perp_acc_mag_, other->perp_acc_mag_);
  swap(speed_if_not_hit_, other->speed_if_not_hit_);
  swap(hitbox_size_inc_x_, other->hitbox_size_inc_x_);
  swap(hitbox_size_inc_y_, other->hitbox_size_inc_y_);
  swap(omit_soft_pushback_, other->omit_soft_pushback_);
  swap(remains_upon_hit_, other->remains_upon_hit_);
  swap(rotates_along_velocity_, other->rotates_along_velocity_);
  swap(is_pixelated_active_vfx_, other->is_pixelated_active_vfx_);
  swap(default_hard_pushback_bounce_quota_, other->default_hard_pushback_bounce_quota_);
  swap(hard_pushback_bounce_norm_factor_, other->hard_pushback_bounce_norm_factor_);
  swap(hard_pushback_bounce_sheer_factor_, other->hard_pushback_bounce_sheer_factor_);
  swap(down_slope_primer_vel_y_, other->down_slope_primer_vel_y_);
  swap(is_pixelated_explostion_vfx_, other->is_pixelated_explostion_vfx_);
  swap(mh_vanish_on_melee_hit_, other->mh_vanish_on_melee_hit_);
  swap(mh_updates_origin_pos_, other->mh_updates_origin_pos_);
  swap(beam_collision_, other->beam_collision_);
  swap(angular_frame_vel_cos_, other->angular_frame_vel_cos_);
  swap(angular_frame_vel_sin_, other->angular_frame_vel_sin_);
  swap(vision_offset_x_, other->vision_offset_x_);
  swap(vision_offset_y_, other->vision_offset_y_);
  swap(vision_size_x_, other->vision_size_x_);
  swap(vision_size_y_, other->vision_size_y_);
  swap(self_lock_vel_ywhen_flying_, other->self_lock_vel_ywhen_flying_);
  swap(elemental_attrs_, other->elemental_attrs_);
  swap(spin_anchor_x_, other->spin_anchor_x_);
  swap(spin_anchor_y_, other->spin_anchor_y_);
  swap(cancellable_by_inventory_slot_c_, other->cancellable_by_inventory_slot_c_);
  swap(cancellable_by_inventory_slot_d_, other->cancellable_by_inventory_slot_d_);
  swap(touch_explosion_bomb_collision_, other->touch_explosion_bomb_collision_);
  swap(air_riding_ground_wave_, other->air_riding_ground_wave_);
  swap(beam_visual_size_y_, other->beam_visual_size_y_);
  swap(ground_impact_melee_collision_, other->ground_impact_melee_collision_);
  swap(wall_impact_melee_collision_, other->wall_impact_melee_collision_);
  swap(mh_inherits_spin_, other->mh_inherits_spin_);
  swap(no_explosion_on_hard_pushback_, other->no_explosion_on_hard_pushback_);
  swap(init_spin_cos_, other->init_spin_cos_);
  swap(init_spin_sin_, other->init_spin_sin_);
  swap(finishing_frames_, other->finishing_frames_);
  swap(startup_vfx_species_id_, other->startup_vfx_species_id_);
  swap(ifc_, other->ifc_);
  swap(reflect_fireball_xif_not_harder_, other->reflect_fireball_xif_not_harder_);
  swap(rejects_reflection_from_another_bullet_, other->rejects_reflection_from_another_bullet_);
  swap(provides_xhard_pushback_, other->provides_xhard_pushback_);
  swap(provides_yhard_pushback_top_, other->provides_yhard_pushback_top_);
  swap(provides_yhard_pushback_bottom_, other->provides_yhard_pushback_bottom_);
  swap(ignore_slope_deceleration_, other->ignore_slope_deceleration_);
  swap(rotate_offender_with_spin_, other->rotate_offender_with_spin_);
  swap(mh_not_trigger_on_ch_hit_, other->mh_not_trigger_on_ch_hit_);
  swap(mh_not_trigger_on_harder_bullet_hit_, other->mh_not_trigger_on_harder_bullet_hit_);
  swap(mh_not_trigger_on_hard_pushback_hit_, other->mh_not_trigger_on_hard_pushback_hit_);
  swap(hopper_missile_, other->hopper_missile_);
  swap(beam_rendering_, other->beam_rendering_);
  swap(missile_search_interval_pow2minus1_, other->missile_search_interval_pow2minus1_);
  swap(inplace_vanish_explosion_species_id_, other->inplace_vanish_explosion_species_id_);
  swap(anim_looping_rdf_offset_, other->anim_looping_rdf_offset_);
  swap(explosion_anim_looping_rdf_offset_, other->explosion_anim_looping_rdf_offset_);
  swap(gauge_inc_reduction_ratio_, other->gauge_inc_reduction_ratio_);
  swap(guard_breaker_extra_hit_cnt_, other->guard_breaker_extra_hit_cnt_);
  swap(use_ch_offset_regardless_of_emission_mh_, other->use_ch_offset_regardless_of_emission_mh_);
  swap(mh_inherits_frames_in_bl_state_, other->mh_inherits_frames_in_bl_state_);
  swap(takes_def1as_hard_pushback_, other->takes_def1as_hard_pushback_);
  swap(takes_gravity_, other->takes_gravity_);
  swap(collision_type_mask_, other->collision_type_mask_);
}

::google::protobuf::Metadata BulletConfig::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_serializable_5fdata_2eproto);
  return ::file_level_metadata_serializable_5fdata_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Bullet::InitAsDefaultInstance() {
}
class Bullet::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Bullet::kBlStateFieldNumber;
const int Bullet::kFramesInBlStateFieldNumber;
const int Bullet::kBulletLocalIdFieldNumber;
const int Bullet::kOriginatedRenderFrameIdFieldNumber;
const int Bullet::kOffenderJoinIndexFieldNumber;
const int Bullet::kOffenderTrapLocalIdFieldNumber;
const int Bullet::kTeamIdFieldNumber;
const int Bullet::kVertMovingTrapLocalIdUponActiveFieldNumber;
const int Bullet::kRepeatQuotaLeftFieldNumber;
const int Bullet::kRemainingHardPushbackBounceQuotaFieldNumber;
const int Bullet::kTargetCharacterJoinIndexFieldNumber;
const int Bullet::kDamageDealedFieldNumber;
const int Bullet::kExplodedOnIfcFieldNumber;
const int Bullet::kXFieldNumber;
const int Bullet::kYFieldNumber;
const int Bullet::kDirXFieldNumber;
const int Bullet::kDirYFieldNumber;
const int Bullet::kVelXFieldNumber;
const int Bullet::kVelYFieldNumber;
const int Bullet::kOriginatedXFieldNumber;
const int Bullet::kOriginatedYFieldNumber;
const int Bullet::kSpinCosFieldNumber;
const int Bullet::kSpinSinFieldNumber;
const int Bullet::kActiveSkillHitFieldNumber;
const int Bullet::kSkillIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Bullet::Bullet()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:shared.Bullet)
}
Bullet::Bullet(const Bullet& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&bl_state_, &from.bl_state_,
    static_cast<size_t>(reinterpret_cast<char*>(&skill_id_) -
    reinterpret_cast<char*>(&bl_state_)) + sizeof(skill_id_));
  // @@protoc_insertion_point(copy_constructor:shared.Bullet)
}

void Bullet::SharedCtor() {
  ::memset(&bl_state_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&skill_id_) -
      reinterpret_cast<char*>(&bl_state_)) + sizeof(skill_id_));
}

Bullet::~Bullet() {
  // @@protoc_insertion_point(destructor:shared.Bullet)
  SharedDtor();
}

void Bullet::SharedDtor() {
}

void Bullet::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Bullet& Bullet::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Bullet_serializable_5fdata_2eproto.base);
  return *internal_default_instance();
}


void Bullet::Clear() {
// @@protoc_insertion_point(message_clear_start:shared.Bullet)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&bl_state_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&skill_id_) -
      reinterpret_cast<char*>(&bl_state_)) + sizeof(skill_id_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Bullet::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Bullet*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .shared.BulletState bl_state = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_bl_state(static_cast<::shared::BulletState>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 frames_in_bl_state = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_frames_in_bl_state(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 bullet_local_id = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_bullet_local_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 originated_render_frame_id = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_originated_render_frame_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 offender_join_index = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_offender_join_index(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 offender_trap_local_id = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_offender_trap_local_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 team_id = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        msg->set_team_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 vert_moving_trap_local_id_upon_active = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 64) goto handle_unusual;
        msg->set_vert_moving_trap_local_id_upon_active(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 repeat_quota_left = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 72) goto handle_unusual;
        msg->set_repeat_quota_left(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 remaining_hard_pushback_bounce_quota = 10;
      case 10: {
        if (static_cast<::google::protobuf::uint8>(tag) != 80) goto handle_unusual;
        msg->set_remaining_hard_pushback_bounce_quota(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 target_character_join_index = 11;
      case 11: {
        if (static_cast<::google::protobuf::uint8>(tag) != 88) goto handle_unusual;
        msg->set_target_character_join_index(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 damage_dealed = 12;
      case 12: {
        if (static_cast<::google::protobuf::uint8>(tag) != 96) goto handle_unusual;
        msg->set_damage_dealed(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // .shared.IfaceCat exploded_on_ifc = 13;
      case 13: {
        if (static_cast<::google::protobuf::uint8>(tag) != 104) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_exploded_on_ifc(static_cast<::shared::IfaceCat>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // float x = 14;
      case 14: {
        if (static_cast<::google::protobuf::uint8>(tag) != 117) goto handle_unusual;
        msg->set_x(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // float y = 15;
      case 15: {
        if (static_cast<::google::protobuf::uint8>(tag) != 125) goto handle_unusual;
        msg->set_y(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // float dir_x = 16;
      case 16: {
        if (static_cast<::google::protobuf::uint8>(tag) != 133) goto handle_unusual;
        msg->set_dir_x(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // float dir_y = 17;
      case 17: {
        if (static_cast<::google::protobuf::uint8>(tag) != 141) goto handle_unusual;
        msg->set_dir_y(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // float vel_x = 18;
      case 18: {
        if (static_cast<::google::protobuf::uint8>(tag) != 149) goto handle_unusual;
        msg->set_vel_x(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // float vel_y = 19;
      case 19: {
        if (static_cast<::google::protobuf::uint8>(tag) != 157) goto handle_unusual;
        msg->set_vel_y(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // float originated_x = 20;
      case 20: {
        if (static_cast<::google::protobuf::uint8>(tag) != 165) goto handle_unusual;
        msg->set_originated_x(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // float originated_y = 21;
      case 21: {
        if (static_cast<::google::protobuf::uint8>(tag) != 173) goto handle_unusual;
        msg->set_originated_y(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // float spin_cos = 22;
      case 22: {
        if (static_cast<::google::protobuf::uint8>(tag) != 181) goto handle_unusual;
        msg->set_spin_cos(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // float spin_sin = 23;
      case 23: {
        if (static_cast<::google::protobuf::uint8>(tag) != 189) goto handle_unusual;
        msg->set_spin_sin(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // int32 active_skill_hit = 24;
      case 24: {
        if (static_cast<::google::protobuf::uint8>(tag) != 192) goto handle_unusual;
        msg->set_active_skill_hit(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // uint32 skill_id = 25;
      case 25: {
        if (static_cast<::google::protobuf::uint8>(tag) != 200) goto handle_unusual;
        msg->set_skill_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Bullet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:shared.Bullet)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .shared.BulletState bl_state = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_bl_state(static_cast< ::shared::BulletState >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 frames_in_bl_state = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &frames_in_bl_state_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 bullet_local_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bullet_local_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 originated_render_frame_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &originated_render_frame_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 offender_join_index = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &offender_join_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 offender_trap_local_id = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &offender_trap_local_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 team_id = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (56 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &team_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 vert_moving_trap_local_id_upon_active = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (64 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vert_moving_trap_local_id_upon_active_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 repeat_quota_left = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (72 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &repeat_quota_left_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 remaining_hard_pushback_bounce_quota = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (80 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &remaining_hard_pushback_bounce_quota_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 target_character_join_index = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (88 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &target_character_join_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 damage_dealed = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (96 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &damage_dealed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .shared.IfaceCat exploded_on_ifc = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (104 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_exploded_on_ifc(static_cast< ::shared::IfaceCat >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float x = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (117 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float y = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (125 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float dir_x = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (133 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &dir_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float dir_y = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (141 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &dir_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float vel_x = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (149 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &vel_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float vel_y = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (157 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &vel_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float originated_x = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (165 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &originated_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float originated_y = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (173 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &originated_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float spin_cos = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (181 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &spin_cos_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float spin_sin = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (189 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &spin_sin_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 active_skill_hit = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (192 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &active_skill_hit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 skill_id = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (200 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skill_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:shared.Bullet)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:shared.Bullet)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Bullet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:shared.Bullet)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .shared.BulletState bl_state = 1;
  if (this->bl_state() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->bl_state(), output);
  }

  // int32 frames_in_bl_state = 2;
  if (this->frames_in_bl_state() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->frames_in_bl_state(), output);
  }

  // int32 bullet_local_id = 3;
  if (this->bullet_local_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->bullet_local_id(), output);
  }

  // int32 originated_render_frame_id = 4;
  if (this->originated_render_frame_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->originated_render_frame_id(), output);
  }

  // int32 offender_join_index = 5;
  if (this->offender_join_index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->offender_join_index(), output);
  }

  // int32 offender_trap_local_id = 6;
  if (this->offender_trap_local_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->offender_trap_local_id(), output);
  }

  // int32 team_id = 7;
  if (this->team_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->team_id(), output);
  }

  // int32 vert_moving_trap_local_id_upon_active = 8;
  if (this->vert_moving_trap_local_id_upon_active() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->vert_moving_trap_local_id_upon_active(), output);
  }

  // int32 repeat_quota_left = 9;
  if (this->repeat_quota_left() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->repeat_quota_left(), output);
  }

  // int32 remaining_hard_pushback_bounce_quota = 10;
  if (this->remaining_hard_pushback_bounce_quota() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->remaining_hard_pushback_bounce_quota(), output);
  }

  // int32 target_character_join_index = 11;
  if (this->target_character_join_index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->target_character_join_index(), output);
  }

  // int32 damage_dealed = 12;
  if (this->damage_dealed() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->damage_dealed(), output);
  }

  // .shared.IfaceCat exploded_on_ifc = 13;
  if (this->exploded_on_ifc() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      13, this->exploded_on_ifc(), output);
  }

  // float x = 14;
  if (this->x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(14, this->x(), output);
  }

  // float y = 15;
  if (this->y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(15, this->y(), output);
  }

  // float dir_x = 16;
  if (this->dir_x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(16, this->dir_x(), output);
  }

  // float dir_y = 17;
  if (this->dir_y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(17, this->dir_y(), output);
  }

  // float vel_x = 18;
  if (this->vel_x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(18, this->vel_x(), output);
  }

  // float vel_y = 19;
  if (this->vel_y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(19, this->vel_y(), output);
  }

  // float originated_x = 20;
  if (this->originated_x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(20, this->originated_x(), output);
  }

  // float originated_y = 21;
  if (this->originated_y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(21, this->originated_y(), output);
  }

  // float spin_cos = 22;
  if (this->spin_cos() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(22, this->spin_cos(), output);
  }

  // float spin_sin = 23;
  if (this->spin_sin() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(23, this->spin_sin(), output);
  }

  // int32 active_skill_hit = 24;
  if (this->active_skill_hit() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(24, this->active_skill_hit(), output);
  }

  // uint32 skill_id = 25;
  if (this->skill_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(25, this->skill_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:shared.Bullet)
}

::google::protobuf::uint8* Bullet::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:shared.Bullet)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .shared.BulletState bl_state = 1;
  if (this->bl_state() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->bl_state(), target);
  }

  // int32 frames_in_bl_state = 2;
  if (this->frames_in_bl_state() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->frames_in_bl_state(), target);
  }

  // int32 bullet_local_id = 3;
  if (this->bullet_local_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->bullet_local_id(), target);
  }

  // int32 originated_render_frame_id = 4;
  if (this->originated_render_frame_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->originated_render_frame_id(), target);
  }

  // int32 offender_join_index = 5;
  if (this->offender_join_index() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->offender_join_index(), target);
  }

  // int32 offender_trap_local_id = 6;
  if (this->offender_trap_local_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->offender_trap_local_id(), target);
  }

  // int32 team_id = 7;
  if (this->team_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->team_id(), target);
  }

  // int32 vert_moving_trap_local_id_upon_active = 8;
  if (this->vert_moving_trap_local_id_upon_active() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->vert_moving_trap_local_id_upon_active(), target);
  }

  // int32 repeat_quota_left = 9;
  if (this->repeat_quota_left() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->repeat_quota_left(), target);
  }

  // int32 remaining_hard_pushback_bounce_quota = 10;
  if (this->remaining_hard_pushback_bounce_quota() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->remaining_hard_pushback_bounce_quota(), target);
  }

  // int32 target_character_join_index = 11;
  if (this->target_character_join_index() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->target_character_join_index(), target);
  }

  // int32 damage_dealed = 12;
  if (this->damage_dealed() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->damage_dealed(), target);
  }

  // .shared.IfaceCat exploded_on_ifc = 13;
  if (this->exploded_on_ifc() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      13, this->exploded_on_ifc(), target);
  }

  // float x = 14;
  if (this->x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(14, this->x(), target);
  }

  // float y = 15;
  if (this->y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(15, this->y(), target);
  }

  // float dir_x = 16;
  if (this->dir_x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(16, this->dir_x(), target);
  }

  // float dir_y = 17;
  if (this->dir_y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(17, this->dir_y(), target);
  }

  // float vel_x = 18;
  if (this->vel_x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(18, this->vel_x(), target);
  }

  // float vel_y = 19;
  if (this->vel_y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(19, this->vel_y(), target);
  }

  // float originated_x = 20;
  if (this->originated_x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(20, this->originated_x(), target);
  }

  // float originated_y = 21;
  if (this->originated_y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(21, this->originated_y(), target);
  }

  // float spin_cos = 22;
  if (this->spin_cos() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(22, this->spin_cos(), target);
  }

  // float spin_sin = 23;
  if (this->spin_sin() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(23, this->spin_sin(), target);
  }

  // int32 active_skill_hit = 24;
  if (this->active_skill_hit() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(24, this->active_skill_hit(), target);
  }

  // uint32 skill_id = 25;
  if (this->skill_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(25, this->skill_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:shared.Bullet)
  return target;
}

size_t Bullet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:shared.Bullet)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .shared.BulletState bl_state = 1;
  if (this->bl_state() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->bl_state());
  }

  // int32 frames_in_bl_state = 2;
  if (this->frames_in_bl_state() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->frames_in_bl_state());
  }

  // int32 bullet_local_id = 3;
  if (this->bullet_local_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->bullet_local_id());
  }

  // int32 originated_render_frame_id = 4;
  if (this->originated_render_frame_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->originated_render_frame_id());
  }

  // int32 offender_join_index = 5;
  if (this->offender_join_index() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->offender_join_index());
  }

  // int32 offender_trap_local_id = 6;
  if (this->offender_trap_local_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->offender_trap_local_id());
  }

  // int32 team_id = 7;
  if (this->team_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->team_id());
  }

  // int32 vert_moving_trap_local_id_upon_active = 8;
  if (this->vert_moving_trap_local_id_upon_active() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->vert_moving_trap_local_id_upon_active());
  }

  // int32 repeat_quota_left = 9;
  if (this->repeat_quota_left() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->repeat_quota_left());
  }

  // int32 remaining_hard_pushback_bounce_quota = 10;
  if (this->remaining_hard_pushback_bounce_quota() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->remaining_hard_pushback_bounce_quota());
  }

  // int32 target_character_join_index = 11;
  if (this->target_character_join_index() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->target_character_join_index());
  }

  // int32 damage_dealed = 12;
  if (this->damage_dealed() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->damage_dealed());
  }

  // .shared.IfaceCat exploded_on_ifc = 13;
  if (this->exploded_on_ifc() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->exploded_on_ifc());
  }

  // float x = 14;
  if (this->x() != 0) {
    total_size += 1 + 4;
  }

  // float y = 15;
  if (this->y() != 0) {
    total_size += 1 + 4;
  }

  // float dir_x = 16;
  if (this->dir_x() != 0) {
    total_size += 2 + 4;
  }

  // float dir_y = 17;
  if (this->dir_y() != 0) {
    total_size += 2 + 4;
  }

  // float vel_x = 18;
  if (this->vel_x() != 0) {
    total_size += 2 + 4;
  }

  // float vel_y = 19;
  if (this->vel_y() != 0) {
    total_size += 2 + 4;
  }

  // float originated_x = 20;
  if (this->originated_x() != 0) {
    total_size += 2 + 4;
  }

  // float originated_y = 21;
  if (this->originated_y() != 0) {
    total_size += 2 + 4;
  }

  // float spin_cos = 22;
  if (this->spin_cos() != 0) {
    total_size += 2 + 4;
  }

  // float spin_sin = 23;
  if (this->spin_sin() != 0) {
    total_size += 2 + 4;
  }

  // int32 active_skill_hit = 24;
  if (this->active_skill_hit() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->active_skill_hit());
  }

  // uint32 skill_id = 25;
  if (this->skill_id() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->skill_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Bullet::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:shared.Bullet)
  GOOGLE_DCHECK_NE(&from, this);
  const Bullet* source =
      ::google::protobuf::DynamicCastToGenerated<Bullet>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:shared.Bullet)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:shared.Bullet)
    MergeFrom(*source);
  }
}

void Bullet::MergeFrom(const Bullet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:shared.Bullet)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.bl_state() != 0) {
    set_bl_state(from.bl_state());
  }
  if (from.frames_in_bl_state() != 0) {
    set_frames_in_bl_state(from.frames_in_bl_state());
  }
  if (from.bullet_local_id() != 0) {
    set_bullet_local_id(from.bullet_local_id());
  }
  if (from.originated_render_frame_id() != 0) {
    set_originated_render_frame_id(from.originated_render_frame_id());
  }
  if (from.offender_join_index() != 0) {
    set_offender_join_index(from.offender_join_index());
  }
  if (from.offender_trap_local_id() != 0) {
    set_offender_trap_local_id(from.offender_trap_local_id());
  }
  if (from.team_id() != 0) {
    set_team_id(from.team_id());
  }
  if (from.vert_moving_trap_local_id_upon_active() != 0) {
    set_vert_moving_trap_local_id_upon_active(from.vert_moving_trap_local_id_upon_active());
  }
  if (from.repeat_quota_left() != 0) {
    set_repeat_quota_left(from.repeat_quota_left());
  }
  if (from.remaining_hard_pushback_bounce_quota() != 0) {
    set_remaining_hard_pushback_bounce_quota(from.remaining_hard_pushback_bounce_quota());
  }
  if (from.target_character_join_index() != 0) {
    set_target_character_join_index(from.target_character_join_index());
  }
  if (from.damage_dealed() != 0) {
    set_damage_dealed(from.damage_dealed());
  }
  if (from.exploded_on_ifc() != 0) {
    set_exploded_on_ifc(from.exploded_on_ifc());
  }
  if (from.x() != 0) {
    set_x(from.x());
  }
  if (from.y() != 0) {
    set_y(from.y());
  }
  if (from.dir_x() != 0) {
    set_dir_x(from.dir_x());
  }
  if (from.dir_y() != 0) {
    set_dir_y(from.dir_y());
  }
  if (from.vel_x() != 0) {
    set_vel_x(from.vel_x());
  }
  if (from.vel_y() != 0) {
    set_vel_y(from.vel_y());
  }
  if (from.originated_x() != 0) {
    set_originated_x(from.originated_x());
  }
  if (from.originated_y() != 0) {
    set_originated_y(from.originated_y());
  }
  if (from.spin_cos() != 0) {
    set_spin_cos(from.spin_cos());
  }
  if (from.spin_sin() != 0) {
    set_spin_sin(from.spin_sin());
  }
  if (from.active_skill_hit() != 0) {
    set_active_skill_hit(from.active_skill_hit());
  }
  if (from.skill_id() != 0) {
    set_skill_id(from.skill_id());
  }
}

void Bullet::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:shared.Bullet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Bullet::CopyFrom(const Bullet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:shared.Bullet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Bullet::IsInitialized() const {
  return true;
}

void Bullet::Swap(Bullet* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Bullet::InternalSwap(Bullet* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(bl_state_, other->bl_state_);
  swap(frames_in_bl_state_, other->frames_in_bl_state_);
  swap(bullet_local_id_, other->bullet_local_id_);
  swap(originated_render_frame_id_, other->originated_render_frame_id_);
  swap(offender_join_index_, other->offender_join_index_);
  swap(offender_trap_local_id_, other->offender_trap_local_id_);
  swap(team_id_, other->team_id_);
  swap(vert_moving_trap_local_id_upon_active_, other->vert_moving_trap_local_id_upon_active_);
  swap(repeat_quota_left_, other->repeat_quota_left_);
  swap(remaining_hard_pushback_bounce_quota_, other->remaining_hard_pushback_bounce_quota_);
  swap(target_character_join_index_, other->target_character_join_index_);
  swap(damage_dealed_, other->damage_dealed_);
  swap(exploded_on_ifc_, other->exploded_on_ifc_);
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(dir_x_, other->dir_x_);
  swap(dir_y_, other->dir_y_);
  swap(vel_x_, other->vel_x_);
  swap(vel_y_, other->vel_y_);
  swap(originated_x_, other->originated_x_);
  swap(originated_y_, other->originated_y_);
  swap(spin_cos_, other->spin_cos_);
  swap(spin_sin_, other->spin_sin_);
  swap(active_skill_hit_, other->active_skill_hit_);
  swap(skill_id_, other->skill_id_);
}

::google::protobuf::Metadata Bullet::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_serializable_5fdata_2eproto);
  return ::file_level_metadata_serializable_5fdata_2eproto[kIndexInFileMessages];
}


// ===================================================================

void TrapConfig::InitAsDefaultInstance() {
}
class TrapConfig::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TrapConfig::kSpeciesIdFieldNumber;
const int TrapConfig::kExplosionSpeciesIdFieldNumber;
const int TrapConfig::kExplosionFramesFieldNumber;
const int TrapConfig::kBlowUpFieldNumber;
const int TrapConfig::kDamageFieldNumber;
const int TrapConfig::kHitStunFramesFieldNumber;
const int TrapConfig::kHitInvinsibleFramesFieldNumber;
const int TrapConfig::kDeactivatableFieldNumber;
const int TrapConfig::kHardnessFieldNumber;
const int TrapConfig::kDeactivateUponTriggeredFieldNumber;
const int TrapConfig::kConstFrictionVelXTopFieldNumber;
const int TrapConfig::kConstFrictionVelXBottomFieldNumber;
const int TrapConfig::kConstFrictionVelYLeftFieldNumber;
const int TrapConfig::kConstFrictionVelYRightFieldNumber;
const int TrapConfig::kPatrolCueRequiresFullContainFieldNumber;
const int TrapConfig::kSpinAnchorXFieldNumber;
const int TrapConfig::kSpinAnchorYFieldNumber;
const int TrapConfig::kAngularFrameVelCosFieldNumber;
const int TrapConfig::kAngularFrameVelSinFieldNumber;
const int TrapConfig::kIntrinsicSpinCosFieldNumber;
const int TrapConfig::kIntrinsicSpinSinFieldNumber;
const int TrapConfig::kAtk1UponTriggeredFieldNumber;
const int TrapConfig::kAtk1SkillIdFieldNumber;
const int TrapConfig::kIsRotaryFieldNumber;
const int TrapConfig::kNoXFlipRenderingFieldNumber;
const int TrapConfig::kSpeciesNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TrapConfig::TrapConfig()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:shared.TrapConfig)
}
TrapConfig::TrapConfig(const TrapConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  species_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.species_name().size() > 0) {
    species_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.species_name_);
  }
  ::memcpy(&species_id_, &from.species_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&no_x_flip_rendering_) -
    reinterpret_cast<char*>(&species_id_)) + sizeof(no_x_flip_rendering_));
  // @@protoc_insertion_point(copy_constructor:shared.TrapConfig)
}

void TrapConfig::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_TrapConfig_serializable_5fdata_2eproto.base);
  species_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&species_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&no_x_flip_rendering_) -
      reinterpret_cast<char*>(&species_id_)) + sizeof(no_x_flip_rendering_));
}

TrapConfig::~TrapConfig() {
  // @@protoc_insertion_point(destructor:shared.TrapConfig)
  SharedDtor();
}

void TrapConfig::SharedDtor() {
  species_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TrapConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TrapConfig& TrapConfig::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_TrapConfig_serializable_5fdata_2eproto.base);
  return *internal_default_instance();
}


void TrapConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:shared.TrapConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  species_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&species_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&no_x_flip_rendering_) -
      reinterpret_cast<char*>(&species_id_)) + sizeof(no_x_flip_rendering_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TrapConfig::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<TrapConfig*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int32 species_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_species_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 explosion_species_id = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_explosion_species_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 explosion_frames = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_explosion_frames(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // bool blow_up = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_blow_up(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 damage = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_damage(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 hit_stun_frames = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_hit_stun_frames(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 hit_invinsible_frames = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        msg->set_hit_invinsible_frames(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // bool deactivatable = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 64) goto handle_unusual;
        msg->set_deactivatable(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 hardness = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 72) goto handle_unusual;
        msg->set_hardness(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // bool deactivate_upon_triggered = 10;
      case 10: {
        if (static_cast<::google::protobuf::uint8>(tag) != 80) goto handle_unusual;
        msg->set_deactivate_upon_triggered(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // float const_friction_vel_x_top = 11;
      case 11: {
        if (static_cast<::google::protobuf::uint8>(tag) != 93) goto handle_unusual;
        msg->set_const_friction_vel_x_top(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // float const_friction_vel_x_bottom = 12;
      case 12: {
        if (static_cast<::google::protobuf::uint8>(tag) != 101) goto handle_unusual;
        msg->set_const_friction_vel_x_bottom(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // float const_friction_vel_y_left = 13;
      case 13: {
        if (static_cast<::google::protobuf::uint8>(tag) != 109) goto handle_unusual;
        msg->set_const_friction_vel_y_left(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // float const_friction_vel_y_right = 14;
      case 14: {
        if (static_cast<::google::protobuf::uint8>(tag) != 117) goto handle_unusual;
        msg->set_const_friction_vel_y_right(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // bool patrol_cue_requires_full_contain = 15;
      case 15: {
        if (static_cast<::google::protobuf::uint8>(tag) != 120) goto handle_unusual;
        msg->set_patrol_cue_requires_full_contain(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // float spin_anchor_x = 16;
      case 16: {
        if (static_cast<::google::protobuf::uint8>(tag) != 133) goto handle_unusual;
        msg->set_spin_anchor_x(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // float spin_anchor_y = 17;
      case 17: {
        if (static_cast<::google::protobuf::uint8>(tag) != 141) goto handle_unusual;
        msg->set_spin_anchor_y(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // float angular_frame_vel_cos = 18;
      case 18: {
        if (static_cast<::google::protobuf::uint8>(tag) != 149) goto handle_unusual;
        msg->set_angular_frame_vel_cos(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // float angular_frame_vel_sin = 19;
      case 19: {
        if (static_cast<::google::protobuf::uint8>(tag) != 157) goto handle_unusual;
        msg->set_angular_frame_vel_sin(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // float intrinsic_spin_cos = 20;
      case 20: {
        if (static_cast<::google::protobuf::uint8>(tag) != 165) goto handle_unusual;
        msg->set_intrinsic_spin_cos(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // float intrinsic_spin_sin = 21;
      case 21: {
        if (static_cast<::google::protobuf::uint8>(tag) != 173) goto handle_unusual;
        msg->set_intrinsic_spin_sin(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // bool atk1_upon_triggered = 22;
      case 22: {
        if (static_cast<::google::protobuf::uint8>(tag) != 176) goto handle_unusual;
        msg->set_atk1_upon_triggered(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // uint32 atk1_skill_id = 23;
      case 23: {
        if (static_cast<::google::protobuf::uint8>(tag) != 184) goto handle_unusual;
        msg->set_atk1_skill_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // bool is_rotary = 24;
      case 24: {
        if (static_cast<::google::protobuf::uint8>(tag) != 192) goto handle_unusual;
        msg->set_is_rotary(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // bool no_x_flip_rendering = 25;
      case 25: {
        if (static_cast<::google::protobuf::uint8>(tag) != 200) goto handle_unusual;
        msg->set_no_x_flip_rendering(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string species_name = 1024;
      case 1024: {
        if (static_cast<::google::protobuf::uint8>(tag) != 2) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("shared.TrapConfig.species_name");
        object = msg->mutable_species_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TrapConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:shared.TrapConfig)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 species_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &species_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 explosion_species_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &explosion_species_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 explosion_frames = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &explosion_frames_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool blow_up = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &blow_up_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 damage = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &damage_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 hit_stun_frames = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hit_stun_frames_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 hit_invinsible_frames = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (56 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hit_invinsible_frames_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool deactivatable = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (64 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &deactivatable_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 hardness = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (72 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hardness_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool deactivate_upon_triggered = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (80 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &deactivate_upon_triggered_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float const_friction_vel_x_top = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (93 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &const_friction_vel_x_top_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float const_friction_vel_x_bottom = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (101 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &const_friction_vel_x_bottom_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float const_friction_vel_y_left = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (109 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &const_friction_vel_y_left_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float const_friction_vel_y_right = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (117 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &const_friction_vel_y_right_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool patrol_cue_requires_full_contain = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (120 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &patrol_cue_requires_full_contain_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float spin_anchor_x = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (133 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &spin_anchor_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float spin_anchor_y = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (141 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &spin_anchor_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float angular_frame_vel_cos = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (149 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &angular_frame_vel_cos_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float angular_frame_vel_sin = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (157 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &angular_frame_vel_sin_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float intrinsic_spin_cos = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (165 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &intrinsic_spin_cos_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float intrinsic_spin_sin = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (173 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &intrinsic_spin_sin_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool atk1_upon_triggered = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (176 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &atk1_upon_triggered_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 atk1_skill_id = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (184 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &atk1_skill_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_rotary = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (192 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_rotary_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool no_x_flip_rendering = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (200 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &no_x_flip_rendering_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string species_name = 1024;
      case 1024: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8194 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_species_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->species_name().data(), static_cast<int>(this->species_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "shared.TrapConfig.species_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:shared.TrapConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:shared.TrapConfig)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TrapConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:shared.TrapConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 species_id = 1;
  if (this->species_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->species_id(), output);
  }

  // int32 explosion_species_id = 2;
  if (this->explosion_species_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->explosion_species_id(), output);
  }

  // int32 explosion_frames = 3;
  if (this->explosion_frames() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->explosion_frames(), output);
  }

  // bool blow_up = 4;
  if (this->blow_up() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->blow_up(), output);
  }

  // int32 damage = 5;
  if (this->damage() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->damage(), output);
  }

  // int32 hit_stun_frames = 6;
  if (this->hit_stun_frames() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->hit_stun_frames(), output);
  }

  // int32 hit_invinsible_frames = 7;
  if (this->hit_invinsible_frames() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->hit_invinsible_frames(), output);
  }

  // bool deactivatable = 8;
  if (this->deactivatable() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->deactivatable(), output);
  }

  // int32 hardness = 9;
  if (this->hardness() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->hardness(), output);
  }

  // bool deactivate_upon_triggered = 10;
  if (this->deactivate_upon_triggered() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->deactivate_upon_triggered(), output);
  }

  // float const_friction_vel_x_top = 11;
  if (this->const_friction_vel_x_top() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->const_friction_vel_x_top(), output);
  }

  // float const_friction_vel_x_bottom = 12;
  if (this->const_friction_vel_x_bottom() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->const_friction_vel_x_bottom(), output);
  }

  // float const_friction_vel_y_left = 13;
  if (this->const_friction_vel_y_left() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(13, this->const_friction_vel_y_left(), output);
  }

  // float const_friction_vel_y_right = 14;
  if (this->const_friction_vel_y_right() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(14, this->const_friction_vel_y_right(), output);
  }

  // bool patrol_cue_requires_full_contain = 15;
  if (this->patrol_cue_requires_full_contain() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(15, this->patrol_cue_requires_full_contain(), output);
  }

  // float spin_anchor_x = 16;
  if (this->spin_anchor_x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(16, this->spin_anchor_x(), output);
  }

  // float spin_anchor_y = 17;
  if (this->spin_anchor_y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(17, this->spin_anchor_y(), output);
  }

  // float angular_frame_vel_cos = 18;
  if (this->angular_frame_vel_cos() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(18, this->angular_frame_vel_cos(), output);
  }

  // float angular_frame_vel_sin = 19;
  if (this->angular_frame_vel_sin() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(19, this->angular_frame_vel_sin(), output);
  }

  // float intrinsic_spin_cos = 20;
  if (this->intrinsic_spin_cos() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(20, this->intrinsic_spin_cos(), output);
  }

  // float intrinsic_spin_sin = 21;
  if (this->intrinsic_spin_sin() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(21, this->intrinsic_spin_sin(), output);
  }

  // bool atk1_upon_triggered = 22;
  if (this->atk1_upon_triggered() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(22, this->atk1_upon_triggered(), output);
  }

  // uint32 atk1_skill_id = 23;
  if (this->atk1_skill_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(23, this->atk1_skill_id(), output);
  }

  // bool is_rotary = 24;
  if (this->is_rotary() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(24, this->is_rotary(), output);
  }

  // bool no_x_flip_rendering = 25;
  if (this->no_x_flip_rendering() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(25, this->no_x_flip_rendering(), output);
  }

  // string species_name = 1024;
  if (this->species_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->species_name().data(), static_cast<int>(this->species_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "shared.TrapConfig.species_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1024, this->species_name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:shared.TrapConfig)
}

::google::protobuf::uint8* TrapConfig::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:shared.TrapConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 species_id = 1;
  if (this->species_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->species_id(), target);
  }

  // int32 explosion_species_id = 2;
  if (this->explosion_species_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->explosion_species_id(), target);
  }

  // int32 explosion_frames = 3;
  if (this->explosion_frames() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->explosion_frames(), target);
  }

  // bool blow_up = 4;
  if (this->blow_up() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->blow_up(), target);
  }

  // int32 damage = 5;
  if (this->damage() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->damage(), target);
  }

  // int32 hit_stun_frames = 6;
  if (this->hit_stun_frames() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->hit_stun_frames(), target);
  }

  // int32 hit_invinsible_frames = 7;
  if (this->hit_invinsible_frames() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->hit_invinsible_frames(), target);
  }

  // bool deactivatable = 8;
  if (this->deactivatable() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->deactivatable(), target);
  }

  // int32 hardness = 9;
  if (this->hardness() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->hardness(), target);
  }

  // bool deactivate_upon_triggered = 10;
  if (this->deactivate_upon_triggered() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->deactivate_upon_triggered(), target);
  }

  // float const_friction_vel_x_top = 11;
  if (this->const_friction_vel_x_top() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(11, this->const_friction_vel_x_top(), target);
  }

  // float const_friction_vel_x_bottom = 12;
  if (this->const_friction_vel_x_bottom() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(12, this->const_friction_vel_x_bottom(), target);
  }

  // float const_friction_vel_y_left = 13;
  if (this->const_friction_vel_y_left() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(13, this->const_friction_vel_y_left(), target);
  }

  // float const_friction_vel_y_right = 14;
  if (this->const_friction_vel_y_right() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(14, this->const_friction_vel_y_right(), target);
  }

  // bool patrol_cue_requires_full_contain = 15;
  if (this->patrol_cue_requires_full_contain() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(15, this->patrol_cue_requires_full_contain(), target);
  }

  // float spin_anchor_x = 16;
  if (this->spin_anchor_x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(16, this->spin_anchor_x(), target);
  }

  // float spin_anchor_y = 17;
  if (this->spin_anchor_y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(17, this->spin_anchor_y(), target);
  }

  // float angular_frame_vel_cos = 18;
  if (this->angular_frame_vel_cos() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(18, this->angular_frame_vel_cos(), target);
  }

  // float angular_frame_vel_sin = 19;
  if (this->angular_frame_vel_sin() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(19, this->angular_frame_vel_sin(), target);
  }

  // float intrinsic_spin_cos = 20;
  if (this->intrinsic_spin_cos() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(20, this->intrinsic_spin_cos(), target);
  }

  // float intrinsic_spin_sin = 21;
  if (this->intrinsic_spin_sin() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(21, this->intrinsic_spin_sin(), target);
  }

  // bool atk1_upon_triggered = 22;
  if (this->atk1_upon_triggered() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(22, this->atk1_upon_triggered(), target);
  }

  // uint32 atk1_skill_id = 23;
  if (this->atk1_skill_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(23, this->atk1_skill_id(), target);
  }

  // bool is_rotary = 24;
  if (this->is_rotary() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(24, this->is_rotary(), target);
  }

  // bool no_x_flip_rendering = 25;
  if (this->no_x_flip_rendering() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(25, this->no_x_flip_rendering(), target);
  }

  // string species_name = 1024;
  if (this->species_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->species_name().data(), static_cast<int>(this->species_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "shared.TrapConfig.species_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1024, this->species_name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:shared.TrapConfig)
  return target;
}

size_t TrapConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:shared.TrapConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string species_name = 1024;
  if (this->species_name().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->species_name());
  }

  // int32 species_id = 1;
  if (this->species_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->species_id());
  }

  // int32 explosion_species_id = 2;
  if (this->explosion_species_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->explosion_species_id());
  }

  // int32 explosion_frames = 3;
  if (this->explosion_frames() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->explosion_frames());
  }

  // int32 damage = 5;
  if (this->damage() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->damage());
  }

  // int32 hit_stun_frames = 6;
  if (this->hit_stun_frames() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->hit_stun_frames());
  }

  // int32 hit_invinsible_frames = 7;
  if (this->hit_invinsible_frames() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->hit_invinsible_frames());
  }

  // int32 hardness = 9;
  if (this->hardness() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->hardness());
  }

  // bool blow_up = 4;
  if (this->blow_up() != 0) {
    total_size += 1 + 1;
  }

  // bool deactivatable = 8;
  if (this->deactivatable() != 0) {
    total_size += 1 + 1;
  }

  // bool deactivate_upon_triggered = 10;
  if (this->deactivate_upon_triggered() != 0) {
    total_size += 1 + 1;
  }

  // bool patrol_cue_requires_full_contain = 15;
  if (this->patrol_cue_requires_full_contain() != 0) {
    total_size += 1 + 1;
  }

  // float const_friction_vel_x_top = 11;
  if (this->const_friction_vel_x_top() != 0) {
    total_size += 1 + 4;
  }

  // float const_friction_vel_x_bottom = 12;
  if (this->const_friction_vel_x_bottom() != 0) {
    total_size += 1 + 4;
  }

  // float const_friction_vel_y_left = 13;
  if (this->const_friction_vel_y_left() != 0) {
    total_size += 1 + 4;
  }

  // float const_friction_vel_y_right = 14;
  if (this->const_friction_vel_y_right() != 0) {
    total_size += 1 + 4;
  }

  // float spin_anchor_x = 16;
  if (this->spin_anchor_x() != 0) {
    total_size += 2 + 4;
  }

  // float spin_anchor_y = 17;
  if (this->spin_anchor_y() != 0) {
    total_size += 2 + 4;
  }

  // float angular_frame_vel_cos = 18;
  if (this->angular_frame_vel_cos() != 0) {
    total_size += 2 + 4;
  }

  // float angular_frame_vel_sin = 19;
  if (this->angular_frame_vel_sin() != 0) {
    total_size += 2 + 4;
  }

  // float intrinsic_spin_cos = 20;
  if (this->intrinsic_spin_cos() != 0) {
    total_size += 2 + 4;
  }

  // float intrinsic_spin_sin = 21;
  if (this->intrinsic_spin_sin() != 0) {
    total_size += 2 + 4;
  }

  // uint32 atk1_skill_id = 23;
  if (this->atk1_skill_id() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->atk1_skill_id());
  }

  // bool atk1_upon_triggered = 22;
  if (this->atk1_upon_triggered() != 0) {
    total_size += 2 + 1;
  }

  // bool is_rotary = 24;
  if (this->is_rotary() != 0) {
    total_size += 2 + 1;
  }

  // bool no_x_flip_rendering = 25;
  if (this->no_x_flip_rendering() != 0) {
    total_size += 2 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrapConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:shared.TrapConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const TrapConfig* source =
      ::google::protobuf::DynamicCastToGenerated<TrapConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:shared.TrapConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:shared.TrapConfig)
    MergeFrom(*source);
  }
}

void TrapConfig::MergeFrom(const TrapConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:shared.TrapConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.species_name().size() > 0) {

    species_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.species_name_);
  }
  if (from.species_id() != 0) {
    set_species_id(from.species_id());
  }
  if (from.explosion_species_id() != 0) {
    set_explosion_species_id(from.explosion_species_id());
  }
  if (from.explosion_frames() != 0) {
    set_explosion_frames(from.explosion_frames());
  }
  if (from.damage() != 0) {
    set_damage(from.damage());
  }
  if (from.hit_stun_frames() != 0) {
    set_hit_stun_frames(from.hit_stun_frames());
  }
  if (from.hit_invinsible_frames() != 0) {
    set_hit_invinsible_frames(from.hit_invinsible_frames());
  }
  if (from.hardness() != 0) {
    set_hardness(from.hardness());
  }
  if (from.blow_up() != 0) {
    set_blow_up(from.blow_up());
  }
  if (from.deactivatable() != 0) {
    set_deactivatable(from.deactivatable());
  }
  if (from.deactivate_upon_triggered() != 0) {
    set_deactivate_upon_triggered(from.deactivate_upon_triggered());
  }
  if (from.patrol_cue_requires_full_contain() != 0) {
    set_patrol_cue_requires_full_contain(from.patrol_cue_requires_full_contain());
  }
  if (from.const_friction_vel_x_top() != 0) {
    set_const_friction_vel_x_top(from.const_friction_vel_x_top());
  }
  if (from.const_friction_vel_x_bottom() != 0) {
    set_const_friction_vel_x_bottom(from.const_friction_vel_x_bottom());
  }
  if (from.const_friction_vel_y_left() != 0) {
    set_const_friction_vel_y_left(from.const_friction_vel_y_left());
  }
  if (from.const_friction_vel_y_right() != 0) {
    set_const_friction_vel_y_right(from.const_friction_vel_y_right());
  }
  if (from.spin_anchor_x() != 0) {
    set_spin_anchor_x(from.spin_anchor_x());
  }
  if (from.spin_anchor_y() != 0) {
    set_spin_anchor_y(from.spin_anchor_y());
  }
  if (from.angular_frame_vel_cos() != 0) {
    set_angular_frame_vel_cos(from.angular_frame_vel_cos());
  }
  if (from.angular_frame_vel_sin() != 0) {
    set_angular_frame_vel_sin(from.angular_frame_vel_sin());
  }
  if (from.intrinsic_spin_cos() != 0) {
    set_intrinsic_spin_cos(from.intrinsic_spin_cos());
  }
  if (from.intrinsic_spin_sin() != 0) {
    set_intrinsic_spin_sin(from.intrinsic_spin_sin());
  }
  if (from.atk1_skill_id() != 0) {
    set_atk1_skill_id(from.atk1_skill_id());
  }
  if (from.atk1_upon_triggered() != 0) {
    set_atk1_upon_triggered(from.atk1_upon_triggered());
  }
  if (from.is_rotary() != 0) {
    set_is_rotary(from.is_rotary());
  }
  if (from.no_x_flip_rendering() != 0) {
    set_no_x_flip_rendering(from.no_x_flip_rendering());
  }
}

void TrapConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:shared.TrapConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrapConfig::CopyFrom(const TrapConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:shared.TrapConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrapConfig::IsInitialized() const {
  return true;
}

void TrapConfig::Swap(TrapConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TrapConfig::InternalSwap(TrapConfig* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  species_name_.Swap(&other->species_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(species_id_, other->species_id_);
  swap(explosion_species_id_, other->explosion_species_id_);
  swap(explosion_frames_, other->explosion_frames_);
  swap(damage_, other->damage_);
  swap(hit_stun_frames_, other->hit_stun_frames_);
  swap(hit_invinsible_frames_, other->hit_invinsible_frames_);
  swap(hardness_, other->hardness_);
  swap(blow_up_, other->blow_up_);
  swap(deactivatable_, other->deactivatable_);
  swap(deactivate_upon_triggered_, other->deactivate_upon_triggered_);
  swap(patrol_cue_requires_full_contain_, other->patrol_cue_requires_full_contain_);
  swap(const_friction_vel_x_top_, other->const_friction_vel_x_top_);
  swap(const_friction_vel_x_bottom_, other->const_friction_vel_x_bottom_);
  swap(const_friction_vel_y_left_, other->const_friction_vel_y_left_);
  swap(const_friction_vel_y_right_, other->const_friction_vel_y_right_);
  swap(spin_anchor_x_, other->spin_anchor_x_);
  swap(spin_anchor_y_, other->spin_anchor_y_);
  swap(angular_frame_vel_cos_, other->angular_frame_vel_cos_);
  swap(angular_frame_vel_sin_, other->angular_frame_vel_sin_);
  swap(intrinsic_spin_cos_, other->intrinsic_spin_cos_);
  swap(intrinsic_spin_sin_, other->intrinsic_spin_sin_);
  swap(atk1_skill_id_, other->atk1_skill_id_);
  swap(atk1_upon_triggered_, other->atk1_upon_triggered_);
  swap(is_rotary_, other->is_rotary_);
  swap(no_x_flip_rendering_, other->no_x_flip_rendering_);
}

::google::protobuf::Metadata TrapConfig::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_serializable_5fdata_2eproto);
  return ::file_level_metadata_serializable_5fdata_2eproto[kIndexInFileMessages];
}


// ===================================================================

void TrapConfigFromTiled::InitAsDefaultInstance() {
}
class TrapConfigFromTiled::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TrapConfigFromTiled::kSpeciesIdFieldNumber;
const int TrapConfigFromTiled::kQuotaFieldNumber;
const int TrapConfigFromTiled::kSpeedFieldNumber;
const int TrapConfigFromTiled::kDirXFieldNumber;
const int TrapConfigFromTiled::kDirYFieldNumber;
const int TrapConfigFromTiled::kSubscribesToIdFieldNumber;
const int TrapConfigFromTiled::kSubscribesToIdAfterInitialFireFieldNumber;
const int TrapConfigFromTiled::kSubscribesToIdAltFieldNumber;
const int TrapConfigFromTiled::kBoxCwFieldNumber;
const int TrapConfigFromTiled::kBoxChFieldNumber;
const int TrapConfigFromTiled::kInitNoAngularVelFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TrapConfigFromTiled::TrapConfigFromTiled()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:shared.TrapConfigFromTiled)
}
TrapConfigFromTiled::TrapConfigFromTiled(const TrapConfigFromTiled& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&species_id_, &from.species_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&init_no_angular_vel_) -
    reinterpret_cast<char*>(&species_id_)) + sizeof(init_no_angular_vel_));
  // @@protoc_insertion_point(copy_constructor:shared.TrapConfigFromTiled)
}

void TrapConfigFromTiled::SharedCtor() {
  ::memset(&species_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&init_no_angular_vel_) -
      reinterpret_cast<char*>(&species_id_)) + sizeof(init_no_angular_vel_));
}

TrapConfigFromTiled::~TrapConfigFromTiled() {
  // @@protoc_insertion_point(destructor:shared.TrapConfigFromTiled)
  SharedDtor();
}

void TrapConfigFromTiled::SharedDtor() {
}

void TrapConfigFromTiled::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TrapConfigFromTiled& TrapConfigFromTiled::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_TrapConfigFromTiled_serializable_5fdata_2eproto.base);
  return *internal_default_instance();
}


void TrapConfigFromTiled::Clear() {
// @@protoc_insertion_point(message_clear_start:shared.TrapConfigFromTiled)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&species_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&init_no_angular_vel_) -
      reinterpret_cast<char*>(&species_id_)) + sizeof(init_no_angular_vel_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TrapConfigFromTiled::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<TrapConfigFromTiled*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int32 species_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_species_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 quota = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_quota(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // float speed = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 29) goto handle_unusual;
        msg->set_speed(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // int32 dir_x = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_dir_x(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 dir_y = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_dir_y(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 subscribes_to_id = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        msg->set_subscribes_to_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 subscribes_to_id_after_initial_fire = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 64) goto handle_unusual;
        msg->set_subscribes_to_id_after_initial_fire(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 subscribes_to_id_alt = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 72) goto handle_unusual;
        msg->set_subscribes_to_id_alt(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // float box_cw = 10;
      case 10: {
        if (static_cast<::google::protobuf::uint8>(tag) != 85) goto handle_unusual;
        msg->set_box_cw(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // float box_ch = 11;
      case 11: {
        if (static_cast<::google::protobuf::uint8>(tag) != 93) goto handle_unusual;
        msg->set_box_ch(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // float init_no_angular_vel = 12;
      case 12: {
        if (static_cast<::google::protobuf::uint8>(tag) != 101) goto handle_unusual;
        msg->set_init_no_angular_vel(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TrapConfigFromTiled::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:shared.TrapConfigFromTiled)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 species_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &species_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 quota = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &quota_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float speed = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (29 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &speed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 dir_x = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dir_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 dir_y = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dir_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 subscribes_to_id = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (56 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &subscribes_to_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 subscribes_to_id_after_initial_fire = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (64 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &subscribes_to_id_after_initial_fire_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 subscribes_to_id_alt = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (72 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &subscribes_to_id_alt_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float box_cw = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (85 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &box_cw_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float box_ch = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (93 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &box_ch_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float init_no_angular_vel = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (101 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &init_no_angular_vel_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:shared.TrapConfigFromTiled)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:shared.TrapConfigFromTiled)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TrapConfigFromTiled::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:shared.TrapConfigFromTiled)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 species_id = 1;
  if (this->species_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->species_id(), output);
  }

  // int32 quota = 2;
  if (this->quota() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->quota(), output);
  }

  // float speed = 3;
  if (this->speed() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->speed(), output);
  }

  // int32 dir_x = 4;
  if (this->dir_x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->dir_x(), output);
  }

  // int32 dir_y = 5;
  if (this->dir_y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->dir_y(), output);
  }

  // int32 subscribes_to_id = 7;
  if (this->subscribes_to_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->subscribes_to_id(), output);
  }

  // int32 subscribes_to_id_after_initial_fire = 8;
  if (this->subscribes_to_id_after_initial_fire() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->subscribes_to_id_after_initial_fire(), output);
  }

  // int32 subscribes_to_id_alt = 9;
  if (this->subscribes_to_id_alt() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->subscribes_to_id_alt(), output);
  }

  // float box_cw = 10;
  if (this->box_cw() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->box_cw(), output);
  }

  // float box_ch = 11;
  if (this->box_ch() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->box_ch(), output);
  }

  // float init_no_angular_vel = 12;
  if (this->init_no_angular_vel() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->init_no_angular_vel(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:shared.TrapConfigFromTiled)
}

::google::protobuf::uint8* TrapConfigFromTiled::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:shared.TrapConfigFromTiled)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 species_id = 1;
  if (this->species_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->species_id(), target);
  }

  // int32 quota = 2;
  if (this->quota() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->quota(), target);
  }

  // float speed = 3;
  if (this->speed() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->speed(), target);
  }

  // int32 dir_x = 4;
  if (this->dir_x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->dir_x(), target);
  }

  // int32 dir_y = 5;
  if (this->dir_y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->dir_y(), target);
  }

  // int32 subscribes_to_id = 7;
  if (this->subscribes_to_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->subscribes_to_id(), target);
  }

  // int32 subscribes_to_id_after_initial_fire = 8;
  if (this->subscribes_to_id_after_initial_fire() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->subscribes_to_id_after_initial_fire(), target);
  }

  // int32 subscribes_to_id_alt = 9;
  if (this->subscribes_to_id_alt() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->subscribes_to_id_alt(), target);
  }

  // float box_cw = 10;
  if (this->box_cw() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->box_cw(), target);
  }

  // float box_ch = 11;
  if (this->box_ch() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(11, this->box_ch(), target);
  }

  // float init_no_angular_vel = 12;
  if (this->init_no_angular_vel() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(12, this->init_no_angular_vel(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:shared.TrapConfigFromTiled)
  return target;
}

size_t TrapConfigFromTiled::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:shared.TrapConfigFromTiled)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 species_id = 1;
  if (this->species_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->species_id());
  }

  // int32 quota = 2;
  if (this->quota() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->quota());
  }

  // float speed = 3;
  if (this->speed() != 0) {
    total_size += 1 + 4;
  }

  // int32 dir_x = 4;
  if (this->dir_x() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->dir_x());
  }

  // int32 dir_y = 5;
  if (this->dir_y() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->dir_y());
  }

  // int32 subscribes_to_id = 7;
  if (this->subscribes_to_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->subscribes_to_id());
  }

  // int32 subscribes_to_id_after_initial_fire = 8;
  if (this->subscribes_to_id_after_initial_fire() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->subscribes_to_id_after_initial_fire());
  }

  // int32 subscribes_to_id_alt = 9;
  if (this->subscribes_to_id_alt() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->subscribes_to_id_alt());
  }

  // float box_cw = 10;
  if (this->box_cw() != 0) {
    total_size += 1 + 4;
  }

  // float box_ch = 11;
  if (this->box_ch() != 0) {
    total_size += 1 + 4;
  }

  // float init_no_angular_vel = 12;
  if (this->init_no_angular_vel() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrapConfigFromTiled::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:shared.TrapConfigFromTiled)
  GOOGLE_DCHECK_NE(&from, this);
  const TrapConfigFromTiled* source =
      ::google::protobuf::DynamicCastToGenerated<TrapConfigFromTiled>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:shared.TrapConfigFromTiled)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:shared.TrapConfigFromTiled)
    MergeFrom(*source);
  }
}

void TrapConfigFromTiled::MergeFrom(const TrapConfigFromTiled& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:shared.TrapConfigFromTiled)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.species_id() != 0) {
    set_species_id(from.species_id());
  }
  if (from.quota() != 0) {
    set_quota(from.quota());
  }
  if (from.speed() != 0) {
    set_speed(from.speed());
  }
  if (from.dir_x() != 0) {
    set_dir_x(from.dir_x());
  }
  if (from.dir_y() != 0) {
    set_dir_y(from.dir_y());
  }
  if (from.subscribes_to_id() != 0) {
    set_subscribes_to_id(from.subscribes_to_id());
  }
  if (from.subscribes_to_id_after_initial_fire() != 0) {
    set_subscribes_to_id_after_initial_fire(from.subscribes_to_id_after_initial_fire());
  }
  if (from.subscribes_to_id_alt() != 0) {
    set_subscribes_to_id_alt(from.subscribes_to_id_alt());
  }
  if (from.box_cw() != 0) {
    set_box_cw(from.box_cw());
  }
  if (from.box_ch() != 0) {
    set_box_ch(from.box_ch());
  }
  if (from.init_no_angular_vel() != 0) {
    set_init_no_angular_vel(from.init_no_angular_vel());
  }
}

void TrapConfigFromTiled::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:shared.TrapConfigFromTiled)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrapConfigFromTiled::CopyFrom(const TrapConfigFromTiled& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:shared.TrapConfigFromTiled)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrapConfigFromTiled::IsInitialized() const {
  return true;
}

void TrapConfigFromTiled::Swap(TrapConfigFromTiled* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TrapConfigFromTiled::InternalSwap(TrapConfigFromTiled* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(species_id_, other->species_id_);
  swap(quota_, other->quota_);
  swap(speed_, other->speed_);
  swap(dir_x_, other->dir_x_);
  swap(dir_y_, other->dir_y_);
  swap(subscribes_to_id_, other->subscribes_to_id_);
  swap(subscribes_to_id_after_initial_fire_, other->subscribes_to_id_after_initial_fire_);
  swap(subscribes_to_id_alt_, other->subscribes_to_id_alt_);
  swap(box_cw_, other->box_cw_);
  swap(box_ch_, other->box_ch_);
  swap(init_no_angular_vel_, other->init_no_angular_vel_);
}

::google::protobuf::Metadata TrapConfigFromTiled::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_serializable_5fdata_2eproto);
  return ::file_level_metadata_serializable_5fdata_2eproto[kIndexInFileMessages];
}


// ===================================================================

void TrapColliderAttr::InitAsDefaultInstance() {
  ::shared::_TrapColliderAttr_default_instance_._instance.get_mutable()->tc_pc_ = const_cast< ::shared::PatrolCue*>(
      ::shared::PatrolCue::internal_default_instance());
}
class TrapColliderAttr::HasBitSetters {
 public:
  static const ::shared::PatrolCue& tc_pc(const TrapColliderAttr* msg);
};

const ::shared::PatrolCue&
TrapColliderAttr::HasBitSetters::tc_pc(const TrapColliderAttr* msg) {
  return *msg->tc_pc_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TrapColliderAttr::kHitboxOffsetXFieldNumber;
const int TrapColliderAttr::kHitboxOffsetYFieldNumber;
const int TrapColliderAttr::kHitboxSizeXFieldNumber;
const int TrapColliderAttr::kHitboxSizeYFieldNumber;
const int TrapColliderAttr::kProvidesHardPushbackFieldNumber;
const int TrapColliderAttr::kProvidesDamageFieldNumber;
const int TrapColliderAttr::kProvidesEscapeFieldNumber;
const int TrapColliderAttr::kProvidesSlipJumpFieldNumber;
const int TrapColliderAttr::kProhibitsWallGrabbingFieldNumber;
const int TrapColliderAttr::kForcesCrouchingFieldNumber;
const int TrapColliderAttr::kSpeciesIdFieldNumber;
const int TrapColliderAttr::kOnlyAllowsAlignedVelXFieldNumber;
const int TrapColliderAttr::kOnlyAllowsAlignedVelYFieldNumber;
const int TrapColliderAttr::kAsPatrolCueFieldNumber;
const int TrapColliderAttr::kTcPcFieldNumber;
const int TrapColliderAttr::kTrapLocalIdFieldNumber;
const int TrapColliderAttr::kCollisionTypeMaskFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TrapColliderAttr::TrapColliderAttr()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:shared.TrapColliderAttr)
}
TrapColliderAttr::TrapColliderAttr(const TrapColliderAttr& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_tc_pc()) {
    tc_pc_ = new ::shared::PatrolCue(*from.tc_pc_);
  } else {
    tc_pc_ = nullptr;
  }
  ::memcpy(&hitbox_offset_x_, &from.hitbox_offset_x_,
    static_cast<size_t>(reinterpret_cast<char*>(&collision_type_mask_) -
    reinterpret_cast<char*>(&hitbox_offset_x_)) + sizeof(collision_type_mask_));
  // @@protoc_insertion_point(copy_constructor:shared.TrapColliderAttr)
}

void TrapColliderAttr::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_TrapColliderAttr_serializable_5fdata_2eproto.base);
  ::memset(&tc_pc_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&collision_type_mask_) -
      reinterpret_cast<char*>(&tc_pc_)) + sizeof(collision_type_mask_));
}

TrapColliderAttr::~TrapColliderAttr() {
  // @@protoc_insertion_point(destructor:shared.TrapColliderAttr)
  SharedDtor();
}

void TrapColliderAttr::SharedDtor() {
  if (this != internal_default_instance()) delete tc_pc_;
}

void TrapColliderAttr::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TrapColliderAttr& TrapColliderAttr::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_TrapColliderAttr_serializable_5fdata_2eproto.base);
  return *internal_default_instance();
}


void TrapColliderAttr::Clear() {
// @@protoc_insertion_point(message_clear_start:shared.TrapColliderAttr)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && tc_pc_ != nullptr) {
    delete tc_pc_;
  }
  tc_pc_ = nullptr;
  ::memset(&hitbox_offset_x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&collision_type_mask_) -
      reinterpret_cast<char*>(&hitbox_offset_x_)) + sizeof(collision_type_mask_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TrapColliderAttr::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<TrapColliderAttr*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int32 hitbox_offset_x = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_hitbox_offset_x(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 hitbox_offset_y = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_hitbox_offset_y(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 hitbox_size_x = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_hitbox_size_x(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 hitbox_size_y = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_hitbox_size_y(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // bool provides_hard_pushback = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_provides_hard_pushback(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // bool provides_damage = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_provides_damage(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // bool provides_escape = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        msg->set_provides_escape(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // bool provides_slip_jump = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 64) goto handle_unusual;
        msg->set_provides_slip_jump(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // bool prohibits_wall_grabbing = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 72) goto handle_unusual;
        msg->set_prohibits_wall_grabbing(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // bool forces_crouching = 10;
      case 10: {
        if (static_cast<::google::protobuf::uint8>(tag) != 80) goto handle_unusual;
        msg->set_forces_crouching(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 species_id = 11;
      case 11: {
        if (static_cast<::google::protobuf::uint8>(tag) != 88) goto handle_unusual;
        msg->set_species_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 only_allows_aligned_vel_x = 12;
      case 12: {
        if (static_cast<::google::protobuf::uint8>(tag) != 96) goto handle_unusual;
        msg->set_only_allows_aligned_vel_x(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 only_allows_aligned_vel_y = 13;
      case 13: {
        if (static_cast<::google::protobuf::uint8>(tag) != 104) goto handle_unusual;
        msg->set_only_allows_aligned_vel_y(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // bool as_patrol_cue = 14;
      case 14: {
        if (static_cast<::google::protobuf::uint8>(tag) != 112) goto handle_unusual;
        msg->set_as_patrol_cue(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // .shared.PatrolCue tc_pc = 15;
      case 15: {
        if (static_cast<::google::protobuf::uint8>(tag) != 122) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::shared::PatrolCue::_InternalParse;
        object = msg->mutable_tc_pc();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // int32 trap_local_id = 1024;
      case 1024: {
        if (static_cast<::google::protobuf::uint8>(tag) != 0) goto handle_unusual;
        msg->set_trap_local_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // uint64 collision_type_mask = 1029;
      case 1029: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_collision_type_mask(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TrapColliderAttr::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:shared.TrapColliderAttr)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 hitbox_offset_x = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hitbox_offset_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 hitbox_offset_y = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hitbox_offset_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 hitbox_size_x = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hitbox_size_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 hitbox_size_y = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hitbox_size_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool provides_hard_pushback = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &provides_hard_pushback_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool provides_damage = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &provides_damage_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool provides_escape = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (56 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &provides_escape_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool provides_slip_jump = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (64 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &provides_slip_jump_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool prohibits_wall_grabbing = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (72 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &prohibits_wall_grabbing_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool forces_crouching = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (80 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &forces_crouching_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 species_id = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (88 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &species_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 only_allows_aligned_vel_x = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (96 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &only_allows_aligned_vel_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 only_allows_aligned_vel_y = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (104 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &only_allows_aligned_vel_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool as_patrol_cue = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (112 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &as_patrol_cue_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .shared.PatrolCue tc_pc = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (122 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_tc_pc()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 trap_local_id = 1024;
      case 1024: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8192 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &trap_local_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 collision_type_mask = 1029;
      case 1029: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8232 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &collision_type_mask_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:shared.TrapColliderAttr)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:shared.TrapColliderAttr)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TrapColliderAttr::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:shared.TrapColliderAttr)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 hitbox_offset_x = 1;
  if (this->hitbox_offset_x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->hitbox_offset_x(), output);
  }

  // int32 hitbox_offset_y = 2;
  if (this->hitbox_offset_y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->hitbox_offset_y(), output);
  }

  // int32 hitbox_size_x = 3;
  if (this->hitbox_size_x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->hitbox_size_x(), output);
  }

  // int32 hitbox_size_y = 4;
  if (this->hitbox_size_y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->hitbox_size_y(), output);
  }

  // bool provides_hard_pushback = 5;
  if (this->provides_hard_pushback() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->provides_hard_pushback(), output);
  }

  // bool provides_damage = 6;
  if (this->provides_damage() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->provides_damage(), output);
  }

  // bool provides_escape = 7;
  if (this->provides_escape() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->provides_escape(), output);
  }

  // bool provides_slip_jump = 8;
  if (this->provides_slip_jump() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->provides_slip_jump(), output);
  }

  // bool prohibits_wall_grabbing = 9;
  if (this->prohibits_wall_grabbing() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->prohibits_wall_grabbing(), output);
  }

  // bool forces_crouching = 10;
  if (this->forces_crouching() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->forces_crouching(), output);
  }

  // int32 species_id = 11;
  if (this->species_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->species_id(), output);
  }

  // int32 only_allows_aligned_vel_x = 12;
  if (this->only_allows_aligned_vel_x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->only_allows_aligned_vel_x(), output);
  }

  // int32 only_allows_aligned_vel_y = 13;
  if (this->only_allows_aligned_vel_y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->only_allows_aligned_vel_y(), output);
  }

  // bool as_patrol_cue = 14;
  if (this->as_patrol_cue() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->as_patrol_cue(), output);
  }

  // .shared.PatrolCue tc_pc = 15;
  if (this->has_tc_pc()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, HasBitSetters::tc_pc(this), output);
  }

  // int32 trap_local_id = 1024;
  if (this->trap_local_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1024, this->trap_local_id(), output);
  }

  // uint64 collision_type_mask = 1029;
  if (this->collision_type_mask() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1029, this->collision_type_mask(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:shared.TrapColliderAttr)
}

::google::protobuf::uint8* TrapColliderAttr::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:shared.TrapColliderAttr)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 hitbox_offset_x = 1;
  if (this->hitbox_offset_x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->hitbox_offset_x(), target);
  }

  // int32 hitbox_offset_y = 2;
  if (this->hitbox_offset_y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->hitbox_offset_y(), target);
  }

  // int32 hitbox_size_x = 3;
  if (this->hitbox_size_x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->hitbox_size_x(), target);
  }

  // int32 hitbox_size_y = 4;
  if (this->hitbox_size_y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->hitbox_size_y(), target);
  }

  // bool provides_hard_pushback = 5;
  if (this->provides_hard_pushback() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->provides_hard_pushback(), target);
  }

  // bool provides_damage = 6;
  if (this->provides_damage() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->provides_damage(), target);
  }

  // bool provides_escape = 7;
  if (this->provides_escape() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->provides_escape(), target);
  }

  // bool provides_slip_jump = 8;
  if (this->provides_slip_jump() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->provides_slip_jump(), target);
  }

  // bool prohibits_wall_grabbing = 9;
  if (this->prohibits_wall_grabbing() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->prohibits_wall_grabbing(), target);
  }

  // bool forces_crouching = 10;
  if (this->forces_crouching() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->forces_crouching(), target);
  }

  // int32 species_id = 11;
  if (this->species_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->species_id(), target);
  }

  // int32 only_allows_aligned_vel_x = 12;
  if (this->only_allows_aligned_vel_x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->only_allows_aligned_vel_x(), target);
  }

  // int32 only_allows_aligned_vel_y = 13;
  if (this->only_allows_aligned_vel_y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->only_allows_aligned_vel_y(), target);
  }

  // bool as_patrol_cue = 14;
  if (this->as_patrol_cue() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(14, this->as_patrol_cue(), target);
  }

  // .shared.PatrolCue tc_pc = 15;
  if (this->has_tc_pc()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        15, HasBitSetters::tc_pc(this), target);
  }

  // int32 trap_local_id = 1024;
  if (this->trap_local_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1024, this->trap_local_id(), target);
  }

  // uint64 collision_type_mask = 1029;
  if (this->collision_type_mask() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1029, this->collision_type_mask(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:shared.TrapColliderAttr)
  return target;
}

size_t TrapColliderAttr::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:shared.TrapColliderAttr)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .shared.PatrolCue tc_pc = 15;
  if (this->has_tc_pc()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *tc_pc_);
  }

  // int32 hitbox_offset_x = 1;
  if (this->hitbox_offset_x() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->hitbox_offset_x());
  }

  // int32 hitbox_offset_y = 2;
  if (this->hitbox_offset_y() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->hitbox_offset_y());
  }

  // int32 hitbox_size_x = 3;
  if (this->hitbox_size_x() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->hitbox_size_x());
  }

  // int32 hitbox_size_y = 4;
  if (this->hitbox_size_y() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->hitbox_size_y());
  }

  // bool provides_hard_pushback = 5;
  if (this->provides_hard_pushback() != 0) {
    total_size += 1 + 1;
  }

  // bool provides_damage = 6;
  if (this->provides_damage() != 0) {
    total_size += 1 + 1;
  }

  // bool provides_escape = 7;
  if (this->provides_escape() != 0) {
    total_size += 1 + 1;
  }

  // bool provides_slip_jump = 8;
  if (this->provides_slip_jump() != 0) {
    total_size += 1 + 1;
  }

  // int32 species_id = 11;
  if (this->species_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->species_id());
  }

  // bool prohibits_wall_grabbing = 9;
  if (this->prohibits_wall_grabbing() != 0) {
    total_size += 1 + 1;
  }

  // bool forces_crouching = 10;
  if (this->forces_crouching() != 0) {
    total_size += 1 + 1;
  }

  // bool as_patrol_cue = 14;
  if (this->as_patrol_cue() != 0) {
    total_size += 1 + 1;
  }

  // int32 only_allows_aligned_vel_x = 12;
  if (this->only_allows_aligned_vel_x() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->only_allows_aligned_vel_x());
  }

  // int32 only_allows_aligned_vel_y = 13;
  if (this->only_allows_aligned_vel_y() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->only_allows_aligned_vel_y());
  }

  // int32 trap_local_id = 1024;
  if (this->trap_local_id() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->trap_local_id());
  }

  // uint64 collision_type_mask = 1029;
  if (this->collision_type_mask() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->collision_type_mask());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrapColliderAttr::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:shared.TrapColliderAttr)
  GOOGLE_DCHECK_NE(&from, this);
  const TrapColliderAttr* source =
      ::google::protobuf::DynamicCastToGenerated<TrapColliderAttr>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:shared.TrapColliderAttr)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:shared.TrapColliderAttr)
    MergeFrom(*source);
  }
}

void TrapColliderAttr::MergeFrom(const TrapColliderAttr& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:shared.TrapColliderAttr)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_tc_pc()) {
    mutable_tc_pc()->::shared::PatrolCue::MergeFrom(from.tc_pc());
  }
  if (from.hitbox_offset_x() != 0) {
    set_hitbox_offset_x(from.hitbox_offset_x());
  }
  if (from.hitbox_offset_y() != 0) {
    set_hitbox_offset_y(from.hitbox_offset_y());
  }
  if (from.hitbox_size_x() != 0) {
    set_hitbox_size_x(from.hitbox_size_x());
  }
  if (from.hitbox_size_y() != 0) {
    set_hitbox_size_y(from.hitbox_size_y());
  }
  if (from.provides_hard_pushback() != 0) {
    set_provides_hard_pushback(from.provides_hard_pushback());
  }
  if (from.provides_damage() != 0) {
    set_provides_damage(from.provides_damage());
  }
  if (from.provides_escape() != 0) {
    set_provides_escape(from.provides_escape());
  }
  if (from.provides_slip_jump() != 0) {
    set_provides_slip_jump(from.provides_slip_jump());
  }
  if (from.species_id() != 0) {
    set_species_id(from.species_id());
  }
  if (from.prohibits_wall_grabbing() != 0) {
    set_prohibits_wall_grabbing(from.prohibits_wall_grabbing());
  }
  if (from.forces_crouching() != 0) {
    set_forces_crouching(from.forces_crouching());
  }
  if (from.as_patrol_cue() != 0) {
    set_as_patrol_cue(from.as_patrol_cue());
  }
  if (from.only_allows_aligned_vel_x() != 0) {
    set_only_allows_aligned_vel_x(from.only_allows_aligned_vel_x());
  }
  if (from.only_allows_aligned_vel_y() != 0) {
    set_only_allows_aligned_vel_y(from.only_allows_aligned_vel_y());
  }
  if (from.trap_local_id() != 0) {
    set_trap_local_id(from.trap_local_id());
  }
  if (from.collision_type_mask() != 0) {
    set_collision_type_mask(from.collision_type_mask());
  }
}

void TrapColliderAttr::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:shared.TrapColliderAttr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrapColliderAttr::CopyFrom(const TrapColliderAttr& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:shared.TrapColliderAttr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrapColliderAttr::IsInitialized() const {
  return true;
}

void TrapColliderAttr::Swap(TrapColliderAttr* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TrapColliderAttr::InternalSwap(TrapColliderAttr* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(tc_pc_, other->tc_pc_);
  swap(hitbox_offset_x_, other->hitbox_offset_x_);
  swap(hitbox_offset_y_, other->hitbox_offset_y_);
  swap(hitbox_size_x_, other->hitbox_size_x_);
  swap(hitbox_size_y_, other->hitbox_size_y_);
  swap(provides_hard_pushback_, other->provides_hard_pushback_);
  swap(provides_damage_, other->provides_damage_);
  swap(provides_escape_, other->provides_escape_);
  swap(provides_slip_jump_, other->provides_slip_jump_);
  swap(species_id_, other->species_id_);
  swap(prohibits_wall_grabbing_, other->prohibits_wall_grabbing_);
  swap(forces_crouching_, other->forces_crouching_);
  swap(as_patrol_cue_, other->as_patrol_cue_);
  swap(only_allows_aligned_vel_x_, other->only_allows_aligned_vel_x_);
  swap(only_allows_aligned_vel_y_, other->only_allows_aligned_vel_y_);
  swap(trap_local_id_, other->trap_local_id_);
  swap(collision_type_mask_, other->collision_type_mask_);
}

::google::protobuf::Metadata TrapColliderAttr::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_serializable_5fdata_2eproto);
  return ::file_level_metadata_serializable_5fdata_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Trap::InitAsDefaultInstance() {
  ::shared::_Trap_default_instance_._instance.get_mutable()->config_from_tiled_ = const_cast< ::shared::TrapConfigFromTiled*>(
      ::shared::TrapConfigFromTiled::internal_default_instance());
}
class Trap::HasBitSetters {
 public:
  static const ::shared::TrapConfigFromTiled& config_from_tiled(const Trap* msg);
};

const ::shared::TrapConfigFromTiled&
Trap::HasBitSetters::config_from_tiled(const Trap* msg) {
  return *msg->config_from_tiled_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Trap::kTrapLocalIdFieldNumber;
const int Trap::kPatrolCueAngularVelFlipMarkFieldNumber;
const int Trap::kConfigFromTiledFieldNumber;
const int Trap::kTrapStateFieldNumber;
const int Trap::kFramesInTrapStateFieldNumber;
const int Trap::kIsCompletelyStaticFieldNumber;
const int Trap::kCapturedByPatrolCueFieldNumber;
const int Trap::kFramesInPatrolCueFieldNumber;
const int Trap::kWaivingPatrolCueIdFieldNumber;
const int Trap::kWaivingSpontaneousPatrolFieldNumber;
const int Trap::kSubscribesToTriggerLocalIdFieldNumber;
const int Trap::kSubscribesToTriggerLocalIdAltFieldNumber;
const int Trap::kSpinCosFieldNumber;
const int Trap::kSpinSinFieldNumber;
const int Trap::kAngularFrameVelCosFieldNumber;
const int Trap::kAngularFrameVelSinFieldNumber;
const int Trap::kXFieldNumber;
const int Trap::kYFieldNumber;
const int Trap::kDirXFieldNumber;
const int Trap::kDirYFieldNumber;
const int Trap::kVelXFieldNumber;
const int Trap::kVelYFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Trap::Trap()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:shared.Trap)
}
Trap::Trap(const Trap& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_config_from_tiled()) {
    config_from_tiled_ = new ::shared::TrapConfigFromTiled(*from.config_from_tiled_);
  } else {
    config_from_tiled_ = nullptr;
  }
  ::memcpy(&trap_local_id_, &from.trap_local_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&vel_y_) -
    reinterpret_cast<char*>(&trap_local_id_)) + sizeof(vel_y_));
  // @@protoc_insertion_point(copy_constructor:shared.Trap)
}

void Trap::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Trap_serializable_5fdata_2eproto.base);
  ::memset(&config_from_tiled_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&vel_y_) -
      reinterpret_cast<char*>(&config_from_tiled_)) + sizeof(vel_y_));
}

Trap::~Trap() {
  // @@protoc_insertion_point(destructor:shared.Trap)
  SharedDtor();
}

void Trap::SharedDtor() {
  if (this != internal_default_instance()) delete config_from_tiled_;
}

void Trap::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Trap& Trap::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Trap_serializable_5fdata_2eproto.base);
  return *internal_default_instance();
}


void Trap::Clear() {
// @@protoc_insertion_point(message_clear_start:shared.Trap)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && config_from_tiled_ != nullptr) {
    delete config_from_tiled_;
  }
  config_from_tiled_ = nullptr;
  ::memset(&trap_local_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&vel_y_) -
      reinterpret_cast<char*>(&trap_local_id_)) + sizeof(vel_y_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Trap::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Trap*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int32 trap_local_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_trap_local_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 patrol_cue_angular_vel_flip_mark = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_patrol_cue_angular_vel_flip_mark(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // .shared.TrapConfigFromTiled config_from_tiled = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::shared::TrapConfigFromTiled::_InternalParse;
        object = msg->mutable_config_from_tiled();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .shared.TrapState trap_state = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_trap_state(static_cast<::shared::TrapState>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 frames_in_trap_state = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_frames_in_trap_state(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // bool is_completely_static = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_is_completely_static(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // bool captured_by_patrol_cue = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        msg->set_captured_by_patrol_cue(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 frames_in_patrol_cue = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 64) goto handle_unusual;
        msg->set_frames_in_patrol_cue(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 waiving_patrol_cue_id = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 72) goto handle_unusual;
        msg->set_waiving_patrol_cue_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // bool waiving_spontaneous_patrol = 10;
      case 10: {
        if (static_cast<::google::protobuf::uint8>(tag) != 80) goto handle_unusual;
        msg->set_waiving_spontaneous_patrol(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 subscribes_to_trigger_local_id = 11;
      case 11: {
        if (static_cast<::google::protobuf::uint8>(tag) != 88) goto handle_unusual;
        msg->set_subscribes_to_trigger_local_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 subscribes_to_trigger_local_id_alt = 12;
      case 12: {
        if (static_cast<::google::protobuf::uint8>(tag) != 96) goto handle_unusual;
        msg->set_subscribes_to_trigger_local_id_alt(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // float spin_cos = 13;
      case 13: {
        if (static_cast<::google::protobuf::uint8>(tag) != 109) goto handle_unusual;
        msg->set_spin_cos(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // float spin_sin = 14;
      case 14: {
        if (static_cast<::google::protobuf::uint8>(tag) != 117) goto handle_unusual;
        msg->set_spin_sin(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // float angular_frame_vel_cos = 15;
      case 15: {
        if (static_cast<::google::protobuf::uint8>(tag) != 125) goto handle_unusual;
        msg->set_angular_frame_vel_cos(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // float angular_frame_vel_sin = 16;
      case 16: {
        if (static_cast<::google::protobuf::uint8>(tag) != 133) goto handle_unusual;
        msg->set_angular_frame_vel_sin(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // float x = 17;
      case 17: {
        if (static_cast<::google::protobuf::uint8>(tag) != 141) goto handle_unusual;
        msg->set_x(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // float y = 18;
      case 18: {
        if (static_cast<::google::protobuf::uint8>(tag) != 149) goto handle_unusual;
        msg->set_y(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // int32 dir_x = 19;
      case 19: {
        if (static_cast<::google::protobuf::uint8>(tag) != 152) goto handle_unusual;
        msg->set_dir_x(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 dir_y = 20;
      case 20: {
        if (static_cast<::google::protobuf::uint8>(tag) != 160) goto handle_unusual;
        msg->set_dir_y(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // float vel_x = 21;
      case 21: {
        if (static_cast<::google::protobuf::uint8>(tag) != 173) goto handle_unusual;
        msg->set_vel_x(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // float vel_y = 22;
      case 22: {
        if (static_cast<::google::protobuf::uint8>(tag) != 181) goto handle_unusual;
        msg->set_vel_y(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Trap::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:shared.Trap)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 trap_local_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &trap_local_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 patrol_cue_angular_vel_flip_mark = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &patrol_cue_angular_vel_flip_mark_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .shared.TrapConfigFromTiled config_from_tiled = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_config_from_tiled()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .shared.TrapState trap_state = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_trap_state(static_cast< ::shared::TrapState >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 frames_in_trap_state = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &frames_in_trap_state_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_completely_static = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_completely_static_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool captured_by_patrol_cue = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (56 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &captured_by_patrol_cue_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 frames_in_patrol_cue = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (64 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &frames_in_patrol_cue_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 waiving_patrol_cue_id = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (72 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &waiving_patrol_cue_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool waiving_spontaneous_patrol = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (80 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &waiving_spontaneous_patrol_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 subscribes_to_trigger_local_id = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (88 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &subscribes_to_trigger_local_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 subscribes_to_trigger_local_id_alt = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (96 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &subscribes_to_trigger_local_id_alt_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float spin_cos = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (109 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &spin_cos_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float spin_sin = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (117 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &spin_sin_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float angular_frame_vel_cos = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (125 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &angular_frame_vel_cos_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float angular_frame_vel_sin = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (133 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &angular_frame_vel_sin_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float x = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (141 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float y = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (149 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 dir_x = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (152 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dir_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 dir_y = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (160 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dir_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float vel_x = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (173 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &vel_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float vel_y = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (181 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &vel_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:shared.Trap)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:shared.Trap)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Trap::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:shared.Trap)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 trap_local_id = 1;
  if (this->trap_local_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->trap_local_id(), output);
  }

  // int32 patrol_cue_angular_vel_flip_mark = 2;
  if (this->patrol_cue_angular_vel_flip_mark() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->patrol_cue_angular_vel_flip_mark(), output);
  }

  // .shared.TrapConfigFromTiled config_from_tiled = 3;
  if (this->has_config_from_tiled()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::config_from_tiled(this), output);
  }

  // .shared.TrapState trap_state = 4;
  if (this->trap_state() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->trap_state(), output);
  }

  // int32 frames_in_trap_state = 5;
  if (this->frames_in_trap_state() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->frames_in_trap_state(), output);
  }

  // bool is_completely_static = 6;
  if (this->is_completely_static() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->is_completely_static(), output);
  }

  // bool captured_by_patrol_cue = 7;
  if (this->captured_by_patrol_cue() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->captured_by_patrol_cue(), output);
  }

  // int32 frames_in_patrol_cue = 8;
  if (this->frames_in_patrol_cue() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->frames_in_patrol_cue(), output);
  }

  // int32 waiving_patrol_cue_id = 9;
  if (this->waiving_patrol_cue_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->waiving_patrol_cue_id(), output);
  }

  // bool waiving_spontaneous_patrol = 10;
  if (this->waiving_spontaneous_patrol() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->waiving_spontaneous_patrol(), output);
  }

  // int32 subscribes_to_trigger_local_id = 11;
  if (this->subscribes_to_trigger_local_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->subscribes_to_trigger_local_id(), output);
  }

  // int32 subscribes_to_trigger_local_id_alt = 12;
  if (this->subscribes_to_trigger_local_id_alt() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->subscribes_to_trigger_local_id_alt(), output);
  }

  // float spin_cos = 13;
  if (this->spin_cos() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(13, this->spin_cos(), output);
  }

  // float spin_sin = 14;
  if (this->spin_sin() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(14, this->spin_sin(), output);
  }

  // float angular_frame_vel_cos = 15;
  if (this->angular_frame_vel_cos() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(15, this->angular_frame_vel_cos(), output);
  }

  // float angular_frame_vel_sin = 16;
  if (this->angular_frame_vel_sin() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(16, this->angular_frame_vel_sin(), output);
  }

  // float x = 17;
  if (this->x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(17, this->x(), output);
  }

  // float y = 18;
  if (this->y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(18, this->y(), output);
  }

  // int32 dir_x = 19;
  if (this->dir_x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->dir_x(), output);
  }

  // int32 dir_y = 20;
  if (this->dir_y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->dir_y(), output);
  }

  // float vel_x = 21;
  if (this->vel_x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(21, this->vel_x(), output);
  }

  // float vel_y = 22;
  if (this->vel_y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(22, this->vel_y(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:shared.Trap)
}

::google::protobuf::uint8* Trap::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:shared.Trap)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 trap_local_id = 1;
  if (this->trap_local_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->trap_local_id(), target);
  }

  // int32 patrol_cue_angular_vel_flip_mark = 2;
  if (this->patrol_cue_angular_vel_flip_mark() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->patrol_cue_angular_vel_flip_mark(), target);
  }

  // .shared.TrapConfigFromTiled config_from_tiled = 3;
  if (this->has_config_from_tiled()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::config_from_tiled(this), target);
  }

  // .shared.TrapState trap_state = 4;
  if (this->trap_state() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->trap_state(), target);
  }

  // int32 frames_in_trap_state = 5;
  if (this->frames_in_trap_state() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->frames_in_trap_state(), target);
  }

  // bool is_completely_static = 6;
  if (this->is_completely_static() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->is_completely_static(), target);
  }

  // bool captured_by_patrol_cue = 7;
  if (this->captured_by_patrol_cue() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->captured_by_patrol_cue(), target);
  }

  // int32 frames_in_patrol_cue = 8;
  if (this->frames_in_patrol_cue() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->frames_in_patrol_cue(), target);
  }

  // int32 waiving_patrol_cue_id = 9;
  if (this->waiving_patrol_cue_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->waiving_patrol_cue_id(), target);
  }

  // bool waiving_spontaneous_patrol = 10;
  if (this->waiving_spontaneous_patrol() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->waiving_spontaneous_patrol(), target);
  }

  // int32 subscribes_to_trigger_local_id = 11;
  if (this->subscribes_to_trigger_local_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->subscribes_to_trigger_local_id(), target);
  }

  // int32 subscribes_to_trigger_local_id_alt = 12;
  if (this->subscribes_to_trigger_local_id_alt() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->subscribes_to_trigger_local_id_alt(), target);
  }

  // float spin_cos = 13;
  if (this->spin_cos() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(13, this->spin_cos(), target);
  }

  // float spin_sin = 14;
  if (this->spin_sin() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(14, this->spin_sin(), target);
  }

  // float angular_frame_vel_cos = 15;
  if (this->angular_frame_vel_cos() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(15, this->angular_frame_vel_cos(), target);
  }

  // float angular_frame_vel_sin = 16;
  if (this->angular_frame_vel_sin() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(16, this->angular_frame_vel_sin(), target);
  }

  // float x = 17;
  if (this->x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(17, this->x(), target);
  }

  // float y = 18;
  if (this->y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(18, this->y(), target);
  }

  // int32 dir_x = 19;
  if (this->dir_x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->dir_x(), target);
  }

  // int32 dir_y = 20;
  if (this->dir_y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->dir_y(), target);
  }

  // float vel_x = 21;
  if (this->vel_x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(21, this->vel_x(), target);
  }

  // float vel_y = 22;
  if (this->vel_y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(22, this->vel_y(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:shared.Trap)
  return target;
}

size_t Trap::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:shared.Trap)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .shared.TrapConfigFromTiled config_from_tiled = 3;
  if (this->has_config_from_tiled()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *config_from_tiled_);
  }

  // int32 trap_local_id = 1;
  if (this->trap_local_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->trap_local_id());
  }

  // int32 patrol_cue_angular_vel_flip_mark = 2;
  if (this->patrol_cue_angular_vel_flip_mark() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->patrol_cue_angular_vel_flip_mark());
  }

  // .shared.TrapState trap_state = 4;
  if (this->trap_state() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->trap_state());
  }

  // int32 frames_in_trap_state = 5;
  if (this->frames_in_trap_state() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->frames_in_trap_state());
  }

  // bool is_completely_static = 6;
  if (this->is_completely_static() != 0) {
    total_size += 1 + 1;
  }

  // bool captured_by_patrol_cue = 7;
  if (this->captured_by_patrol_cue() != 0) {
    total_size += 1 + 1;
  }

  // bool waiving_spontaneous_patrol = 10;
  if (this->waiving_spontaneous_patrol() != 0) {
    total_size += 1 + 1;
  }

  // int32 frames_in_patrol_cue = 8;
  if (this->frames_in_patrol_cue() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->frames_in_patrol_cue());
  }

  // int32 waiving_patrol_cue_id = 9;
  if (this->waiving_patrol_cue_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->waiving_patrol_cue_id());
  }

  // int32 subscribes_to_trigger_local_id = 11;
  if (this->subscribes_to_trigger_local_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->subscribes_to_trigger_local_id());
  }

  // int32 subscribes_to_trigger_local_id_alt = 12;
  if (this->subscribes_to_trigger_local_id_alt() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->subscribes_to_trigger_local_id_alt());
  }

  // float spin_cos = 13;
  if (this->spin_cos() != 0) {
    total_size += 1 + 4;
  }

  // float spin_sin = 14;
  if (this->spin_sin() != 0) {
    total_size += 1 + 4;
  }

  // float angular_frame_vel_cos = 15;
  if (this->angular_frame_vel_cos() != 0) {
    total_size += 1 + 4;
  }

  // float angular_frame_vel_sin = 16;
  if (this->angular_frame_vel_sin() != 0) {
    total_size += 2 + 4;
  }

  // float x = 17;
  if (this->x() != 0) {
    total_size += 2 + 4;
  }

  // float y = 18;
  if (this->y() != 0) {
    total_size += 2 + 4;
  }

  // int32 dir_x = 19;
  if (this->dir_x() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->dir_x());
  }

  // int32 dir_y = 20;
  if (this->dir_y() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->dir_y());
  }

  // float vel_x = 21;
  if (this->vel_x() != 0) {
    total_size += 2 + 4;
  }

  // float vel_y = 22;
  if (this->vel_y() != 0) {
    total_size += 2 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Trap::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:shared.Trap)
  GOOGLE_DCHECK_NE(&from, this);
  const Trap* source =
      ::google::protobuf::DynamicCastToGenerated<Trap>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:shared.Trap)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:shared.Trap)
    MergeFrom(*source);
  }
}

void Trap::MergeFrom(const Trap& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:shared.Trap)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_config_from_tiled()) {
    mutable_config_from_tiled()->::shared::TrapConfigFromTiled::MergeFrom(from.config_from_tiled());
  }
  if (from.trap_local_id() != 0) {
    set_trap_local_id(from.trap_local_id());
  }
  if (from.patrol_cue_angular_vel_flip_mark() != 0) {
    set_patrol_cue_angular_vel_flip_mark(from.patrol_cue_angular_vel_flip_mark());
  }
  if (from.trap_state() != 0) {
    set_trap_state(from.trap_state());
  }
  if (from.frames_in_trap_state() != 0) {
    set_frames_in_trap_state(from.frames_in_trap_state());
  }
  if (from.is_completely_static() != 0) {
    set_is_completely_static(from.is_completely_static());
  }
  if (from.captured_by_patrol_cue() != 0) {
    set_captured_by_patrol_cue(from.captured_by_patrol_cue());
  }
  if (from.waiving_spontaneous_patrol() != 0) {
    set_waiving_spontaneous_patrol(from.waiving_spontaneous_patrol());
  }
  if (from.frames_in_patrol_cue() != 0) {
    set_frames_in_patrol_cue(from.frames_in_patrol_cue());
  }
  if (from.waiving_patrol_cue_id() != 0) {
    set_waiving_patrol_cue_id(from.waiving_patrol_cue_id());
  }
  if (from.subscribes_to_trigger_local_id() != 0) {
    set_subscribes_to_trigger_local_id(from.subscribes_to_trigger_local_id());
  }
  if (from.subscribes_to_trigger_local_id_alt() != 0) {
    set_subscribes_to_trigger_local_id_alt(from.subscribes_to_trigger_local_id_alt());
  }
  if (from.spin_cos() != 0) {
    set_spin_cos(from.spin_cos());
  }
  if (from.spin_sin() != 0) {
    set_spin_sin(from.spin_sin());
  }
  if (from.angular_frame_vel_cos() != 0) {
    set_angular_frame_vel_cos(from.angular_frame_vel_cos());
  }
  if (from.angular_frame_vel_sin() != 0) {
    set_angular_frame_vel_sin(from.angular_frame_vel_sin());
  }
  if (from.x() != 0) {
    set_x(from.x());
  }
  if (from.y() != 0) {
    set_y(from.y());
  }
  if (from.dir_x() != 0) {
    set_dir_x(from.dir_x());
  }
  if (from.dir_y() != 0) {
    set_dir_y(from.dir_y());
  }
  if (from.vel_x() != 0) {
    set_vel_x(from.vel_x());
  }
  if (from.vel_y() != 0) {
    set_vel_y(from.vel_y());
  }
}

void Trap::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:shared.Trap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Trap::CopyFrom(const Trap& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:shared.Trap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Trap::IsInitialized() const {
  return true;
}

void Trap::Swap(Trap* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Trap::InternalSwap(Trap* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(config_from_tiled_, other->config_from_tiled_);
  swap(trap_local_id_, other->trap_local_id_);
  swap(patrol_cue_angular_vel_flip_mark_, other->patrol_cue_angular_vel_flip_mark_);
  swap(trap_state_, other->trap_state_);
  swap(frames_in_trap_state_, other->frames_in_trap_state_);
  swap(is_completely_static_, other->is_completely_static_);
  swap(captured_by_patrol_cue_, other->captured_by_patrol_cue_);
  swap(waiving_spontaneous_patrol_, other->waiving_spontaneous_patrol_);
  swap(frames_in_patrol_cue_, other->frames_in_patrol_cue_);
  swap(waiving_patrol_cue_id_, other->waiving_patrol_cue_id_);
  swap(subscribes_to_trigger_local_id_, other->subscribes_to_trigger_local_id_);
  swap(subscribes_to_trigger_local_id_alt_, other->subscribes_to_trigger_local_id_alt_);
  swap(spin_cos_, other->spin_cos_);
  swap(spin_sin_, other->spin_sin_);
  swap(angular_frame_vel_cos_, other->angular_frame_vel_cos_);
  swap(angular_frame_vel_sin_, other->angular_frame_vel_sin_);
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(dir_x_, other->dir_x_);
  swap(dir_y_, other->dir_y_);
  swap(vel_x_, other->vel_x_);
  swap(vel_y_, other->vel_y_);
}

::google::protobuf::Metadata Trap::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_serializable_5fdata_2eproto);
  return ::file_level_metadata_serializable_5fdata_2eproto[kIndexInFileMessages];
}


// ===================================================================

void TriggerConfig::InitAsDefaultInstance() {
}
class TriggerConfig::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TriggerConfig::kSpeciesIdFieldNumber;
const int TriggerConfig::kSpeciesNameFieldNumber;
const int TriggerConfig::kTriggerTypeFieldNumber;
const int TriggerConfig::kCollisionTypeMaskFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TriggerConfig::TriggerConfig()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:shared.TriggerConfig)
}
TriggerConfig::TriggerConfig(const TriggerConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  species_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.species_name().size() > 0) {
    species_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.species_name_);
  }
  ::memcpy(&species_id_, &from.species_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&collision_type_mask_) -
    reinterpret_cast<char*>(&species_id_)) + sizeof(collision_type_mask_));
  // @@protoc_insertion_point(copy_constructor:shared.TriggerConfig)
}

void TriggerConfig::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_TriggerConfig_serializable_5fdata_2eproto.base);
  species_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&species_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&collision_type_mask_) -
      reinterpret_cast<char*>(&species_id_)) + sizeof(collision_type_mask_));
}

TriggerConfig::~TriggerConfig() {
  // @@protoc_insertion_point(destructor:shared.TriggerConfig)
  SharedDtor();
}

void TriggerConfig::SharedDtor() {
  species_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TriggerConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TriggerConfig& TriggerConfig::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_TriggerConfig_serializable_5fdata_2eproto.base);
  return *internal_default_instance();
}


void TriggerConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:shared.TriggerConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  species_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&species_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&collision_type_mask_) -
      reinterpret_cast<char*>(&species_id_)) + sizeof(collision_type_mask_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TriggerConfig::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<TriggerConfig*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int32 species_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_species_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string species_name = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("shared.TriggerConfig.species_name");
        object = msg->mutable_species_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .shared.TriggerType trigger_type = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_trigger_type(static_cast<::shared::TriggerType>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // uint64 collision_type_mask = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_collision_type_mask(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TriggerConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:shared.TriggerConfig)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 species_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &species_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string species_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_species_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->species_name().data(), static_cast<int>(this->species_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "shared.TriggerConfig.species_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .shared.TriggerType trigger_type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_trigger_type(static_cast< ::shared::TriggerType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 collision_type_mask = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &collision_type_mask_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:shared.TriggerConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:shared.TriggerConfig)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TriggerConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:shared.TriggerConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 species_id = 1;
  if (this->species_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->species_id(), output);
  }

  // string species_name = 2;
  if (this->species_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->species_name().data(), static_cast<int>(this->species_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "shared.TriggerConfig.species_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->species_name(), output);
  }

  // .shared.TriggerType trigger_type = 3;
  if (this->trigger_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->trigger_type(), output);
  }

  // uint64 collision_type_mask = 4;
  if (this->collision_type_mask() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->collision_type_mask(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:shared.TriggerConfig)
}

::google::protobuf::uint8* TriggerConfig::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:shared.TriggerConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 species_id = 1;
  if (this->species_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->species_id(), target);
  }

  // string species_name = 2;
  if (this->species_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->species_name().data(), static_cast<int>(this->species_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "shared.TriggerConfig.species_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->species_name(), target);
  }

  // .shared.TriggerType trigger_type = 3;
  if (this->trigger_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->trigger_type(), target);
  }

  // uint64 collision_type_mask = 4;
  if (this->collision_type_mask() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->collision_type_mask(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:shared.TriggerConfig)
  return target;
}

size_t TriggerConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:shared.TriggerConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string species_name = 2;
  if (this->species_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->species_name());
  }

  // int32 species_id = 1;
  if (this->species_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->species_id());
  }

  // .shared.TriggerType trigger_type = 3;
  if (this->trigger_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->trigger_type());
  }

  // uint64 collision_type_mask = 4;
  if (this->collision_type_mask() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->collision_type_mask());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TriggerConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:shared.TriggerConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const TriggerConfig* source =
      ::google::protobuf::DynamicCastToGenerated<TriggerConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:shared.TriggerConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:shared.TriggerConfig)
    MergeFrom(*source);
  }
}

void TriggerConfig::MergeFrom(const TriggerConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:shared.TriggerConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.species_name().size() > 0) {

    species_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.species_name_);
  }
  if (from.species_id() != 0) {
    set_species_id(from.species_id());
  }
  if (from.trigger_type() != 0) {
    set_trigger_type(from.trigger_type());
  }
  if (from.collision_type_mask() != 0) {
    set_collision_type_mask(from.collision_type_mask());
  }
}

void TriggerConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:shared.TriggerConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TriggerConfig::CopyFrom(const TriggerConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:shared.TriggerConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TriggerConfig::IsInitialized() const {
  return true;
}

void TriggerConfig::Swap(TriggerConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TriggerConfig::InternalSwap(TriggerConfig* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  species_name_.Swap(&other->species_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(species_id_, other->species_id_);
  swap(trigger_type_, other->trigger_type_);
  swap(collision_type_mask_, other->collision_type_mask_);
}

::google::protobuf::Metadata TriggerConfig::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_serializable_5fdata_2eproto);
  return ::file_level_metadata_serializable_5fdata_2eproto[kIndexInFileMessages];
}


// ===================================================================

void PeerUdpAddr::InitAsDefaultInstance() {
}
class PeerUdpAddr::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PeerUdpAddr::kIpFieldNumber;
const int PeerUdpAddr::kPortFieldNumber;
const int PeerUdpAddr::kAuthKeyFieldNumber;
const int PeerUdpAddr::kSeqNoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PeerUdpAddr::PeerUdpAddr()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:shared.PeerUdpAddr)
}
PeerUdpAddr::PeerUdpAddr(const PeerUdpAddr& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.ip().size() > 0) {
    ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_);
  }
  ::memcpy(&port_, &from.port_,
    static_cast<size_t>(reinterpret_cast<char*>(&seq_no_) -
    reinterpret_cast<char*>(&port_)) + sizeof(seq_no_));
  // @@protoc_insertion_point(copy_constructor:shared.PeerUdpAddr)
}

void PeerUdpAddr::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_PeerUdpAddr_serializable_5fdata_2eproto.base);
  ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&port_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&seq_no_) -
      reinterpret_cast<char*>(&port_)) + sizeof(seq_no_));
}

PeerUdpAddr::~PeerUdpAddr() {
  // @@protoc_insertion_point(destructor:shared.PeerUdpAddr)
  SharedDtor();
}

void PeerUdpAddr::SharedDtor() {
  ip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void PeerUdpAddr::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PeerUdpAddr& PeerUdpAddr::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_PeerUdpAddr_serializable_5fdata_2eproto.base);
  return *internal_default_instance();
}


void PeerUdpAddr::Clear() {
// @@protoc_insertion_point(message_clear_start:shared.PeerUdpAddr)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&port_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&seq_no_) -
      reinterpret_cast<char*>(&port_)) + sizeof(seq_no_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PeerUdpAddr::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<PeerUdpAddr*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string ip = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("shared.PeerUdpAddr.ip");
        object = msg->mutable_ip();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // int32 port = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_port(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 auth_key = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_auth_key(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // uint32 seq_no = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_seq_no(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PeerUdpAddr::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:shared.PeerUdpAddr)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string ip = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ip().data(), static_cast<int>(this->ip().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "shared.PeerUdpAddr.ip"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 port = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 auth_key = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &auth_key_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 seq_no = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seq_no_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:shared.PeerUdpAddr)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:shared.PeerUdpAddr)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PeerUdpAddr::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:shared.PeerUdpAddr)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string ip = 1;
  if (this->ip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ip().data(), static_cast<int>(this->ip().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "shared.PeerUdpAddr.ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->ip(), output);
  }

  // int32 port = 2;
  if (this->port() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->port(), output);
  }

  // int32 auth_key = 3;
  if (this->auth_key() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->auth_key(), output);
  }

  // uint32 seq_no = 4;
  if (this->seq_no() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->seq_no(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:shared.PeerUdpAddr)
}

::google::protobuf::uint8* PeerUdpAddr::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:shared.PeerUdpAddr)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string ip = 1;
  if (this->ip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ip().data(), static_cast<int>(this->ip().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "shared.PeerUdpAddr.ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->ip(), target);
  }

  // int32 port = 2;
  if (this->port() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->port(), target);
  }

  // int32 auth_key = 3;
  if (this->auth_key() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->auth_key(), target);
  }

  // uint32 seq_no = 4;
  if (this->seq_no() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->seq_no(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:shared.PeerUdpAddr)
  return target;
}

size_t PeerUdpAddr::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:shared.PeerUdpAddr)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string ip = 1;
  if (this->ip().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ip());
  }

  // int32 port = 2;
  if (this->port() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->port());
  }

  // int32 auth_key = 3;
  if (this->auth_key() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->auth_key());
  }

  // uint32 seq_no = 4;
  if (this->seq_no() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->seq_no());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PeerUdpAddr::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:shared.PeerUdpAddr)
  GOOGLE_DCHECK_NE(&from, this);
  const PeerUdpAddr* source =
      ::google::protobuf::DynamicCastToGenerated<PeerUdpAddr>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:shared.PeerUdpAddr)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:shared.PeerUdpAddr)
    MergeFrom(*source);
  }
}

void PeerUdpAddr::MergeFrom(const PeerUdpAddr& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:shared.PeerUdpAddr)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ip().size() > 0) {

    ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_);
  }
  if (from.port() != 0) {
    set_port(from.port());
  }
  if (from.auth_key() != 0) {
    set_auth_key(from.auth_key());
  }
  if (from.seq_no() != 0) {
    set_seq_no(from.seq_no());
  }
}

void PeerUdpAddr::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:shared.PeerUdpAddr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PeerUdpAddr::CopyFrom(const PeerUdpAddr& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:shared.PeerUdpAddr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PeerUdpAddr::IsInitialized() const {
  return true;
}

void PeerUdpAddr::Swap(PeerUdpAddr* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PeerUdpAddr::InternalSwap(PeerUdpAddr* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  ip_.Swap(&other->ip_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(port_, other->port_);
  swap(auth_key_, other->auth_key_);
  swap(seq_no_, other->seq_no_);
}

::google::protobuf::Metadata PeerUdpAddr::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_serializable_5fdata_2eproto);
  return ::file_level_metadata_serializable_5fdata_2eproto[kIndexInFileMessages];
}


// ===================================================================

void BattleColliderInfo::InitAsDefaultInstance() {
  ::shared::_BattleColliderInfo_default_instance_._instance.get_mutable()->battle_udp_tunnel_ = const_cast< ::shared::PeerUdpAddr*>(
      ::shared::PeerUdpAddr::internal_default_instance());
}
class BattleColliderInfo::HasBitSetters {
 public:
  static const ::shared::PeerUdpAddr& battle_udp_tunnel(const BattleColliderInfo* msg);
};

const ::shared::PeerUdpAddr&
BattleColliderInfo::HasBitSetters::battle_udp_tunnel(const BattleColliderInfo* msg) {
  return *msg->battle_udp_tunnel_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BattleColliderInfo::kStageNameFieldNumber;
const int BattleColliderInfo::kBoundRoomIdFieldNumber;
const int BattleColliderInfo::kBattleDurationFramesFieldNumber;
const int BattleColliderInfo::kInputFrameUpsyncDelayToleranceFieldNumber;
const int BattleColliderInfo::kMaxChasingRenderFramesPerUpdateFieldNumber;
const int BattleColliderInfo::kRollbackEstimatedDtMillisFieldNumber;
const int BattleColliderInfo::kRollbackEstimatedDtNanosFieldNumber;
const int BattleColliderInfo::kRenderBufferSizeFieldNumber;
const int BattleColliderInfo::kCollisionMinStepFieldNumber;
const int BattleColliderInfo::kBoundRoomCapacityFieldNumber;
const int BattleColliderInfo::kPreallocNpcCapacityFieldNumber;
const int BattleColliderInfo::kPreallocBulletCapacityFieldNumber;
const int BattleColliderInfo::kBattleUdpTunnelFieldNumber;
const int BattleColliderInfo::kFrameLogEnabledFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BattleColliderInfo::BattleColliderInfo()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:shared.BattleColliderInfo)
}
BattleColliderInfo::BattleColliderInfo(const BattleColliderInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  stage_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.stage_name().size() > 0) {
    stage_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.stage_name_);
  }
  if (from.has_battle_udp_tunnel()) {
    battle_udp_tunnel_ = new ::shared::PeerUdpAddr(*from.battle_udp_tunnel_);
  } else {
    battle_udp_tunnel_ = nullptr;
  }
  ::memcpy(&battle_duration_frames_, &from.battle_duration_frames_,
    static_cast<size_t>(reinterpret_cast<char*>(&frame_log_enabled_) -
    reinterpret_cast<char*>(&battle_duration_frames_)) + sizeof(frame_log_enabled_));
  // @@protoc_insertion_point(copy_constructor:shared.BattleColliderInfo)
}

void BattleColliderInfo::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_BattleColliderInfo_serializable_5fdata_2eproto.base);
  stage_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&battle_udp_tunnel_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&frame_log_enabled_) -
      reinterpret_cast<char*>(&battle_udp_tunnel_)) + sizeof(frame_log_enabled_));
}

BattleColliderInfo::~BattleColliderInfo() {
  // @@protoc_insertion_point(destructor:shared.BattleColliderInfo)
  SharedDtor();
}

void BattleColliderInfo::SharedDtor() {
  stage_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete battle_udp_tunnel_;
}

void BattleColliderInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BattleColliderInfo& BattleColliderInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_BattleColliderInfo_serializable_5fdata_2eproto.base);
  return *internal_default_instance();
}


void BattleColliderInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:shared.BattleColliderInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  stage_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && battle_udp_tunnel_ != nullptr) {
    delete battle_udp_tunnel_;
  }
  battle_udp_tunnel_ = nullptr;
  ::memset(&battle_duration_frames_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&frame_log_enabled_) -
      reinterpret_cast<char*>(&battle_duration_frames_)) + sizeof(frame_log_enabled_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* BattleColliderInfo::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<BattleColliderInfo*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string stage_name = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("shared.BattleColliderInfo.stage_name");
        object = msg->mutable_stage_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // int32 bound_room_id = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_bound_room_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int64 battle_duration_frames = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_battle_duration_frames(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 input_frame_upsync_delay_tolerance = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_input_frame_upsync_delay_tolerance(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 max_chasing_render_frames_per_update = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_max_chasing_render_frames_per_update(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // double rollback_estimated_dt_millis = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 49) goto handle_unusual;
        msg->set_rollback_estimated_dt_millis(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // int64 rollback_estimated_dt_nanos = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        msg->set_rollback_estimated_dt_nanos(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 render_buffer_size = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 64) goto handle_unusual;
        msg->set_render_buffer_size(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 collision_min_step = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 72) goto handle_unusual;
        msg->set_collision_min_step(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 bound_room_capacity = 10;
      case 10: {
        if (static_cast<::google::protobuf::uint8>(tag) != 80) goto handle_unusual;
        msg->set_bound_room_capacity(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 prealloc_npc_capacity = 11;
      case 11: {
        if (static_cast<::google::protobuf::uint8>(tag) != 88) goto handle_unusual;
        msg->set_prealloc_npc_capacity(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 prealloc_bullet_capacity = 12;
      case 12: {
        if (static_cast<::google::protobuf::uint8>(tag) != 96) goto handle_unusual;
        msg->set_prealloc_bullet_capacity(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // .shared.PeerUdpAddr battle_udp_tunnel = 1024;
      case 1024: {
        if (static_cast<::google::protobuf::uint8>(tag) != 2) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::shared::PeerUdpAddr::_InternalParse;
        object = msg->mutable_battle_udp_tunnel();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // bool frame_log_enabled = 1025;
      case 1025: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_frame_log_enabled(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool BattleColliderInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:shared.BattleColliderInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string stage_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stage_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->stage_name().data(), static_cast<int>(this->stage_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "shared.BattleColliderInfo.stage_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 bound_room_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bound_room_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 battle_duration_frames = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &battle_duration_frames_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 input_frame_upsync_delay_tolerance = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &input_frame_upsync_delay_tolerance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 max_chasing_render_frames_per_update = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_chasing_render_frames_per_update_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double rollback_estimated_dt_millis = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (49 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &rollback_estimated_dt_millis_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 rollback_estimated_dt_nanos = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (56 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &rollback_estimated_dt_nanos_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 render_buffer_size = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (64 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &render_buffer_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 collision_min_step = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (72 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &collision_min_step_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 bound_room_capacity = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (80 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bound_room_capacity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 prealloc_npc_capacity = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (88 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &prealloc_npc_capacity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 prealloc_bullet_capacity = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (96 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &prealloc_bullet_capacity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .shared.PeerUdpAddr battle_udp_tunnel = 1024;
      case 1024: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8194 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_battle_udp_tunnel()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool frame_log_enabled = 1025;
      case 1025: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8200 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &frame_log_enabled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:shared.BattleColliderInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:shared.BattleColliderInfo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void BattleColliderInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:shared.BattleColliderInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string stage_name = 1;
  if (this->stage_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->stage_name().data(), static_cast<int>(this->stage_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "shared.BattleColliderInfo.stage_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->stage_name(), output);
  }

  // int32 bound_room_id = 2;
  if (this->bound_room_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->bound_room_id(), output);
  }

  // int64 battle_duration_frames = 3;
  if (this->battle_duration_frames() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->battle_duration_frames(), output);
  }

  // int32 input_frame_upsync_delay_tolerance = 4;
  if (this->input_frame_upsync_delay_tolerance() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->input_frame_upsync_delay_tolerance(), output);
  }

  // int32 max_chasing_render_frames_per_update = 5;
  if (this->max_chasing_render_frames_per_update() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->max_chasing_render_frames_per_update(), output);
  }

  // double rollback_estimated_dt_millis = 6;
  if (this->rollback_estimated_dt_millis() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->rollback_estimated_dt_millis(), output);
  }

  // int64 rollback_estimated_dt_nanos = 7;
  if (this->rollback_estimated_dt_nanos() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->rollback_estimated_dt_nanos(), output);
  }

  // int32 render_buffer_size = 8;
  if (this->render_buffer_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->render_buffer_size(), output);
  }

  // int32 collision_min_step = 9;
  if (this->collision_min_step() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->collision_min_step(), output);
  }

  // int32 bound_room_capacity = 10;
  if (this->bound_room_capacity() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->bound_room_capacity(), output);
  }

  // int32 prealloc_npc_capacity = 11;
  if (this->prealloc_npc_capacity() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->prealloc_npc_capacity(), output);
  }

  // int32 prealloc_bullet_capacity = 12;
  if (this->prealloc_bullet_capacity() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->prealloc_bullet_capacity(), output);
  }

  // .shared.PeerUdpAddr battle_udp_tunnel = 1024;
  if (this->has_battle_udp_tunnel()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1024, HasBitSetters::battle_udp_tunnel(this), output);
  }

  // bool frame_log_enabled = 1025;
  if (this->frame_log_enabled() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1025, this->frame_log_enabled(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:shared.BattleColliderInfo)
}

::google::protobuf::uint8* BattleColliderInfo::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:shared.BattleColliderInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string stage_name = 1;
  if (this->stage_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->stage_name().data(), static_cast<int>(this->stage_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "shared.BattleColliderInfo.stage_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->stage_name(), target);
  }

  // int32 bound_room_id = 2;
  if (this->bound_room_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->bound_room_id(), target);
  }

  // int64 battle_duration_frames = 3;
  if (this->battle_duration_frames() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->battle_duration_frames(), target);
  }

  // int32 input_frame_upsync_delay_tolerance = 4;
  if (this->input_frame_upsync_delay_tolerance() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->input_frame_upsync_delay_tolerance(), target);
  }

  // int32 max_chasing_render_frames_per_update = 5;
  if (this->max_chasing_render_frames_per_update() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->max_chasing_render_frames_per_update(), target);
  }

  // double rollback_estimated_dt_millis = 6;
  if (this->rollback_estimated_dt_millis() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->rollback_estimated_dt_millis(), target);
  }

  // int64 rollback_estimated_dt_nanos = 7;
  if (this->rollback_estimated_dt_nanos() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->rollback_estimated_dt_nanos(), target);
  }

  // int32 render_buffer_size = 8;
  if (this->render_buffer_size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->render_buffer_size(), target);
  }

  // int32 collision_min_step = 9;
  if (this->collision_min_step() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->collision_min_step(), target);
  }

  // int32 bound_room_capacity = 10;
  if (this->bound_room_capacity() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->bound_room_capacity(), target);
  }

  // int32 prealloc_npc_capacity = 11;
  if (this->prealloc_npc_capacity() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->prealloc_npc_capacity(), target);
  }

  // int32 prealloc_bullet_capacity = 12;
  if (this->prealloc_bullet_capacity() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->prealloc_bullet_capacity(), target);
  }

  // .shared.PeerUdpAddr battle_udp_tunnel = 1024;
  if (this->has_battle_udp_tunnel()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1024, HasBitSetters::battle_udp_tunnel(this), target);
  }

  // bool frame_log_enabled = 1025;
  if (this->frame_log_enabled() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1025, this->frame_log_enabled(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:shared.BattleColliderInfo)
  return target;
}

size_t BattleColliderInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:shared.BattleColliderInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string stage_name = 1;
  if (this->stage_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->stage_name());
  }

  // .shared.PeerUdpAddr battle_udp_tunnel = 1024;
  if (this->has_battle_udp_tunnel()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *battle_udp_tunnel_);
  }

  // int64 battle_duration_frames = 3;
  if (this->battle_duration_frames() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->battle_duration_frames());
  }

  // int32 bound_room_id = 2;
  if (this->bound_room_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->bound_room_id());
  }

  // int32 input_frame_upsync_delay_tolerance = 4;
  if (this->input_frame_upsync_delay_tolerance() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->input_frame_upsync_delay_tolerance());
  }

  // double rollback_estimated_dt_millis = 6;
  if (this->rollback_estimated_dt_millis() != 0) {
    total_size += 1 + 8;
  }

  // int32 max_chasing_render_frames_per_update = 5;
  if (this->max_chasing_render_frames_per_update() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->max_chasing_render_frames_per_update());
  }

  // int32 render_buffer_size = 8;
  if (this->render_buffer_size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->render_buffer_size());
  }

  // int64 rollback_estimated_dt_nanos = 7;
  if (this->rollback_estimated_dt_nanos() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->rollback_estimated_dt_nanos());
  }

  // int32 collision_min_step = 9;
  if (this->collision_min_step() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->collision_min_step());
  }

  // int32 bound_room_capacity = 10;
  if (this->bound_room_capacity() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->bound_room_capacity());
  }

  // int32 prealloc_npc_capacity = 11;
  if (this->prealloc_npc_capacity() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->prealloc_npc_capacity());
  }

  // int32 prealloc_bullet_capacity = 12;
  if (this->prealloc_bullet_capacity() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->prealloc_bullet_capacity());
  }

  // bool frame_log_enabled = 1025;
  if (this->frame_log_enabled() != 0) {
    total_size += 2 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BattleColliderInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:shared.BattleColliderInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const BattleColliderInfo* source =
      ::google::protobuf::DynamicCastToGenerated<BattleColliderInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:shared.BattleColliderInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:shared.BattleColliderInfo)
    MergeFrom(*source);
  }
}

void BattleColliderInfo::MergeFrom(const BattleColliderInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:shared.BattleColliderInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.stage_name().size() > 0) {

    stage_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.stage_name_);
  }
  if (from.has_battle_udp_tunnel()) {
    mutable_battle_udp_tunnel()->::shared::PeerUdpAddr::MergeFrom(from.battle_udp_tunnel());
  }
  if (from.battle_duration_frames() != 0) {
    set_battle_duration_frames(from.battle_duration_frames());
  }
  if (from.bound_room_id() != 0) {
    set_bound_room_id(from.bound_room_id());
  }
  if (from.input_frame_upsync_delay_tolerance() != 0) {
    set_input_frame_upsync_delay_tolerance(from.input_frame_upsync_delay_tolerance());
  }
  if (from.rollback_estimated_dt_millis() != 0) {
    set_rollback_estimated_dt_millis(from.rollback_estimated_dt_millis());
  }
  if (from.max_chasing_render_frames_per_update() != 0) {
    set_max_chasing_render_frames_per_update(from.max_chasing_render_frames_per_update());
  }
  if (from.render_buffer_size() != 0) {
    set_render_buffer_size(from.render_buffer_size());
  }
  if (from.rollback_estimated_dt_nanos() != 0) {
    set_rollback_estimated_dt_nanos(from.rollback_estimated_dt_nanos());
  }
  if (from.collision_min_step() != 0) {
    set_collision_min_step(from.collision_min_step());
  }
  if (from.bound_room_capacity() != 0) {
    set_bound_room_capacity(from.bound_room_capacity());
  }
  if (from.prealloc_npc_capacity() != 0) {
    set_prealloc_npc_capacity(from.prealloc_npc_capacity());
  }
  if (from.prealloc_bullet_capacity() != 0) {
    set_prealloc_bullet_capacity(from.prealloc_bullet_capacity());
  }
  if (from.frame_log_enabled() != 0) {
    set_frame_log_enabled(from.frame_log_enabled());
  }
}

void BattleColliderInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:shared.BattleColliderInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BattleColliderInfo::CopyFrom(const BattleColliderInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:shared.BattleColliderInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BattleColliderInfo::IsInitialized() const {
  return true;
}

void BattleColliderInfo::Swap(BattleColliderInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BattleColliderInfo::InternalSwap(BattleColliderInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  stage_name_.Swap(&other->stage_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(battle_udp_tunnel_, other->battle_udp_tunnel_);
  swap(battle_duration_frames_, other->battle_duration_frames_);
  swap(bound_room_id_, other->bound_room_id_);
  swap(input_frame_upsync_delay_tolerance_, other->input_frame_upsync_delay_tolerance_);
  swap(rollback_estimated_dt_millis_, other->rollback_estimated_dt_millis_);
  swap(max_chasing_render_frames_per_update_, other->max_chasing_render_frames_per_update_);
  swap(render_buffer_size_, other->render_buffer_size_);
  swap(rollback_estimated_dt_nanos_, other->rollback_estimated_dt_nanos_);
  swap(collision_min_step_, other->collision_min_step_);
  swap(bound_room_capacity_, other->bound_room_capacity_);
  swap(prealloc_npc_capacity_, other->prealloc_npc_capacity_);
  swap(prealloc_bullet_capacity_, other->prealloc_bullet_capacity_);
  swap(frame_log_enabled_, other->frame_log_enabled_);
}

::google::protobuf::Metadata BattleColliderInfo::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_serializable_5fdata_2eproto);
  return ::file_level_metadata_serializable_5fdata_2eproto[kIndexInFileMessages];
}


// ===================================================================

void RenderFrame::InitAsDefaultInstance() {
}
class RenderFrame::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RenderFrame::kIdFieldNumber;
const int RenderFrame::kPlayersArrFieldNumber;
const int RenderFrame::kCountdownNanosFieldNumber;
const int RenderFrame::kBulletsFieldNumber;
const int RenderFrame::kNpcsArrFieldNumber;
const int RenderFrame::kTrapsArrFieldNumber;
const int RenderFrame::kTriggersArrFieldNumber;
const int RenderFrame::kPickablesFieldNumber;
const int RenderFrame::kBackendUnconfirmedMaskFieldNumber;
const int RenderFrame::kShouldForceResyncFieldNumber;
const int RenderFrame::kSpeciesIdListFieldNumber;
const int RenderFrame::kBulletLocalIdCounterFieldNumber;
const int RenderFrame::kNpcLocalIdCounterFieldNumber;
const int RenderFrame::kParticipantChangeIdFieldNumber;
const int RenderFrame::kPickableLocalIdCounterFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RenderFrame::RenderFrame()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:shared.RenderFrame)
}
RenderFrame::RenderFrame(const RenderFrame& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      players_arr_(from.players_arr_),
      bullets_(from.bullets_),
      npcs_arr_(from.npcs_arr_),
      traps_arr_(from.traps_arr_),
      triggers_arr_(from.triggers_arr_),
      pickables_(from.pickables_),
      species_id_list_(from.species_id_list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&countdown_nanos_, &from.countdown_nanos_,
    static_cast<size_t>(reinterpret_cast<char*>(&pickable_local_id_counter_) -
    reinterpret_cast<char*>(&countdown_nanos_)) + sizeof(pickable_local_id_counter_));
  // @@protoc_insertion_point(copy_constructor:shared.RenderFrame)
}

void RenderFrame::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_RenderFrame_serializable_5fdata_2eproto.base);
  ::memset(&countdown_nanos_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pickable_local_id_counter_) -
      reinterpret_cast<char*>(&countdown_nanos_)) + sizeof(pickable_local_id_counter_));
}

RenderFrame::~RenderFrame() {
  // @@protoc_insertion_point(destructor:shared.RenderFrame)
  SharedDtor();
}

void RenderFrame::SharedDtor() {
}

void RenderFrame::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RenderFrame& RenderFrame::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_RenderFrame_serializable_5fdata_2eproto.base);
  return *internal_default_instance();
}


void RenderFrame::Clear() {
// @@protoc_insertion_point(message_clear_start:shared.RenderFrame)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  players_arr_.Clear();
  bullets_.Clear();
  npcs_arr_.Clear();
  traps_arr_.Clear();
  triggers_arr_.Clear();
  pickables_.Clear();
  species_id_list_.Clear();
  ::memset(&countdown_nanos_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pickable_local_id_counter_) -
      reinterpret_cast<char*>(&countdown_nanos_)) + sizeof(pickable_local_id_counter_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RenderFrame::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<RenderFrame*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated .shared.CharacterDownsync players_arr = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::shared::CharacterDownsync::_InternalParse;
          object = msg->add_players_arr();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 18 && (ptr += 1));
        break;
      }
      // int64 countdown_nanos = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_countdown_nanos(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated .shared.Bullet bullets = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::shared::Bullet::_InternalParse;
          object = msg->add_bullets();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 34 && (ptr += 1));
        break;
      }
      // repeated .shared.CharacterDownsync npcs_arr = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::shared::CharacterDownsync::_InternalParse;
          object = msg->add_npcs_arr();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 42 && (ptr += 1));
        break;
      }
      // repeated .shared.Trap traps_arr = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::shared::Trap::_InternalParse;
          object = msg->add_traps_arr();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 50 && (ptr += 1));
        break;
      }
      // repeated .shared.Trigger triggers_arr = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 58) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::shared::Trigger::_InternalParse;
          object = msg->add_triggers_arr();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 58 && (ptr += 1));
        break;
      }
      // repeated .shared.Pickable pickables = 10;
      case 10: {
        if (static_cast<::google::protobuf::uint8>(tag) != 82) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::shared::Pickable::_InternalParse;
          object = msg->add_pickables();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 82 && (ptr += 1));
        break;
      }
      // uint64 backend_unconfirmed_mask = 1024;
      case 1024: {
        if (static_cast<::google::protobuf::uint8>(tag) != 0) goto handle_unusual;
        msg->set_backend_unconfirmed_mask(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // bool should_force_resync = 1025;
      case 1025: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_should_force_resync(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated int32 species_id_list = 1026;
      case 1026: {
        if (static_cast<::google::protobuf::uint8>(tag) == 18) {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::protobuf::internal::PackedInt32Parser;
          object = msg->mutable_species_id_list();
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          if (size) ptr = parser_till_end(ptr, newend, object, ctx);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        do {
          msg->add_species_id_list(::google::protobuf::internal::ReadVarint(&ptr));
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 65535) == 16528 && (ptr += 2));
        break;
      }
      // int32 bullet_local_id_counter = 1027;
      case 1027: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_bullet_local_id_counter(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 npc_local_id_counter = 1028;
      case 1028: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_npc_local_id_counter(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 participant_change_id = 1029;
      case 1029: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_participant_change_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 pickable_local_id_counter = 1030;
      case 1030: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_pickable_local_id_counter(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RenderFrame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:shared.RenderFrame)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .shared.CharacterDownsync players_arr = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_players_arr()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 countdown_nanos = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &countdown_nanos_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .shared.Bullet bullets = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_bullets()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .shared.CharacterDownsync npcs_arr = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_npcs_arr()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .shared.Trap traps_arr = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_traps_arr()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .shared.Trigger triggers_arr = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (58 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_triggers_arr()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .shared.Pickable pickables = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (82 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_pickables()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 backend_unconfirmed_mask = 1024;
      case 1024: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8192 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &backend_unconfirmed_mask_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool should_force_resync = 1025;
      case 1025: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8200 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &should_force_resync_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 species_id_list = 1026;
      case 1026: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8210 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_species_id_list())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (8208 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 8210u, input, this->mutable_species_id_list())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 bullet_local_id_counter = 1027;
      case 1027: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8216 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bullet_local_id_counter_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 npc_local_id_counter = 1028;
      case 1028: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8224 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &npc_local_id_counter_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 participant_change_id = 1029;
      case 1029: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8232 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &participant_change_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 pickable_local_id_counter = 1030;
      case 1030: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8240 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pickable_local_id_counter_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:shared.RenderFrame)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:shared.RenderFrame)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RenderFrame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:shared.RenderFrame)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // repeated .shared.CharacterDownsync players_arr = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->players_arr_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->players_arr(static_cast<int>(i)),
      output);
  }

  // int64 countdown_nanos = 3;
  if (this->countdown_nanos() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->countdown_nanos(), output);
  }

  // repeated .shared.Bullet bullets = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->bullets_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->bullets(static_cast<int>(i)),
      output);
  }

  // repeated .shared.CharacterDownsync npcs_arr = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->npcs_arr_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5,
      this->npcs_arr(static_cast<int>(i)),
      output);
  }

  // repeated .shared.Trap traps_arr = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->traps_arr_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6,
      this->traps_arr(static_cast<int>(i)),
      output);
  }

  // repeated .shared.Trigger triggers_arr = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->triggers_arr_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7,
      this->triggers_arr(static_cast<int>(i)),
      output);
  }

  // repeated .shared.Pickable pickables = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->pickables_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10,
      this->pickables(static_cast<int>(i)),
      output);
  }

  // uint64 backend_unconfirmed_mask = 1024;
  if (this->backend_unconfirmed_mask() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1024, this->backend_unconfirmed_mask(), output);
  }

  // bool should_force_resync = 1025;
  if (this->should_force_resync() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1025, this->should_force_resync(), output);
  }

  // repeated int32 species_id_list = 1026;
  if (this->species_id_list_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1026, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_species_id_list_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->species_id_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->species_id_list(i), output);
  }

  // int32 bullet_local_id_counter = 1027;
  if (this->bullet_local_id_counter() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1027, this->bullet_local_id_counter(), output);
  }

  // int32 npc_local_id_counter = 1028;
  if (this->npc_local_id_counter() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1028, this->npc_local_id_counter(), output);
  }

  // int32 participant_change_id = 1029;
  if (this->participant_change_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1029, this->participant_change_id(), output);
  }

  // int32 pickable_local_id_counter = 1030;
  if (this->pickable_local_id_counter() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1030, this->pickable_local_id_counter(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:shared.RenderFrame)
}

::google::protobuf::uint8* RenderFrame::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:shared.RenderFrame)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // repeated .shared.CharacterDownsync players_arr = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->players_arr_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->players_arr(static_cast<int>(i)), target);
  }

  // int64 countdown_nanos = 3;
  if (this->countdown_nanos() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->countdown_nanos(), target);
  }

  // repeated .shared.Bullet bullets = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->bullets_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->bullets(static_cast<int>(i)), target);
  }

  // repeated .shared.CharacterDownsync npcs_arr = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->npcs_arr_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->npcs_arr(static_cast<int>(i)), target);
  }

  // repeated .shared.Trap traps_arr = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->traps_arr_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->traps_arr(static_cast<int>(i)), target);
  }

  // repeated .shared.Trigger triggers_arr = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->triggers_arr_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->triggers_arr(static_cast<int>(i)), target);
  }

  // repeated .shared.Pickable pickables = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->pickables_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, this->pickables(static_cast<int>(i)), target);
  }

  // uint64 backend_unconfirmed_mask = 1024;
  if (this->backend_unconfirmed_mask() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1024, this->backend_unconfirmed_mask(), target);
  }

  // bool should_force_resync = 1025;
  if (this->should_force_resync() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1025, this->should_force_resync(), target);
  }

  // repeated int32 species_id_list = 1026;
  if (this->species_id_list_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1026,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        _species_id_list_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->species_id_list_, target);
  }

  // int32 bullet_local_id_counter = 1027;
  if (this->bullet_local_id_counter() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1027, this->bullet_local_id_counter(), target);
  }

  // int32 npc_local_id_counter = 1028;
  if (this->npc_local_id_counter() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1028, this->npc_local_id_counter(), target);
  }

  // int32 participant_change_id = 1029;
  if (this->participant_change_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1029, this->participant_change_id(), target);
  }

  // int32 pickable_local_id_counter = 1030;
  if (this->pickable_local_id_counter() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1030, this->pickable_local_id_counter(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:shared.RenderFrame)
  return target;
}

size_t RenderFrame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:shared.RenderFrame)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .shared.CharacterDownsync players_arr = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->players_arr_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->players_arr(static_cast<int>(i)));
    }
  }

  // repeated .shared.Bullet bullets = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->bullets_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->bullets(static_cast<int>(i)));
    }
  }

  // repeated .shared.CharacterDownsync npcs_arr = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->npcs_arr_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->npcs_arr(static_cast<int>(i)));
    }
  }

  // repeated .shared.Trap traps_arr = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->traps_arr_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->traps_arr(static_cast<int>(i)));
    }
  }

  // repeated .shared.Trigger triggers_arr = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->triggers_arr_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->triggers_arr(static_cast<int>(i)));
    }
  }

  // repeated .shared.Pickable pickables = 10;
  {
    unsigned int count = static_cast<unsigned int>(this->pickables_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->pickables(static_cast<int>(i)));
    }
  }

  // repeated int32 species_id_list = 1026;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->species_id_list_);
    if (data_size > 0) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast<::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    _species_id_list_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // int64 countdown_nanos = 3;
  if (this->countdown_nanos() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->countdown_nanos());
  }

  // int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  // bool should_force_resync = 1025;
  if (this->should_force_resync() != 0) {
    total_size += 2 + 1;
  }

  // uint64 backend_unconfirmed_mask = 1024;
  if (this->backend_unconfirmed_mask() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->backend_unconfirmed_mask());
  }

  // int32 bullet_local_id_counter = 1027;
  if (this->bullet_local_id_counter() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->bullet_local_id_counter());
  }

  // int32 npc_local_id_counter = 1028;
  if (this->npc_local_id_counter() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->npc_local_id_counter());
  }

  // int32 participant_change_id = 1029;
  if (this->participant_change_id() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->participant_change_id());
  }

  // int32 pickable_local_id_counter = 1030;
  if (this->pickable_local_id_counter() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->pickable_local_id_counter());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RenderFrame::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:shared.RenderFrame)
  GOOGLE_DCHECK_NE(&from, this);
  const RenderFrame* source =
      ::google::protobuf::DynamicCastToGenerated<RenderFrame>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:shared.RenderFrame)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:shared.RenderFrame)
    MergeFrom(*source);
  }
}

void RenderFrame::MergeFrom(const RenderFrame& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:shared.RenderFrame)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  players_arr_.MergeFrom(from.players_arr_);
  bullets_.MergeFrom(from.bullets_);
  npcs_arr_.MergeFrom(from.npcs_arr_);
  traps_arr_.MergeFrom(from.traps_arr_);
  triggers_arr_.MergeFrom(from.triggers_arr_);
  pickables_.MergeFrom(from.pickables_);
  species_id_list_.MergeFrom(from.species_id_list_);
  if (from.countdown_nanos() != 0) {
    set_countdown_nanos(from.countdown_nanos());
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.should_force_resync() != 0) {
    set_should_force_resync(from.should_force_resync());
  }
  if (from.backend_unconfirmed_mask() != 0) {
    set_backend_unconfirmed_mask(from.backend_unconfirmed_mask());
  }
  if (from.bullet_local_id_counter() != 0) {
    set_bullet_local_id_counter(from.bullet_local_id_counter());
  }
  if (from.npc_local_id_counter() != 0) {
    set_npc_local_id_counter(from.npc_local_id_counter());
  }
  if (from.participant_change_id() != 0) {
    set_participant_change_id(from.participant_change_id());
  }
  if (from.pickable_local_id_counter() != 0) {
    set_pickable_local_id_counter(from.pickable_local_id_counter());
  }
}

void RenderFrame::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:shared.RenderFrame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RenderFrame::CopyFrom(const RenderFrame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:shared.RenderFrame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RenderFrame::IsInitialized() const {
  return true;
}

void RenderFrame::Swap(RenderFrame* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RenderFrame::InternalSwap(RenderFrame* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&players_arr_)->InternalSwap(CastToBase(&other->players_arr_));
  CastToBase(&bullets_)->InternalSwap(CastToBase(&other->bullets_));
  CastToBase(&npcs_arr_)->InternalSwap(CastToBase(&other->npcs_arr_));
  CastToBase(&traps_arr_)->InternalSwap(CastToBase(&other->traps_arr_));
  CastToBase(&triggers_arr_)->InternalSwap(CastToBase(&other->triggers_arr_));
  CastToBase(&pickables_)->InternalSwap(CastToBase(&other->pickables_));
  species_id_list_.InternalSwap(&other->species_id_list_);
  swap(countdown_nanos_, other->countdown_nanos_);
  swap(id_, other->id_);
  swap(should_force_resync_, other->should_force_resync_);
  swap(backend_unconfirmed_mask_, other->backend_unconfirmed_mask_);
  swap(bullet_local_id_counter_, other->bullet_local_id_counter_);
  swap(npc_local_id_counter_, other->npc_local_id_counter_);
  swap(participant_change_id_, other->participant_change_id_);
  swap(pickable_local_id_counter_, other->pickable_local_id_counter_);
}

::google::protobuf::Metadata RenderFrame::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_serializable_5fdata_2eproto);
  return ::file_level_metadata_serializable_5fdata_2eproto[kIndexInFileMessages];
}


// ===================================================================

void WsResp::InitAsDefaultInstance() {
  ::shared::_WsResp_default_instance_._instance.get_mutable()->rdf_ = const_cast< ::shared::RenderFrame*>(
      ::shared::RenderFrame::internal_default_instance());
  ::shared::_WsResp_default_instance_._instance.get_mutable()->bci_frame_ = const_cast< ::shared::BattleColliderInfo*>(
      ::shared::BattleColliderInfo::internal_default_instance());
}
class WsResp::HasBitSetters {
 public:
  static const ::shared::RenderFrame& rdf(const WsResp* msg);
  static const ::shared::BattleColliderInfo& bci_frame(const WsResp* msg);
};

const ::shared::RenderFrame&
WsResp::HasBitSetters::rdf(const WsResp* msg) {
  return *msg->rdf_;
}
const ::shared::BattleColliderInfo&
WsResp::HasBitSetters::bci_frame(const WsResp* msg) {
  return *msg->bci_frame_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WsResp::kRetFieldNumber;
const int WsResp::kActFieldNumber;
const int WsResp::kRdfFieldNumber;
const int WsResp::kInputFrameDownsyncBatchFieldNumber;
const int WsResp::kBciFrameFieldNumber;
const int WsResp::kPeerJoinIndexFieldNumber;
const int WsResp::kPeerUdpAddrListFieldNumber;
const int WsResp::kErrMsgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WsResp::WsResp()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:shared.WsResp)
}
WsResp::WsResp(const WsResp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      input_frame_downsync_batch_(from.input_frame_downsync_batch_),
      peer_udp_addr_list_(from.peer_udp_addr_list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  err_msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.err_msg().size() > 0) {
    err_msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.err_msg_);
  }
  if (from.has_rdf()) {
    rdf_ = new ::shared::RenderFrame(*from.rdf_);
  } else {
    rdf_ = nullptr;
  }
  if (from.has_bci_frame()) {
    bci_frame_ = new ::shared::BattleColliderInfo(*from.bci_frame_);
  } else {
    bci_frame_ = nullptr;
  }
  ::memcpy(&ret_, &from.ret_,
    static_cast<size_t>(reinterpret_cast<char*>(&peer_join_index_) -
    reinterpret_cast<char*>(&ret_)) + sizeof(peer_join_index_));
  // @@protoc_insertion_point(copy_constructor:shared.WsResp)
}

void WsResp::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_WsResp_serializable_5fdata_2eproto.base);
  err_msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&rdf_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&peer_join_index_) -
      reinterpret_cast<char*>(&rdf_)) + sizeof(peer_join_index_));
}

WsResp::~WsResp() {
  // @@protoc_insertion_point(destructor:shared.WsResp)
  SharedDtor();
}

void WsResp::SharedDtor() {
  err_msg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete rdf_;
  if (this != internal_default_instance()) delete bci_frame_;
}

void WsResp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WsResp& WsResp::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_WsResp_serializable_5fdata_2eproto.base);
  return *internal_default_instance();
}


void WsResp::Clear() {
// @@protoc_insertion_point(message_clear_start:shared.WsResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  input_frame_downsync_batch_.Clear();
  peer_udp_addr_list_.Clear();
  err_msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && rdf_ != nullptr) {
    delete rdf_;
  }
  rdf_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && bci_frame_ != nullptr) {
    delete bci_frame_;
  }
  bci_frame_ = nullptr;
  ::memset(&ret_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&peer_join_index_) -
      reinterpret_cast<char*>(&ret_)) + sizeof(peer_join_index_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* WsResp::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<WsResp*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int32 ret = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_ret(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 act = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_act(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // .shared.RenderFrame rdf = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::shared::RenderFrame::_InternalParse;
        object = msg->mutable_rdf();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // repeated .shared.InputFrameDownsync input_frame_downsync_batch = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::shared::InputFrameDownsync::_InternalParse;
          object = msg->add_input_frame_downsync_batch();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 34 && (ptr += 1));
        break;
      }
      // .shared.BattleColliderInfo bci_frame = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::shared::BattleColliderInfo::_InternalParse;
        object = msg->mutable_bci_frame();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // int32 peer_join_index = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_peer_join_index(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated .shared.PeerUdpAddr peer_udp_addr_list = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 58) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::shared::PeerUdpAddr::_InternalParse;
          object = msg->add_peer_udp_addr_list();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 58 && (ptr += 1));
        break;
      }
      // string err_msg = 2048;
      case 2048: {
        if (static_cast<::google::protobuf::uint8>(tag) != 2) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("shared.WsResp.err_msg");
        object = msg->mutable_err_msg();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool WsResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:shared.WsResp)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16389u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 ret = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 act = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &act_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .shared.RenderFrame rdf = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_rdf()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .shared.InputFrameDownsync input_frame_downsync_batch = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_input_frame_downsync_batch()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .shared.BattleColliderInfo bci_frame = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_bci_frame()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 peer_join_index = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &peer_join_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .shared.PeerUdpAddr peer_udp_addr_list = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (58 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_peer_udp_addr_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string err_msg = 2048;
      case 2048: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16386 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_err_msg()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->err_msg().data(), static_cast<int>(this->err_msg().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "shared.WsResp.err_msg"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:shared.WsResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:shared.WsResp)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void WsResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:shared.WsResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 ret = 1;
  if (this->ret() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // int32 act = 2;
  if (this->act() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->act(), output);
  }

  // .shared.RenderFrame rdf = 3;
  if (this->has_rdf()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::rdf(this), output);
  }

  // repeated .shared.InputFrameDownsync input_frame_downsync_batch = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->input_frame_downsync_batch_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->input_frame_downsync_batch(static_cast<int>(i)),
      output);
  }

  // .shared.BattleColliderInfo bci_frame = 5;
  if (this->has_bci_frame()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, HasBitSetters::bci_frame(this), output);
  }

  // int32 peer_join_index = 6;
  if (this->peer_join_index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->peer_join_index(), output);
  }

  // repeated .shared.PeerUdpAddr peer_udp_addr_list = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->peer_udp_addr_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7,
      this->peer_udp_addr_list(static_cast<int>(i)),
      output);
  }

  // string err_msg = 2048;
  if (this->err_msg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->err_msg().data(), static_cast<int>(this->err_msg().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "shared.WsResp.err_msg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2048, this->err_msg(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:shared.WsResp)
}

::google::protobuf::uint8* WsResp::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:shared.WsResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 ret = 1;
  if (this->ret() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // int32 act = 2;
  if (this->act() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->act(), target);
  }

  // .shared.RenderFrame rdf = 3;
  if (this->has_rdf()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::rdf(this), target);
  }

  // repeated .shared.InputFrameDownsync input_frame_downsync_batch = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->input_frame_downsync_batch_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->input_frame_downsync_batch(static_cast<int>(i)), target);
  }

  // .shared.BattleColliderInfo bci_frame = 5;
  if (this->has_bci_frame()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, HasBitSetters::bci_frame(this), target);
  }

  // int32 peer_join_index = 6;
  if (this->peer_join_index() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->peer_join_index(), target);
  }

  // repeated .shared.PeerUdpAddr peer_udp_addr_list = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->peer_udp_addr_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->peer_udp_addr_list(static_cast<int>(i)), target);
  }

  // string err_msg = 2048;
  if (this->err_msg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->err_msg().data(), static_cast<int>(this->err_msg().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "shared.WsResp.err_msg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2048, this->err_msg(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:shared.WsResp)
  return target;
}

size_t WsResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:shared.WsResp)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .shared.InputFrameDownsync input_frame_downsync_batch = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->input_frame_downsync_batch_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->input_frame_downsync_batch(static_cast<int>(i)));
    }
  }

  // repeated .shared.PeerUdpAddr peer_udp_addr_list = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->peer_udp_addr_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->peer_udp_addr_list(static_cast<int>(i)));
    }
  }

  // string err_msg = 2048;
  if (this->err_msg().size() > 0) {
    total_size += 3 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->err_msg());
  }

  // .shared.RenderFrame rdf = 3;
  if (this->has_rdf()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *rdf_);
  }

  // .shared.BattleColliderInfo bci_frame = 5;
  if (this->has_bci_frame()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *bci_frame_);
  }

  // int32 ret = 1;
  if (this->ret() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->ret());
  }

  // int32 act = 2;
  if (this->act() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->act());
  }

  // int32 peer_join_index = 6;
  if (this->peer_join_index() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->peer_join_index());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WsResp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:shared.WsResp)
  GOOGLE_DCHECK_NE(&from, this);
  const WsResp* source =
      ::google::protobuf::DynamicCastToGenerated<WsResp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:shared.WsResp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:shared.WsResp)
    MergeFrom(*source);
  }
}

void WsResp::MergeFrom(const WsResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:shared.WsResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  input_frame_downsync_batch_.MergeFrom(from.input_frame_downsync_batch_);
  peer_udp_addr_list_.MergeFrom(from.peer_udp_addr_list_);
  if (from.err_msg().size() > 0) {

    err_msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.err_msg_);
  }
  if (from.has_rdf()) {
    mutable_rdf()->::shared::RenderFrame::MergeFrom(from.rdf());
  }
  if (from.has_bci_frame()) {
    mutable_bci_frame()->::shared::BattleColliderInfo::MergeFrom(from.bci_frame());
  }
  if (from.ret() != 0) {
    set_ret(from.ret());
  }
  if (from.act() != 0) {
    set_act(from.act());
  }
  if (from.peer_join_index() != 0) {
    set_peer_join_index(from.peer_join_index());
  }
}

void WsResp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:shared.WsResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WsResp::CopyFrom(const WsResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:shared.WsResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WsResp::IsInitialized() const {
  return true;
}

void WsResp::Swap(WsResp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WsResp::InternalSwap(WsResp* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&input_frame_downsync_batch_)->InternalSwap(CastToBase(&other->input_frame_downsync_batch_));
  CastToBase(&peer_udp_addr_list_)->InternalSwap(CastToBase(&other->peer_udp_addr_list_));
  err_msg_.Swap(&other->err_msg_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(rdf_, other->rdf_);
  swap(bci_frame_, other->bci_frame_);
  swap(ret_, other->ret_);
  swap(act_, other->act_);
  swap(peer_join_index_, other->peer_join_index_);
}

::google::protobuf::Metadata WsResp::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_serializable_5fdata_2eproto);
  return ::file_level_metadata_serializable_5fdata_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Skill::InitAsDefaultInstance() {
  ::shared::_Skill_default_instance_._instance.get_mutable()->self_non_stock_buff_ = const_cast< ::shared::BuffConfig*>(
      ::shared::BuffConfig::internal_default_instance());
}
class Skill::HasBitSetters {
 public:
  static const ::shared::BuffConfig& self_non_stock_buff(const Skill* msg);
};

const ::shared::BuffConfig&
Skill::HasBitSetters::self_non_stock_buff(const Skill* msg) {
  return *msg->self_non_stock_buff_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Skill::kBattleLocalIdFieldNumber;
const int Skill::kRecoveryFramesFieldNumber;
const int Skill::kRecoveryFramesOnBlockFieldNumber;
const int Skill::kRecoveryFramesOnHitFieldNumber;
const int Skill::kTriggerTypeFieldNumber;
const int Skill::kBoundChStateFieldNumber;
const int Skill::kBoundChStateOnHitFieldNumber;
const int Skill::kMpDeltaFieldNumber;
const int Skill::kIdFieldNumber;
const int Skill::kHitsFieldNumber;
const int Skill::kSelfNonStockBuffFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Skill::Skill()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:shared.Skill)
}
Skill::Skill(const Skill& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      hits_(from.hits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_self_non_stock_buff()) {
    self_non_stock_buff_ = new ::shared::BuffConfig(*from.self_non_stock_buff_);
  } else {
    self_non_stock_buff_ = nullptr;
  }
  ::memcpy(&battle_local_id_, &from.battle_local_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&id_) -
    reinterpret_cast<char*>(&battle_local_id_)) + sizeof(id_));
  // @@protoc_insertion_point(copy_constructor:shared.Skill)
}

void Skill::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Skill_serializable_5fdata_2eproto.base);
  ::memset(&self_non_stock_buff_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&id_) -
      reinterpret_cast<char*>(&self_non_stock_buff_)) + sizeof(id_));
}

Skill::~Skill() {
  // @@protoc_insertion_point(destructor:shared.Skill)
  SharedDtor();
}

void Skill::SharedDtor() {
  if (this != internal_default_instance()) delete self_non_stock_buff_;
}

void Skill::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Skill& Skill::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Skill_serializable_5fdata_2eproto.base);
  return *internal_default_instance();
}


void Skill::Clear() {
// @@protoc_insertion_point(message_clear_start:shared.Skill)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  hits_.Clear();
  if (GetArenaNoVirtual() == nullptr && self_non_stock_buff_ != nullptr) {
    delete self_non_stock_buff_;
  }
  self_non_stock_buff_ = nullptr;
  ::memset(&battle_local_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&id_) -
      reinterpret_cast<char*>(&battle_local_id_)) + sizeof(id_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Skill::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Skill*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int32 battle_local_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_battle_local_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 recovery_frames = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_recovery_frames(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 recovery_frames_on_block = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_recovery_frames_on_block(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 recovery_frames_on_hit = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_recovery_frames_on_hit(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // .shared.SkillTriggerType trigger_type = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_trigger_type(static_cast<::shared::SkillTriggerType>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // .shared.CharacterState bound_ch_state = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_bound_ch_state(static_cast<::shared::CharacterState>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // .shared.CharacterState bound_ch_state_on_hit = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_bound_ch_state_on_hit(static_cast<::shared::CharacterState>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 mp_delta = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 64) goto handle_unusual;
        msg->set_mp_delta(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // uint32 id = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 72) goto handle_unusual;
        msg->set_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated .shared.BulletConfig hits = 1024;
      case 1024: {
        if (static_cast<::google::protobuf::uint8>(tag) != 2) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::shared::BulletConfig::_InternalParse;
          object = msg->add_hits();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 65535) == 16514 && (ptr += 2));
        break;
      }
      // .shared.BuffConfig self_non_stock_buff = 1025;
      case 1025: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::shared::BuffConfig::_InternalParse;
        object = msg->mutable_self_non_stock_buff();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Skill::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:shared.Skill)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 battle_local_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &battle_local_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 recovery_frames = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &recovery_frames_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 recovery_frames_on_block = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &recovery_frames_on_block_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 recovery_frames_on_hit = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &recovery_frames_on_hit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .shared.SkillTriggerType trigger_type = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_trigger_type(static_cast< ::shared::SkillTriggerType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .shared.CharacterState bound_ch_state = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_bound_ch_state(static_cast< ::shared::CharacterState >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .shared.CharacterState bound_ch_state_on_hit = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (56 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_bound_ch_state_on_hit(static_cast< ::shared::CharacterState >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 mp_delta = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (64 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mp_delta_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 id = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (72 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .shared.BulletConfig hits = 1024;
      case 1024: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8194 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_hits()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .shared.BuffConfig self_non_stock_buff = 1025;
      case 1025: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8202 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_self_non_stock_buff()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:shared.Skill)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:shared.Skill)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Skill::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:shared.Skill)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 battle_local_id = 1;
  if (this->battle_local_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->battle_local_id(), output);
  }

  // int32 recovery_frames = 2;
  if (this->recovery_frames() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->recovery_frames(), output);
  }

  // int32 recovery_frames_on_block = 3;
  if (this->recovery_frames_on_block() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->recovery_frames_on_block(), output);
  }

  // int32 recovery_frames_on_hit = 4;
  if (this->recovery_frames_on_hit() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->recovery_frames_on_hit(), output);
  }

  // .shared.SkillTriggerType trigger_type = 5;
  if (this->trigger_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->trigger_type(), output);
  }

  // .shared.CharacterState bound_ch_state = 6;
  if (this->bound_ch_state() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->bound_ch_state(), output);
  }

  // .shared.CharacterState bound_ch_state_on_hit = 7;
  if (this->bound_ch_state_on_hit() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->bound_ch_state_on_hit(), output);
  }

  // int32 mp_delta = 8;
  if (this->mp_delta() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->mp_delta(), output);
  }

  // uint32 id = 9;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->id(), output);
  }

  // repeated .shared.BulletConfig hits = 1024;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->hits_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1024,
      this->hits(static_cast<int>(i)),
      output);
  }

  // .shared.BuffConfig self_non_stock_buff = 1025;
  if (this->has_self_non_stock_buff()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1025, HasBitSetters::self_non_stock_buff(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:shared.Skill)
}

::google::protobuf::uint8* Skill::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:shared.Skill)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 battle_local_id = 1;
  if (this->battle_local_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->battle_local_id(), target);
  }

  // int32 recovery_frames = 2;
  if (this->recovery_frames() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->recovery_frames(), target);
  }

  // int32 recovery_frames_on_block = 3;
  if (this->recovery_frames_on_block() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->recovery_frames_on_block(), target);
  }

  // int32 recovery_frames_on_hit = 4;
  if (this->recovery_frames_on_hit() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->recovery_frames_on_hit(), target);
  }

  // .shared.SkillTriggerType trigger_type = 5;
  if (this->trigger_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->trigger_type(), target);
  }

  // .shared.CharacterState bound_ch_state = 6;
  if (this->bound_ch_state() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->bound_ch_state(), target);
  }

  // .shared.CharacterState bound_ch_state_on_hit = 7;
  if (this->bound_ch_state_on_hit() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->bound_ch_state_on_hit(), target);
  }

  // int32 mp_delta = 8;
  if (this->mp_delta() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->mp_delta(), target);
  }

  // uint32 id = 9;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->id(), target);
  }

  // repeated .shared.BulletConfig hits = 1024;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->hits_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1024, this->hits(static_cast<int>(i)), target);
  }

  // .shared.BuffConfig self_non_stock_buff = 1025;
  if (this->has_self_non_stock_buff()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1025, HasBitSetters::self_non_stock_buff(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:shared.Skill)
  return target;
}

size_t Skill::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:shared.Skill)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .shared.BulletConfig hits = 1024;
  {
    unsigned int count = static_cast<unsigned int>(this->hits_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->hits(static_cast<int>(i)));
    }
  }

  // .shared.BuffConfig self_non_stock_buff = 1025;
  if (this->has_self_non_stock_buff()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *self_non_stock_buff_);
  }

  // int32 battle_local_id = 1;
  if (this->battle_local_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->battle_local_id());
  }

  // int32 recovery_frames = 2;
  if (this->recovery_frames() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->recovery_frames());
  }

  // int32 recovery_frames_on_block = 3;
  if (this->recovery_frames_on_block() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->recovery_frames_on_block());
  }

  // int32 recovery_frames_on_hit = 4;
  if (this->recovery_frames_on_hit() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->recovery_frames_on_hit());
  }

  // .shared.SkillTriggerType trigger_type = 5;
  if (this->trigger_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->trigger_type());
  }

  // .shared.CharacterState bound_ch_state = 6;
  if (this->bound_ch_state() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->bound_ch_state());
  }

  // .shared.CharacterState bound_ch_state_on_hit = 7;
  if (this->bound_ch_state_on_hit() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->bound_ch_state_on_hit());
  }

  // int32 mp_delta = 8;
  if (this->mp_delta() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->mp_delta());
  }

  // uint32 id = 9;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Skill::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:shared.Skill)
  GOOGLE_DCHECK_NE(&from, this);
  const Skill* source =
      ::google::protobuf::DynamicCastToGenerated<Skill>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:shared.Skill)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:shared.Skill)
    MergeFrom(*source);
  }
}

void Skill::MergeFrom(const Skill& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:shared.Skill)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  hits_.MergeFrom(from.hits_);
  if (from.has_self_non_stock_buff()) {
    mutable_self_non_stock_buff()->::shared::BuffConfig::MergeFrom(from.self_non_stock_buff());
  }
  if (from.battle_local_id() != 0) {
    set_battle_local_id(from.battle_local_id());
  }
  if (from.recovery_frames() != 0) {
    set_recovery_frames(from.recovery_frames());
  }
  if (from.recovery_frames_on_block() != 0) {
    set_recovery_frames_on_block(from.recovery_frames_on_block());
  }
  if (from.recovery_frames_on_hit() != 0) {
    set_recovery_frames_on_hit(from.recovery_frames_on_hit());
  }
  if (from.trigger_type() != 0) {
    set_trigger_type(from.trigger_type());
  }
  if (from.bound_ch_state() != 0) {
    set_bound_ch_state(from.bound_ch_state());
  }
  if (from.bound_ch_state_on_hit() != 0) {
    set_bound_ch_state_on_hit(from.bound_ch_state_on_hit());
  }
  if (from.mp_delta() != 0) {
    set_mp_delta(from.mp_delta());
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
}

void Skill::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:shared.Skill)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Skill::CopyFrom(const Skill& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:shared.Skill)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Skill::IsInitialized() const {
  return true;
}

void Skill::Swap(Skill* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Skill::InternalSwap(Skill* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&hits_)->InternalSwap(CastToBase(&other->hits_));
  swap(self_non_stock_buff_, other->self_non_stock_buff_);
  swap(battle_local_id_, other->battle_local_id_);
  swap(recovery_frames_, other->recovery_frames_);
  swap(recovery_frames_on_block_, other->recovery_frames_on_block_);
  swap(recovery_frames_on_hit_, other->recovery_frames_on_hit_);
  swap(trigger_type_, other->trigger_type_);
  swap(bound_ch_state_, other->bound_ch_state_);
  swap(bound_ch_state_on_hit_, other->bound_ch_state_on_hit_);
  swap(mp_delta_, other->mp_delta_);
  swap(id_, other->id_);
}

::google::protobuf::Metadata Skill::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_serializable_5fdata_2eproto);
  return ::file_level_metadata_serializable_5fdata_2eproto[kIndexInFileMessages];
}


// ===================================================================

void FrameLog::InitAsDefaultInstance() {
  ::shared::_FrameLog_default_instance_._instance.get_mutable()->rdf_ = const_cast< ::shared::RenderFrame*>(
      ::shared::RenderFrame::internal_default_instance());
  ::shared::_FrameLog_default_instance_._instance.get_mutable()->actually_used_idf_ = const_cast< ::shared::InputFrameDownsync*>(
      ::shared::InputFrameDownsync::internal_default_instance());
}
class FrameLog::HasBitSetters {
 public:
  static const ::shared::RenderFrame& rdf(const FrameLog* msg);
  static const ::shared::InputFrameDownsync& actually_used_idf(const FrameLog* msg);
};

const ::shared::RenderFrame&
FrameLog::HasBitSetters::rdf(const FrameLog* msg) {
  return *msg->rdf_;
}
const ::shared::InputFrameDownsync&
FrameLog::HasBitSetters::actually_used_idf(const FrameLog* msg) {
  return *msg->actually_used_idf_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FrameLog::kRdfFieldNumber;
const int FrameLog::kActuallyUsedIdfFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FrameLog::FrameLog()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:shared.FrameLog)
}
FrameLog::FrameLog(const FrameLog& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_rdf()) {
    rdf_ = new ::shared::RenderFrame(*from.rdf_);
  } else {
    rdf_ = nullptr;
  }
  if (from.has_actually_used_idf()) {
    actually_used_idf_ = new ::shared::InputFrameDownsync(*from.actually_used_idf_);
  } else {
    actually_used_idf_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:shared.FrameLog)
}

void FrameLog::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_FrameLog_serializable_5fdata_2eproto.base);
  ::memset(&rdf_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&actually_used_idf_) -
      reinterpret_cast<char*>(&rdf_)) + sizeof(actually_used_idf_));
}

FrameLog::~FrameLog() {
  // @@protoc_insertion_point(destructor:shared.FrameLog)
  SharedDtor();
}

void FrameLog::SharedDtor() {
  if (this != internal_default_instance()) delete rdf_;
  if (this != internal_default_instance()) delete actually_used_idf_;
}

void FrameLog::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FrameLog& FrameLog::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_FrameLog_serializable_5fdata_2eproto.base);
  return *internal_default_instance();
}


void FrameLog::Clear() {
// @@protoc_insertion_point(message_clear_start:shared.FrameLog)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && rdf_ != nullptr) {
    delete rdf_;
  }
  rdf_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && actually_used_idf_ != nullptr) {
    delete actually_used_idf_;
  }
  actually_used_idf_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* FrameLog::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<FrameLog*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .shared.RenderFrame rdf = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::shared::RenderFrame::_InternalParse;
        object = msg->mutable_rdf();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .shared.InputFrameDownsync actually_used_idf = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::shared::InputFrameDownsync::_InternalParse;
        object = msg->mutable_actually_used_idf();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool FrameLog::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:shared.FrameLog)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .shared.RenderFrame rdf = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_rdf()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .shared.InputFrameDownsync actually_used_idf = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_actually_used_idf()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:shared.FrameLog)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:shared.FrameLog)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void FrameLog::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:shared.FrameLog)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .shared.RenderFrame rdf = 1;
  if (this->has_rdf()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::rdf(this), output);
  }

  // .shared.InputFrameDownsync actually_used_idf = 2;
  if (this->has_actually_used_idf()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::actually_used_idf(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:shared.FrameLog)
}

::google::protobuf::uint8* FrameLog::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:shared.FrameLog)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .shared.RenderFrame rdf = 1;
  if (this->has_rdf()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::rdf(this), target);
  }

  // .shared.InputFrameDownsync actually_used_idf = 2;
  if (this->has_actually_used_idf()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::actually_used_idf(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:shared.FrameLog)
  return target;
}

size_t FrameLog::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:shared.FrameLog)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .shared.RenderFrame rdf = 1;
  if (this->has_rdf()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *rdf_);
  }

  // .shared.InputFrameDownsync actually_used_idf = 2;
  if (this->has_actually_used_idf()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *actually_used_idf_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FrameLog::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:shared.FrameLog)
  GOOGLE_DCHECK_NE(&from, this);
  const FrameLog* source =
      ::google::protobuf::DynamicCastToGenerated<FrameLog>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:shared.FrameLog)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:shared.FrameLog)
    MergeFrom(*source);
  }
}

void FrameLog::MergeFrom(const FrameLog& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:shared.FrameLog)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_rdf()) {
    mutable_rdf()->::shared::RenderFrame::MergeFrom(from.rdf());
  }
  if (from.has_actually_used_idf()) {
    mutable_actually_used_idf()->::shared::InputFrameDownsync::MergeFrom(from.actually_used_idf());
  }
}

void FrameLog::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:shared.FrameLog)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FrameLog::CopyFrom(const FrameLog& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:shared.FrameLog)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FrameLog::IsInitialized() const {
  return true;
}

void FrameLog::Swap(FrameLog* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FrameLog::InternalSwap(FrameLog* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(rdf_, other->rdf_);
  swap(actually_used_idf_, other->actually_used_idf_);
}

::google::protobuf::Metadata FrameLog::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_serializable_5fdata_2eproto);
  return ::file_level_metadata_serializable_5fdata_2eproto[kIndexInFileMessages];
}


// ===================================================================

void BattleResult::InitAsDefaultInstance() {
}
class BattleResult::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BattleResult::kWinnerJoinIndexFieldNumber;
const int BattleResult::kWinnerBulletTeamIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BattleResult::BattleResult()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:shared.BattleResult)
}
BattleResult::BattleResult(const BattleResult& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&winner_join_index_, &from.winner_join_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&winner_bullet_team_id_) -
    reinterpret_cast<char*>(&winner_join_index_)) + sizeof(winner_bullet_team_id_));
  // @@protoc_insertion_point(copy_constructor:shared.BattleResult)
}

void BattleResult::SharedCtor() {
  ::memset(&winner_join_index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&winner_bullet_team_id_) -
      reinterpret_cast<char*>(&winner_join_index_)) + sizeof(winner_bullet_team_id_));
}

BattleResult::~BattleResult() {
  // @@protoc_insertion_point(destructor:shared.BattleResult)
  SharedDtor();
}

void BattleResult::SharedDtor() {
}

void BattleResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BattleResult& BattleResult::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_BattleResult_serializable_5fdata_2eproto.base);
  return *internal_default_instance();
}


void BattleResult::Clear() {
// @@protoc_insertion_point(message_clear_start:shared.BattleResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&winner_join_index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&winner_bullet_team_id_) -
      reinterpret_cast<char*>(&winner_join_index_)) + sizeof(winner_bullet_team_id_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* BattleResult::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<BattleResult*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int32 winner_join_index = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_winner_join_index(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 winner_bullet_team_id = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_winner_bullet_team_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool BattleResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:shared.BattleResult)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 winner_join_index = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &winner_join_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 winner_bullet_team_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &winner_bullet_team_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:shared.BattleResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:shared.BattleResult)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void BattleResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:shared.BattleResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 winner_join_index = 1;
  if (this->winner_join_index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->winner_join_index(), output);
  }

  // int32 winner_bullet_team_id = 2;
  if (this->winner_bullet_team_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->winner_bullet_team_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:shared.BattleResult)
}

::google::protobuf::uint8* BattleResult::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:shared.BattleResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 winner_join_index = 1;
  if (this->winner_join_index() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->winner_join_index(), target);
  }

  // int32 winner_bullet_team_id = 2;
  if (this->winner_bullet_team_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->winner_bullet_team_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:shared.BattleResult)
  return target;
}

size_t BattleResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:shared.BattleResult)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 winner_join_index = 1;
  if (this->winner_join_index() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->winner_join_index());
  }

  // int32 winner_bullet_team_id = 2;
  if (this->winner_bullet_team_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->winner_bullet_team_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BattleResult::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:shared.BattleResult)
  GOOGLE_DCHECK_NE(&from, this);
  const BattleResult* source =
      ::google::protobuf::DynamicCastToGenerated<BattleResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:shared.BattleResult)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:shared.BattleResult)
    MergeFrom(*source);
  }
}

void BattleResult::MergeFrom(const BattleResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:shared.BattleResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.winner_join_index() != 0) {
    set_winner_join_index(from.winner_join_index());
  }
  if (from.winner_bullet_team_id() != 0) {
    set_winner_bullet_team_id(from.winner_bullet_team_id());
  }
}

void BattleResult::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:shared.BattleResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BattleResult::CopyFrom(const BattleResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:shared.BattleResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BattleResult::IsInitialized() const {
  return true;
}

void BattleResult::Swap(BattleResult* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BattleResult::InternalSwap(BattleResult* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(winner_join_index_, other->winner_join_index_);
  swap(winner_bullet_team_id_, other->winner_bullet_team_id_);
}

::google::protobuf::Metadata BattleResult::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_serializable_5fdata_2eproto);
  return ::file_level_metadata_serializable_5fdata_2eproto[kIndexInFileMessages];
}


// ===================================================================

void DebuffConfig::InitAsDefaultInstance() {
}
class DebuffConfig::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DebuffConfig::kSpeciesIdFieldNumber;
const int DebuffConfig::kStockTypeFieldNumber;
const int DebuffConfig::kStockFieldNumber;
const int DebuffConfig::kTypeFieldNumber;
const int DebuffConfig::kArrIdxFieldNumber;
const int DebuffConfig::kImpactPerIntervalFieldNumber;
const int DebuffConfig::kImpactIntervalFieldNumber;
const int DebuffConfig::kFrictionVelXFieldNumber;
const int DebuffConfig::kFrictionVelYFieldNumber;
const int DebuffConfig::kFrictionAccXFieldNumber;
const int DebuffConfig::kFrictionAccYFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DebuffConfig::DebuffConfig()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:shared.DebuffConfig)
}
DebuffConfig::DebuffConfig(const DebuffConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&species_id_, &from.species_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&friction_acc_y_) -
    reinterpret_cast<char*>(&species_id_)) + sizeof(friction_acc_y_));
  // @@protoc_insertion_point(copy_constructor:shared.DebuffConfig)
}

void DebuffConfig::SharedCtor() {
  ::memset(&species_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&friction_acc_y_) -
      reinterpret_cast<char*>(&species_id_)) + sizeof(friction_acc_y_));
}

DebuffConfig::~DebuffConfig() {
  // @@protoc_insertion_point(destructor:shared.DebuffConfig)
  SharedDtor();
}

void DebuffConfig::SharedDtor() {
}

void DebuffConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DebuffConfig& DebuffConfig::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_DebuffConfig_serializable_5fdata_2eproto.base);
  return *internal_default_instance();
}


void DebuffConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:shared.DebuffConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&species_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&friction_acc_y_) -
      reinterpret_cast<char*>(&species_id_)) + sizeof(friction_acc_y_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DebuffConfig::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<DebuffConfig*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // uint32 species_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_species_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // .shared.BuffStockType stock_type = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_stock_type(static_cast<::shared::BuffStockType>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 stock = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_stock(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // .shared.DebuffType type = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_type(static_cast<::shared::DebuffType>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 arr_idx = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_arr_idx(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 impact_per_interval = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_impact_per_interval(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 impact_interval = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        msg->set_impact_interval(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 friction_vel_x = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 64) goto handle_unusual;
        msg->set_friction_vel_x(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 friction_vel_y = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 72) goto handle_unusual;
        msg->set_friction_vel_y(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 friction_acc_x = 10;
      case 10: {
        if (static_cast<::google::protobuf::uint8>(tag) != 80) goto handle_unusual;
        msg->set_friction_acc_x(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 friction_acc_y = 11;
      case 11: {
        if (static_cast<::google::protobuf::uint8>(tag) != 88) goto handle_unusual;
        msg->set_friction_acc_y(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DebuffConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:shared.DebuffConfig)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 species_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &species_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .shared.BuffStockType stock_type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_stock_type(static_cast< ::shared::BuffStockType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 stock = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &stock_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .shared.DebuffType type = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::shared::DebuffType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 arr_idx = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &arr_idx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 impact_per_interval = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &impact_per_interval_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 impact_interval = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (56 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &impact_interval_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 friction_vel_x = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (64 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &friction_vel_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 friction_vel_y = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (72 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &friction_vel_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 friction_acc_x = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (80 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &friction_acc_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 friction_acc_y = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (88 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &friction_acc_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:shared.DebuffConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:shared.DebuffConfig)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DebuffConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:shared.DebuffConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 species_id = 1;
  if (this->species_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->species_id(), output);
  }

  // .shared.BuffStockType stock_type = 2;
  if (this->stock_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->stock_type(), output);
  }

  // int32 stock = 3;
  if (this->stock() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->stock(), output);
  }

  // .shared.DebuffType type = 4;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->type(), output);
  }

  // int32 arr_idx = 5;
  if (this->arr_idx() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->arr_idx(), output);
  }

  // int32 impact_per_interval = 6;
  if (this->impact_per_interval() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->impact_per_interval(), output);
  }

  // int32 impact_interval = 7;
  if (this->impact_interval() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->impact_interval(), output);
  }

  // int32 friction_vel_x = 8;
  if (this->friction_vel_x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->friction_vel_x(), output);
  }

  // int32 friction_vel_y = 9;
  if (this->friction_vel_y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->friction_vel_y(), output);
  }

  // int32 friction_acc_x = 10;
  if (this->friction_acc_x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->friction_acc_x(), output);
  }

  // int32 friction_acc_y = 11;
  if (this->friction_acc_y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->friction_acc_y(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:shared.DebuffConfig)
}

::google::protobuf::uint8* DebuffConfig::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:shared.DebuffConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 species_id = 1;
  if (this->species_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->species_id(), target);
  }

  // .shared.BuffStockType stock_type = 2;
  if (this->stock_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->stock_type(), target);
  }

  // int32 stock = 3;
  if (this->stock() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->stock(), target);
  }

  // .shared.DebuffType type = 4;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->type(), target);
  }

  // int32 arr_idx = 5;
  if (this->arr_idx() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->arr_idx(), target);
  }

  // int32 impact_per_interval = 6;
  if (this->impact_per_interval() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->impact_per_interval(), target);
  }

  // int32 impact_interval = 7;
  if (this->impact_interval() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->impact_interval(), target);
  }

  // int32 friction_vel_x = 8;
  if (this->friction_vel_x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->friction_vel_x(), target);
  }

  // int32 friction_vel_y = 9;
  if (this->friction_vel_y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->friction_vel_y(), target);
  }

  // int32 friction_acc_x = 10;
  if (this->friction_acc_x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->friction_acc_x(), target);
  }

  // int32 friction_acc_y = 11;
  if (this->friction_acc_y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->friction_acc_y(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:shared.DebuffConfig)
  return target;
}

size_t DebuffConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:shared.DebuffConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 species_id = 1;
  if (this->species_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->species_id());
  }

  // .shared.BuffStockType stock_type = 2;
  if (this->stock_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->stock_type());
  }

  // int32 stock = 3;
  if (this->stock() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->stock());
  }

  // .shared.DebuffType type = 4;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  // int32 arr_idx = 5;
  if (this->arr_idx() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->arr_idx());
  }

  // int32 impact_per_interval = 6;
  if (this->impact_per_interval() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->impact_per_interval());
  }

  // int32 impact_interval = 7;
  if (this->impact_interval() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->impact_interval());
  }

  // int32 friction_vel_x = 8;
  if (this->friction_vel_x() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->friction_vel_x());
  }

  // int32 friction_vel_y = 9;
  if (this->friction_vel_y() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->friction_vel_y());
  }

  // int32 friction_acc_x = 10;
  if (this->friction_acc_x() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->friction_acc_x());
  }

  // int32 friction_acc_y = 11;
  if (this->friction_acc_y() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->friction_acc_y());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DebuffConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:shared.DebuffConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const DebuffConfig* source =
      ::google::protobuf::DynamicCastToGenerated<DebuffConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:shared.DebuffConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:shared.DebuffConfig)
    MergeFrom(*source);
  }
}

void DebuffConfig::MergeFrom(const DebuffConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:shared.DebuffConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.species_id() != 0) {
    set_species_id(from.species_id());
  }
  if (from.stock_type() != 0) {
    set_stock_type(from.stock_type());
  }
  if (from.stock() != 0) {
    set_stock(from.stock());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.arr_idx() != 0) {
    set_arr_idx(from.arr_idx());
  }
  if (from.impact_per_interval() != 0) {
    set_impact_per_interval(from.impact_per_interval());
  }
  if (from.impact_interval() != 0) {
    set_impact_interval(from.impact_interval());
  }
  if (from.friction_vel_x() != 0) {
    set_friction_vel_x(from.friction_vel_x());
  }
  if (from.friction_vel_y() != 0) {
    set_friction_vel_y(from.friction_vel_y());
  }
  if (from.friction_acc_x() != 0) {
    set_friction_acc_x(from.friction_acc_x());
  }
  if (from.friction_acc_y() != 0) {
    set_friction_acc_y(from.friction_acc_y());
  }
}

void DebuffConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:shared.DebuffConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DebuffConfig::CopyFrom(const DebuffConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:shared.DebuffConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DebuffConfig::IsInitialized() const {
  return true;
}

void DebuffConfig::Swap(DebuffConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DebuffConfig::InternalSwap(DebuffConfig* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(species_id_, other->species_id_);
  swap(stock_type_, other->stock_type_);
  swap(stock_, other->stock_);
  swap(type_, other->type_);
  swap(arr_idx_, other->arr_idx_);
  swap(impact_per_interval_, other->impact_per_interval_);
  swap(impact_interval_, other->impact_interval_);
  swap(friction_vel_x_, other->friction_vel_x_);
  swap(friction_vel_y_, other->friction_vel_y_);
  swap(friction_acc_x_, other->friction_acc_x_);
  swap(friction_acc_y_, other->friction_acc_y_);
}

::google::protobuf::Metadata DebuffConfig::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_serializable_5fdata_2eproto);
  return ::file_level_metadata_serializable_5fdata_2eproto[kIndexInFileMessages];
}


// ===================================================================

void BuffConfig::InitAsDefaultInstance() {
}
class BuffConfig::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BuffConfig::kSpeciesIdFieldNumber;
const int BuffConfig::kStockTypeFieldNumber;
const int BuffConfig::kStockFieldNumber;
const int BuffConfig::kSpeedDeltaFieldNumber;
const int BuffConfig::kHitboxSizeXDeltaFieldNumber;
const int BuffConfig::kHitboxSizeYDeltaFieldNumber;
const int BuffConfig::kDamageDeltaFieldNumber;
const int BuffConfig::kDamageDeltaByPercentageFieldNumber;
const int BuffConfig::kCharacterHardnessDeltaFieldNumber;
const int BuffConfig::kMeleeHardnessDeltaFieldNumber;
const int BuffConfig::kFireballHardnessDeltaFieldNumber;
const int BuffConfig::kInvinsibleFieldNumber;
const int BuffConfig::kXformChSpeciesIdFieldNumber;
const int BuffConfig::kRepelSoftPushbackFieldNumber;
const int BuffConfig::kOmitGravityFieldNumber;
const int BuffConfig::kAutoDef1FieldNumber;
const int BuffConfig::kAssociatedDebuffsFieldNumber;
const int BuffConfig::kCharacterVfxSpeciesIdFieldNumber;
const int BuffConfig::kIsPixelatedVfxOnCharacterFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BuffConfig::BuffConfig()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:shared.BuffConfig)
}
BuffConfig::BuffConfig(const BuffConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      associated_debuffs_(from.associated_debuffs_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&species_id_, &from.species_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_pixelated_vfx_on_character_) -
    reinterpret_cast<char*>(&species_id_)) + sizeof(is_pixelated_vfx_on_character_));
  // @@protoc_insertion_point(copy_constructor:shared.BuffConfig)
}

void BuffConfig::SharedCtor() {
  ::memset(&species_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_pixelated_vfx_on_character_) -
      reinterpret_cast<char*>(&species_id_)) + sizeof(is_pixelated_vfx_on_character_));
}

BuffConfig::~BuffConfig() {
  // @@protoc_insertion_point(destructor:shared.BuffConfig)
  SharedDtor();
}

void BuffConfig::SharedDtor() {
}

void BuffConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BuffConfig& BuffConfig::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_BuffConfig_serializable_5fdata_2eproto.base);
  return *internal_default_instance();
}


void BuffConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:shared.BuffConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  associated_debuffs_.Clear();
  ::memset(&species_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_pixelated_vfx_on_character_) -
      reinterpret_cast<char*>(&species_id_)) + sizeof(is_pixelated_vfx_on_character_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* BuffConfig::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<BuffConfig*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // uint32 species_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_species_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // .shared.BuffStockType stock_type = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_stock_type(static_cast<::shared::BuffStockType>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 stock = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_stock(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // float speed_delta = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 37) goto handle_unusual;
        msg->set_speed_delta(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // float hitbox_size_x_delta = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 45) goto handle_unusual;
        msg->set_hitbox_size_x_delta(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // float hitbox_size_y_delta = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 53) goto handle_unusual;
        msg->set_hitbox_size_y_delta(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // int32 damage_delta = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        msg->set_damage_delta(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 damage_delta_by_percentage = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 64) goto handle_unusual;
        msg->set_damage_delta_by_percentage(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 character_hardness_delta = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 72) goto handle_unusual;
        msg->set_character_hardness_delta(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 melee_hardness_delta = 10;
      case 10: {
        if (static_cast<::google::protobuf::uint8>(tag) != 80) goto handle_unusual;
        msg->set_melee_hardness_delta(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 fireball_hardness_delta = 11;
      case 11: {
        if (static_cast<::google::protobuf::uint8>(tag) != 88) goto handle_unusual;
        msg->set_fireball_hardness_delta(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // bool invinsible = 12;
      case 12: {
        if (static_cast<::google::protobuf::uint8>(tag) != 96) goto handle_unusual;
        msg->set_invinsible(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // uint32 xform_ch_species_id = 13;
      case 13: {
        if (static_cast<::google::protobuf::uint8>(tag) != 104) goto handle_unusual;
        msg->set_xform_ch_species_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // bool repel_soft_pushback = 14;
      case 14: {
        if (static_cast<::google::protobuf::uint8>(tag) != 112) goto handle_unusual;
        msg->set_repel_soft_pushback(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // bool omit_gravity = 15;
      case 15: {
        if (static_cast<::google::protobuf::uint8>(tag) != 120) goto handle_unusual;
        msg->set_omit_gravity(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // bool auto_def1 = 16;
      case 16: {
        if (static_cast<::google::protobuf::uint8>(tag) != 128) goto handle_unusual;
        msg->set_auto_def1(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated uint32 associated_debuffs = 17;
      case 17: {
        if (static_cast<::google::protobuf::uint8>(tag) == 138) {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::protobuf::internal::PackedUInt32Parser;
          object = msg->mutable_associated_debuffs();
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          if (size) ptr = parser_till_end(ptr, newend, object, ctx);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 136) goto handle_unusual;
        do {
          msg->add_associated_debuffs(::google::protobuf::internal::ReadVarint(&ptr));
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 65535) == 392 && (ptr += 2));
        break;
      }
      // int32 character_vfx_species_id = 18;
      case 18: {
        if (static_cast<::google::protobuf::uint8>(tag) != 144) goto handle_unusual;
        msg->set_character_vfx_species_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // bool is_pixelated_vfx_on_character = 19;
      case 19: {
        if (static_cast<::google::protobuf::uint8>(tag) != 152) goto handle_unusual;
        msg->set_is_pixelated_vfx_on_character(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool BuffConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:shared.BuffConfig)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 species_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &species_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .shared.BuffStockType stock_type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_stock_type(static_cast< ::shared::BuffStockType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 stock = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &stock_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float speed_delta = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (37 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &speed_delta_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float hitbox_size_x_delta = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (45 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &hitbox_size_x_delta_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float hitbox_size_y_delta = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (53 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &hitbox_size_y_delta_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 damage_delta = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (56 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &damage_delta_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 damage_delta_by_percentage = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (64 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &damage_delta_by_percentage_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 character_hardness_delta = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (72 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &character_hardness_delta_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 melee_hardness_delta = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (80 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &melee_hardness_delta_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 fireball_hardness_delta = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (88 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fireball_hardness_delta_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool invinsible = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (96 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &invinsible_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 xform_ch_species_id = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (104 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &xform_ch_species_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool repel_soft_pushback = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (112 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &repel_soft_pushback_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool omit_gravity = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (120 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &omit_gravity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool auto_def1 = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (128 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &auto_def1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 associated_debuffs = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (138 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_associated_debuffs())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (136 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 138u, input, this->mutable_associated_debuffs())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 character_vfx_species_id = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (144 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &character_vfx_species_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_pixelated_vfx_on_character = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (152 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_pixelated_vfx_on_character_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:shared.BuffConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:shared.BuffConfig)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void BuffConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:shared.BuffConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 species_id = 1;
  if (this->species_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->species_id(), output);
  }

  // .shared.BuffStockType stock_type = 2;
  if (this->stock_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->stock_type(), output);
  }

  // int32 stock = 3;
  if (this->stock() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->stock(), output);
  }

  // float speed_delta = 4;
  if (this->speed_delta() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->speed_delta(), output);
  }

  // float hitbox_size_x_delta = 5;
  if (this->hitbox_size_x_delta() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->hitbox_size_x_delta(), output);
  }

  // float hitbox_size_y_delta = 6;
  if (this->hitbox_size_y_delta() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->hitbox_size_y_delta(), output);
  }

  // int32 damage_delta = 7;
  if (this->damage_delta() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->damage_delta(), output);
  }

  // int32 damage_delta_by_percentage = 8;
  if (this->damage_delta_by_percentage() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->damage_delta_by_percentage(), output);
  }

  // int32 character_hardness_delta = 9;
  if (this->character_hardness_delta() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->character_hardness_delta(), output);
  }

  // int32 melee_hardness_delta = 10;
  if (this->melee_hardness_delta() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->melee_hardness_delta(), output);
  }

  // int32 fireball_hardness_delta = 11;
  if (this->fireball_hardness_delta() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->fireball_hardness_delta(), output);
  }

  // bool invinsible = 12;
  if (this->invinsible() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->invinsible(), output);
  }

  // uint32 xform_ch_species_id = 13;
  if (this->xform_ch_species_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->xform_ch_species_id(), output);
  }

  // bool repel_soft_pushback = 14;
  if (this->repel_soft_pushback() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->repel_soft_pushback(), output);
  }

  // bool omit_gravity = 15;
  if (this->omit_gravity() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(15, this->omit_gravity(), output);
  }

  // bool auto_def1 = 16;
  if (this->auto_def1() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(16, this->auto_def1(), output);
  }

  // repeated uint32 associated_debuffs = 17;
  if (this->associated_debuffs_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(17, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_associated_debuffs_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->associated_debuffs_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->associated_debuffs(i), output);
  }

  // int32 character_vfx_species_id = 18;
  if (this->character_vfx_species_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->character_vfx_species_id(), output);
  }

  // bool is_pixelated_vfx_on_character = 19;
  if (this->is_pixelated_vfx_on_character() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(19, this->is_pixelated_vfx_on_character(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:shared.BuffConfig)
}

::google::protobuf::uint8* BuffConfig::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:shared.BuffConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 species_id = 1;
  if (this->species_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->species_id(), target);
  }

  // .shared.BuffStockType stock_type = 2;
  if (this->stock_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->stock_type(), target);
  }

  // int32 stock = 3;
  if (this->stock() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->stock(), target);
  }

  // float speed_delta = 4;
  if (this->speed_delta() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->speed_delta(), target);
  }

  // float hitbox_size_x_delta = 5;
  if (this->hitbox_size_x_delta() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->hitbox_size_x_delta(), target);
  }

  // float hitbox_size_y_delta = 6;
  if (this->hitbox_size_y_delta() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->hitbox_size_y_delta(), target);
  }

  // int32 damage_delta = 7;
  if (this->damage_delta() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->damage_delta(), target);
  }

  // int32 damage_delta_by_percentage = 8;
  if (this->damage_delta_by_percentage() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->damage_delta_by_percentage(), target);
  }

  // int32 character_hardness_delta = 9;
  if (this->character_hardness_delta() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->character_hardness_delta(), target);
  }

  // int32 melee_hardness_delta = 10;
  if (this->melee_hardness_delta() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->melee_hardness_delta(), target);
  }

  // int32 fireball_hardness_delta = 11;
  if (this->fireball_hardness_delta() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->fireball_hardness_delta(), target);
  }

  // bool invinsible = 12;
  if (this->invinsible() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->invinsible(), target);
  }

  // uint32 xform_ch_species_id = 13;
  if (this->xform_ch_species_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->xform_ch_species_id(), target);
  }

  // bool repel_soft_pushback = 14;
  if (this->repel_soft_pushback() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(14, this->repel_soft_pushback(), target);
  }

  // bool omit_gravity = 15;
  if (this->omit_gravity() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(15, this->omit_gravity(), target);
  }

  // bool auto_def1 = 16;
  if (this->auto_def1() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(16, this->auto_def1(), target);
  }

  // repeated uint32 associated_debuffs = 17;
  if (this->associated_debuffs_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      17,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        _associated_debuffs_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->associated_debuffs_, target);
  }

  // int32 character_vfx_species_id = 18;
  if (this->character_vfx_species_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->character_vfx_species_id(), target);
  }

  // bool is_pixelated_vfx_on_character = 19;
  if (this->is_pixelated_vfx_on_character() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(19, this->is_pixelated_vfx_on_character(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:shared.BuffConfig)
  return target;
}

size_t BuffConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:shared.BuffConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 associated_debuffs = 17;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->associated_debuffs_);
    if (data_size > 0) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast<::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    _associated_debuffs_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // uint32 species_id = 1;
  if (this->species_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->species_id());
  }

  // .shared.BuffStockType stock_type = 2;
  if (this->stock_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->stock_type());
  }

  // int32 stock = 3;
  if (this->stock() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->stock());
  }

  // float speed_delta = 4;
  if (this->speed_delta() != 0) {
    total_size += 1 + 4;
  }

  // float hitbox_size_x_delta = 5;
  if (this->hitbox_size_x_delta() != 0) {
    total_size += 1 + 4;
  }

  // float hitbox_size_y_delta = 6;
  if (this->hitbox_size_y_delta() != 0) {
    total_size += 1 + 4;
  }

  // int32 damage_delta = 7;
  if (this->damage_delta() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->damage_delta());
  }

  // int32 damage_delta_by_percentage = 8;
  if (this->damage_delta_by_percentage() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->damage_delta_by_percentage());
  }

  // int32 character_hardness_delta = 9;
  if (this->character_hardness_delta() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->character_hardness_delta());
  }

  // int32 melee_hardness_delta = 10;
  if (this->melee_hardness_delta() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->melee_hardness_delta());
  }

  // int32 fireball_hardness_delta = 11;
  if (this->fireball_hardness_delta() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->fireball_hardness_delta());
  }

  // uint32 xform_ch_species_id = 13;
  if (this->xform_ch_species_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->xform_ch_species_id());
  }

  // bool invinsible = 12;
  if (this->invinsible() != 0) {
    total_size += 1 + 1;
  }

  // bool repel_soft_pushback = 14;
  if (this->repel_soft_pushback() != 0) {
    total_size += 1 + 1;
  }

  // bool omit_gravity = 15;
  if (this->omit_gravity() != 0) {
    total_size += 1 + 1;
  }

  // bool auto_def1 = 16;
  if (this->auto_def1() != 0) {
    total_size += 2 + 1;
  }

  // int32 character_vfx_species_id = 18;
  if (this->character_vfx_species_id() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->character_vfx_species_id());
  }

  // bool is_pixelated_vfx_on_character = 19;
  if (this->is_pixelated_vfx_on_character() != 0) {
    total_size += 2 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BuffConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:shared.BuffConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const BuffConfig* source =
      ::google::protobuf::DynamicCastToGenerated<BuffConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:shared.BuffConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:shared.BuffConfig)
    MergeFrom(*source);
  }
}

void BuffConfig::MergeFrom(const BuffConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:shared.BuffConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  associated_debuffs_.MergeFrom(from.associated_debuffs_);
  if (from.species_id() != 0) {
    set_species_id(from.species_id());
  }
  if (from.stock_type() != 0) {
    set_stock_type(from.stock_type());
  }
  if (from.stock() != 0) {
    set_stock(from.stock());
  }
  if (from.speed_delta() != 0) {
    set_speed_delta(from.speed_delta());
  }
  if (from.hitbox_size_x_delta() != 0) {
    set_hitbox_size_x_delta(from.hitbox_size_x_delta());
  }
  if (from.hitbox_size_y_delta() != 0) {
    set_hitbox_size_y_delta(from.hitbox_size_y_delta());
  }
  if (from.damage_delta() != 0) {
    set_damage_delta(from.damage_delta());
  }
  if (from.damage_delta_by_percentage() != 0) {
    set_damage_delta_by_percentage(from.damage_delta_by_percentage());
  }
  if (from.character_hardness_delta() != 0) {
    set_character_hardness_delta(from.character_hardness_delta());
  }
  if (from.melee_hardness_delta() != 0) {
    set_melee_hardness_delta(from.melee_hardness_delta());
  }
  if (from.fireball_hardness_delta() != 0) {
    set_fireball_hardness_delta(from.fireball_hardness_delta());
  }
  if (from.xform_ch_species_id() != 0) {
    set_xform_ch_species_id(from.xform_ch_species_id());
  }
  if (from.invinsible() != 0) {
    set_invinsible(from.invinsible());
  }
  if (from.repel_soft_pushback() != 0) {
    set_repel_soft_pushback(from.repel_soft_pushback());
  }
  if (from.omit_gravity() != 0) {
    set_omit_gravity(from.omit_gravity());
  }
  if (from.auto_def1() != 0) {
    set_auto_def1(from.auto_def1());
  }
  if (from.character_vfx_species_id() != 0) {
    set_character_vfx_species_id(from.character_vfx_species_id());
  }
  if (from.is_pixelated_vfx_on_character() != 0) {
    set_is_pixelated_vfx_on_character(from.is_pixelated_vfx_on_character());
  }
}

void BuffConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:shared.BuffConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BuffConfig::CopyFrom(const BuffConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:shared.BuffConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuffConfig::IsInitialized() const {
  return true;
}

void BuffConfig::Swap(BuffConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BuffConfig::InternalSwap(BuffConfig* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  associated_debuffs_.InternalSwap(&other->associated_debuffs_);
  swap(species_id_, other->species_id_);
  swap(stock_type_, other->stock_type_);
  swap(stock_, other->stock_);
  swap(speed_delta_, other->speed_delta_);
  swap(hitbox_size_x_delta_, other->hitbox_size_x_delta_);
  swap(hitbox_size_y_delta_, other->hitbox_size_y_delta_);
  swap(damage_delta_, other->damage_delta_);
  swap(damage_delta_by_percentage_, other->damage_delta_by_percentage_);
  swap(character_hardness_delta_, other->character_hardness_delta_);
  swap(melee_hardness_delta_, other->melee_hardness_delta_);
  swap(fireball_hardness_delta_, other->fireball_hardness_delta_);
  swap(xform_ch_species_id_, other->xform_ch_species_id_);
  swap(invinsible_, other->invinsible_);
  swap(repel_soft_pushback_, other->repel_soft_pushback_);
  swap(omit_gravity_, other->omit_gravity_);
  swap(auto_def1_, other->auto_def1_);
  swap(character_vfx_species_id_, other->character_vfx_species_id_);
  swap(is_pixelated_vfx_on_character_, other->is_pixelated_vfx_on_character_);
}

::google::protobuf::Metadata BuffConfig::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_serializable_5fdata_2eproto);
  return ::file_level_metadata_serializable_5fdata_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Buff::InitAsDefaultInstance() {
}
class Buff::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Buff::kSpeciesIdFieldNumber;
const int Buff::kStockFieldNumber;
const int Buff::kOriginatedRenderFrameIdFieldNumber;
const int Buff::kOrigChSpeciesIdFieldNumber;
const int Buff::kOrigRepelSoftPushbackFieldNumber;
const int Buff::kOrigOmitGravityFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Buff::Buff()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:shared.Buff)
}
Buff::Buff(const Buff& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&species_id_, &from.species_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&orig_omit_gravity_) -
    reinterpret_cast<char*>(&species_id_)) + sizeof(orig_omit_gravity_));
  // @@protoc_insertion_point(copy_constructor:shared.Buff)
}

void Buff::SharedCtor() {
  ::memset(&species_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&orig_omit_gravity_) -
      reinterpret_cast<char*>(&species_id_)) + sizeof(orig_omit_gravity_));
}

Buff::~Buff() {
  // @@protoc_insertion_point(destructor:shared.Buff)
  SharedDtor();
}

void Buff::SharedDtor() {
}

void Buff::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Buff& Buff::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Buff_serializable_5fdata_2eproto.base);
  return *internal_default_instance();
}


void Buff::Clear() {
// @@protoc_insertion_point(message_clear_start:shared.Buff)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&species_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&orig_omit_gravity_) -
      reinterpret_cast<char*>(&species_id_)) + sizeof(orig_omit_gravity_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Buff::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Buff*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // uint32 species_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_species_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 stock = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_stock(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 originated_render_frame_id = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_originated_render_frame_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // uint32 orig_ch_species_id = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_orig_ch_species_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // bool orig_repel_soft_pushback = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_orig_repel_soft_pushback(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // bool orig_omit_gravity = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_orig_omit_gravity(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Buff::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:shared.Buff)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 species_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &species_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 stock = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &stock_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 originated_render_frame_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &originated_render_frame_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 orig_ch_species_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &orig_ch_species_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool orig_repel_soft_pushback = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &orig_repel_soft_pushback_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool orig_omit_gravity = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &orig_omit_gravity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:shared.Buff)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:shared.Buff)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Buff::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:shared.Buff)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 species_id = 1;
  if (this->species_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->species_id(), output);
  }

  // int32 stock = 2;
  if (this->stock() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->stock(), output);
  }

  // int32 originated_render_frame_id = 3;
  if (this->originated_render_frame_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->originated_render_frame_id(), output);
  }

  // uint32 orig_ch_species_id = 4;
  if (this->orig_ch_species_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->orig_ch_species_id(), output);
  }

  // bool orig_repel_soft_pushback = 5;
  if (this->orig_repel_soft_pushback() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->orig_repel_soft_pushback(), output);
  }

  // bool orig_omit_gravity = 6;
  if (this->orig_omit_gravity() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->orig_omit_gravity(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:shared.Buff)
}

::google::protobuf::uint8* Buff::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:shared.Buff)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 species_id = 1;
  if (this->species_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->species_id(), target);
  }

  // int32 stock = 2;
  if (this->stock() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->stock(), target);
  }

  // int32 originated_render_frame_id = 3;
  if (this->originated_render_frame_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->originated_render_frame_id(), target);
  }

  // uint32 orig_ch_species_id = 4;
  if (this->orig_ch_species_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->orig_ch_species_id(), target);
  }

  // bool orig_repel_soft_pushback = 5;
  if (this->orig_repel_soft_pushback() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->orig_repel_soft_pushback(), target);
  }

  // bool orig_omit_gravity = 6;
  if (this->orig_omit_gravity() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->orig_omit_gravity(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:shared.Buff)
  return target;
}

size_t Buff::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:shared.Buff)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 species_id = 1;
  if (this->species_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->species_id());
  }

  // int32 stock = 2;
  if (this->stock() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->stock());
  }

  // int32 originated_render_frame_id = 3;
  if (this->originated_render_frame_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->originated_render_frame_id());
  }

  // uint32 orig_ch_species_id = 4;
  if (this->orig_ch_species_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->orig_ch_species_id());
  }

  // bool orig_repel_soft_pushback = 5;
  if (this->orig_repel_soft_pushback() != 0) {
    total_size += 1 + 1;
  }

  // bool orig_omit_gravity = 6;
  if (this->orig_omit_gravity() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Buff::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:shared.Buff)
  GOOGLE_DCHECK_NE(&from, this);
  const Buff* source =
      ::google::protobuf::DynamicCastToGenerated<Buff>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:shared.Buff)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:shared.Buff)
    MergeFrom(*source);
  }
}

void Buff::MergeFrom(const Buff& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:shared.Buff)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.species_id() != 0) {
    set_species_id(from.species_id());
  }
  if (from.stock() != 0) {
    set_stock(from.stock());
  }
  if (from.originated_render_frame_id() != 0) {
    set_originated_render_frame_id(from.originated_render_frame_id());
  }
  if (from.orig_ch_species_id() != 0) {
    set_orig_ch_species_id(from.orig_ch_species_id());
  }
  if (from.orig_repel_soft_pushback() != 0) {
    set_orig_repel_soft_pushback(from.orig_repel_soft_pushback());
  }
  if (from.orig_omit_gravity() != 0) {
    set_orig_omit_gravity(from.orig_omit_gravity());
  }
}

void Buff::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:shared.Buff)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Buff::CopyFrom(const Buff& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:shared.Buff)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Buff::IsInitialized() const {
  return true;
}

void Buff::Swap(Buff* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Buff::InternalSwap(Buff* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(species_id_, other->species_id_);
  swap(stock_, other->stock_);
  swap(originated_render_frame_id_, other->originated_render_frame_id_);
  swap(orig_ch_species_id_, other->orig_ch_species_id_);
  swap(orig_repel_soft_pushback_, other->orig_repel_soft_pushback_);
  swap(orig_omit_gravity_, other->orig_omit_gravity_);
}

::google::protobuf::Metadata Buff::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_serializable_5fdata_2eproto);
  return ::file_level_metadata_serializable_5fdata_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Debuff::InitAsDefaultInstance() {
}
class Debuff::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Debuff::kSpeciesIdFieldNumber;
const int Debuff::kStockFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Debuff::Debuff()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:shared.Debuff)
}
Debuff::Debuff(const Debuff& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&species_id_, &from.species_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&stock_) -
    reinterpret_cast<char*>(&species_id_)) + sizeof(stock_));
  // @@protoc_insertion_point(copy_constructor:shared.Debuff)
}

void Debuff::SharedCtor() {
  ::memset(&species_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&stock_) -
      reinterpret_cast<char*>(&species_id_)) + sizeof(stock_));
}

Debuff::~Debuff() {
  // @@protoc_insertion_point(destructor:shared.Debuff)
  SharedDtor();
}

void Debuff::SharedDtor() {
}

void Debuff::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Debuff& Debuff::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Debuff_serializable_5fdata_2eproto.base);
  return *internal_default_instance();
}


void Debuff::Clear() {
// @@protoc_insertion_point(message_clear_start:shared.Debuff)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&species_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&stock_) -
      reinterpret_cast<char*>(&species_id_)) + sizeof(stock_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Debuff::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Debuff*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // uint32 species_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_species_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 stock = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_stock(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Debuff::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:shared.Debuff)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 species_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &species_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 stock = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &stock_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:shared.Debuff)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:shared.Debuff)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Debuff::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:shared.Debuff)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 species_id = 1;
  if (this->species_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->species_id(), output);
  }

  // int32 stock = 2;
  if (this->stock() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->stock(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:shared.Debuff)
}

::google::protobuf::uint8* Debuff::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:shared.Debuff)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 species_id = 1;
  if (this->species_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->species_id(), target);
  }

  // int32 stock = 2;
  if (this->stock() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->stock(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:shared.Debuff)
  return target;
}

size_t Debuff::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:shared.Debuff)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 species_id = 1;
  if (this->species_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->species_id());
  }

  // int32 stock = 2;
  if (this->stock() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->stock());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Debuff::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:shared.Debuff)
  GOOGLE_DCHECK_NE(&from, this);
  const Debuff* source =
      ::google::protobuf::DynamicCastToGenerated<Debuff>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:shared.Debuff)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:shared.Debuff)
    MergeFrom(*source);
  }
}

void Debuff::MergeFrom(const Debuff& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:shared.Debuff)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.species_id() != 0) {
    set_species_id(from.species_id());
  }
  if (from.stock() != 0) {
    set_stock(from.stock());
  }
}

void Debuff::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:shared.Debuff)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Debuff::CopyFrom(const Debuff& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:shared.Debuff)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Debuff::IsInitialized() const {
  return true;
}

void Debuff::Swap(Debuff* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Debuff::InternalSwap(Debuff* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(species_id_, other->species_id_);
  swap(stock_, other->stock_);
}

::google::protobuf::Metadata Debuff::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_serializable_5fdata_2eproto);
  return ::file_level_metadata_serializable_5fdata_2eproto[kIndexInFileMessages];
}


// ===================================================================

void BulletImmuneRecord::InitAsDefaultInstance() {
}
class BulletImmuneRecord::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BulletImmuneRecord::kBulletLocalIdFieldNumber;
const int BulletImmuneRecord::kRemainingLifetimeRdfCountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BulletImmuneRecord::BulletImmuneRecord()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:shared.BulletImmuneRecord)
}
BulletImmuneRecord::BulletImmuneRecord(const BulletImmuneRecord& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&bullet_local_id_, &from.bullet_local_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&remaining_lifetime_rdf_count_) -
    reinterpret_cast<char*>(&bullet_local_id_)) + sizeof(remaining_lifetime_rdf_count_));
  // @@protoc_insertion_point(copy_constructor:shared.BulletImmuneRecord)
}

void BulletImmuneRecord::SharedCtor() {
  ::memset(&bullet_local_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&remaining_lifetime_rdf_count_) -
      reinterpret_cast<char*>(&bullet_local_id_)) + sizeof(remaining_lifetime_rdf_count_));
}

BulletImmuneRecord::~BulletImmuneRecord() {
  // @@protoc_insertion_point(destructor:shared.BulletImmuneRecord)
  SharedDtor();
}

void BulletImmuneRecord::SharedDtor() {
}

void BulletImmuneRecord::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BulletImmuneRecord& BulletImmuneRecord::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_BulletImmuneRecord_serializable_5fdata_2eproto.base);
  return *internal_default_instance();
}


void BulletImmuneRecord::Clear() {
// @@protoc_insertion_point(message_clear_start:shared.BulletImmuneRecord)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&bullet_local_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&remaining_lifetime_rdf_count_) -
      reinterpret_cast<char*>(&bullet_local_id_)) + sizeof(remaining_lifetime_rdf_count_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* BulletImmuneRecord::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<BulletImmuneRecord*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int32 bullet_local_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_bullet_local_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 remaining_lifetime_rdf_count = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_remaining_lifetime_rdf_count(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool BulletImmuneRecord::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:shared.BulletImmuneRecord)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 bullet_local_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bullet_local_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 remaining_lifetime_rdf_count = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &remaining_lifetime_rdf_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:shared.BulletImmuneRecord)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:shared.BulletImmuneRecord)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void BulletImmuneRecord::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:shared.BulletImmuneRecord)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 bullet_local_id = 1;
  if (this->bullet_local_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->bullet_local_id(), output);
  }

  // int32 remaining_lifetime_rdf_count = 2;
  if (this->remaining_lifetime_rdf_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->remaining_lifetime_rdf_count(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:shared.BulletImmuneRecord)
}

::google::protobuf::uint8* BulletImmuneRecord::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:shared.BulletImmuneRecord)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 bullet_local_id = 1;
  if (this->bullet_local_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->bullet_local_id(), target);
  }

  // int32 remaining_lifetime_rdf_count = 2;
  if (this->remaining_lifetime_rdf_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->remaining_lifetime_rdf_count(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:shared.BulletImmuneRecord)
  return target;
}

size_t BulletImmuneRecord::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:shared.BulletImmuneRecord)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 bullet_local_id = 1;
  if (this->bullet_local_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->bullet_local_id());
  }

  // int32 remaining_lifetime_rdf_count = 2;
  if (this->remaining_lifetime_rdf_count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->remaining_lifetime_rdf_count());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BulletImmuneRecord::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:shared.BulletImmuneRecord)
  GOOGLE_DCHECK_NE(&from, this);
  const BulletImmuneRecord* source =
      ::google::protobuf::DynamicCastToGenerated<BulletImmuneRecord>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:shared.BulletImmuneRecord)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:shared.BulletImmuneRecord)
    MergeFrom(*source);
  }
}

void BulletImmuneRecord::MergeFrom(const BulletImmuneRecord& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:shared.BulletImmuneRecord)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.bullet_local_id() != 0) {
    set_bullet_local_id(from.bullet_local_id());
  }
  if (from.remaining_lifetime_rdf_count() != 0) {
    set_remaining_lifetime_rdf_count(from.remaining_lifetime_rdf_count());
  }
}

void BulletImmuneRecord::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:shared.BulletImmuneRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BulletImmuneRecord::CopyFrom(const BulletImmuneRecord& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:shared.BulletImmuneRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BulletImmuneRecord::IsInitialized() const {
  return true;
}

void BulletImmuneRecord::Swap(BulletImmuneRecord* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BulletImmuneRecord::InternalSwap(BulletImmuneRecord* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(bullet_local_id_, other->bullet_local_id_);
  swap(remaining_lifetime_rdf_count_, other->remaining_lifetime_rdf_count_);
}

::google::protobuf::Metadata BulletImmuneRecord::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_serializable_5fdata_2eproto);
  return ::file_level_metadata_serializable_5fdata_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ConsumableConfig::InitAsDefaultInstance() {
}
class ConsumableConfig::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConsumableConfig::kSpeciesIdFieldNumber;
const int ConsumableConfig::kRefillDeltaFieldNumber;
const int ConsumableConfig::kVfxIdOnPickerFieldNumber;
const int ConsumableConfig::kIsPixelatedVfxOnPickerFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConsumableConfig::ConsumableConfig()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:shared.ConsumableConfig)
}
ConsumableConfig::ConsumableConfig(const ConsumableConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&species_id_, &from.species_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_pixelated_vfx_on_picker_) -
    reinterpret_cast<char*>(&species_id_)) + sizeof(is_pixelated_vfx_on_picker_));
  // @@protoc_insertion_point(copy_constructor:shared.ConsumableConfig)
}

void ConsumableConfig::SharedCtor() {
  ::memset(&species_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_pixelated_vfx_on_picker_) -
      reinterpret_cast<char*>(&species_id_)) + sizeof(is_pixelated_vfx_on_picker_));
}

ConsumableConfig::~ConsumableConfig() {
  // @@protoc_insertion_point(destructor:shared.ConsumableConfig)
  SharedDtor();
}

void ConsumableConfig::SharedDtor() {
}

void ConsumableConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ConsumableConfig& ConsumableConfig::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ConsumableConfig_serializable_5fdata_2eproto.base);
  return *internal_default_instance();
}


void ConsumableConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:shared.ConsumableConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&species_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_pixelated_vfx_on_picker_) -
      reinterpret_cast<char*>(&species_id_)) + sizeof(is_pixelated_vfx_on_picker_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ConsumableConfig::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ConsumableConfig*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // uint32 species_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_species_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 refill_delta = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_refill_delta(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 vfx_id_on_picker = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_vfx_id_on_picker(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // bool is_pixelated_vfx_on_picker = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_is_pixelated_vfx_on_picker(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ConsumableConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:shared.ConsumableConfig)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 species_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &species_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 refill_delta = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &refill_delta_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 vfx_id_on_picker = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vfx_id_on_picker_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_pixelated_vfx_on_picker = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_pixelated_vfx_on_picker_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:shared.ConsumableConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:shared.ConsumableConfig)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ConsumableConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:shared.ConsumableConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 species_id = 1;
  if (this->species_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->species_id(), output);
  }

  // int32 refill_delta = 2;
  if (this->refill_delta() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->refill_delta(), output);
  }

  // int32 vfx_id_on_picker = 3;
  if (this->vfx_id_on_picker() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->vfx_id_on_picker(), output);
  }

  // bool is_pixelated_vfx_on_picker = 4;
  if (this->is_pixelated_vfx_on_picker() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->is_pixelated_vfx_on_picker(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:shared.ConsumableConfig)
}

::google::protobuf::uint8* ConsumableConfig::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:shared.ConsumableConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 species_id = 1;
  if (this->species_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->species_id(), target);
  }

  // int32 refill_delta = 2;
  if (this->refill_delta() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->refill_delta(), target);
  }

  // int32 vfx_id_on_picker = 3;
  if (this->vfx_id_on_picker() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->vfx_id_on_picker(), target);
  }

  // bool is_pixelated_vfx_on_picker = 4;
  if (this->is_pixelated_vfx_on_picker() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->is_pixelated_vfx_on_picker(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:shared.ConsumableConfig)
  return target;
}

size_t ConsumableConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:shared.ConsumableConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 species_id = 1;
  if (this->species_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->species_id());
  }

  // int32 refill_delta = 2;
  if (this->refill_delta() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->refill_delta());
  }

  // int32 vfx_id_on_picker = 3;
  if (this->vfx_id_on_picker() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->vfx_id_on_picker());
  }

  // bool is_pixelated_vfx_on_picker = 4;
  if (this->is_pixelated_vfx_on_picker() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConsumableConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:shared.ConsumableConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const ConsumableConfig* source =
      ::google::protobuf::DynamicCastToGenerated<ConsumableConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:shared.ConsumableConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:shared.ConsumableConfig)
    MergeFrom(*source);
  }
}

void ConsumableConfig::MergeFrom(const ConsumableConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:shared.ConsumableConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.species_id() != 0) {
    set_species_id(from.species_id());
  }
  if (from.refill_delta() != 0) {
    set_refill_delta(from.refill_delta());
  }
  if (from.vfx_id_on_picker() != 0) {
    set_vfx_id_on_picker(from.vfx_id_on_picker());
  }
  if (from.is_pixelated_vfx_on_picker() != 0) {
    set_is_pixelated_vfx_on_picker(from.is_pixelated_vfx_on_picker());
  }
}

void ConsumableConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:shared.ConsumableConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConsumableConfig::CopyFrom(const ConsumableConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:shared.ConsumableConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConsumableConfig::IsInitialized() const {
  return true;
}

void ConsumableConfig::Swap(ConsumableConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ConsumableConfig::InternalSwap(ConsumableConfig* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(species_id_, other->species_id_);
  swap(refill_delta_, other->refill_delta_);
  swap(vfx_id_on_picker_, other->vfx_id_on_picker_);
  swap(is_pixelated_vfx_on_picker_, other->is_pixelated_vfx_on_picker_);
}

::google::protobuf::Metadata ConsumableConfig::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_serializable_5fdata_2eproto);
  return ::file_level_metadata_serializable_5fdata_2eproto[kIndexInFileMessages];
}


// ===================================================================

void PickableSkillConfig::InitAsDefaultInstance() {
}
class PickableSkillConfig::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PickableSkillConfig::kSkillIdFieldNumber;
const int PickableSkillConfig::kVfxIdOnPickerFieldNumber;
const int PickableSkillConfig::kIsPixelatedVfxOnPickerFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PickableSkillConfig::PickableSkillConfig()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:shared.PickableSkillConfig)
}
PickableSkillConfig::PickableSkillConfig(const PickableSkillConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&skill_id_, &from.skill_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_pixelated_vfx_on_picker_) -
    reinterpret_cast<char*>(&skill_id_)) + sizeof(is_pixelated_vfx_on_picker_));
  // @@protoc_insertion_point(copy_constructor:shared.PickableSkillConfig)
}

void PickableSkillConfig::SharedCtor() {
  ::memset(&skill_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_pixelated_vfx_on_picker_) -
      reinterpret_cast<char*>(&skill_id_)) + sizeof(is_pixelated_vfx_on_picker_));
}

PickableSkillConfig::~PickableSkillConfig() {
  // @@protoc_insertion_point(destructor:shared.PickableSkillConfig)
  SharedDtor();
}

void PickableSkillConfig::SharedDtor() {
}

void PickableSkillConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PickableSkillConfig& PickableSkillConfig::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_PickableSkillConfig_serializable_5fdata_2eproto.base);
  return *internal_default_instance();
}


void PickableSkillConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:shared.PickableSkillConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&skill_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_pixelated_vfx_on_picker_) -
      reinterpret_cast<char*>(&skill_id_)) + sizeof(is_pixelated_vfx_on_picker_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PickableSkillConfig::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<PickableSkillConfig*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // uint32 skill_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_skill_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 vfx_id_on_picker = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_vfx_id_on_picker(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // bool is_pixelated_vfx_on_picker = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_is_pixelated_vfx_on_picker(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PickableSkillConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:shared.PickableSkillConfig)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 skill_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skill_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 vfx_id_on_picker = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vfx_id_on_picker_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_pixelated_vfx_on_picker = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_pixelated_vfx_on_picker_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:shared.PickableSkillConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:shared.PickableSkillConfig)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PickableSkillConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:shared.PickableSkillConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 skill_id = 1;
  if (this->skill_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->skill_id(), output);
  }

  // int32 vfx_id_on_picker = 2;
  if (this->vfx_id_on_picker() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->vfx_id_on_picker(), output);
  }

  // bool is_pixelated_vfx_on_picker = 3;
  if (this->is_pixelated_vfx_on_picker() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->is_pixelated_vfx_on_picker(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:shared.PickableSkillConfig)
}

::google::protobuf::uint8* PickableSkillConfig::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:shared.PickableSkillConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 skill_id = 1;
  if (this->skill_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->skill_id(), target);
  }

  // int32 vfx_id_on_picker = 2;
  if (this->vfx_id_on_picker() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->vfx_id_on_picker(), target);
  }

  // bool is_pixelated_vfx_on_picker = 3;
  if (this->is_pixelated_vfx_on_picker() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->is_pixelated_vfx_on_picker(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:shared.PickableSkillConfig)
  return target;
}

size_t PickableSkillConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:shared.PickableSkillConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 skill_id = 1;
  if (this->skill_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->skill_id());
  }

  // int32 vfx_id_on_picker = 2;
  if (this->vfx_id_on_picker() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->vfx_id_on_picker());
  }

  // bool is_pixelated_vfx_on_picker = 3;
  if (this->is_pixelated_vfx_on_picker() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PickableSkillConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:shared.PickableSkillConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const PickableSkillConfig* source =
      ::google::protobuf::DynamicCastToGenerated<PickableSkillConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:shared.PickableSkillConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:shared.PickableSkillConfig)
    MergeFrom(*source);
  }
}

void PickableSkillConfig::MergeFrom(const PickableSkillConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:shared.PickableSkillConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.skill_id() != 0) {
    set_skill_id(from.skill_id());
  }
  if (from.vfx_id_on_picker() != 0) {
    set_vfx_id_on_picker(from.vfx_id_on_picker());
  }
  if (from.is_pixelated_vfx_on_picker() != 0) {
    set_is_pixelated_vfx_on_picker(from.is_pixelated_vfx_on_picker());
  }
}

void PickableSkillConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:shared.PickableSkillConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PickableSkillConfig::CopyFrom(const PickableSkillConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:shared.PickableSkillConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PickableSkillConfig::IsInitialized() const {
  return true;
}

void PickableSkillConfig::Swap(PickableSkillConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PickableSkillConfig::InternalSwap(PickableSkillConfig* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(skill_id_, other->skill_id_);
  swap(vfx_id_on_picker_, other->vfx_id_on_picker_);
  swap(is_pixelated_vfx_on_picker_, other->is_pixelated_vfx_on_picker_);
}

::google::protobuf::Metadata PickableSkillConfig::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_serializable_5fdata_2eproto);
  return ::file_level_metadata_serializable_5fdata_2eproto[kIndexInFileMessages];
}


// ===================================================================

void InventorySlot::InitAsDefaultInstance() {
}
class InventorySlot::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InventorySlot::kStockTypeFieldNumber;
const int InventorySlot::kQuotaFieldNumber;
const int InventorySlot::kFramesToRecoverFieldNumber;
const int InventorySlot::kDefaultQuotaFieldNumber;
const int InventorySlot::kDefaultFramesToRecoverFieldNumber;
const int InventorySlot::kBuffSpeciesIdFieldNumber;
const int InventorySlot::kSkillIdFieldNumber;
const int InventorySlot::kSkillIdAirFieldNumber;
const int InventorySlot::kGaugeChargedFieldNumber;
const int InventorySlot::kGaugeRequiredFieldNumber;
const int InventorySlot::kFullChargeBuffSpeciesIdFieldNumber;
const int InventorySlot::kFullChargeSkillIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InventorySlot::InventorySlot()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:shared.InventorySlot)
}
InventorySlot::InventorySlot(const InventorySlot& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&stock_type_, &from.stock_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&full_charge_skill_id_) -
    reinterpret_cast<char*>(&stock_type_)) + sizeof(full_charge_skill_id_));
  // @@protoc_insertion_point(copy_constructor:shared.InventorySlot)
}

void InventorySlot::SharedCtor() {
  ::memset(&stock_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&full_charge_skill_id_) -
      reinterpret_cast<char*>(&stock_type_)) + sizeof(full_charge_skill_id_));
}

InventorySlot::~InventorySlot() {
  // @@protoc_insertion_point(destructor:shared.InventorySlot)
  SharedDtor();
}

void InventorySlot::SharedDtor() {
}

void InventorySlot::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InventorySlot& InventorySlot::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_InventorySlot_serializable_5fdata_2eproto.base);
  return *internal_default_instance();
}


void InventorySlot::Clear() {
// @@protoc_insertion_point(message_clear_start:shared.InventorySlot)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&stock_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&full_charge_skill_id_) -
      reinterpret_cast<char*>(&stock_type_)) + sizeof(full_charge_skill_id_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* InventorySlot::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<InventorySlot*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .shared.InventorySlotStockType stock_type = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_stock_type(static_cast<::shared::InventorySlotStockType>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // uint32 quota = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_quota(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 frames_to_recover = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_frames_to_recover(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // uint32 default_quota = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_default_quota(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 default_frames_to_recover = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_default_frames_to_recover(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // uint32 buff_species_id = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_buff_species_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // uint32 skill_id = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        msg->set_skill_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // uint32 skill_id_air = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 64) goto handle_unusual;
        msg->set_skill_id_air(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 gauge_charged = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 72) goto handle_unusual;
        msg->set_gauge_charged(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 gauge_required = 10;
      case 10: {
        if (static_cast<::google::protobuf::uint8>(tag) != 80) goto handle_unusual;
        msg->set_gauge_required(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // uint32 full_charge_buff_species_id = 11;
      case 11: {
        if (static_cast<::google::protobuf::uint8>(tag) != 88) goto handle_unusual;
        msg->set_full_charge_buff_species_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // uint32 full_charge_skill_id = 12;
      case 12: {
        if (static_cast<::google::protobuf::uint8>(tag) != 96) goto handle_unusual;
        msg->set_full_charge_skill_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool InventorySlot::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:shared.InventorySlot)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .shared.InventorySlotStockType stock_type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_stock_type(static_cast< ::shared::InventorySlotStockType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 quota = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &quota_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 frames_to_recover = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &frames_to_recover_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 default_quota = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &default_quota_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 default_frames_to_recover = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &default_frames_to_recover_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 buff_species_id = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &buff_species_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 skill_id = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (56 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skill_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 skill_id_air = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (64 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skill_id_air_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 gauge_charged = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (72 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gauge_charged_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 gauge_required = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (80 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gauge_required_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 full_charge_buff_species_id = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (88 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &full_charge_buff_species_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 full_charge_skill_id = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (96 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &full_charge_skill_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:shared.InventorySlot)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:shared.InventorySlot)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void InventorySlot::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:shared.InventorySlot)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .shared.InventorySlotStockType stock_type = 1;
  if (this->stock_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->stock_type(), output);
  }

  // uint32 quota = 2;
  if (this->quota() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->quota(), output);
  }

  // int32 frames_to_recover = 3;
  if (this->frames_to_recover() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->frames_to_recover(), output);
  }

  // uint32 default_quota = 4;
  if (this->default_quota() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->default_quota(), output);
  }

  // int32 default_frames_to_recover = 5;
  if (this->default_frames_to_recover() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->default_frames_to_recover(), output);
  }

  // uint32 buff_species_id = 6;
  if (this->buff_species_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->buff_species_id(), output);
  }

  // uint32 skill_id = 7;
  if (this->skill_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->skill_id(), output);
  }

  // uint32 skill_id_air = 8;
  if (this->skill_id_air() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->skill_id_air(), output);
  }

  // int32 gauge_charged = 9;
  if (this->gauge_charged() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->gauge_charged(), output);
  }

  // int32 gauge_required = 10;
  if (this->gauge_required() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->gauge_required(), output);
  }

  // uint32 full_charge_buff_species_id = 11;
  if (this->full_charge_buff_species_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->full_charge_buff_species_id(), output);
  }

  // uint32 full_charge_skill_id = 12;
  if (this->full_charge_skill_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->full_charge_skill_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:shared.InventorySlot)
}

::google::protobuf::uint8* InventorySlot::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:shared.InventorySlot)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .shared.InventorySlotStockType stock_type = 1;
  if (this->stock_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->stock_type(), target);
  }

  // uint32 quota = 2;
  if (this->quota() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->quota(), target);
  }

  // int32 frames_to_recover = 3;
  if (this->frames_to_recover() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->frames_to_recover(), target);
  }

  // uint32 default_quota = 4;
  if (this->default_quota() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->default_quota(), target);
  }

  // int32 default_frames_to_recover = 5;
  if (this->default_frames_to_recover() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->default_frames_to_recover(), target);
  }

  // uint32 buff_species_id = 6;
  if (this->buff_species_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->buff_species_id(), target);
  }

  // uint32 skill_id = 7;
  if (this->skill_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->skill_id(), target);
  }

  // uint32 skill_id_air = 8;
  if (this->skill_id_air() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->skill_id_air(), target);
  }

  // int32 gauge_charged = 9;
  if (this->gauge_charged() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->gauge_charged(), target);
  }

  // int32 gauge_required = 10;
  if (this->gauge_required() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->gauge_required(), target);
  }

  // uint32 full_charge_buff_species_id = 11;
  if (this->full_charge_buff_species_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->full_charge_buff_species_id(), target);
  }

  // uint32 full_charge_skill_id = 12;
  if (this->full_charge_skill_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->full_charge_skill_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:shared.InventorySlot)
  return target;
}

size_t InventorySlot::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:shared.InventorySlot)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .shared.InventorySlotStockType stock_type = 1;
  if (this->stock_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->stock_type());
  }

  // uint32 quota = 2;
  if (this->quota() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->quota());
  }

  // int32 frames_to_recover = 3;
  if (this->frames_to_recover() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->frames_to_recover());
  }

  // uint32 default_quota = 4;
  if (this->default_quota() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->default_quota());
  }

  // int32 default_frames_to_recover = 5;
  if (this->default_frames_to_recover() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->default_frames_to_recover());
  }

  // uint32 buff_species_id = 6;
  if (this->buff_species_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->buff_species_id());
  }

  // uint32 skill_id = 7;
  if (this->skill_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->skill_id());
  }

  // uint32 skill_id_air = 8;
  if (this->skill_id_air() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->skill_id_air());
  }

  // int32 gauge_charged = 9;
  if (this->gauge_charged() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->gauge_charged());
  }

  // int32 gauge_required = 10;
  if (this->gauge_required() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->gauge_required());
  }

  // uint32 full_charge_buff_species_id = 11;
  if (this->full_charge_buff_species_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->full_charge_buff_species_id());
  }

  // uint32 full_charge_skill_id = 12;
  if (this->full_charge_skill_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->full_charge_skill_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InventorySlot::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:shared.InventorySlot)
  GOOGLE_DCHECK_NE(&from, this);
  const InventorySlot* source =
      ::google::protobuf::DynamicCastToGenerated<InventorySlot>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:shared.InventorySlot)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:shared.InventorySlot)
    MergeFrom(*source);
  }
}

void InventorySlot::MergeFrom(const InventorySlot& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:shared.InventorySlot)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.stock_type() != 0) {
    set_stock_type(from.stock_type());
  }
  if (from.quota() != 0) {
    set_quota(from.quota());
  }
  if (from.frames_to_recover() != 0) {
    set_frames_to_recover(from.frames_to_recover());
  }
  if (from.default_quota() != 0) {
    set_default_quota(from.default_quota());
  }
  if (from.default_frames_to_recover() != 0) {
    set_default_frames_to_recover(from.default_frames_to_recover());
  }
  if (from.buff_species_id() != 0) {
    set_buff_species_id(from.buff_species_id());
  }
  if (from.skill_id() != 0) {
    set_skill_id(from.skill_id());
  }
  if (from.skill_id_air() != 0) {
    set_skill_id_air(from.skill_id_air());
  }
  if (from.gauge_charged() != 0) {
    set_gauge_charged(from.gauge_charged());
  }
  if (from.gauge_required() != 0) {
    set_gauge_required(from.gauge_required());
  }
  if (from.full_charge_buff_species_id() != 0) {
    set_full_charge_buff_species_id(from.full_charge_buff_species_id());
  }
  if (from.full_charge_skill_id() != 0) {
    set_full_charge_skill_id(from.full_charge_skill_id());
  }
}

void InventorySlot::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:shared.InventorySlot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InventorySlot::CopyFrom(const InventorySlot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:shared.InventorySlot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InventorySlot::IsInitialized() const {
  return true;
}

void InventorySlot::Swap(InventorySlot* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InventorySlot::InternalSwap(InventorySlot* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(stock_type_, other->stock_type_);
  swap(quota_, other->quota_);
  swap(frames_to_recover_, other->frames_to_recover_);
  swap(default_quota_, other->default_quota_);
  swap(default_frames_to_recover_, other->default_frames_to_recover_);
  swap(buff_species_id_, other->buff_species_id_);
  swap(skill_id_, other->skill_id_);
  swap(skill_id_air_, other->skill_id_air_);
  swap(gauge_charged_, other->gauge_charged_);
  swap(gauge_required_, other->gauge_required_);
  swap(full_charge_buff_species_id_, other->full_charge_buff_species_id_);
  swap(full_charge_skill_id_, other->full_charge_skill_id_);
}

::google::protobuf::Metadata InventorySlot::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_serializable_5fdata_2eproto);
  return ::file_level_metadata_serializable_5fdata_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Inventory::InitAsDefaultInstance() {
}
class Inventory::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Inventory::kSlotsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Inventory::Inventory()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:shared.Inventory)
}
Inventory::Inventory(const Inventory& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      slots_(from.slots_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:shared.Inventory)
}

void Inventory::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Inventory_serializable_5fdata_2eproto.base);
}

Inventory::~Inventory() {
  // @@protoc_insertion_point(destructor:shared.Inventory)
  SharedDtor();
}

void Inventory::SharedDtor() {
}

void Inventory::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Inventory& Inventory::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Inventory_serializable_5fdata_2eproto.base);
  return *internal_default_instance();
}


void Inventory::Clear() {
// @@protoc_insertion_point(message_clear_start:shared.Inventory)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  slots_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Inventory::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Inventory*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .shared.InventorySlot slots = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::shared::InventorySlot::_InternalParse;
          object = msg->add_slots();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Inventory::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:shared.Inventory)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .shared.InventorySlot slots = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_slots()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:shared.Inventory)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:shared.Inventory)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Inventory::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:shared.Inventory)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .shared.InventorySlot slots = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->slots_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->slots(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:shared.Inventory)
}

::google::protobuf::uint8* Inventory::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:shared.Inventory)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .shared.InventorySlot slots = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->slots_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->slots(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:shared.Inventory)
  return target;
}

size_t Inventory::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:shared.Inventory)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .shared.InventorySlot slots = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->slots_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->slots(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Inventory::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:shared.Inventory)
  GOOGLE_DCHECK_NE(&from, this);
  const Inventory* source =
      ::google::protobuf::DynamicCastToGenerated<Inventory>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:shared.Inventory)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:shared.Inventory)
    MergeFrom(*source);
  }
}

void Inventory::MergeFrom(const Inventory& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:shared.Inventory)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  slots_.MergeFrom(from.slots_);
}

void Inventory::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:shared.Inventory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Inventory::CopyFrom(const Inventory& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:shared.Inventory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Inventory::IsInitialized() const {
  return true;
}

void Inventory::Swap(Inventory* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Inventory::InternalSwap(Inventory* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&slots_)->InternalSwap(CastToBase(&other->slots_));
}

::google::protobuf::Metadata Inventory::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_serializable_5fdata_2eproto);
  return ::file_level_metadata_serializable_5fdata_2eproto[kIndexInFileMessages];
}


// ===================================================================

void BattleEquipment::InitAsDefaultInstance() {
}
class BattleEquipment::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BattleEquipment::kSpeciesIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BattleEquipment::BattleEquipment()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:shared.BattleEquipment)
}
BattleEquipment::BattleEquipment(const BattleEquipment& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  species_id_ = from.species_id_;
  // @@protoc_insertion_point(copy_constructor:shared.BattleEquipment)
}

void BattleEquipment::SharedCtor() {
  species_id_ = 0u;
}

BattleEquipment::~BattleEquipment() {
  // @@protoc_insertion_point(destructor:shared.BattleEquipment)
  SharedDtor();
}

void BattleEquipment::SharedDtor() {
}

void BattleEquipment::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BattleEquipment& BattleEquipment::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_BattleEquipment_serializable_5fdata_2eproto.base);
  return *internal_default_instance();
}


void BattleEquipment::Clear() {
// @@protoc_insertion_point(message_clear_start:shared.BattleEquipment)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  species_id_ = 0u;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* BattleEquipment::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<BattleEquipment*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // uint32 species_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_species_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool BattleEquipment::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:shared.BattleEquipment)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 species_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &species_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:shared.BattleEquipment)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:shared.BattleEquipment)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void BattleEquipment::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:shared.BattleEquipment)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 species_id = 1;
  if (this->species_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->species_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:shared.BattleEquipment)
}

::google::protobuf::uint8* BattleEquipment::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:shared.BattleEquipment)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 species_id = 1;
  if (this->species_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->species_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:shared.BattleEquipment)
  return target;
}

size_t BattleEquipment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:shared.BattleEquipment)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 species_id = 1;
  if (this->species_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->species_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BattleEquipment::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:shared.BattleEquipment)
  GOOGLE_DCHECK_NE(&from, this);
  const BattleEquipment* source =
      ::google::protobuf::DynamicCastToGenerated<BattleEquipment>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:shared.BattleEquipment)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:shared.BattleEquipment)
    MergeFrom(*source);
  }
}

void BattleEquipment::MergeFrom(const BattleEquipment& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:shared.BattleEquipment)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.species_id() != 0) {
    set_species_id(from.species_id());
  }
}

void BattleEquipment::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:shared.BattleEquipment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BattleEquipment::CopyFrom(const BattleEquipment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:shared.BattleEquipment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BattleEquipment::IsInitialized() const {
  return true;
}

void BattleEquipment::Swap(BattleEquipment* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BattleEquipment::InternalSwap(BattleEquipment* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(species_id_, other->species_id_);
}

::google::protobuf::Metadata BattleEquipment::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_serializable_5fdata_2eproto);
  return ::file_level_metadata_serializable_5fdata_2eproto[kIndexInFileMessages];
}


// ===================================================================

void PlayerSettings::InitAsDefaultInstance() {
}
class PlayerSettings::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PlayerSettings::kSoundVolumeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlayerSettings::PlayerSettings()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:shared.PlayerSettings)
}
PlayerSettings::PlayerSettings(const PlayerSettings& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sound_volume_ = from.sound_volume_;
  // @@protoc_insertion_point(copy_constructor:shared.PlayerSettings)
}

void PlayerSettings::SharedCtor() {
  sound_volume_ = 0;
}

PlayerSettings::~PlayerSettings() {
  // @@protoc_insertion_point(destructor:shared.PlayerSettings)
  SharedDtor();
}

void PlayerSettings::SharedDtor() {
}

void PlayerSettings::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PlayerSettings& PlayerSettings::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_PlayerSettings_serializable_5fdata_2eproto.base);
  return *internal_default_instance();
}


void PlayerSettings::Clear() {
// @@protoc_insertion_point(message_clear_start:shared.PlayerSettings)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sound_volume_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PlayerSettings::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<PlayerSettings*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int32 sound_volume = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_sound_volume(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PlayerSettings::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:shared.PlayerSettings)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 sound_volume = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sound_volume_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:shared.PlayerSettings)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:shared.PlayerSettings)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PlayerSettings::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:shared.PlayerSettings)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 sound_volume = 1;
  if (this->sound_volume() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->sound_volume(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:shared.PlayerSettings)
}

::google::protobuf::uint8* PlayerSettings::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:shared.PlayerSettings)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 sound_volume = 1;
  if (this->sound_volume() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->sound_volume(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:shared.PlayerSettings)
  return target;
}

size_t PlayerSettings::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:shared.PlayerSettings)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 sound_volume = 1;
  if (this->sound_volume() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->sound_volume());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlayerSettings::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:shared.PlayerSettings)
  GOOGLE_DCHECK_NE(&from, this);
  const PlayerSettings* source =
      ::google::protobuf::DynamicCastToGenerated<PlayerSettings>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:shared.PlayerSettings)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:shared.PlayerSettings)
    MergeFrom(*source);
  }
}

void PlayerSettings::MergeFrom(const PlayerSettings& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:shared.PlayerSettings)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.sound_volume() != 0) {
    set_sound_volume(from.sound_volume());
  }
}

void PlayerSettings::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:shared.PlayerSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerSettings::CopyFrom(const PlayerSettings& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:shared.PlayerSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerSettings::IsInitialized() const {
  return true;
}

void PlayerSettings::Swap(PlayerSettings* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlayerSettings::InternalSwap(PlayerSettings* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(sound_volume_, other->sound_volume_);
}

::google::protobuf::Metadata PlayerSettings::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_serializable_5fdata_2eproto);
  return ::file_level_metadata_serializable_5fdata_2eproto[kIndexInFileMessages];
}


// ===================================================================

PlayerRegionProgress_RemainingDependenciesEntry_DoNotUse::PlayerRegionProgress_RemainingDependenciesEntry_DoNotUse() {}
PlayerRegionProgress_RemainingDependenciesEntry_DoNotUse::PlayerRegionProgress_RemainingDependenciesEntry_DoNotUse(::google::protobuf::Arena* arena)
    : SuperType(arena) {}
void PlayerRegionProgress_RemainingDependenciesEntry_DoNotUse::MergeFrom(const PlayerRegionProgress_RemainingDependenciesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata PlayerRegionProgress_RemainingDependenciesEntry_DoNotUse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_serializable_5fdata_2eproto);
  return ::file_level_metadata_serializable_5fdata_2eproto[42];
}
void PlayerRegionProgress_RemainingDependenciesEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PlayerRegionProgress_RemainingDependenciesEntry_DoNotUse::_ParseMap(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx) {
  using MF = ::google::protobuf::internal::MapField<
      PlayerRegionProgress_RemainingDependenciesEntry_DoNotUse, EntryKeyType, EntryValueType,
      kEntryKeyFieldType, kEntryValueFieldType,
      kEntryDefaultEnumValue>;
  auto mf = static_cast<MF*>(object);
  Parser<MF, ::google::protobuf::Map<EntryKeyType, EntryValueType>> parser(mf);
#define DO_(x) if (!(x)) return false
  DO_(parser.ParseMap(begin, end));
#undef DO_
  return true;
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER


// ===================================================================

PlayerRegionProgress_RemovedDependenciesEntry_DoNotUse::PlayerRegionProgress_RemovedDependenciesEntry_DoNotUse() {}
PlayerRegionProgress_RemovedDependenciesEntry_DoNotUse::PlayerRegionProgress_RemovedDependenciesEntry_DoNotUse(::google::protobuf::Arena* arena)
    : SuperType(arena) {}
void PlayerRegionProgress_RemovedDependenciesEntry_DoNotUse::MergeFrom(const PlayerRegionProgress_RemovedDependenciesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata PlayerRegionProgress_RemovedDependenciesEntry_DoNotUse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_serializable_5fdata_2eproto);
  return ::file_level_metadata_serializable_5fdata_2eproto[43];
}
void PlayerRegionProgress_RemovedDependenciesEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PlayerRegionProgress_RemovedDependenciesEntry_DoNotUse::_ParseMap(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx) {
  using MF = ::google::protobuf::internal::MapField<
      PlayerRegionProgress_RemovedDependenciesEntry_DoNotUse, EntryKeyType, EntryValueType,
      kEntryKeyFieldType, kEntryValueFieldType,
      kEntryDefaultEnumValue>;
  auto mf = static_cast<MF*>(object);
  Parser<MF, ::google::protobuf::Map<EntryKeyType, EntryValueType>> parser(mf);
#define DO_(x) if (!(x)) return false
  DO_(parser.ParseMap(begin, end));
#undef DO_
  return true;
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER


// ===================================================================

void PlayerRegionProgress::InitAsDefaultInstance() {
}
class PlayerRegionProgress::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PlayerRegionProgress::kRegionIdFieldNumber;
const int PlayerRegionProgress::kCompletedLevelCountFieldNumber;
const int PlayerRegionProgress::kRemainingDependenciesFieldNumber;
const int PlayerRegionProgress::kRemovedDependenciesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlayerRegionProgress::PlayerRegionProgress()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:shared.PlayerRegionProgress)
}
PlayerRegionProgress::PlayerRegionProgress(const PlayerRegionProgress& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  remaining_dependencies_.MergeFrom(from.remaining_dependencies_);
  removed_dependencies_.MergeFrom(from.removed_dependencies_);
  ::memcpy(&region_id_, &from.region_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&completed_level_count_) -
    reinterpret_cast<char*>(&region_id_)) + sizeof(completed_level_count_));
  // @@protoc_insertion_point(copy_constructor:shared.PlayerRegionProgress)
}

void PlayerRegionProgress::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_PlayerRegionProgress_serializable_5fdata_2eproto.base);
  ::memset(&region_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&completed_level_count_) -
      reinterpret_cast<char*>(&region_id_)) + sizeof(completed_level_count_));
}

PlayerRegionProgress::~PlayerRegionProgress() {
  // @@protoc_insertion_point(destructor:shared.PlayerRegionProgress)
  SharedDtor();
}

void PlayerRegionProgress::SharedDtor() {
}

void PlayerRegionProgress::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PlayerRegionProgress& PlayerRegionProgress::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_PlayerRegionProgress_serializable_5fdata_2eproto.base);
  return *internal_default_instance();
}


void PlayerRegionProgress::Clear() {
// @@protoc_insertion_point(message_clear_start:shared.PlayerRegionProgress)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  remaining_dependencies_.Clear();
  removed_dependencies_.Clear();
  ::memset(&region_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&completed_level_count_) -
      reinterpret_cast<char*>(&region_id_)) + sizeof(completed_level_count_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PlayerRegionProgress::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<PlayerRegionProgress*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int32 region_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_region_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 completed_level_count = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_completed_level_count(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // map<int32, bool> remaining_dependencies = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::protobuf::internal::SlowMapEntryParser;
          auto parse_map = ::shared::PlayerRegionProgress_RemainingDependenciesEntry_DoNotUse::_ParseMap;
          ctx->extra_parse_data().payload.clear();
          ctx->extra_parse_data().parse_map = parse_map;
          object = &msg->remaining_dependencies_;
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(parse_map(ptr, newend, object, ctx));
          ptr = newend;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 26 && (ptr += 1));
        break;
      }
      // map<int32, bool> removed_dependencies = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::protobuf::internal::SlowMapEntryParser;
          auto parse_map = ::shared::PlayerRegionProgress_RemovedDependenciesEntry_DoNotUse::_ParseMap;
          ctx->extra_parse_data().payload.clear();
          ctx->extra_parse_data().parse_map = parse_map;
          object = &msg->removed_dependencies_;
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(parse_map(ptr, newend, object, ctx));
          ptr = newend;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 34 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PlayerRegionProgress::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:shared.PlayerRegionProgress)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 region_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &region_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 completed_level_count = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &completed_level_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<int32, bool> remaining_dependencies = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          PlayerRegionProgress_RemainingDependenciesEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              PlayerRegionProgress_RemainingDependenciesEntry_DoNotUse,
              ::google::protobuf::int32, bool,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
              ::google::protobuf::internal::WireFormatLite::TYPE_BOOL,
              0 >,
            ::google::protobuf::Map< ::google::protobuf::int32, bool > > parser(&remaining_dependencies_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<int32, bool> removed_dependencies = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          PlayerRegionProgress_RemovedDependenciesEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              PlayerRegionProgress_RemovedDependenciesEntry_DoNotUse,
              ::google::protobuf::int32, bool,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
              ::google::protobuf::internal::WireFormatLite::TYPE_BOOL,
              0 >,
            ::google::protobuf::Map< ::google::protobuf::int32, bool > > parser(&removed_dependencies_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:shared.PlayerRegionProgress)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:shared.PlayerRegionProgress)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PlayerRegionProgress::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:shared.PlayerRegionProgress)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 region_id = 1;
  if (this->region_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->region_id(), output);
  }

  // int32 completed_level_count = 2;
  if (this->completed_level_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->completed_level_count(), output);
  }

  // map<int32, bool> remaining_dependencies = 3;
  if (!this->remaining_dependencies().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::int32, bool >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::int32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (output->IsSerializationDeterministic() &&
        this->remaining_dependencies().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->remaining_dependencies().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::int32, bool >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::int32, bool >::const_iterator
          it = this->remaining_dependencies().begin();
          it != this->remaining_dependencies().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<PlayerRegionProgress_RemainingDependenciesEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(remaining_dependencies_.NewEntryWrapper(items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(3, *entry, output);
      }
    } else {
      ::std::unique_ptr<PlayerRegionProgress_RemainingDependenciesEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::google::protobuf::int32, bool >::const_iterator
          it = this->remaining_dependencies().begin();
          it != this->remaining_dependencies().end(); ++it) {
        entry.reset(remaining_dependencies_.NewEntryWrapper(it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(3, *entry, output);
      }
    }
  }

  // map<int32, bool> removed_dependencies = 4;
  if (!this->removed_dependencies().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::int32, bool >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::int32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (output->IsSerializationDeterministic() &&
        this->removed_dependencies().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->removed_dependencies().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::int32, bool >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::int32, bool >::const_iterator
          it = this->removed_dependencies().begin();
          it != this->removed_dependencies().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<PlayerRegionProgress_RemovedDependenciesEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(removed_dependencies_.NewEntryWrapper(items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(4, *entry, output);
      }
    } else {
      ::std::unique_ptr<PlayerRegionProgress_RemovedDependenciesEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::google::protobuf::int32, bool >::const_iterator
          it = this->removed_dependencies().begin();
          it != this->removed_dependencies().end(); ++it) {
        entry.reset(removed_dependencies_.NewEntryWrapper(it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(4, *entry, output);
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:shared.PlayerRegionProgress)
}

::google::protobuf::uint8* PlayerRegionProgress::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:shared.PlayerRegionProgress)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 region_id = 1;
  if (this->region_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->region_id(), target);
  }

  // int32 completed_level_count = 2;
  if (this->completed_level_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->completed_level_count(), target);
  }

  // map<int32, bool> remaining_dependencies = 3;
  if (!this->remaining_dependencies().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::int32, bool >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::int32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (false &&
        this->remaining_dependencies().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->remaining_dependencies().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::int32, bool >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::int32, bool >::const_iterator
          it = this->remaining_dependencies().begin();
          it != this->remaining_dependencies().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<PlayerRegionProgress_RemainingDependenciesEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(remaining_dependencies_.NewEntryWrapper(items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(3, *entry, target);
      }
    } else {
      ::std::unique_ptr<PlayerRegionProgress_RemainingDependenciesEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::google::protobuf::int32, bool >::const_iterator
          it = this->remaining_dependencies().begin();
          it != this->remaining_dependencies().end(); ++it) {
        entry.reset(remaining_dependencies_.NewEntryWrapper(it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(3, *entry, target);
      }
    }
  }

  // map<int32, bool> removed_dependencies = 4;
  if (!this->removed_dependencies().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::int32, bool >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::int32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (false &&
        this->removed_dependencies().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->removed_dependencies().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::int32, bool >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::int32, bool >::const_iterator
          it = this->removed_dependencies().begin();
          it != this->removed_dependencies().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<PlayerRegionProgress_RemovedDependenciesEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(removed_dependencies_.NewEntryWrapper(items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(4, *entry, target);
      }
    } else {
      ::std::unique_ptr<PlayerRegionProgress_RemovedDependenciesEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::google::protobuf::int32, bool >::const_iterator
          it = this->removed_dependencies().begin();
          it != this->removed_dependencies().end(); ++it) {
        entry.reset(removed_dependencies_.NewEntryWrapper(it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(4, *entry, target);
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:shared.PlayerRegionProgress)
  return target;
}

size_t PlayerRegionProgress::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:shared.PlayerRegionProgress)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<int32, bool> remaining_dependencies = 3;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->remaining_dependencies_size());
  {
    ::std::unique_ptr<PlayerRegionProgress_RemainingDependenciesEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::google::protobuf::int32, bool >::const_iterator
        it = this->remaining_dependencies().begin();
        it != this->remaining_dependencies().end(); ++it) {
      entry.reset(remaining_dependencies_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // map<int32, bool> removed_dependencies = 4;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->removed_dependencies_size());
  {
    ::std::unique_ptr<PlayerRegionProgress_RemovedDependenciesEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::google::protobuf::int32, bool >::const_iterator
        it = this->removed_dependencies().begin();
        it != this->removed_dependencies().end(); ++it) {
      entry.reset(removed_dependencies_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // int32 region_id = 1;
  if (this->region_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->region_id());
  }

  // int32 completed_level_count = 2;
  if (this->completed_level_count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->completed_level_count());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlayerRegionProgress::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:shared.PlayerRegionProgress)
  GOOGLE_DCHECK_NE(&from, this);
  const PlayerRegionProgress* source =
      ::google::protobuf::DynamicCastToGenerated<PlayerRegionProgress>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:shared.PlayerRegionProgress)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:shared.PlayerRegionProgress)
    MergeFrom(*source);
  }
}

void PlayerRegionProgress::MergeFrom(const PlayerRegionProgress& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:shared.PlayerRegionProgress)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  remaining_dependencies_.MergeFrom(from.remaining_dependencies_);
  removed_dependencies_.MergeFrom(from.removed_dependencies_);
  if (from.region_id() != 0) {
    set_region_id(from.region_id());
  }
  if (from.completed_level_count() != 0) {
    set_completed_level_count(from.completed_level_count());
  }
}

void PlayerRegionProgress::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:shared.PlayerRegionProgress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerRegionProgress::CopyFrom(const PlayerRegionProgress& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:shared.PlayerRegionProgress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerRegionProgress::IsInitialized() const {
  return true;
}

void PlayerRegionProgress::Swap(PlayerRegionProgress* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlayerRegionProgress::InternalSwap(PlayerRegionProgress* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  remaining_dependencies_.Swap(&other->remaining_dependencies_);
  removed_dependencies_.Swap(&other->removed_dependencies_);
  swap(region_id_, other->region_id_);
  swap(completed_level_count_, other->completed_level_count_);
}

::google::protobuf::Metadata PlayerRegionProgress::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_serializable_5fdata_2eproto);
  return ::file_level_metadata_serializable_5fdata_2eproto[kIndexInFileMessages];
}


// ===================================================================

PlayerLevelProgress_RemainingDependenciesEntry_DoNotUse::PlayerLevelProgress_RemainingDependenciesEntry_DoNotUse() {}
PlayerLevelProgress_RemainingDependenciesEntry_DoNotUse::PlayerLevelProgress_RemainingDependenciesEntry_DoNotUse(::google::protobuf::Arena* arena)
    : SuperType(arena) {}
void PlayerLevelProgress_RemainingDependenciesEntry_DoNotUse::MergeFrom(const PlayerLevelProgress_RemainingDependenciesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata PlayerLevelProgress_RemainingDependenciesEntry_DoNotUse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_serializable_5fdata_2eproto);
  return ::file_level_metadata_serializable_5fdata_2eproto[45];
}
void PlayerLevelProgress_RemainingDependenciesEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PlayerLevelProgress_RemainingDependenciesEntry_DoNotUse::_ParseMap(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx) {
  using MF = ::google::protobuf::internal::MapField<
      PlayerLevelProgress_RemainingDependenciesEntry_DoNotUse, EntryKeyType, EntryValueType,
      kEntryKeyFieldType, kEntryValueFieldType,
      kEntryDefaultEnumValue>;
  auto mf = static_cast<MF*>(object);
  Parser<MF, ::google::protobuf::Map<EntryKeyType, EntryValueType>> parser(mf);
#define DO_(x) if (!(x)) return false
  DO_(parser.ParseMap(begin, end));
#undef DO_
  return true;
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER


// ===================================================================

PlayerLevelProgress_RemovedDependenciesEntry_DoNotUse::PlayerLevelProgress_RemovedDependenciesEntry_DoNotUse() {}
PlayerLevelProgress_RemovedDependenciesEntry_DoNotUse::PlayerLevelProgress_RemovedDependenciesEntry_DoNotUse(::google::protobuf::Arena* arena)
    : SuperType(arena) {}
void PlayerLevelProgress_RemovedDependenciesEntry_DoNotUse::MergeFrom(const PlayerLevelProgress_RemovedDependenciesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata PlayerLevelProgress_RemovedDependenciesEntry_DoNotUse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_serializable_5fdata_2eproto);
  return ::file_level_metadata_serializable_5fdata_2eproto[46];
}
void PlayerLevelProgress_RemovedDependenciesEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PlayerLevelProgress_RemovedDependenciesEntry_DoNotUse::_ParseMap(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx) {
  using MF = ::google::protobuf::internal::MapField<
      PlayerLevelProgress_RemovedDependenciesEntry_DoNotUse, EntryKeyType, EntryValueType,
      kEntryKeyFieldType, kEntryValueFieldType,
      kEntryDefaultEnumValue>;
  auto mf = static_cast<MF*>(object);
  Parser<MF, ::google::protobuf::Map<EntryKeyType, EntryValueType>> parser(mf);
#define DO_(x) if (!(x)) return false
  DO_(parser.ParseMap(begin, end));
#undef DO_
  return true;
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER


// ===================================================================

void PlayerLevelProgress::InitAsDefaultInstance() {
}
class PlayerLevelProgress::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PlayerLevelProgress::kRegionIdFieldNumber;
const int PlayerLevelProgress::kLevelIdFieldNumber;
const int PlayerLevelProgress::kHighestScoreFieldNumber;
const int PlayerLevelProgress::kShortestFinishTimeAtHighestScoreFieldNumber;
const int PlayerLevelProgress::kCharacterSpeciesIdAtHighestScoreFieldNumber;
const int PlayerLevelProgress::kShortestFinishTimeFieldNumber;
const int PlayerLevelProgress::kScoreAtShortestFinishTimeFieldNumber;
const int PlayerLevelProgress::kCharacterSpeciesIdAtShortestFinishTimeFieldNumber;
const int PlayerLevelProgress::kRemainingDependenciesFieldNumber;
const int PlayerLevelProgress::kRemovedDependenciesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlayerLevelProgress::PlayerLevelProgress()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:shared.PlayerLevelProgress)
}
PlayerLevelProgress::PlayerLevelProgress(const PlayerLevelProgress& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  remaining_dependencies_.MergeFrom(from.remaining_dependencies_);
  removed_dependencies_.MergeFrom(from.removed_dependencies_);
  ::memcpy(&region_id_, &from.region_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&character_species_id_at_shortest_finish_time_) -
    reinterpret_cast<char*>(&region_id_)) + sizeof(character_species_id_at_shortest_finish_time_));
  // @@protoc_insertion_point(copy_constructor:shared.PlayerLevelProgress)
}

void PlayerLevelProgress::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_PlayerLevelProgress_serializable_5fdata_2eproto.base);
  ::memset(&region_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&character_species_id_at_shortest_finish_time_) -
      reinterpret_cast<char*>(&region_id_)) + sizeof(character_species_id_at_shortest_finish_time_));
}

PlayerLevelProgress::~PlayerLevelProgress() {
  // @@protoc_insertion_point(destructor:shared.PlayerLevelProgress)
  SharedDtor();
}

void PlayerLevelProgress::SharedDtor() {
}

void PlayerLevelProgress::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PlayerLevelProgress& PlayerLevelProgress::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_PlayerLevelProgress_serializable_5fdata_2eproto.base);
  return *internal_default_instance();
}


void PlayerLevelProgress::Clear() {
// @@protoc_insertion_point(message_clear_start:shared.PlayerLevelProgress)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  remaining_dependencies_.Clear();
  removed_dependencies_.Clear();
  ::memset(&region_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&character_species_id_at_shortest_finish_time_) -
      reinterpret_cast<char*>(&region_id_)) + sizeof(character_species_id_at_shortest_finish_time_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PlayerLevelProgress::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<PlayerLevelProgress*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int32 region_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_region_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 level_id = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_level_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 highest_score = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_highest_score(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 shortest_finish_time_at_highest_score = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_shortest_finish_time_at_highest_score(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // uint32 character_species_id_at_highest_score = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_character_species_id_at_highest_score(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 shortest_finish_time = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_shortest_finish_time(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 score_at_shortest_finish_time = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        msg->set_score_at_shortest_finish_time(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // uint32 character_species_id_at_shortest_finish_time = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 64) goto handle_unusual;
        msg->set_character_species_id_at_shortest_finish_time(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // map<int32, bool> remaining_dependencies = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 74) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::protobuf::internal::SlowMapEntryParser;
          auto parse_map = ::shared::PlayerLevelProgress_RemainingDependenciesEntry_DoNotUse::_ParseMap;
          ctx->extra_parse_data().payload.clear();
          ctx->extra_parse_data().parse_map = parse_map;
          object = &msg->remaining_dependencies_;
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(parse_map(ptr, newend, object, ctx));
          ptr = newend;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 74 && (ptr += 1));
        break;
      }
      // map<int32, bool> removed_dependencies = 10;
      case 10: {
        if (static_cast<::google::protobuf::uint8>(tag) != 82) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::protobuf::internal::SlowMapEntryParser;
          auto parse_map = ::shared::PlayerLevelProgress_RemovedDependenciesEntry_DoNotUse::_ParseMap;
          ctx->extra_parse_data().payload.clear();
          ctx->extra_parse_data().parse_map = parse_map;
          object = &msg->removed_dependencies_;
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(parse_map(ptr, newend, object, ctx));
          ptr = newend;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 82 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PlayerLevelProgress::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:shared.PlayerLevelProgress)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 region_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &region_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 level_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 highest_score = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &highest_score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 shortest_finish_time_at_highest_score = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &shortest_finish_time_at_highest_score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 character_species_id_at_highest_score = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &character_species_id_at_highest_score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 shortest_finish_time = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &shortest_finish_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 score_at_shortest_finish_time = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (56 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &score_at_shortest_finish_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 character_species_id_at_shortest_finish_time = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (64 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &character_species_id_at_shortest_finish_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<int32, bool> remaining_dependencies = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (74 & 0xFF)) {
          PlayerLevelProgress_RemainingDependenciesEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              PlayerLevelProgress_RemainingDependenciesEntry_DoNotUse,
              ::google::protobuf::int32, bool,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
              ::google::protobuf::internal::WireFormatLite::TYPE_BOOL,
              0 >,
            ::google::protobuf::Map< ::google::protobuf::int32, bool > > parser(&remaining_dependencies_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<int32, bool> removed_dependencies = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (82 & 0xFF)) {
          PlayerLevelProgress_RemovedDependenciesEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              PlayerLevelProgress_RemovedDependenciesEntry_DoNotUse,
              ::google::protobuf::int32, bool,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
              ::google::protobuf::internal::WireFormatLite::TYPE_BOOL,
              0 >,
            ::google::protobuf::Map< ::google::protobuf::int32, bool > > parser(&removed_dependencies_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:shared.PlayerLevelProgress)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:shared.PlayerLevelProgress)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PlayerLevelProgress::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:shared.PlayerLevelProgress)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 region_id = 1;
  if (this->region_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->region_id(), output);
  }

  // int32 level_id = 2;
  if (this->level_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->level_id(), output);
  }

  // int32 highest_score = 3;
  if (this->highest_score() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->highest_score(), output);
  }

  // int32 shortest_finish_time_at_highest_score = 4;
  if (this->shortest_finish_time_at_highest_score() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->shortest_finish_time_at_highest_score(), output);
  }

  // uint32 character_species_id_at_highest_score = 5;
  if (this->character_species_id_at_highest_score() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->character_species_id_at_highest_score(), output);
  }

  // int32 shortest_finish_time = 6;
  if (this->shortest_finish_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->shortest_finish_time(), output);
  }

  // int32 score_at_shortest_finish_time = 7;
  if (this->score_at_shortest_finish_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->score_at_shortest_finish_time(), output);
  }

  // uint32 character_species_id_at_shortest_finish_time = 8;
  if (this->character_species_id_at_shortest_finish_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->character_species_id_at_shortest_finish_time(), output);
  }

  // map<int32, bool> remaining_dependencies = 9;
  if (!this->remaining_dependencies().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::int32, bool >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::int32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (output->IsSerializationDeterministic() &&
        this->remaining_dependencies().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->remaining_dependencies().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::int32, bool >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::int32, bool >::const_iterator
          it = this->remaining_dependencies().begin();
          it != this->remaining_dependencies().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<PlayerLevelProgress_RemainingDependenciesEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(remaining_dependencies_.NewEntryWrapper(items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(9, *entry, output);
      }
    } else {
      ::std::unique_ptr<PlayerLevelProgress_RemainingDependenciesEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::google::protobuf::int32, bool >::const_iterator
          it = this->remaining_dependencies().begin();
          it != this->remaining_dependencies().end(); ++it) {
        entry.reset(remaining_dependencies_.NewEntryWrapper(it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(9, *entry, output);
      }
    }
  }

  // map<int32, bool> removed_dependencies = 10;
  if (!this->removed_dependencies().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::int32, bool >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::int32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (output->IsSerializationDeterministic() &&
        this->removed_dependencies().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->removed_dependencies().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::int32, bool >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::int32, bool >::const_iterator
          it = this->removed_dependencies().begin();
          it != this->removed_dependencies().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<PlayerLevelProgress_RemovedDependenciesEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(removed_dependencies_.NewEntryWrapper(items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(10, *entry, output);
      }
    } else {
      ::std::unique_ptr<PlayerLevelProgress_RemovedDependenciesEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::google::protobuf::int32, bool >::const_iterator
          it = this->removed_dependencies().begin();
          it != this->removed_dependencies().end(); ++it) {
        entry.reset(removed_dependencies_.NewEntryWrapper(it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(10, *entry, output);
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:shared.PlayerLevelProgress)
}

::google::protobuf::uint8* PlayerLevelProgress::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:shared.PlayerLevelProgress)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 region_id = 1;
  if (this->region_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->region_id(), target);
  }

  // int32 level_id = 2;
  if (this->level_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->level_id(), target);
  }

  // int32 highest_score = 3;
  if (this->highest_score() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->highest_score(), target);
  }

  // int32 shortest_finish_time_at_highest_score = 4;
  if (this->shortest_finish_time_at_highest_score() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->shortest_finish_time_at_highest_score(), target);
  }

  // uint32 character_species_id_at_highest_score = 5;
  if (this->character_species_id_at_highest_score() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->character_species_id_at_highest_score(), target);
  }

  // int32 shortest_finish_time = 6;
  if (this->shortest_finish_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->shortest_finish_time(), target);
  }

  // int32 score_at_shortest_finish_time = 7;
  if (this->score_at_shortest_finish_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->score_at_shortest_finish_time(), target);
  }

  // uint32 character_species_id_at_shortest_finish_time = 8;
  if (this->character_species_id_at_shortest_finish_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->character_species_id_at_shortest_finish_time(), target);
  }

  // map<int32, bool> remaining_dependencies = 9;
  if (!this->remaining_dependencies().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::int32, bool >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::int32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (false &&
        this->remaining_dependencies().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->remaining_dependencies().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::int32, bool >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::int32, bool >::const_iterator
          it = this->remaining_dependencies().begin();
          it != this->remaining_dependencies().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<PlayerLevelProgress_RemainingDependenciesEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(remaining_dependencies_.NewEntryWrapper(items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(9, *entry, target);
      }
    } else {
      ::std::unique_ptr<PlayerLevelProgress_RemainingDependenciesEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::google::protobuf::int32, bool >::const_iterator
          it = this->remaining_dependencies().begin();
          it != this->remaining_dependencies().end(); ++it) {
        entry.reset(remaining_dependencies_.NewEntryWrapper(it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(9, *entry, target);
      }
    }
  }

  // map<int32, bool> removed_dependencies = 10;
  if (!this->removed_dependencies().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::int32, bool >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::int32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (false &&
        this->removed_dependencies().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->removed_dependencies().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::int32, bool >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::int32, bool >::const_iterator
          it = this->removed_dependencies().begin();
          it != this->removed_dependencies().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<PlayerLevelProgress_RemovedDependenciesEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(removed_dependencies_.NewEntryWrapper(items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(10, *entry, target);
      }
    } else {
      ::std::unique_ptr<PlayerLevelProgress_RemovedDependenciesEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::google::protobuf::int32, bool >::const_iterator
          it = this->removed_dependencies().begin();
          it != this->removed_dependencies().end(); ++it) {
        entry.reset(removed_dependencies_.NewEntryWrapper(it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(10, *entry, target);
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:shared.PlayerLevelProgress)
  return target;
}

size_t PlayerLevelProgress::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:shared.PlayerLevelProgress)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<int32, bool> remaining_dependencies = 9;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->remaining_dependencies_size());
  {
    ::std::unique_ptr<PlayerLevelProgress_RemainingDependenciesEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::google::protobuf::int32, bool >::const_iterator
        it = this->remaining_dependencies().begin();
        it != this->remaining_dependencies().end(); ++it) {
      entry.reset(remaining_dependencies_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // map<int32, bool> removed_dependencies = 10;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->removed_dependencies_size());
  {
    ::std::unique_ptr<PlayerLevelProgress_RemovedDependenciesEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::google::protobuf::int32, bool >::const_iterator
        it = this->removed_dependencies().begin();
        it != this->removed_dependencies().end(); ++it) {
      entry.reset(removed_dependencies_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // int32 region_id = 1;
  if (this->region_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->region_id());
  }

  // int32 level_id = 2;
  if (this->level_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->level_id());
  }

  // int32 highest_score = 3;
  if (this->highest_score() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->highest_score());
  }

  // int32 shortest_finish_time_at_highest_score = 4;
  if (this->shortest_finish_time_at_highest_score() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->shortest_finish_time_at_highest_score());
  }

  // uint32 character_species_id_at_highest_score = 5;
  if (this->character_species_id_at_highest_score() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->character_species_id_at_highest_score());
  }

  // int32 shortest_finish_time = 6;
  if (this->shortest_finish_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->shortest_finish_time());
  }

  // int32 score_at_shortest_finish_time = 7;
  if (this->score_at_shortest_finish_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->score_at_shortest_finish_time());
  }

  // uint32 character_species_id_at_shortest_finish_time = 8;
  if (this->character_species_id_at_shortest_finish_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->character_species_id_at_shortest_finish_time());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlayerLevelProgress::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:shared.PlayerLevelProgress)
  GOOGLE_DCHECK_NE(&from, this);
  const PlayerLevelProgress* source =
      ::google::protobuf::DynamicCastToGenerated<PlayerLevelProgress>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:shared.PlayerLevelProgress)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:shared.PlayerLevelProgress)
    MergeFrom(*source);
  }
}

void PlayerLevelProgress::MergeFrom(const PlayerLevelProgress& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:shared.PlayerLevelProgress)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  remaining_dependencies_.MergeFrom(from.remaining_dependencies_);
  removed_dependencies_.MergeFrom(from.removed_dependencies_);
  if (from.region_id() != 0) {
    set_region_id(from.region_id());
  }
  if (from.level_id() != 0) {
    set_level_id(from.level_id());
  }
  if (from.highest_score() != 0) {
    set_highest_score(from.highest_score());
  }
  if (from.shortest_finish_time_at_highest_score() != 0) {
    set_shortest_finish_time_at_highest_score(from.shortest_finish_time_at_highest_score());
  }
  if (from.character_species_id_at_highest_score() != 0) {
    set_character_species_id_at_highest_score(from.character_species_id_at_highest_score());
  }
  if (from.shortest_finish_time() != 0) {
    set_shortest_finish_time(from.shortest_finish_time());
  }
  if (from.score_at_shortest_finish_time() != 0) {
    set_score_at_shortest_finish_time(from.score_at_shortest_finish_time());
  }
  if (from.character_species_id_at_shortest_finish_time() != 0) {
    set_character_species_id_at_shortest_finish_time(from.character_species_id_at_shortest_finish_time());
  }
}

void PlayerLevelProgress::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:shared.PlayerLevelProgress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerLevelProgress::CopyFrom(const PlayerLevelProgress& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:shared.PlayerLevelProgress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerLevelProgress::IsInitialized() const {
  return true;
}

void PlayerLevelProgress::Swap(PlayerLevelProgress* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlayerLevelProgress::InternalSwap(PlayerLevelProgress* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  remaining_dependencies_.Swap(&other->remaining_dependencies_);
  removed_dependencies_.Swap(&other->removed_dependencies_);
  swap(region_id_, other->region_id_);
  swap(level_id_, other->level_id_);
  swap(highest_score_, other->highest_score_);
  swap(shortest_finish_time_at_highest_score_, other->shortest_finish_time_at_highest_score_);
  swap(character_species_id_at_highest_score_, other->character_species_id_at_highest_score_);
  swap(shortest_finish_time_, other->shortest_finish_time_);
  swap(score_at_shortest_finish_time_, other->score_at_shortest_finish_time_);
  swap(character_species_id_at_shortest_finish_time_, other->character_species_id_at_shortest_finish_time_);
}

::google::protobuf::Metadata PlayerLevelProgress::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_serializable_5fdata_2eproto);
  return ::file_level_metadata_serializable_5fdata_2eproto[kIndexInFileMessages];
}


// ===================================================================

PlayerChUnlockProgress_RemainingDependenciesEntry_DoNotUse::PlayerChUnlockProgress_RemainingDependenciesEntry_DoNotUse() {}
PlayerChUnlockProgress_RemainingDependenciesEntry_DoNotUse::PlayerChUnlockProgress_RemainingDependenciesEntry_DoNotUse(::google::protobuf::Arena* arena)
    : SuperType(arena) {}
void PlayerChUnlockProgress_RemainingDependenciesEntry_DoNotUse::MergeFrom(const PlayerChUnlockProgress_RemainingDependenciesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata PlayerChUnlockProgress_RemainingDependenciesEntry_DoNotUse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_serializable_5fdata_2eproto);
  return ::file_level_metadata_serializable_5fdata_2eproto[48];
}
void PlayerChUnlockProgress_RemainingDependenciesEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PlayerChUnlockProgress_RemainingDependenciesEntry_DoNotUse::_ParseMap(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx) {
  using MF = ::google::protobuf::internal::MapField<
      PlayerChUnlockProgress_RemainingDependenciesEntry_DoNotUse, EntryKeyType, EntryValueType,
      kEntryKeyFieldType, kEntryValueFieldType,
      kEntryDefaultEnumValue>;
  auto mf = static_cast<MF*>(object);
  Parser<MF, ::google::protobuf::Map<EntryKeyType, EntryValueType>> parser(mf);
#define DO_(x) if (!(x)) return false
  DO_(parser.ParseMap(begin, end));
#undef DO_
  return true;
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER


// ===================================================================

PlayerChUnlockProgress_RemovedDependenciesEntry_DoNotUse::PlayerChUnlockProgress_RemovedDependenciesEntry_DoNotUse() {}
PlayerChUnlockProgress_RemovedDependenciesEntry_DoNotUse::PlayerChUnlockProgress_RemovedDependenciesEntry_DoNotUse(::google::protobuf::Arena* arena)
    : SuperType(arena) {}
void PlayerChUnlockProgress_RemovedDependenciesEntry_DoNotUse::MergeFrom(const PlayerChUnlockProgress_RemovedDependenciesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata PlayerChUnlockProgress_RemovedDependenciesEntry_DoNotUse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_serializable_5fdata_2eproto);
  return ::file_level_metadata_serializable_5fdata_2eproto[49];
}
void PlayerChUnlockProgress_RemovedDependenciesEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PlayerChUnlockProgress_RemovedDependenciesEntry_DoNotUse::_ParseMap(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx) {
  using MF = ::google::protobuf::internal::MapField<
      PlayerChUnlockProgress_RemovedDependenciesEntry_DoNotUse, EntryKeyType, EntryValueType,
      kEntryKeyFieldType, kEntryValueFieldType,
      kEntryDefaultEnumValue>;
  auto mf = static_cast<MF*>(object);
  Parser<MF, ::google::protobuf::Map<EntryKeyType, EntryValueType>> parser(mf);
#define DO_(x) if (!(x)) return false
  DO_(parser.ParseMap(begin, end));
#undef DO_
  return true;
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER


// ===================================================================

void PlayerChUnlockProgress::InitAsDefaultInstance() {
}
class PlayerChUnlockProgress::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PlayerChUnlockProgress::kSpeciesIdFieldNumber;
const int PlayerChUnlockProgress::kRemainingDependenciesFieldNumber;
const int PlayerChUnlockProgress::kRemovedDependenciesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlayerChUnlockProgress::PlayerChUnlockProgress()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:shared.PlayerChUnlockProgress)
}
PlayerChUnlockProgress::PlayerChUnlockProgress(const PlayerChUnlockProgress& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  remaining_dependencies_.MergeFrom(from.remaining_dependencies_);
  removed_dependencies_.MergeFrom(from.removed_dependencies_);
  species_id_ = from.species_id_;
  // @@protoc_insertion_point(copy_constructor:shared.PlayerChUnlockProgress)
}

void PlayerChUnlockProgress::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_PlayerChUnlockProgress_serializable_5fdata_2eproto.base);
  species_id_ = 0u;
}

PlayerChUnlockProgress::~PlayerChUnlockProgress() {
  // @@protoc_insertion_point(destructor:shared.PlayerChUnlockProgress)
  SharedDtor();
}

void PlayerChUnlockProgress::SharedDtor() {
}

void PlayerChUnlockProgress::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PlayerChUnlockProgress& PlayerChUnlockProgress::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_PlayerChUnlockProgress_serializable_5fdata_2eproto.base);
  return *internal_default_instance();
}


void PlayerChUnlockProgress::Clear() {
// @@protoc_insertion_point(message_clear_start:shared.PlayerChUnlockProgress)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  remaining_dependencies_.Clear();
  removed_dependencies_.Clear();
  species_id_ = 0u;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PlayerChUnlockProgress::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<PlayerChUnlockProgress*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // uint32 species_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_species_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // map<int32, bool> remaining_dependencies = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::protobuf::internal::SlowMapEntryParser;
          auto parse_map = ::shared::PlayerChUnlockProgress_RemainingDependenciesEntry_DoNotUse::_ParseMap;
          ctx->extra_parse_data().payload.clear();
          ctx->extra_parse_data().parse_map = parse_map;
          object = &msg->remaining_dependencies_;
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(parse_map(ptr, newend, object, ctx));
          ptr = newend;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 18 && (ptr += 1));
        break;
      }
      // map<int32, bool> removed_dependencies = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::protobuf::internal::SlowMapEntryParser;
          auto parse_map = ::shared::PlayerChUnlockProgress_RemovedDependenciesEntry_DoNotUse::_ParseMap;
          ctx->extra_parse_data().payload.clear();
          ctx->extra_parse_data().parse_map = parse_map;
          object = &msg->removed_dependencies_;
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(parse_map(ptr, newend, object, ctx));
          ptr = newend;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 26 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PlayerChUnlockProgress::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:shared.PlayerChUnlockProgress)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 species_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &species_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<int32, bool> remaining_dependencies = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          PlayerChUnlockProgress_RemainingDependenciesEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              PlayerChUnlockProgress_RemainingDependenciesEntry_DoNotUse,
              ::google::protobuf::int32, bool,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
              ::google::protobuf::internal::WireFormatLite::TYPE_BOOL,
              0 >,
            ::google::protobuf::Map< ::google::protobuf::int32, bool > > parser(&remaining_dependencies_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<int32, bool> removed_dependencies = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          PlayerChUnlockProgress_RemovedDependenciesEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              PlayerChUnlockProgress_RemovedDependenciesEntry_DoNotUse,
              ::google::protobuf::int32, bool,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
              ::google::protobuf::internal::WireFormatLite::TYPE_BOOL,
              0 >,
            ::google::protobuf::Map< ::google::protobuf::int32, bool > > parser(&removed_dependencies_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:shared.PlayerChUnlockProgress)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:shared.PlayerChUnlockProgress)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PlayerChUnlockProgress::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:shared.PlayerChUnlockProgress)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 species_id = 1;
  if (this->species_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->species_id(), output);
  }

  // map<int32, bool> remaining_dependencies = 2;
  if (!this->remaining_dependencies().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::int32, bool >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::int32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (output->IsSerializationDeterministic() &&
        this->remaining_dependencies().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->remaining_dependencies().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::int32, bool >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::int32, bool >::const_iterator
          it = this->remaining_dependencies().begin();
          it != this->remaining_dependencies().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<PlayerChUnlockProgress_RemainingDependenciesEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(remaining_dependencies_.NewEntryWrapper(items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(2, *entry, output);
      }
    } else {
      ::std::unique_ptr<PlayerChUnlockProgress_RemainingDependenciesEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::google::protobuf::int32, bool >::const_iterator
          it = this->remaining_dependencies().begin();
          it != this->remaining_dependencies().end(); ++it) {
        entry.reset(remaining_dependencies_.NewEntryWrapper(it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(2, *entry, output);
      }
    }
  }

  // map<int32, bool> removed_dependencies = 3;
  if (!this->removed_dependencies().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::int32, bool >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::int32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (output->IsSerializationDeterministic() &&
        this->removed_dependencies().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->removed_dependencies().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::int32, bool >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::int32, bool >::const_iterator
          it = this->removed_dependencies().begin();
          it != this->removed_dependencies().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<PlayerChUnlockProgress_RemovedDependenciesEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(removed_dependencies_.NewEntryWrapper(items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(3, *entry, output);
      }
    } else {
      ::std::unique_ptr<PlayerChUnlockProgress_RemovedDependenciesEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::google::protobuf::int32, bool >::const_iterator
          it = this->removed_dependencies().begin();
          it != this->removed_dependencies().end(); ++it) {
        entry.reset(removed_dependencies_.NewEntryWrapper(it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(3, *entry, output);
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:shared.PlayerChUnlockProgress)
}

::google::protobuf::uint8* PlayerChUnlockProgress::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:shared.PlayerChUnlockProgress)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 species_id = 1;
  if (this->species_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->species_id(), target);
  }

  // map<int32, bool> remaining_dependencies = 2;
  if (!this->remaining_dependencies().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::int32, bool >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::int32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (false &&
        this->remaining_dependencies().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->remaining_dependencies().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::int32, bool >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::int32, bool >::const_iterator
          it = this->remaining_dependencies().begin();
          it != this->remaining_dependencies().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<PlayerChUnlockProgress_RemainingDependenciesEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(remaining_dependencies_.NewEntryWrapper(items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(2, *entry, target);
      }
    } else {
      ::std::unique_ptr<PlayerChUnlockProgress_RemainingDependenciesEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::google::protobuf::int32, bool >::const_iterator
          it = this->remaining_dependencies().begin();
          it != this->remaining_dependencies().end(); ++it) {
        entry.reset(remaining_dependencies_.NewEntryWrapper(it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(2, *entry, target);
      }
    }
  }

  // map<int32, bool> removed_dependencies = 3;
  if (!this->removed_dependencies().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::int32, bool >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::int32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (false &&
        this->removed_dependencies().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->removed_dependencies().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::int32, bool >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::int32, bool >::const_iterator
          it = this->removed_dependencies().begin();
          it != this->removed_dependencies().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<PlayerChUnlockProgress_RemovedDependenciesEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(removed_dependencies_.NewEntryWrapper(items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(3, *entry, target);
      }
    } else {
      ::std::unique_ptr<PlayerChUnlockProgress_RemovedDependenciesEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::google::protobuf::int32, bool >::const_iterator
          it = this->removed_dependencies().begin();
          it != this->removed_dependencies().end(); ++it) {
        entry.reset(removed_dependencies_.NewEntryWrapper(it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(3, *entry, target);
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:shared.PlayerChUnlockProgress)
  return target;
}

size_t PlayerChUnlockProgress::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:shared.PlayerChUnlockProgress)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<int32, bool> remaining_dependencies = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->remaining_dependencies_size());
  {
    ::std::unique_ptr<PlayerChUnlockProgress_RemainingDependenciesEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::google::protobuf::int32, bool >::const_iterator
        it = this->remaining_dependencies().begin();
        it != this->remaining_dependencies().end(); ++it) {
      entry.reset(remaining_dependencies_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // map<int32, bool> removed_dependencies = 3;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->removed_dependencies_size());
  {
    ::std::unique_ptr<PlayerChUnlockProgress_RemovedDependenciesEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::google::protobuf::int32, bool >::const_iterator
        it = this->removed_dependencies().begin();
        it != this->removed_dependencies().end(); ++it) {
      entry.reset(removed_dependencies_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // uint32 species_id = 1;
  if (this->species_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->species_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlayerChUnlockProgress::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:shared.PlayerChUnlockProgress)
  GOOGLE_DCHECK_NE(&from, this);
  const PlayerChUnlockProgress* source =
      ::google::protobuf::DynamicCastToGenerated<PlayerChUnlockProgress>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:shared.PlayerChUnlockProgress)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:shared.PlayerChUnlockProgress)
    MergeFrom(*source);
  }
}

void PlayerChUnlockProgress::MergeFrom(const PlayerChUnlockProgress& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:shared.PlayerChUnlockProgress)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  remaining_dependencies_.MergeFrom(from.remaining_dependencies_);
  removed_dependencies_.MergeFrom(from.removed_dependencies_);
  if (from.species_id() != 0) {
    set_species_id(from.species_id());
  }
}

void PlayerChUnlockProgress::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:shared.PlayerChUnlockProgress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerChUnlockProgress::CopyFrom(const PlayerChUnlockProgress& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:shared.PlayerChUnlockProgress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerChUnlockProgress::IsInitialized() const {
  return true;
}

void PlayerChUnlockProgress::Swap(PlayerChUnlockProgress* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlayerChUnlockProgress::InternalSwap(PlayerChUnlockProgress* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  remaining_dependencies_.Swap(&other->remaining_dependencies_);
  removed_dependencies_.Swap(&other->removed_dependencies_);
  swap(species_id_, other->species_id_);
}

::google::protobuf::Metadata PlayerChUnlockProgress::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_serializable_5fdata_2eproto);
  return ::file_level_metadata_serializable_5fdata_2eproto[kIndexInFileMessages];
}


// ===================================================================

PlayerStoryProgress_RegionProgressDictEntry_DoNotUse::PlayerStoryProgress_RegionProgressDictEntry_DoNotUse() {}
PlayerStoryProgress_RegionProgressDictEntry_DoNotUse::PlayerStoryProgress_RegionProgressDictEntry_DoNotUse(::google::protobuf::Arena* arena)
    : SuperType(arena) {}
void PlayerStoryProgress_RegionProgressDictEntry_DoNotUse::MergeFrom(const PlayerStoryProgress_RegionProgressDictEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata PlayerStoryProgress_RegionProgressDictEntry_DoNotUse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_serializable_5fdata_2eproto);
  return ::file_level_metadata_serializable_5fdata_2eproto[51];
}
void PlayerStoryProgress_RegionProgressDictEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PlayerStoryProgress_RegionProgressDictEntry_DoNotUse::_ParseMap(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx) {
  using MF = ::google::protobuf::internal::MapField<
      PlayerStoryProgress_RegionProgressDictEntry_DoNotUse, EntryKeyType, EntryValueType,
      kEntryKeyFieldType, kEntryValueFieldType,
      kEntryDefaultEnumValue>;
  auto mf = static_cast<MF*>(object);
  Parser<MF, ::google::protobuf::Map<EntryKeyType, EntryValueType>> parser(mf);
#define DO_(x) if (!(x)) return false
  DO_(parser.ParseMap(begin, end));
#undef DO_
  return true;
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER


// ===================================================================

PlayerStoryProgress_LevelProgressDictEntry_DoNotUse::PlayerStoryProgress_LevelProgressDictEntry_DoNotUse() {}
PlayerStoryProgress_LevelProgressDictEntry_DoNotUse::PlayerStoryProgress_LevelProgressDictEntry_DoNotUse(::google::protobuf::Arena* arena)
    : SuperType(arena) {}
void PlayerStoryProgress_LevelProgressDictEntry_DoNotUse::MergeFrom(const PlayerStoryProgress_LevelProgressDictEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata PlayerStoryProgress_LevelProgressDictEntry_DoNotUse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_serializable_5fdata_2eproto);
  return ::file_level_metadata_serializable_5fdata_2eproto[52];
}
void PlayerStoryProgress_LevelProgressDictEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PlayerStoryProgress_LevelProgressDictEntry_DoNotUse::_ParseMap(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx) {
  using MF = ::google::protobuf::internal::MapField<
      PlayerStoryProgress_LevelProgressDictEntry_DoNotUse, EntryKeyType, EntryValueType,
      kEntryKeyFieldType, kEntryValueFieldType,
      kEntryDefaultEnumValue>;
  auto mf = static_cast<MF*>(object);
  Parser<MF, ::google::protobuf::Map<EntryKeyType, EntryValueType>> parser(mf);
#define DO_(x) if (!(x)) return false
  DO_(parser.ParseMap(begin, end));
#undef DO_
  return true;
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER


// ===================================================================

PlayerStoryProgress_ChUnlockProgressDictEntry_DoNotUse::PlayerStoryProgress_ChUnlockProgressDictEntry_DoNotUse() {}
PlayerStoryProgress_ChUnlockProgressDictEntry_DoNotUse::PlayerStoryProgress_ChUnlockProgressDictEntry_DoNotUse(::google::protobuf::Arena* arena)
    : SuperType(arena) {}
void PlayerStoryProgress_ChUnlockProgressDictEntry_DoNotUse::MergeFrom(const PlayerStoryProgress_ChUnlockProgressDictEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata PlayerStoryProgress_ChUnlockProgressDictEntry_DoNotUse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_serializable_5fdata_2eproto);
  return ::file_level_metadata_serializable_5fdata_2eproto[53];
}
void PlayerStoryProgress_ChUnlockProgressDictEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PlayerStoryProgress_ChUnlockProgressDictEntry_DoNotUse::_ParseMap(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx) {
  using MF = ::google::protobuf::internal::MapField<
      PlayerStoryProgress_ChUnlockProgressDictEntry_DoNotUse, EntryKeyType, EntryValueType,
      kEntryKeyFieldType, kEntryValueFieldType,
      kEntryDefaultEnumValue>;
  auto mf = static_cast<MF*>(object);
  Parser<MF, ::google::protobuf::Map<EntryKeyType, EntryValueType>> parser(mf);
#define DO_(x) if (!(x)) return false
  DO_(parser.ParseMap(begin, end));
#undef DO_
  return true;
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER


// ===================================================================

void PlayerStoryProgress::InitAsDefaultInstance() {
}
class PlayerStoryProgress::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PlayerStoryProgress::kRegionProgressDictFieldNumber;
const int PlayerStoryProgress::kLevelProgressDictFieldNumber;
const int PlayerStoryProgress::kCursorRegionIdFieldNumber;
const int PlayerStoryProgress::kCursorLevelIdFieldNumber;
const int PlayerStoryProgress::kViewFieldNumber;
const int PlayerStoryProgress::kSavedAtGmtMillisFieldNumber;
const int PlayerStoryProgress::kChUnlockProgressDictFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlayerStoryProgress::PlayerStoryProgress()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:shared.PlayerStoryProgress)
}
PlayerStoryProgress::PlayerStoryProgress(const PlayerStoryProgress& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  region_progress_dict_.MergeFrom(from.region_progress_dict_);
  level_progress_dict_.MergeFrom(from.level_progress_dict_);
  ch_unlock_progress_dict_.MergeFrom(from.ch_unlock_progress_dict_);
  ::memcpy(&cursor_region_id_, &from.cursor_region_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&view_) -
    reinterpret_cast<char*>(&cursor_region_id_)) + sizeof(view_));
  // @@protoc_insertion_point(copy_constructor:shared.PlayerStoryProgress)
}

void PlayerStoryProgress::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_PlayerStoryProgress_serializable_5fdata_2eproto.base);
  ::memset(&cursor_region_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&view_) -
      reinterpret_cast<char*>(&cursor_region_id_)) + sizeof(view_));
}

PlayerStoryProgress::~PlayerStoryProgress() {
  // @@protoc_insertion_point(destructor:shared.PlayerStoryProgress)
  SharedDtor();
}

void PlayerStoryProgress::SharedDtor() {
}

void PlayerStoryProgress::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PlayerStoryProgress& PlayerStoryProgress::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_PlayerStoryProgress_serializable_5fdata_2eproto.base);
  return *internal_default_instance();
}


void PlayerStoryProgress::Clear() {
// @@protoc_insertion_point(message_clear_start:shared.PlayerStoryProgress)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  region_progress_dict_.Clear();
  level_progress_dict_.Clear();
  ch_unlock_progress_dict_.Clear();
  ::memset(&cursor_region_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&view_) -
      reinterpret_cast<char*>(&cursor_region_id_)) + sizeof(view_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PlayerStoryProgress::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<PlayerStoryProgress*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // map<int32, .shared.PlayerRegionProgress> region_progress_dict = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::protobuf::internal::SlowMapEntryParser;
          auto parse_map = ::shared::PlayerStoryProgress_RegionProgressDictEntry_DoNotUse::_ParseMap;
          ctx->extra_parse_data().payload.clear();
          ctx->extra_parse_data().parse_map = parse_map;
          object = &msg->region_progress_dict_;
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(parse_map(ptr, newend, object, ctx));
          ptr = newend;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      // map<int32, .shared.PlayerLevelProgress> level_progress_dict = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::protobuf::internal::SlowMapEntryParser;
          auto parse_map = ::shared::PlayerStoryProgress_LevelProgressDictEntry_DoNotUse::_ParseMap;
          ctx->extra_parse_data().payload.clear();
          ctx->extra_parse_data().parse_map = parse_map;
          object = &msg->level_progress_dict_;
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(parse_map(ptr, newend, object, ctx));
          ptr = newend;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 18 && (ptr += 1));
        break;
      }
      // int32 cursor_region_id = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_cursor_region_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 cursor_level_id = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_cursor_level_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // .shared.PlayerStoryModeSelectView view = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_view(static_cast<::shared::PlayerStoryModeSelectView>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // uint64 saved_at_gmt_millis = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_saved_at_gmt_millis(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // map<uint32, .shared.PlayerChUnlockProgress> ch_unlock_progress_dict = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 58) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::protobuf::internal::SlowMapEntryParser;
          auto parse_map = ::shared::PlayerStoryProgress_ChUnlockProgressDictEntry_DoNotUse::_ParseMap;
          ctx->extra_parse_data().payload.clear();
          ctx->extra_parse_data().parse_map = parse_map;
          object = &msg->ch_unlock_progress_dict_;
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(parse_map(ptr, newend, object, ctx));
          ptr = newend;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 58 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PlayerStoryProgress::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:shared.PlayerStoryProgress)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // map<int32, .shared.PlayerRegionProgress> region_progress_dict = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          PlayerStoryProgress_RegionProgressDictEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              PlayerStoryProgress_RegionProgressDictEntry_DoNotUse,
              ::google::protobuf::int32, ::shared::PlayerRegionProgress,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::google::protobuf::int32, ::shared::PlayerRegionProgress > > parser(&region_progress_dict_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<int32, .shared.PlayerLevelProgress> level_progress_dict = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          PlayerStoryProgress_LevelProgressDictEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              PlayerStoryProgress_LevelProgressDictEntry_DoNotUse,
              ::google::protobuf::int32, ::shared::PlayerLevelProgress,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::google::protobuf::int32, ::shared::PlayerLevelProgress > > parser(&level_progress_dict_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 cursor_region_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cursor_region_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 cursor_level_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cursor_level_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .shared.PlayerStoryModeSelectView view = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_view(static_cast< ::shared::PlayerStoryModeSelectView >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 saved_at_gmt_millis = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &saved_at_gmt_millis_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<uint32, .shared.PlayerChUnlockProgress> ch_unlock_progress_dict = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (58 & 0xFF)) {
          PlayerStoryProgress_ChUnlockProgressDictEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              PlayerStoryProgress_ChUnlockProgressDictEntry_DoNotUse,
              ::google::protobuf::uint32, ::shared::PlayerChUnlockProgress,
              ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::google::protobuf::uint32, ::shared::PlayerChUnlockProgress > > parser(&ch_unlock_progress_dict_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:shared.PlayerStoryProgress)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:shared.PlayerStoryProgress)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PlayerStoryProgress::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:shared.PlayerStoryProgress)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<int32, .shared.PlayerRegionProgress> region_progress_dict = 1;
  if (!this->region_progress_dict().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::int32, ::shared::PlayerRegionProgress >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::int32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (output->IsSerializationDeterministic() &&
        this->region_progress_dict().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->region_progress_dict().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::int32, ::shared::PlayerRegionProgress >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::shared::PlayerRegionProgress >::const_iterator
          it = this->region_progress_dict().begin();
          it != this->region_progress_dict().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<PlayerStoryProgress_RegionProgressDictEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(region_progress_dict_.NewEntryWrapper(items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(1, *entry, output);
      }
    } else {
      ::std::unique_ptr<PlayerStoryProgress_RegionProgressDictEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::shared::PlayerRegionProgress >::const_iterator
          it = this->region_progress_dict().begin();
          it != this->region_progress_dict().end(); ++it) {
        entry.reset(region_progress_dict_.NewEntryWrapper(it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(1, *entry, output);
      }
    }
  }

  // map<int32, .shared.PlayerLevelProgress> level_progress_dict = 2;
  if (!this->level_progress_dict().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::int32, ::shared::PlayerLevelProgress >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::int32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (output->IsSerializationDeterministic() &&
        this->level_progress_dict().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->level_progress_dict().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::int32, ::shared::PlayerLevelProgress >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::shared::PlayerLevelProgress >::const_iterator
          it = this->level_progress_dict().begin();
          it != this->level_progress_dict().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<PlayerStoryProgress_LevelProgressDictEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(level_progress_dict_.NewEntryWrapper(items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(2, *entry, output);
      }
    } else {
      ::std::unique_ptr<PlayerStoryProgress_LevelProgressDictEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::shared::PlayerLevelProgress >::const_iterator
          it = this->level_progress_dict().begin();
          it != this->level_progress_dict().end(); ++it) {
        entry.reset(level_progress_dict_.NewEntryWrapper(it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(2, *entry, output);
      }
    }
  }

  // int32 cursor_region_id = 3;
  if (this->cursor_region_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->cursor_region_id(), output);
  }

  // int32 cursor_level_id = 4;
  if (this->cursor_level_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->cursor_level_id(), output);
  }

  // .shared.PlayerStoryModeSelectView view = 5;
  if (this->view() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->view(), output);
  }

  // uint64 saved_at_gmt_millis = 6;
  if (this->saved_at_gmt_millis() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->saved_at_gmt_millis(), output);
  }

  // map<uint32, .shared.PlayerChUnlockProgress> ch_unlock_progress_dict = 7;
  if (!this->ch_unlock_progress_dict().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::shared::PlayerChUnlockProgress >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::uint32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (output->IsSerializationDeterministic() &&
        this->ch_unlock_progress_dict().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->ch_unlock_progress_dict().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::shared::PlayerChUnlockProgress >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::shared::PlayerChUnlockProgress >::const_iterator
          it = this->ch_unlock_progress_dict().begin();
          it != this->ch_unlock_progress_dict().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<PlayerStoryProgress_ChUnlockProgressDictEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(ch_unlock_progress_dict_.NewEntryWrapper(items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(7, *entry, output);
      }
    } else {
      ::std::unique_ptr<PlayerStoryProgress_ChUnlockProgressDictEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::shared::PlayerChUnlockProgress >::const_iterator
          it = this->ch_unlock_progress_dict().begin();
          it != this->ch_unlock_progress_dict().end(); ++it) {
        entry.reset(ch_unlock_progress_dict_.NewEntryWrapper(it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(7, *entry, output);
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:shared.PlayerStoryProgress)
}

::google::protobuf::uint8* PlayerStoryProgress::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:shared.PlayerStoryProgress)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<int32, .shared.PlayerRegionProgress> region_progress_dict = 1;
  if (!this->region_progress_dict().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::int32, ::shared::PlayerRegionProgress >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::int32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (false &&
        this->region_progress_dict().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->region_progress_dict().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::int32, ::shared::PlayerRegionProgress >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::shared::PlayerRegionProgress >::const_iterator
          it = this->region_progress_dict().begin();
          it != this->region_progress_dict().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<PlayerStoryProgress_RegionProgressDictEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(region_progress_dict_.NewEntryWrapper(items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(1, *entry, target);
      }
    } else {
      ::std::unique_ptr<PlayerStoryProgress_RegionProgressDictEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::shared::PlayerRegionProgress >::const_iterator
          it = this->region_progress_dict().begin();
          it != this->region_progress_dict().end(); ++it) {
        entry.reset(region_progress_dict_.NewEntryWrapper(it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(1, *entry, target);
      }
    }
  }

  // map<int32, .shared.PlayerLevelProgress> level_progress_dict = 2;
  if (!this->level_progress_dict().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::int32, ::shared::PlayerLevelProgress >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::int32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (false &&
        this->level_progress_dict().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->level_progress_dict().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::int32, ::shared::PlayerLevelProgress >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::shared::PlayerLevelProgress >::const_iterator
          it = this->level_progress_dict().begin();
          it != this->level_progress_dict().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<PlayerStoryProgress_LevelProgressDictEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(level_progress_dict_.NewEntryWrapper(items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(2, *entry, target);
      }
    } else {
      ::std::unique_ptr<PlayerStoryProgress_LevelProgressDictEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::shared::PlayerLevelProgress >::const_iterator
          it = this->level_progress_dict().begin();
          it != this->level_progress_dict().end(); ++it) {
        entry.reset(level_progress_dict_.NewEntryWrapper(it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(2, *entry, target);
      }
    }
  }

  // int32 cursor_region_id = 3;
  if (this->cursor_region_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->cursor_region_id(), target);
  }

  // int32 cursor_level_id = 4;
  if (this->cursor_level_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->cursor_level_id(), target);
  }

  // .shared.PlayerStoryModeSelectView view = 5;
  if (this->view() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->view(), target);
  }

  // uint64 saved_at_gmt_millis = 6;
  if (this->saved_at_gmt_millis() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->saved_at_gmt_millis(), target);
  }

  // map<uint32, .shared.PlayerChUnlockProgress> ch_unlock_progress_dict = 7;
  if (!this->ch_unlock_progress_dict().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::shared::PlayerChUnlockProgress >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::uint32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (false &&
        this->ch_unlock_progress_dict().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->ch_unlock_progress_dict().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::shared::PlayerChUnlockProgress >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::shared::PlayerChUnlockProgress >::const_iterator
          it = this->ch_unlock_progress_dict().begin();
          it != this->ch_unlock_progress_dict().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<PlayerStoryProgress_ChUnlockProgressDictEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(ch_unlock_progress_dict_.NewEntryWrapper(items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(7, *entry, target);
      }
    } else {
      ::std::unique_ptr<PlayerStoryProgress_ChUnlockProgressDictEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::shared::PlayerChUnlockProgress >::const_iterator
          it = this->ch_unlock_progress_dict().begin();
          it != this->ch_unlock_progress_dict().end(); ++it) {
        entry.reset(ch_unlock_progress_dict_.NewEntryWrapper(it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(7, *entry, target);
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:shared.PlayerStoryProgress)
  return target;
}

size_t PlayerStoryProgress::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:shared.PlayerStoryProgress)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<int32, .shared.PlayerRegionProgress> region_progress_dict = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->region_progress_dict_size());
  {
    ::std::unique_ptr<PlayerStoryProgress_RegionProgressDictEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::google::protobuf::int32, ::shared::PlayerRegionProgress >::const_iterator
        it = this->region_progress_dict().begin();
        it != this->region_progress_dict().end(); ++it) {
      entry.reset(region_progress_dict_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // map<int32, .shared.PlayerLevelProgress> level_progress_dict = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->level_progress_dict_size());
  {
    ::std::unique_ptr<PlayerStoryProgress_LevelProgressDictEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::google::protobuf::int32, ::shared::PlayerLevelProgress >::const_iterator
        it = this->level_progress_dict().begin();
        it != this->level_progress_dict().end(); ++it) {
      entry.reset(level_progress_dict_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // map<uint32, .shared.PlayerChUnlockProgress> ch_unlock_progress_dict = 7;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->ch_unlock_progress_dict_size());
  {
    ::std::unique_ptr<PlayerStoryProgress_ChUnlockProgressDictEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::google::protobuf::uint32, ::shared::PlayerChUnlockProgress >::const_iterator
        it = this->ch_unlock_progress_dict().begin();
        it != this->ch_unlock_progress_dict().end(); ++it) {
      entry.reset(ch_unlock_progress_dict_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // int32 cursor_region_id = 3;
  if (this->cursor_region_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->cursor_region_id());
  }

  // int32 cursor_level_id = 4;
  if (this->cursor_level_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->cursor_level_id());
  }

  // uint64 saved_at_gmt_millis = 6;
  if (this->saved_at_gmt_millis() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->saved_at_gmt_millis());
  }

  // .shared.PlayerStoryModeSelectView view = 5;
  if (this->view() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->view());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlayerStoryProgress::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:shared.PlayerStoryProgress)
  GOOGLE_DCHECK_NE(&from, this);
  const PlayerStoryProgress* source =
      ::google::protobuf::DynamicCastToGenerated<PlayerStoryProgress>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:shared.PlayerStoryProgress)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:shared.PlayerStoryProgress)
    MergeFrom(*source);
  }
}

void PlayerStoryProgress::MergeFrom(const PlayerStoryProgress& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:shared.PlayerStoryProgress)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  region_progress_dict_.MergeFrom(from.region_progress_dict_);
  level_progress_dict_.MergeFrom(from.level_progress_dict_);
  ch_unlock_progress_dict_.MergeFrom(from.ch_unlock_progress_dict_);
  if (from.cursor_region_id() != 0) {
    set_cursor_region_id(from.cursor_region_id());
  }
  if (from.cursor_level_id() != 0) {
    set_cursor_level_id(from.cursor_level_id());
  }
  if (from.saved_at_gmt_millis() != 0) {
    set_saved_at_gmt_millis(from.saved_at_gmt_millis());
  }
  if (from.view() != 0) {
    set_view(from.view());
  }
}

void PlayerStoryProgress::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:shared.PlayerStoryProgress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerStoryProgress::CopyFrom(const PlayerStoryProgress& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:shared.PlayerStoryProgress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerStoryProgress::IsInitialized() const {
  return true;
}

void PlayerStoryProgress::Swap(PlayerStoryProgress* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlayerStoryProgress::InternalSwap(PlayerStoryProgress* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  region_progress_dict_.Swap(&other->region_progress_dict_);
  level_progress_dict_.Swap(&other->level_progress_dict_);
  ch_unlock_progress_dict_.Swap(&other->ch_unlock_progress_dict_);
  swap(cursor_region_id_, other->cursor_region_id_);
  swap(cursor_level_id_, other->cursor_level_id_);
  swap(saved_at_gmt_millis_, other->saved_at_gmt_millis_);
  swap(view_, other->view_);
}

::google::protobuf::Metadata PlayerStoryProgress::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_serializable_5fdata_2eproto);
  return ::file_level_metadata_serializable_5fdata_2eproto[kIndexInFileMessages];
}


// ===================================================================

PlayerOnlineArenaProgress_ChUnlockProgressDictEntry_DoNotUse::PlayerOnlineArenaProgress_ChUnlockProgressDictEntry_DoNotUse() {}
PlayerOnlineArenaProgress_ChUnlockProgressDictEntry_DoNotUse::PlayerOnlineArenaProgress_ChUnlockProgressDictEntry_DoNotUse(::google::protobuf::Arena* arena)
    : SuperType(arena) {}
void PlayerOnlineArenaProgress_ChUnlockProgressDictEntry_DoNotUse::MergeFrom(const PlayerOnlineArenaProgress_ChUnlockProgressDictEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata PlayerOnlineArenaProgress_ChUnlockProgressDictEntry_DoNotUse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_serializable_5fdata_2eproto);
  return ::file_level_metadata_serializable_5fdata_2eproto[55];
}
void PlayerOnlineArenaProgress_ChUnlockProgressDictEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PlayerOnlineArenaProgress_ChUnlockProgressDictEntry_DoNotUse::_ParseMap(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx) {
  using MF = ::google::protobuf::internal::MapField<
      PlayerOnlineArenaProgress_ChUnlockProgressDictEntry_DoNotUse, EntryKeyType, EntryValueType,
      kEntryKeyFieldType, kEntryValueFieldType,
      kEntryDefaultEnumValue>;
  auto mf = static_cast<MF*>(object);
  Parser<MF, ::google::protobuf::Map<EntryKeyType, EntryValueType>> parser(mf);
#define DO_(x) if (!(x)) return false
  DO_(parser.ParseMap(begin, end));
#undef DO_
  return true;
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER


// ===================================================================

void PlayerOnlineArenaProgress::InitAsDefaultInstance() {
}
class PlayerOnlineArenaProgress::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PlayerOnlineArenaProgress::kSavedAtGmtMillisFieldNumber;
const int PlayerOnlineArenaProgress::kPlayerIdFieldNumber;
const int PlayerOnlineArenaProgress::kChUnlockProgressDictFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlayerOnlineArenaProgress::PlayerOnlineArenaProgress()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:shared.PlayerOnlineArenaProgress)
}
PlayerOnlineArenaProgress::PlayerOnlineArenaProgress(const PlayerOnlineArenaProgress& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ch_unlock_progress_dict_.MergeFrom(from.ch_unlock_progress_dict_);
  player_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.player_id().size() > 0) {
    player_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.player_id_);
  }
  saved_at_gmt_millis_ = from.saved_at_gmt_millis_;
  // @@protoc_insertion_point(copy_constructor:shared.PlayerOnlineArenaProgress)
}

void PlayerOnlineArenaProgress::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_PlayerOnlineArenaProgress_serializable_5fdata_2eproto.base);
  player_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  saved_at_gmt_millis_ = PROTOBUF_ULONGLONG(0);
}

PlayerOnlineArenaProgress::~PlayerOnlineArenaProgress() {
  // @@protoc_insertion_point(destructor:shared.PlayerOnlineArenaProgress)
  SharedDtor();
}

void PlayerOnlineArenaProgress::SharedDtor() {
  player_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void PlayerOnlineArenaProgress::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PlayerOnlineArenaProgress& PlayerOnlineArenaProgress::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_PlayerOnlineArenaProgress_serializable_5fdata_2eproto.base);
  return *internal_default_instance();
}


void PlayerOnlineArenaProgress::Clear() {
// @@protoc_insertion_point(message_clear_start:shared.PlayerOnlineArenaProgress)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ch_unlock_progress_dict_.Clear();
  player_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  saved_at_gmt_millis_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PlayerOnlineArenaProgress::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<PlayerOnlineArenaProgress*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // uint64 saved_at_gmt_millis = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_saved_at_gmt_millis(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string player_id = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("shared.PlayerOnlineArenaProgress.player_id");
        object = msg->mutable_player_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // map<uint32, .shared.PlayerChUnlockProgress> ch_unlock_progress_dict = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::protobuf::internal::SlowMapEntryParser;
          auto parse_map = ::shared::PlayerOnlineArenaProgress_ChUnlockProgressDictEntry_DoNotUse::_ParseMap;
          ctx->extra_parse_data().payload.clear();
          ctx->extra_parse_data().parse_map = parse_map;
          object = &msg->ch_unlock_progress_dict_;
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(parse_map(ptr, newend, object, ctx));
          ptr = newend;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 26 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PlayerOnlineArenaProgress::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:shared.PlayerOnlineArenaProgress)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 saved_at_gmt_millis = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &saved_at_gmt_millis_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string player_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_player_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->player_id().data(), static_cast<int>(this->player_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "shared.PlayerOnlineArenaProgress.player_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<uint32, .shared.PlayerChUnlockProgress> ch_unlock_progress_dict = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          PlayerOnlineArenaProgress_ChUnlockProgressDictEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              PlayerOnlineArenaProgress_ChUnlockProgressDictEntry_DoNotUse,
              ::google::protobuf::uint32, ::shared::PlayerChUnlockProgress,
              ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::google::protobuf::uint32, ::shared::PlayerChUnlockProgress > > parser(&ch_unlock_progress_dict_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:shared.PlayerOnlineArenaProgress)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:shared.PlayerOnlineArenaProgress)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PlayerOnlineArenaProgress::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:shared.PlayerOnlineArenaProgress)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 saved_at_gmt_millis = 1;
  if (this->saved_at_gmt_millis() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->saved_at_gmt_millis(), output);
  }

  // string player_id = 2;
  if (this->player_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->player_id().data(), static_cast<int>(this->player_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "shared.PlayerOnlineArenaProgress.player_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->player_id(), output);
  }

  // map<uint32, .shared.PlayerChUnlockProgress> ch_unlock_progress_dict = 3;
  if (!this->ch_unlock_progress_dict().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::shared::PlayerChUnlockProgress >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::uint32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (output->IsSerializationDeterministic() &&
        this->ch_unlock_progress_dict().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->ch_unlock_progress_dict().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::shared::PlayerChUnlockProgress >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::shared::PlayerChUnlockProgress >::const_iterator
          it = this->ch_unlock_progress_dict().begin();
          it != this->ch_unlock_progress_dict().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<PlayerOnlineArenaProgress_ChUnlockProgressDictEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(ch_unlock_progress_dict_.NewEntryWrapper(items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(3, *entry, output);
      }
    } else {
      ::std::unique_ptr<PlayerOnlineArenaProgress_ChUnlockProgressDictEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::shared::PlayerChUnlockProgress >::const_iterator
          it = this->ch_unlock_progress_dict().begin();
          it != this->ch_unlock_progress_dict().end(); ++it) {
        entry.reset(ch_unlock_progress_dict_.NewEntryWrapper(it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(3, *entry, output);
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:shared.PlayerOnlineArenaProgress)
}

::google::protobuf::uint8* PlayerOnlineArenaProgress::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:shared.PlayerOnlineArenaProgress)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 saved_at_gmt_millis = 1;
  if (this->saved_at_gmt_millis() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->saved_at_gmt_millis(), target);
  }

  // string player_id = 2;
  if (this->player_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->player_id().data(), static_cast<int>(this->player_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "shared.PlayerOnlineArenaProgress.player_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->player_id(), target);
  }

  // map<uint32, .shared.PlayerChUnlockProgress> ch_unlock_progress_dict = 3;
  if (!this->ch_unlock_progress_dict().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::shared::PlayerChUnlockProgress >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::uint32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (false &&
        this->ch_unlock_progress_dict().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->ch_unlock_progress_dict().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::shared::PlayerChUnlockProgress >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::shared::PlayerChUnlockProgress >::const_iterator
          it = this->ch_unlock_progress_dict().begin();
          it != this->ch_unlock_progress_dict().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<PlayerOnlineArenaProgress_ChUnlockProgressDictEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(ch_unlock_progress_dict_.NewEntryWrapper(items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(3, *entry, target);
      }
    } else {
      ::std::unique_ptr<PlayerOnlineArenaProgress_ChUnlockProgressDictEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::shared::PlayerChUnlockProgress >::const_iterator
          it = this->ch_unlock_progress_dict().begin();
          it != this->ch_unlock_progress_dict().end(); ++it) {
        entry.reset(ch_unlock_progress_dict_.NewEntryWrapper(it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(3, *entry, target);
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:shared.PlayerOnlineArenaProgress)
  return target;
}

size_t PlayerOnlineArenaProgress::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:shared.PlayerOnlineArenaProgress)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<uint32, .shared.PlayerChUnlockProgress> ch_unlock_progress_dict = 3;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->ch_unlock_progress_dict_size());
  {
    ::std::unique_ptr<PlayerOnlineArenaProgress_ChUnlockProgressDictEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::google::protobuf::uint32, ::shared::PlayerChUnlockProgress >::const_iterator
        it = this->ch_unlock_progress_dict().begin();
        it != this->ch_unlock_progress_dict().end(); ++it) {
      entry.reset(ch_unlock_progress_dict_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // string player_id = 2;
  if (this->player_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->player_id());
  }

  // uint64 saved_at_gmt_millis = 1;
  if (this->saved_at_gmt_millis() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->saved_at_gmt_millis());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlayerOnlineArenaProgress::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:shared.PlayerOnlineArenaProgress)
  GOOGLE_DCHECK_NE(&from, this);
  const PlayerOnlineArenaProgress* source =
      ::google::protobuf::DynamicCastToGenerated<PlayerOnlineArenaProgress>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:shared.PlayerOnlineArenaProgress)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:shared.PlayerOnlineArenaProgress)
    MergeFrom(*source);
  }
}

void PlayerOnlineArenaProgress::MergeFrom(const PlayerOnlineArenaProgress& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:shared.PlayerOnlineArenaProgress)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ch_unlock_progress_dict_.MergeFrom(from.ch_unlock_progress_dict_);
  if (from.player_id().size() > 0) {

    player_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.player_id_);
  }
  if (from.saved_at_gmt_millis() != 0) {
    set_saved_at_gmt_millis(from.saved_at_gmt_millis());
  }
}

void PlayerOnlineArenaProgress::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:shared.PlayerOnlineArenaProgress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerOnlineArenaProgress::CopyFrom(const PlayerOnlineArenaProgress& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:shared.PlayerOnlineArenaProgress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerOnlineArenaProgress::IsInitialized() const {
  return true;
}

void PlayerOnlineArenaProgress::Swap(PlayerOnlineArenaProgress* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlayerOnlineArenaProgress::InternalSwap(PlayerOnlineArenaProgress* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  ch_unlock_progress_dict_.Swap(&other->ch_unlock_progress_dict_);
  player_id_.Swap(&other->player_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(saved_at_gmt_millis_, other->saved_at_gmt_millis_);
}

::google::protobuf::Metadata PlayerOnlineArenaProgress::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_serializable_5fdata_2eproto);
  return ::file_level_metadata_serializable_5fdata_2eproto[kIndexInFileMessages];
}


// ===================================================================

void StoryPointDialogLine::InitAsDefaultInstance() {
}
class StoryPointDialogLine::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StoryPointDialogLine::kNarratorJoinIndexFieldNumber;
const int StoryPointDialogLine::kNarratorSpeciesIdFieldNumber;
const int StoryPointDialogLine::kContentFieldNumber;
const int StoryPointDialogLine::kDownOrNotFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StoryPointDialogLine::StoryPointDialogLine()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:shared.StoryPointDialogLine)
}
StoryPointDialogLine::StoryPointDialogLine(const StoryPointDialogLine& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.content().size() > 0) {
    content_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.content_);
  }
  ::memcpy(&narrator_join_index_, &from.narrator_join_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&down_or_not_) -
    reinterpret_cast<char*>(&narrator_join_index_)) + sizeof(down_or_not_));
  // @@protoc_insertion_point(copy_constructor:shared.StoryPointDialogLine)
}

void StoryPointDialogLine::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_StoryPointDialogLine_serializable_5fdata_2eproto.base);
  content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&narrator_join_index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&down_or_not_) -
      reinterpret_cast<char*>(&narrator_join_index_)) + sizeof(down_or_not_));
}

StoryPointDialogLine::~StoryPointDialogLine() {
  // @@protoc_insertion_point(destructor:shared.StoryPointDialogLine)
  SharedDtor();
}

void StoryPointDialogLine::SharedDtor() {
  content_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void StoryPointDialogLine::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StoryPointDialogLine& StoryPointDialogLine::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_StoryPointDialogLine_serializable_5fdata_2eproto.base);
  return *internal_default_instance();
}


void StoryPointDialogLine::Clear() {
// @@protoc_insertion_point(message_clear_start:shared.StoryPointDialogLine)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&narrator_join_index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&down_or_not_) -
      reinterpret_cast<char*>(&narrator_join_index_)) + sizeof(down_or_not_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* StoryPointDialogLine::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<StoryPointDialogLine*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int32 narrator_join_index = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_narrator_join_index(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // uint32 narrator_species_id = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_narrator_species_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string content = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("shared.StoryPointDialogLine.content");
        object = msg->mutable_content();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // bool down_or_not = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_down_or_not(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool StoryPointDialogLine::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:shared.StoryPointDialogLine)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 narrator_join_index = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &narrator_join_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 narrator_species_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &narrator_species_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string content = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->content().data(), static_cast<int>(this->content().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "shared.StoryPointDialogLine.content"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool down_or_not = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &down_or_not_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:shared.StoryPointDialogLine)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:shared.StoryPointDialogLine)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void StoryPointDialogLine::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:shared.StoryPointDialogLine)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 narrator_join_index = 1;
  if (this->narrator_join_index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->narrator_join_index(), output);
  }

  // uint32 narrator_species_id = 2;
  if (this->narrator_species_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->narrator_species_id(), output);
  }

  // string content = 3;
  if (this->content().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->content().data(), static_cast<int>(this->content().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "shared.StoryPointDialogLine.content");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->content(), output);
  }

  // bool down_or_not = 4;
  if (this->down_or_not() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->down_or_not(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:shared.StoryPointDialogLine)
}

::google::protobuf::uint8* StoryPointDialogLine::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:shared.StoryPointDialogLine)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 narrator_join_index = 1;
  if (this->narrator_join_index() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->narrator_join_index(), target);
  }

  // uint32 narrator_species_id = 2;
  if (this->narrator_species_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->narrator_species_id(), target);
  }

  // string content = 3;
  if (this->content().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->content().data(), static_cast<int>(this->content().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "shared.StoryPointDialogLine.content");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->content(), target);
  }

  // bool down_or_not = 4;
  if (this->down_or_not() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->down_or_not(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:shared.StoryPointDialogLine)
  return target;
}

size_t StoryPointDialogLine::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:shared.StoryPointDialogLine)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string content = 3;
  if (this->content().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->content());
  }

  // int32 narrator_join_index = 1;
  if (this->narrator_join_index() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->narrator_join_index());
  }

  // uint32 narrator_species_id = 2;
  if (this->narrator_species_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->narrator_species_id());
  }

  // bool down_or_not = 4;
  if (this->down_or_not() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StoryPointDialogLine::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:shared.StoryPointDialogLine)
  GOOGLE_DCHECK_NE(&from, this);
  const StoryPointDialogLine* source =
      ::google::protobuf::DynamicCastToGenerated<StoryPointDialogLine>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:shared.StoryPointDialogLine)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:shared.StoryPointDialogLine)
    MergeFrom(*source);
  }
}

void StoryPointDialogLine::MergeFrom(const StoryPointDialogLine& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:shared.StoryPointDialogLine)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.content().size() > 0) {

    content_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.content_);
  }
  if (from.narrator_join_index() != 0) {
    set_narrator_join_index(from.narrator_join_index());
  }
  if (from.narrator_species_id() != 0) {
    set_narrator_species_id(from.narrator_species_id());
  }
  if (from.down_or_not() != 0) {
    set_down_or_not(from.down_or_not());
  }
}

void StoryPointDialogLine::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:shared.StoryPointDialogLine)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StoryPointDialogLine::CopyFrom(const StoryPointDialogLine& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:shared.StoryPointDialogLine)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StoryPointDialogLine::IsInitialized() const {
  return true;
}

void StoryPointDialogLine::Swap(StoryPointDialogLine* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StoryPointDialogLine::InternalSwap(StoryPointDialogLine* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  content_.Swap(&other->content_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(narrator_join_index_, other->narrator_join_index_);
  swap(narrator_species_id_, other->narrator_species_id_);
  swap(down_or_not_, other->down_or_not_);
}

::google::protobuf::Metadata StoryPointDialogLine::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_serializable_5fdata_2eproto);
  return ::file_level_metadata_serializable_5fdata_2eproto[kIndexInFileMessages];
}


// ===================================================================

void StoryPointStep::InitAsDefaultInstance() {
}
class StoryPointStep::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StoryPointStep::kLinesFieldNumber;
const int StoryPointStep::kNonctrlAliveRdfCountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StoryPointStep::StoryPointStep()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:shared.StoryPointStep)
}
StoryPointStep::StoryPointStep(const StoryPointStep& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      lines_(from.lines_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  nonctrl_alive_rdf_count_ = from.nonctrl_alive_rdf_count_;
  // @@protoc_insertion_point(copy_constructor:shared.StoryPointStep)
}

void StoryPointStep::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_StoryPointStep_serializable_5fdata_2eproto.base);
  nonctrl_alive_rdf_count_ = 0;
}

StoryPointStep::~StoryPointStep() {
  // @@protoc_insertion_point(destructor:shared.StoryPointStep)
  SharedDtor();
}

void StoryPointStep::SharedDtor() {
}

void StoryPointStep::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StoryPointStep& StoryPointStep::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_StoryPointStep_serializable_5fdata_2eproto.base);
  return *internal_default_instance();
}


void StoryPointStep::Clear() {
// @@protoc_insertion_point(message_clear_start:shared.StoryPointStep)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  lines_.Clear();
  nonctrl_alive_rdf_count_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* StoryPointStep::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<StoryPointStep*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .shared.StoryPointDialogLine lines = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::shared::StoryPointDialogLine::_InternalParse;
          object = msg->add_lines();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      // int32 nonctrl_alive_rdf_count = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_nonctrl_alive_rdf_count(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool StoryPointStep::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:shared.StoryPointStep)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .shared.StoryPointDialogLine lines = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_lines()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 nonctrl_alive_rdf_count = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nonctrl_alive_rdf_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:shared.StoryPointStep)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:shared.StoryPointStep)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void StoryPointStep::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:shared.StoryPointStep)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .shared.StoryPointDialogLine lines = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->lines_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->lines(static_cast<int>(i)),
      output);
  }

  // int32 nonctrl_alive_rdf_count = 2;
  if (this->nonctrl_alive_rdf_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->nonctrl_alive_rdf_count(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:shared.StoryPointStep)
}

::google::protobuf::uint8* StoryPointStep::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:shared.StoryPointStep)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .shared.StoryPointDialogLine lines = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->lines_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->lines(static_cast<int>(i)), target);
  }

  // int32 nonctrl_alive_rdf_count = 2;
  if (this->nonctrl_alive_rdf_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->nonctrl_alive_rdf_count(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:shared.StoryPointStep)
  return target;
}

size_t StoryPointStep::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:shared.StoryPointStep)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .shared.StoryPointDialogLine lines = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->lines_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->lines(static_cast<int>(i)));
    }
  }

  // int32 nonctrl_alive_rdf_count = 2;
  if (this->nonctrl_alive_rdf_count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->nonctrl_alive_rdf_count());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StoryPointStep::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:shared.StoryPointStep)
  GOOGLE_DCHECK_NE(&from, this);
  const StoryPointStep* source =
      ::google::protobuf::DynamicCastToGenerated<StoryPointStep>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:shared.StoryPointStep)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:shared.StoryPointStep)
    MergeFrom(*source);
  }
}

void StoryPointStep::MergeFrom(const StoryPointStep& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:shared.StoryPointStep)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  lines_.MergeFrom(from.lines_);
  if (from.nonctrl_alive_rdf_count() != 0) {
    set_nonctrl_alive_rdf_count(from.nonctrl_alive_rdf_count());
  }
}

void StoryPointStep::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:shared.StoryPointStep)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StoryPointStep::CopyFrom(const StoryPointStep& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:shared.StoryPointStep)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StoryPointStep::IsInitialized() const {
  return true;
}

void StoryPointStep::Swap(StoryPointStep* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StoryPointStep::InternalSwap(StoryPointStep* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&lines_)->InternalSwap(CastToBase(&other->lines_));
  swap(nonctrl_alive_rdf_count_, other->nonctrl_alive_rdf_count_);
}

::google::protobuf::Metadata StoryPointStep::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_serializable_5fdata_2eproto);
  return ::file_level_metadata_serializable_5fdata_2eproto[kIndexInFileMessages];
}


// ===================================================================

void StoryPoint::InitAsDefaultInstance() {
}
class StoryPoint::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StoryPoint::kStepsFieldNumber;
const int StoryPoint::kNonctrlFieldNumber;
const int StoryPoint::kCutsceneNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StoryPoint::StoryPoint()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:shared.StoryPoint)
}
StoryPoint::StoryPoint(const StoryPoint& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      steps_(from.steps_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  cutscene_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.cutscene_name().size() > 0) {
    cutscene_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cutscene_name_);
  }
  nonctrl_ = from.nonctrl_;
  // @@protoc_insertion_point(copy_constructor:shared.StoryPoint)
}

void StoryPoint::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_StoryPoint_serializable_5fdata_2eproto.base);
  cutscene_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nonctrl_ = false;
}

StoryPoint::~StoryPoint() {
  // @@protoc_insertion_point(destructor:shared.StoryPoint)
  SharedDtor();
}

void StoryPoint::SharedDtor() {
  cutscene_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void StoryPoint::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StoryPoint& StoryPoint::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_StoryPoint_serializable_5fdata_2eproto.base);
  return *internal_default_instance();
}


void StoryPoint::Clear() {
// @@protoc_insertion_point(message_clear_start:shared.StoryPoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  steps_.Clear();
  cutscene_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nonctrl_ = false;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* StoryPoint::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<StoryPoint*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .shared.StoryPointStep steps = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::shared::StoryPointStep::_InternalParse;
          object = msg->add_steps();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      // bool nonctrl = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_nonctrl(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string cutscene_name = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("shared.StoryPoint.cutscene_name");
        object = msg->mutable_cutscene_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool StoryPoint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:shared.StoryPoint)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .shared.StoryPointStep steps = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_steps()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool nonctrl = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &nonctrl_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string cutscene_name = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cutscene_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->cutscene_name().data(), static_cast<int>(this->cutscene_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "shared.StoryPoint.cutscene_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:shared.StoryPoint)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:shared.StoryPoint)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void StoryPoint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:shared.StoryPoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .shared.StoryPointStep steps = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->steps_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->steps(static_cast<int>(i)),
      output);
  }

  // bool nonctrl = 2;
  if (this->nonctrl() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->nonctrl(), output);
  }

  // string cutscene_name = 3;
  if (this->cutscene_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cutscene_name().data(), static_cast<int>(this->cutscene_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "shared.StoryPoint.cutscene_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->cutscene_name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:shared.StoryPoint)
}

::google::protobuf::uint8* StoryPoint::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:shared.StoryPoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .shared.StoryPointStep steps = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->steps_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->steps(static_cast<int>(i)), target);
  }

  // bool nonctrl = 2;
  if (this->nonctrl() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->nonctrl(), target);
  }

  // string cutscene_name = 3;
  if (this->cutscene_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cutscene_name().data(), static_cast<int>(this->cutscene_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "shared.StoryPoint.cutscene_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->cutscene_name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:shared.StoryPoint)
  return target;
}

size_t StoryPoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:shared.StoryPoint)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .shared.StoryPointStep steps = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->steps_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->steps(static_cast<int>(i)));
    }
  }

  // string cutscene_name = 3;
  if (this->cutscene_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->cutscene_name());
  }

  // bool nonctrl = 2;
  if (this->nonctrl() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StoryPoint::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:shared.StoryPoint)
  GOOGLE_DCHECK_NE(&from, this);
  const StoryPoint* source =
      ::google::protobuf::DynamicCastToGenerated<StoryPoint>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:shared.StoryPoint)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:shared.StoryPoint)
    MergeFrom(*source);
  }
}

void StoryPoint::MergeFrom(const StoryPoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:shared.StoryPoint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  steps_.MergeFrom(from.steps_);
  if (from.cutscene_name().size() > 0) {

    cutscene_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cutscene_name_);
  }
  if (from.nonctrl() != 0) {
    set_nonctrl(from.nonctrl());
  }
}

void StoryPoint::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:shared.StoryPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StoryPoint::CopyFrom(const StoryPoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:shared.StoryPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StoryPoint::IsInitialized() const {
  return true;
}

void StoryPoint::Swap(StoryPoint* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StoryPoint::InternalSwap(StoryPoint* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&steps_)->InternalSwap(CastToBase(&other->steps_));
  cutscene_name_.Swap(&other->cutscene_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(nonctrl_, other->nonctrl_);
}

::google::protobuf::Metadata StoryPoint::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_serializable_5fdata_2eproto);
  return ::file_level_metadata_serializable_5fdata_2eproto[kIndexInFileMessages];
}


// ===================================================================

LevelStory_PointsEntry_DoNotUse::LevelStory_PointsEntry_DoNotUse() {}
LevelStory_PointsEntry_DoNotUse::LevelStory_PointsEntry_DoNotUse(::google::protobuf::Arena* arena)
    : SuperType(arena) {}
void LevelStory_PointsEntry_DoNotUse::MergeFrom(const LevelStory_PointsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata LevelStory_PointsEntry_DoNotUse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_serializable_5fdata_2eproto);
  return ::file_level_metadata_serializable_5fdata_2eproto[60];
}
void LevelStory_PointsEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool LevelStory_PointsEntry_DoNotUse::_ParseMap(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx) {
  using MF = ::google::protobuf::internal::MapField<
      LevelStory_PointsEntry_DoNotUse, EntryKeyType, EntryValueType,
      kEntryKeyFieldType, kEntryValueFieldType,
      kEntryDefaultEnumValue>;
  auto mf = static_cast<MF*>(object);
  Parser<MF, ::google::protobuf::Map<EntryKeyType, EntryValueType>> parser(mf);
#define DO_(x) if (!(x)) return false
  DO_(parser.ParseMap(begin, end));
#undef DO_
  return true;
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER


// ===================================================================

void LevelStory::InitAsDefaultInstance() {
}
class LevelStory::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LevelStory::kPointsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LevelStory::LevelStory()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:shared.LevelStory)
}
LevelStory::LevelStory(const LevelStory& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  points_.MergeFrom(from.points_);
  // @@protoc_insertion_point(copy_constructor:shared.LevelStory)
}

void LevelStory::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_LevelStory_serializable_5fdata_2eproto.base);
}

LevelStory::~LevelStory() {
  // @@protoc_insertion_point(destructor:shared.LevelStory)
  SharedDtor();
}

void LevelStory::SharedDtor() {
}

void LevelStory::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LevelStory& LevelStory::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_LevelStory_serializable_5fdata_2eproto.base);
  return *internal_default_instance();
}


void LevelStory::Clear() {
// @@protoc_insertion_point(message_clear_start:shared.LevelStory)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  points_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* LevelStory::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<LevelStory*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // map<int32, .shared.StoryPoint> points = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::protobuf::internal::SlowMapEntryParser;
          auto parse_map = ::shared::LevelStory_PointsEntry_DoNotUse::_ParseMap;
          ctx->extra_parse_data().payload.clear();
          ctx->extra_parse_data().parse_map = parse_map;
          object = &msg->points_;
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(parse_map(ptr, newend, object, ctx));
          ptr = newend;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool LevelStory::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:shared.LevelStory)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // map<int32, .shared.StoryPoint> points = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          LevelStory_PointsEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              LevelStory_PointsEntry_DoNotUse,
              ::google::protobuf::int32, ::shared::StoryPoint,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::google::protobuf::int32, ::shared::StoryPoint > > parser(&points_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:shared.LevelStory)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:shared.LevelStory)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void LevelStory::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:shared.LevelStory)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<int32, .shared.StoryPoint> points = 1;
  if (!this->points().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::int32, ::shared::StoryPoint >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::int32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (output->IsSerializationDeterministic() &&
        this->points().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->points().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::int32, ::shared::StoryPoint >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::shared::StoryPoint >::const_iterator
          it = this->points().begin();
          it != this->points().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<LevelStory_PointsEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(points_.NewEntryWrapper(items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(1, *entry, output);
      }
    } else {
      ::std::unique_ptr<LevelStory_PointsEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::shared::StoryPoint >::const_iterator
          it = this->points().begin();
          it != this->points().end(); ++it) {
        entry.reset(points_.NewEntryWrapper(it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(1, *entry, output);
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:shared.LevelStory)
}

::google::protobuf::uint8* LevelStory::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:shared.LevelStory)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<int32, .shared.StoryPoint> points = 1;
  if (!this->points().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::int32, ::shared::StoryPoint >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::int32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (false &&
        this->points().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->points().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::int32, ::shared::StoryPoint >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::shared::StoryPoint >::const_iterator
          it = this->points().begin();
          it != this->points().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<LevelStory_PointsEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(points_.NewEntryWrapper(items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(1, *entry, target);
      }
    } else {
      ::std::unique_ptr<LevelStory_PointsEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::shared::StoryPoint >::const_iterator
          it = this->points().begin();
          it != this->points().end(); ++it) {
        entry.reset(points_.NewEntryWrapper(it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(1, *entry, target);
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:shared.LevelStory)
  return target;
}

size_t LevelStory::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:shared.LevelStory)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<int32, .shared.StoryPoint> points = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->points_size());
  {
    ::std::unique_ptr<LevelStory_PointsEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::google::protobuf::int32, ::shared::StoryPoint >::const_iterator
        it = this->points().begin();
        it != this->points().end(); ++it) {
      entry.reset(points_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LevelStory::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:shared.LevelStory)
  GOOGLE_DCHECK_NE(&from, this);
  const LevelStory* source =
      ::google::protobuf::DynamicCastToGenerated<LevelStory>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:shared.LevelStory)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:shared.LevelStory)
    MergeFrom(*source);
  }
}

void LevelStory::MergeFrom(const LevelStory& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:shared.LevelStory)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  points_.MergeFrom(from.points_);
}

void LevelStory::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:shared.LevelStory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LevelStory::CopyFrom(const LevelStory& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:shared.LevelStory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LevelStory::IsInitialized() const {
  return true;
}

void LevelStory::Swap(LevelStory* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LevelStory::InternalSwap(LevelStory* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  points_.Swap(&other->points_);
}

::google::protobuf::Metadata LevelStory::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_serializable_5fdata_2eproto);
  return ::file_level_metadata_serializable_5fdata_2eproto[kIndexInFileMessages];
}


// ===================================================================

void SerializableConvexPolygon::InitAsDefaultInstance() {
}
class SerializableConvexPolygon::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SerializableConvexPolygon::kAnchorXFieldNumber;
const int SerializableConvexPolygon::kAnchorYFieldNumber;
const int SerializableConvexPolygon::kPointsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SerializableConvexPolygon::SerializableConvexPolygon()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:shared.SerializableConvexPolygon)
}
SerializableConvexPolygon::SerializableConvexPolygon(const SerializableConvexPolygon& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      points_(from.points_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&anchor_x_, &from.anchor_x_,
    static_cast<size_t>(reinterpret_cast<char*>(&anchor_y_) -
    reinterpret_cast<char*>(&anchor_x_)) + sizeof(anchor_y_));
  // @@protoc_insertion_point(copy_constructor:shared.SerializableConvexPolygon)
}

void SerializableConvexPolygon::SharedCtor() {
  ::memset(&anchor_x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&anchor_y_) -
      reinterpret_cast<char*>(&anchor_x_)) + sizeof(anchor_y_));
}

SerializableConvexPolygon::~SerializableConvexPolygon() {
  // @@protoc_insertion_point(destructor:shared.SerializableConvexPolygon)
  SharedDtor();
}

void SerializableConvexPolygon::SharedDtor() {
}

void SerializableConvexPolygon::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SerializableConvexPolygon& SerializableConvexPolygon::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_SerializableConvexPolygon_serializable_5fdata_2eproto.base);
  return *internal_default_instance();
}


void SerializableConvexPolygon::Clear() {
// @@protoc_insertion_point(message_clear_start:shared.SerializableConvexPolygon)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  points_.Clear();
  ::memset(&anchor_x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&anchor_y_) -
      reinterpret_cast<char*>(&anchor_x_)) + sizeof(anchor_y_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SerializableConvexPolygon::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<SerializableConvexPolygon*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // float anchor_x = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 13) goto handle_unusual;
        msg->set_anchor_x(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // float anchor_y = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 21) goto handle_unusual;
        msg->set_anchor_y(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // repeated float points = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) == 26) {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::protobuf::internal::PackedFloatParser;
          object = msg->mutable_points();
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          if (size) ptr = parser_till_end(ptr, newend, object, ctx);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 29) goto handle_unusual;
        do {
          msg->add_points(::google::protobuf::io::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 29 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SerializableConvexPolygon::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:shared.SerializableConvexPolygon)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float anchor_x = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (13 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &anchor_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float anchor_y = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (21 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &anchor_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float points = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_points())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (29 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 26u, input, this->mutable_points())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:shared.SerializableConvexPolygon)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:shared.SerializableConvexPolygon)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SerializableConvexPolygon::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:shared.SerializableConvexPolygon)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float anchor_x = 1;
  if (this->anchor_x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->anchor_x(), output);
  }

  // float anchor_y = 2;
  if (this->anchor_y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->anchor_y(), output);
  }

  // repeated float points = 3;
  if (this->points_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_points_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::google::protobuf::internal::WireFormatLite::WriteFloatArray(
      this->points().data(), this->points_size(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:shared.SerializableConvexPolygon)
}

::google::protobuf::uint8* SerializableConvexPolygon::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:shared.SerializableConvexPolygon)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float anchor_x = 1;
  if (this->anchor_x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->anchor_x(), target);
  }

  // float anchor_y = 2;
  if (this->anchor_y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->anchor_y(), target);
  }

  // repeated float points = 3;
  if (this->points_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        _points_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->points_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:shared.SerializableConvexPolygon)
  return target;
}

size_t SerializableConvexPolygon::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:shared.SerializableConvexPolygon)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float points = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->points_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast<::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    _points_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // float anchor_x = 1;
  if (this->anchor_x() != 0) {
    total_size += 1 + 4;
  }

  // float anchor_y = 2;
  if (this->anchor_y() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SerializableConvexPolygon::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:shared.SerializableConvexPolygon)
  GOOGLE_DCHECK_NE(&from, this);
  const SerializableConvexPolygon* source =
      ::google::protobuf::DynamicCastToGenerated<SerializableConvexPolygon>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:shared.SerializableConvexPolygon)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:shared.SerializableConvexPolygon)
    MergeFrom(*source);
  }
}

void SerializableConvexPolygon::MergeFrom(const SerializableConvexPolygon& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:shared.SerializableConvexPolygon)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  points_.MergeFrom(from.points_);
  if (from.anchor_x() != 0) {
    set_anchor_x(from.anchor_x());
  }
  if (from.anchor_y() != 0) {
    set_anchor_y(from.anchor_y());
  }
}

void SerializableConvexPolygon::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:shared.SerializableConvexPolygon)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SerializableConvexPolygon::CopyFrom(const SerializableConvexPolygon& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:shared.SerializableConvexPolygon)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SerializableConvexPolygon::IsInitialized() const {
  return true;
}

void SerializableConvexPolygon::Swap(SerializableConvexPolygon* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SerializableConvexPolygon::InternalSwap(SerializableConvexPolygon* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  points_.InternalSwap(&other->points_);
  swap(anchor_x_, other->anchor_x_);
  swap(anchor_y_, other->anchor_y_);
}

::google::protobuf::Metadata SerializableConvexPolygon::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_serializable_5fdata_2eproto);
  return ::file_level_metadata_serializable_5fdata_2eproto[kIndexInFileMessages];
}


// ===================================================================

void SerializedCompletelyStaticPatrolCueCollider::InitAsDefaultInstance() {
  ::shared::_SerializedCompletelyStaticPatrolCueCollider_default_instance_._instance.get_mutable()->attr_ = const_cast< ::shared::PatrolCue*>(
      ::shared::PatrolCue::internal_default_instance());
  ::shared::_SerializedCompletelyStaticPatrolCueCollider_default_instance_._instance.get_mutable()->polygon_ = const_cast< ::shared::SerializableConvexPolygon*>(
      ::shared::SerializableConvexPolygon::internal_default_instance());
}
class SerializedCompletelyStaticPatrolCueCollider::HasBitSetters {
 public:
  static const ::shared::PatrolCue& attr(const SerializedCompletelyStaticPatrolCueCollider* msg);
  static const ::shared::SerializableConvexPolygon& polygon(const SerializedCompletelyStaticPatrolCueCollider* msg);
};

const ::shared::PatrolCue&
SerializedCompletelyStaticPatrolCueCollider::HasBitSetters::attr(const SerializedCompletelyStaticPatrolCueCollider* msg) {
  return *msg->attr_;
}
const ::shared::SerializableConvexPolygon&
SerializedCompletelyStaticPatrolCueCollider::HasBitSetters::polygon(const SerializedCompletelyStaticPatrolCueCollider* msg) {
  return *msg->polygon_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SerializedCompletelyStaticPatrolCueCollider::kAttrFieldNumber;
const int SerializedCompletelyStaticPatrolCueCollider::kPolygonFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SerializedCompletelyStaticPatrolCueCollider::SerializedCompletelyStaticPatrolCueCollider()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:shared.SerializedCompletelyStaticPatrolCueCollider)
}
SerializedCompletelyStaticPatrolCueCollider::SerializedCompletelyStaticPatrolCueCollider(const SerializedCompletelyStaticPatrolCueCollider& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_attr()) {
    attr_ = new ::shared::PatrolCue(*from.attr_);
  } else {
    attr_ = nullptr;
  }
  if (from.has_polygon()) {
    polygon_ = new ::shared::SerializableConvexPolygon(*from.polygon_);
  } else {
    polygon_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:shared.SerializedCompletelyStaticPatrolCueCollider)
}

void SerializedCompletelyStaticPatrolCueCollider::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_SerializedCompletelyStaticPatrolCueCollider_serializable_5fdata_2eproto.base);
  ::memset(&attr_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&polygon_) -
      reinterpret_cast<char*>(&attr_)) + sizeof(polygon_));
}

SerializedCompletelyStaticPatrolCueCollider::~SerializedCompletelyStaticPatrolCueCollider() {
  // @@protoc_insertion_point(destructor:shared.SerializedCompletelyStaticPatrolCueCollider)
  SharedDtor();
}

void SerializedCompletelyStaticPatrolCueCollider::SharedDtor() {
  if (this != internal_default_instance()) delete attr_;
  if (this != internal_default_instance()) delete polygon_;
}

void SerializedCompletelyStaticPatrolCueCollider::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SerializedCompletelyStaticPatrolCueCollider& SerializedCompletelyStaticPatrolCueCollider::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_SerializedCompletelyStaticPatrolCueCollider_serializable_5fdata_2eproto.base);
  return *internal_default_instance();
}


void SerializedCompletelyStaticPatrolCueCollider::Clear() {
// @@protoc_insertion_point(message_clear_start:shared.SerializedCompletelyStaticPatrolCueCollider)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && attr_ != nullptr) {
    delete attr_;
  }
  attr_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && polygon_ != nullptr) {
    delete polygon_;
  }
  polygon_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SerializedCompletelyStaticPatrolCueCollider::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<SerializedCompletelyStaticPatrolCueCollider*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .shared.PatrolCue attr = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::shared::PatrolCue::_InternalParse;
        object = msg->mutable_attr();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .shared.SerializableConvexPolygon polygon = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::shared::SerializableConvexPolygon::_InternalParse;
        object = msg->mutable_polygon();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SerializedCompletelyStaticPatrolCueCollider::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:shared.SerializedCompletelyStaticPatrolCueCollider)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .shared.PatrolCue attr = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_attr()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .shared.SerializableConvexPolygon polygon = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_polygon()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:shared.SerializedCompletelyStaticPatrolCueCollider)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:shared.SerializedCompletelyStaticPatrolCueCollider)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SerializedCompletelyStaticPatrolCueCollider::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:shared.SerializedCompletelyStaticPatrolCueCollider)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .shared.PatrolCue attr = 1;
  if (this->has_attr()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::attr(this), output);
  }

  // .shared.SerializableConvexPolygon polygon = 2;
  if (this->has_polygon()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::polygon(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:shared.SerializedCompletelyStaticPatrolCueCollider)
}

::google::protobuf::uint8* SerializedCompletelyStaticPatrolCueCollider::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:shared.SerializedCompletelyStaticPatrolCueCollider)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .shared.PatrolCue attr = 1;
  if (this->has_attr()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::attr(this), target);
  }

  // .shared.SerializableConvexPolygon polygon = 2;
  if (this->has_polygon()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::polygon(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:shared.SerializedCompletelyStaticPatrolCueCollider)
  return target;
}

size_t SerializedCompletelyStaticPatrolCueCollider::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:shared.SerializedCompletelyStaticPatrolCueCollider)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .shared.PatrolCue attr = 1;
  if (this->has_attr()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *attr_);
  }

  // .shared.SerializableConvexPolygon polygon = 2;
  if (this->has_polygon()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *polygon_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SerializedCompletelyStaticPatrolCueCollider::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:shared.SerializedCompletelyStaticPatrolCueCollider)
  GOOGLE_DCHECK_NE(&from, this);
  const SerializedCompletelyStaticPatrolCueCollider* source =
      ::google::protobuf::DynamicCastToGenerated<SerializedCompletelyStaticPatrolCueCollider>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:shared.SerializedCompletelyStaticPatrolCueCollider)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:shared.SerializedCompletelyStaticPatrolCueCollider)
    MergeFrom(*source);
  }
}

void SerializedCompletelyStaticPatrolCueCollider::MergeFrom(const SerializedCompletelyStaticPatrolCueCollider& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:shared.SerializedCompletelyStaticPatrolCueCollider)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_attr()) {
    mutable_attr()->::shared::PatrolCue::MergeFrom(from.attr());
  }
  if (from.has_polygon()) {
    mutable_polygon()->::shared::SerializableConvexPolygon::MergeFrom(from.polygon());
  }
}

void SerializedCompletelyStaticPatrolCueCollider::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:shared.SerializedCompletelyStaticPatrolCueCollider)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SerializedCompletelyStaticPatrolCueCollider::CopyFrom(const SerializedCompletelyStaticPatrolCueCollider& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:shared.SerializedCompletelyStaticPatrolCueCollider)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SerializedCompletelyStaticPatrolCueCollider::IsInitialized() const {
  return true;
}

void SerializedCompletelyStaticPatrolCueCollider::Swap(SerializedCompletelyStaticPatrolCueCollider* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SerializedCompletelyStaticPatrolCueCollider::InternalSwap(SerializedCompletelyStaticPatrolCueCollider* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(attr_, other->attr_);
  swap(polygon_, other->polygon_);
}

::google::protobuf::Metadata SerializedCompletelyStaticPatrolCueCollider::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_serializable_5fdata_2eproto);
  return ::file_level_metadata_serializable_5fdata_2eproto[kIndexInFileMessages];
}


// ===================================================================

void SerializedCompletelyStaticTrapCollider::InitAsDefaultInstance() {
  ::shared::_SerializedCompletelyStaticTrapCollider_default_instance_._instance.get_mutable()->attr_ = const_cast< ::shared::TrapColliderAttr*>(
      ::shared::TrapColliderAttr::internal_default_instance());
  ::shared::_SerializedCompletelyStaticTrapCollider_default_instance_._instance.get_mutable()->polygon_ = const_cast< ::shared::SerializableConvexPolygon*>(
      ::shared::SerializableConvexPolygon::internal_default_instance());
}
class SerializedCompletelyStaticTrapCollider::HasBitSetters {
 public:
  static const ::shared::TrapColliderAttr& attr(const SerializedCompletelyStaticTrapCollider* msg);
  static const ::shared::SerializableConvexPolygon& polygon(const SerializedCompletelyStaticTrapCollider* msg);
};

const ::shared::TrapColliderAttr&
SerializedCompletelyStaticTrapCollider::HasBitSetters::attr(const SerializedCompletelyStaticTrapCollider* msg) {
  return *msg->attr_;
}
const ::shared::SerializableConvexPolygon&
SerializedCompletelyStaticTrapCollider::HasBitSetters::polygon(const SerializedCompletelyStaticTrapCollider* msg) {
  return *msg->polygon_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SerializedCompletelyStaticTrapCollider::kAttrFieldNumber;
const int SerializedCompletelyStaticTrapCollider::kPolygonFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SerializedCompletelyStaticTrapCollider::SerializedCompletelyStaticTrapCollider()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:shared.SerializedCompletelyStaticTrapCollider)
}
SerializedCompletelyStaticTrapCollider::SerializedCompletelyStaticTrapCollider(const SerializedCompletelyStaticTrapCollider& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_attr()) {
    attr_ = new ::shared::TrapColliderAttr(*from.attr_);
  } else {
    attr_ = nullptr;
  }
  if (from.has_polygon()) {
    polygon_ = new ::shared::SerializableConvexPolygon(*from.polygon_);
  } else {
    polygon_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:shared.SerializedCompletelyStaticTrapCollider)
}

void SerializedCompletelyStaticTrapCollider::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_SerializedCompletelyStaticTrapCollider_serializable_5fdata_2eproto.base);
  ::memset(&attr_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&polygon_) -
      reinterpret_cast<char*>(&attr_)) + sizeof(polygon_));
}

SerializedCompletelyStaticTrapCollider::~SerializedCompletelyStaticTrapCollider() {
  // @@protoc_insertion_point(destructor:shared.SerializedCompletelyStaticTrapCollider)
  SharedDtor();
}

void SerializedCompletelyStaticTrapCollider::SharedDtor() {
  if (this != internal_default_instance()) delete attr_;
  if (this != internal_default_instance()) delete polygon_;
}

void SerializedCompletelyStaticTrapCollider::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SerializedCompletelyStaticTrapCollider& SerializedCompletelyStaticTrapCollider::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_SerializedCompletelyStaticTrapCollider_serializable_5fdata_2eproto.base);
  return *internal_default_instance();
}


void SerializedCompletelyStaticTrapCollider::Clear() {
// @@protoc_insertion_point(message_clear_start:shared.SerializedCompletelyStaticTrapCollider)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && attr_ != nullptr) {
    delete attr_;
  }
  attr_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && polygon_ != nullptr) {
    delete polygon_;
  }
  polygon_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SerializedCompletelyStaticTrapCollider::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<SerializedCompletelyStaticTrapCollider*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .shared.TrapColliderAttr attr = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::shared::TrapColliderAttr::_InternalParse;
        object = msg->mutable_attr();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .shared.SerializableConvexPolygon polygon = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::shared::SerializableConvexPolygon::_InternalParse;
        object = msg->mutable_polygon();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SerializedCompletelyStaticTrapCollider::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:shared.SerializedCompletelyStaticTrapCollider)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .shared.TrapColliderAttr attr = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_attr()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .shared.SerializableConvexPolygon polygon = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_polygon()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:shared.SerializedCompletelyStaticTrapCollider)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:shared.SerializedCompletelyStaticTrapCollider)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SerializedCompletelyStaticTrapCollider::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:shared.SerializedCompletelyStaticTrapCollider)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .shared.TrapColliderAttr attr = 1;
  if (this->has_attr()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::attr(this), output);
  }

  // .shared.SerializableConvexPolygon polygon = 2;
  if (this->has_polygon()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::polygon(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:shared.SerializedCompletelyStaticTrapCollider)
}

::google::protobuf::uint8* SerializedCompletelyStaticTrapCollider::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:shared.SerializedCompletelyStaticTrapCollider)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .shared.TrapColliderAttr attr = 1;
  if (this->has_attr()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::attr(this), target);
  }

  // .shared.SerializableConvexPolygon polygon = 2;
  if (this->has_polygon()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::polygon(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:shared.SerializedCompletelyStaticTrapCollider)
  return target;
}

size_t SerializedCompletelyStaticTrapCollider::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:shared.SerializedCompletelyStaticTrapCollider)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .shared.TrapColliderAttr attr = 1;
  if (this->has_attr()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *attr_);
  }

  // .shared.SerializableConvexPolygon polygon = 2;
  if (this->has_polygon()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *polygon_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SerializedCompletelyStaticTrapCollider::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:shared.SerializedCompletelyStaticTrapCollider)
  GOOGLE_DCHECK_NE(&from, this);
  const SerializedCompletelyStaticTrapCollider* source =
      ::google::protobuf::DynamicCastToGenerated<SerializedCompletelyStaticTrapCollider>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:shared.SerializedCompletelyStaticTrapCollider)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:shared.SerializedCompletelyStaticTrapCollider)
    MergeFrom(*source);
  }
}

void SerializedCompletelyStaticTrapCollider::MergeFrom(const SerializedCompletelyStaticTrapCollider& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:shared.SerializedCompletelyStaticTrapCollider)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_attr()) {
    mutable_attr()->::shared::TrapColliderAttr::MergeFrom(from.attr());
  }
  if (from.has_polygon()) {
    mutable_polygon()->::shared::SerializableConvexPolygon::MergeFrom(from.polygon());
  }
}

void SerializedCompletelyStaticTrapCollider::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:shared.SerializedCompletelyStaticTrapCollider)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SerializedCompletelyStaticTrapCollider::CopyFrom(const SerializedCompletelyStaticTrapCollider& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:shared.SerializedCompletelyStaticTrapCollider)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SerializedCompletelyStaticTrapCollider::IsInitialized() const {
  return true;
}

void SerializedCompletelyStaticTrapCollider::Swap(SerializedCompletelyStaticTrapCollider* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SerializedCompletelyStaticTrapCollider::InternalSwap(SerializedCompletelyStaticTrapCollider* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(attr_, other->attr_);
  swap(polygon_, other->polygon_);
}

::google::protobuf::Metadata SerializedCompletelyStaticTrapCollider::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_serializable_5fdata_2eproto);
  return ::file_level_metadata_serializable_5fdata_2eproto[kIndexInFileMessages];
}


// ===================================================================

void SerializedCompletelyStaticTriggerCollider::InitAsDefaultInstance() {
  ::shared::_SerializedCompletelyStaticTriggerCollider_default_instance_._instance.get_mutable()->attr_ = const_cast< ::shared::TriggerColliderAttr*>(
      ::shared::TriggerColliderAttr::internal_default_instance());
  ::shared::_SerializedCompletelyStaticTriggerCollider_default_instance_._instance.get_mutable()->polygon_ = const_cast< ::shared::SerializableConvexPolygon*>(
      ::shared::SerializableConvexPolygon::internal_default_instance());
}
class SerializedCompletelyStaticTriggerCollider::HasBitSetters {
 public:
  static const ::shared::TriggerColliderAttr& attr(const SerializedCompletelyStaticTriggerCollider* msg);
  static const ::shared::SerializableConvexPolygon& polygon(const SerializedCompletelyStaticTriggerCollider* msg);
};

const ::shared::TriggerColliderAttr&
SerializedCompletelyStaticTriggerCollider::HasBitSetters::attr(const SerializedCompletelyStaticTriggerCollider* msg) {
  return *msg->attr_;
}
const ::shared::SerializableConvexPolygon&
SerializedCompletelyStaticTriggerCollider::HasBitSetters::polygon(const SerializedCompletelyStaticTriggerCollider* msg) {
  return *msg->polygon_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SerializedCompletelyStaticTriggerCollider::kAttrFieldNumber;
const int SerializedCompletelyStaticTriggerCollider::kPolygonFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SerializedCompletelyStaticTriggerCollider::SerializedCompletelyStaticTriggerCollider()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:shared.SerializedCompletelyStaticTriggerCollider)
}
SerializedCompletelyStaticTriggerCollider::SerializedCompletelyStaticTriggerCollider(const SerializedCompletelyStaticTriggerCollider& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_attr()) {
    attr_ = new ::shared::TriggerColliderAttr(*from.attr_);
  } else {
    attr_ = nullptr;
  }
  if (from.has_polygon()) {
    polygon_ = new ::shared::SerializableConvexPolygon(*from.polygon_);
  } else {
    polygon_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:shared.SerializedCompletelyStaticTriggerCollider)
}

void SerializedCompletelyStaticTriggerCollider::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_SerializedCompletelyStaticTriggerCollider_serializable_5fdata_2eproto.base);
  ::memset(&attr_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&polygon_) -
      reinterpret_cast<char*>(&attr_)) + sizeof(polygon_));
}

SerializedCompletelyStaticTriggerCollider::~SerializedCompletelyStaticTriggerCollider() {
  // @@protoc_insertion_point(destructor:shared.SerializedCompletelyStaticTriggerCollider)
  SharedDtor();
}

void SerializedCompletelyStaticTriggerCollider::SharedDtor() {
  if (this != internal_default_instance()) delete attr_;
  if (this != internal_default_instance()) delete polygon_;
}

void SerializedCompletelyStaticTriggerCollider::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SerializedCompletelyStaticTriggerCollider& SerializedCompletelyStaticTriggerCollider::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_SerializedCompletelyStaticTriggerCollider_serializable_5fdata_2eproto.base);
  return *internal_default_instance();
}


void SerializedCompletelyStaticTriggerCollider::Clear() {
// @@protoc_insertion_point(message_clear_start:shared.SerializedCompletelyStaticTriggerCollider)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && attr_ != nullptr) {
    delete attr_;
  }
  attr_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && polygon_ != nullptr) {
    delete polygon_;
  }
  polygon_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SerializedCompletelyStaticTriggerCollider::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<SerializedCompletelyStaticTriggerCollider*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .shared.TriggerColliderAttr attr = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::shared::TriggerColliderAttr::_InternalParse;
        object = msg->mutable_attr();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .shared.SerializableConvexPolygon polygon = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::shared::SerializableConvexPolygon::_InternalParse;
        object = msg->mutable_polygon();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SerializedCompletelyStaticTriggerCollider::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:shared.SerializedCompletelyStaticTriggerCollider)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .shared.TriggerColliderAttr attr = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_attr()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .shared.SerializableConvexPolygon polygon = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_polygon()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:shared.SerializedCompletelyStaticTriggerCollider)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:shared.SerializedCompletelyStaticTriggerCollider)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SerializedCompletelyStaticTriggerCollider::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:shared.SerializedCompletelyStaticTriggerCollider)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .shared.TriggerColliderAttr attr = 1;
  if (this->has_attr()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::attr(this), output);
  }

  // .shared.SerializableConvexPolygon polygon = 2;
  if (this->has_polygon()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::polygon(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:shared.SerializedCompletelyStaticTriggerCollider)
}

::google::protobuf::uint8* SerializedCompletelyStaticTriggerCollider::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:shared.SerializedCompletelyStaticTriggerCollider)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .shared.TriggerColliderAttr attr = 1;
  if (this->has_attr()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::attr(this), target);
  }

  // .shared.SerializableConvexPolygon polygon = 2;
  if (this->has_polygon()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::polygon(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:shared.SerializedCompletelyStaticTriggerCollider)
  return target;
}

size_t SerializedCompletelyStaticTriggerCollider::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:shared.SerializedCompletelyStaticTriggerCollider)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .shared.TriggerColliderAttr attr = 1;
  if (this->has_attr()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *attr_);
  }

  // .shared.SerializableConvexPolygon polygon = 2;
  if (this->has_polygon()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *polygon_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SerializedCompletelyStaticTriggerCollider::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:shared.SerializedCompletelyStaticTriggerCollider)
  GOOGLE_DCHECK_NE(&from, this);
  const SerializedCompletelyStaticTriggerCollider* source =
      ::google::protobuf::DynamicCastToGenerated<SerializedCompletelyStaticTriggerCollider>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:shared.SerializedCompletelyStaticTriggerCollider)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:shared.SerializedCompletelyStaticTriggerCollider)
    MergeFrom(*source);
  }
}

void SerializedCompletelyStaticTriggerCollider::MergeFrom(const SerializedCompletelyStaticTriggerCollider& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:shared.SerializedCompletelyStaticTriggerCollider)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_attr()) {
    mutable_attr()->::shared::TriggerColliderAttr::MergeFrom(from.attr());
  }
  if (from.has_polygon()) {
    mutable_polygon()->::shared::SerializableConvexPolygon::MergeFrom(from.polygon());
  }
}

void SerializedCompletelyStaticTriggerCollider::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:shared.SerializedCompletelyStaticTriggerCollider)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SerializedCompletelyStaticTriggerCollider::CopyFrom(const SerializedCompletelyStaticTriggerCollider& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:shared.SerializedCompletelyStaticTriggerCollider)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SerializedCompletelyStaticTriggerCollider::IsInitialized() const {
  return true;
}

void SerializedCompletelyStaticTriggerCollider::Swap(SerializedCompletelyStaticTriggerCollider* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SerializedCompletelyStaticTriggerCollider::InternalSwap(SerializedCompletelyStaticTriggerCollider* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(attr_, other->attr_);
  swap(polygon_, other->polygon_);
}

::google::protobuf::Metadata SerializedCompletelyStaticTriggerCollider::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_serializable_5fdata_2eproto);
  return ::file_level_metadata_serializable_5fdata_2eproto[kIndexInFileMessages];
}


// ===================================================================

void TrapColliderAttrArray::InitAsDefaultInstance() {
}
class TrapColliderAttrArray::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TrapColliderAttrArray::kListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TrapColliderAttrArray::TrapColliderAttrArray()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:shared.TrapColliderAttrArray)
}
TrapColliderAttrArray::TrapColliderAttrArray(const TrapColliderAttrArray& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      list_(from.list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:shared.TrapColliderAttrArray)
}

void TrapColliderAttrArray::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_TrapColliderAttrArray_serializable_5fdata_2eproto.base);
}

TrapColliderAttrArray::~TrapColliderAttrArray() {
  // @@protoc_insertion_point(destructor:shared.TrapColliderAttrArray)
  SharedDtor();
}

void TrapColliderAttrArray::SharedDtor() {
}

void TrapColliderAttrArray::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TrapColliderAttrArray& TrapColliderAttrArray::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_TrapColliderAttrArray_serializable_5fdata_2eproto.base);
  return *internal_default_instance();
}


void TrapColliderAttrArray::Clear() {
// @@protoc_insertion_point(message_clear_start:shared.TrapColliderAttrArray)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  list_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TrapColliderAttrArray::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<TrapColliderAttrArray*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .shared.TrapColliderAttr list = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::shared::TrapColliderAttr::_InternalParse;
          object = msg->add_list();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TrapColliderAttrArray::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:shared.TrapColliderAttrArray)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .shared.TrapColliderAttr list = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:shared.TrapColliderAttrArray)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:shared.TrapColliderAttrArray)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TrapColliderAttrArray::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:shared.TrapColliderAttrArray)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .shared.TrapColliderAttr list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->list(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:shared.TrapColliderAttrArray)
}

::google::protobuf::uint8* TrapColliderAttrArray::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:shared.TrapColliderAttrArray)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .shared.TrapColliderAttr list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->list(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:shared.TrapColliderAttrArray)
  return target;
}

size_t TrapColliderAttrArray::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:shared.TrapColliderAttrArray)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .shared.TrapColliderAttr list = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->list(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrapColliderAttrArray::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:shared.TrapColliderAttrArray)
  GOOGLE_DCHECK_NE(&from, this);
  const TrapColliderAttrArray* source =
      ::google::protobuf::DynamicCastToGenerated<TrapColliderAttrArray>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:shared.TrapColliderAttrArray)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:shared.TrapColliderAttrArray)
    MergeFrom(*source);
  }
}

void TrapColliderAttrArray::MergeFrom(const TrapColliderAttrArray& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:shared.TrapColliderAttrArray)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  list_.MergeFrom(from.list_);
}

void TrapColliderAttrArray::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:shared.TrapColliderAttrArray)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrapColliderAttrArray::CopyFrom(const TrapColliderAttrArray& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:shared.TrapColliderAttrArray)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrapColliderAttrArray::IsInitialized() const {
  return true;
}

void TrapColliderAttrArray::Swap(TrapColliderAttrArray* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TrapColliderAttrArray::InternalSwap(TrapColliderAttrArray* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&list_)->InternalSwap(CastToBase(&other->list_));
}

::google::protobuf::Metadata TrapColliderAttrArray::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_serializable_5fdata_2eproto);
  return ::file_level_metadata_serializable_5fdata_2eproto[kIndexInFileMessages];
}


// ===================================================================

SerializedTrapLocalIdToColliderAttrs_DictEntry_DoNotUse::SerializedTrapLocalIdToColliderAttrs_DictEntry_DoNotUse() {}
SerializedTrapLocalIdToColliderAttrs_DictEntry_DoNotUse::SerializedTrapLocalIdToColliderAttrs_DictEntry_DoNotUse(::google::protobuf::Arena* arena)
    : SuperType(arena) {}
void SerializedTrapLocalIdToColliderAttrs_DictEntry_DoNotUse::MergeFrom(const SerializedTrapLocalIdToColliderAttrs_DictEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata SerializedTrapLocalIdToColliderAttrs_DictEntry_DoNotUse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_serializable_5fdata_2eproto);
  return ::file_level_metadata_serializable_5fdata_2eproto[67];
}
void SerializedTrapLocalIdToColliderAttrs_DictEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SerializedTrapLocalIdToColliderAttrs_DictEntry_DoNotUse::_ParseMap(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx) {
  using MF = ::google::protobuf::internal::MapField<
      SerializedTrapLocalIdToColliderAttrs_DictEntry_DoNotUse, EntryKeyType, EntryValueType,
      kEntryKeyFieldType, kEntryValueFieldType,
      kEntryDefaultEnumValue>;
  auto mf = static_cast<MF*>(object);
  Parser<MF, ::google::protobuf::Map<EntryKeyType, EntryValueType>> parser(mf);
#define DO_(x) if (!(x)) return false
  DO_(parser.ParseMap(begin, end));
#undef DO_
  return true;
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER


// ===================================================================

void SerializedTrapLocalIdToColliderAttrs::InitAsDefaultInstance() {
}
class SerializedTrapLocalIdToColliderAttrs::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SerializedTrapLocalIdToColliderAttrs::kDictFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SerializedTrapLocalIdToColliderAttrs::SerializedTrapLocalIdToColliderAttrs()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:shared.SerializedTrapLocalIdToColliderAttrs)
}
SerializedTrapLocalIdToColliderAttrs::SerializedTrapLocalIdToColliderAttrs(const SerializedTrapLocalIdToColliderAttrs& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  dict_.MergeFrom(from.dict_);
  // @@protoc_insertion_point(copy_constructor:shared.SerializedTrapLocalIdToColliderAttrs)
}

void SerializedTrapLocalIdToColliderAttrs::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_SerializedTrapLocalIdToColliderAttrs_serializable_5fdata_2eproto.base);
}

SerializedTrapLocalIdToColliderAttrs::~SerializedTrapLocalIdToColliderAttrs() {
  // @@protoc_insertion_point(destructor:shared.SerializedTrapLocalIdToColliderAttrs)
  SharedDtor();
}

void SerializedTrapLocalIdToColliderAttrs::SharedDtor() {
}

void SerializedTrapLocalIdToColliderAttrs::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SerializedTrapLocalIdToColliderAttrs& SerializedTrapLocalIdToColliderAttrs::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_SerializedTrapLocalIdToColliderAttrs_serializable_5fdata_2eproto.base);
  return *internal_default_instance();
}


void SerializedTrapLocalIdToColliderAttrs::Clear() {
// @@protoc_insertion_point(message_clear_start:shared.SerializedTrapLocalIdToColliderAttrs)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dict_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SerializedTrapLocalIdToColliderAttrs::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<SerializedTrapLocalIdToColliderAttrs*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // map<int32, .shared.TrapColliderAttrArray> dict = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::protobuf::internal::SlowMapEntryParser;
          auto parse_map = ::shared::SerializedTrapLocalIdToColliderAttrs_DictEntry_DoNotUse::_ParseMap;
          ctx->extra_parse_data().payload.clear();
          ctx->extra_parse_data().parse_map = parse_map;
          object = &msg->dict_;
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(parse_map(ptr, newend, object, ctx));
          ptr = newend;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SerializedTrapLocalIdToColliderAttrs::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:shared.SerializedTrapLocalIdToColliderAttrs)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // map<int32, .shared.TrapColliderAttrArray> dict = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          SerializedTrapLocalIdToColliderAttrs_DictEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              SerializedTrapLocalIdToColliderAttrs_DictEntry_DoNotUse,
              ::google::protobuf::int32, ::shared::TrapColliderAttrArray,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::google::protobuf::int32, ::shared::TrapColliderAttrArray > > parser(&dict_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:shared.SerializedTrapLocalIdToColliderAttrs)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:shared.SerializedTrapLocalIdToColliderAttrs)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SerializedTrapLocalIdToColliderAttrs::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:shared.SerializedTrapLocalIdToColliderAttrs)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<int32, .shared.TrapColliderAttrArray> dict = 1;
  if (!this->dict().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::int32, ::shared::TrapColliderAttrArray >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::int32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (output->IsSerializationDeterministic() &&
        this->dict().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->dict().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::int32, ::shared::TrapColliderAttrArray >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::shared::TrapColliderAttrArray >::const_iterator
          it = this->dict().begin();
          it != this->dict().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<SerializedTrapLocalIdToColliderAttrs_DictEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(dict_.NewEntryWrapper(items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(1, *entry, output);
      }
    } else {
      ::std::unique_ptr<SerializedTrapLocalIdToColliderAttrs_DictEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::shared::TrapColliderAttrArray >::const_iterator
          it = this->dict().begin();
          it != this->dict().end(); ++it) {
        entry.reset(dict_.NewEntryWrapper(it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(1, *entry, output);
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:shared.SerializedTrapLocalIdToColliderAttrs)
}

::google::protobuf::uint8* SerializedTrapLocalIdToColliderAttrs::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:shared.SerializedTrapLocalIdToColliderAttrs)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<int32, .shared.TrapColliderAttrArray> dict = 1;
  if (!this->dict().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::int32, ::shared::TrapColliderAttrArray >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::int32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (false &&
        this->dict().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->dict().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::int32, ::shared::TrapColliderAttrArray >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::shared::TrapColliderAttrArray >::const_iterator
          it = this->dict().begin();
          it != this->dict().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<SerializedTrapLocalIdToColliderAttrs_DictEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(dict_.NewEntryWrapper(items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(1, *entry, target);
      }
    } else {
      ::std::unique_ptr<SerializedTrapLocalIdToColliderAttrs_DictEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::shared::TrapColliderAttrArray >::const_iterator
          it = this->dict().begin();
          it != this->dict().end(); ++it) {
        entry.reset(dict_.NewEntryWrapper(it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(1, *entry, target);
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:shared.SerializedTrapLocalIdToColliderAttrs)
  return target;
}

size_t SerializedTrapLocalIdToColliderAttrs::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:shared.SerializedTrapLocalIdToColliderAttrs)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<int32, .shared.TrapColliderAttrArray> dict = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->dict_size());
  {
    ::std::unique_ptr<SerializedTrapLocalIdToColliderAttrs_DictEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::google::protobuf::int32, ::shared::TrapColliderAttrArray >::const_iterator
        it = this->dict().begin();
        it != this->dict().end(); ++it) {
      entry.reset(dict_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SerializedTrapLocalIdToColliderAttrs::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:shared.SerializedTrapLocalIdToColliderAttrs)
  GOOGLE_DCHECK_NE(&from, this);
  const SerializedTrapLocalIdToColliderAttrs* source =
      ::google::protobuf::DynamicCastToGenerated<SerializedTrapLocalIdToColliderAttrs>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:shared.SerializedTrapLocalIdToColliderAttrs)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:shared.SerializedTrapLocalIdToColliderAttrs)
    MergeFrom(*source);
  }
}

void SerializedTrapLocalIdToColliderAttrs::MergeFrom(const SerializedTrapLocalIdToColliderAttrs& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:shared.SerializedTrapLocalIdToColliderAttrs)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  dict_.MergeFrom(from.dict_);
}

void SerializedTrapLocalIdToColliderAttrs::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:shared.SerializedTrapLocalIdToColliderAttrs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SerializedTrapLocalIdToColliderAttrs::CopyFrom(const SerializedTrapLocalIdToColliderAttrs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:shared.SerializedTrapLocalIdToColliderAttrs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SerializedTrapLocalIdToColliderAttrs::IsInitialized() const {
  return true;
}

void SerializedTrapLocalIdToColliderAttrs::Swap(SerializedTrapLocalIdToColliderAttrs* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SerializedTrapLocalIdToColliderAttrs::InternalSwap(SerializedTrapLocalIdToColliderAttrs* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  dict_.Swap(&other->dict_);
}

::google::protobuf::Metadata SerializedTrapLocalIdToColliderAttrs::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_serializable_5fdata_2eproto);
  return ::file_level_metadata_serializable_5fdata_2eproto[kIndexInFileMessages];
}


// ===================================================================

SerializedTriggerEditorIdToLocalId_DictEntry_DoNotUse::SerializedTriggerEditorIdToLocalId_DictEntry_DoNotUse() {}
SerializedTriggerEditorIdToLocalId_DictEntry_DoNotUse::SerializedTriggerEditorIdToLocalId_DictEntry_DoNotUse(::google::protobuf::Arena* arena)
    : SuperType(arena) {}
void SerializedTriggerEditorIdToLocalId_DictEntry_DoNotUse::MergeFrom(const SerializedTriggerEditorIdToLocalId_DictEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata SerializedTriggerEditorIdToLocalId_DictEntry_DoNotUse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_serializable_5fdata_2eproto);
  return ::file_level_metadata_serializable_5fdata_2eproto[69];
}
void SerializedTriggerEditorIdToLocalId_DictEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SerializedTriggerEditorIdToLocalId_DictEntry_DoNotUse::_ParseMap(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx) {
  using MF = ::google::protobuf::internal::MapField<
      SerializedTriggerEditorIdToLocalId_DictEntry_DoNotUse, EntryKeyType, EntryValueType,
      kEntryKeyFieldType, kEntryValueFieldType,
      kEntryDefaultEnumValue>;
  auto mf = static_cast<MF*>(object);
  Parser<MF, ::google::protobuf::Map<EntryKeyType, EntryValueType>> parser(mf);
#define DO_(x) if (!(x)) return false
  DO_(parser.ParseMap(begin, end));
#undef DO_
  return true;
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER


// ===================================================================

SerializedTriggerEditorIdToLocalId_Dict2Entry_DoNotUse::SerializedTriggerEditorIdToLocalId_Dict2Entry_DoNotUse() {}
SerializedTriggerEditorIdToLocalId_Dict2Entry_DoNotUse::SerializedTriggerEditorIdToLocalId_Dict2Entry_DoNotUse(::google::protobuf::Arena* arena)
    : SuperType(arena) {}
void SerializedTriggerEditorIdToLocalId_Dict2Entry_DoNotUse::MergeFrom(const SerializedTriggerEditorIdToLocalId_Dict2Entry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata SerializedTriggerEditorIdToLocalId_Dict2Entry_DoNotUse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_serializable_5fdata_2eproto);
  return ::file_level_metadata_serializable_5fdata_2eproto[70];
}
void SerializedTriggerEditorIdToLocalId_Dict2Entry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SerializedTriggerEditorIdToLocalId_Dict2Entry_DoNotUse::_ParseMap(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx) {
  using MF = ::google::protobuf::internal::MapField<
      SerializedTriggerEditorIdToLocalId_Dict2Entry_DoNotUse, EntryKeyType, EntryValueType,
      kEntryKeyFieldType, kEntryValueFieldType,
      kEntryDefaultEnumValue>;
  auto mf = static_cast<MF*>(object);
  Parser<MF, ::google::protobuf::Map<EntryKeyType, EntryValueType>> parser(mf);
#define DO_(x) if (!(x)) return false
  DO_(parser.ParseMap(begin, end));
#undef DO_
  return true;
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER


// ===================================================================

void SerializedTriggerEditorIdToLocalId::InitAsDefaultInstance() {
}
class SerializedTriggerEditorIdToLocalId::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SerializedTriggerEditorIdToLocalId::kDictFieldNumber;
const int SerializedTriggerEditorIdToLocalId::kDict2FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SerializedTriggerEditorIdToLocalId::SerializedTriggerEditorIdToLocalId()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:shared.SerializedTriggerEditorIdToLocalId)
}
SerializedTriggerEditorIdToLocalId::SerializedTriggerEditorIdToLocalId(const SerializedTriggerEditorIdToLocalId& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  dict_.MergeFrom(from.dict_);
  dict2_.MergeFrom(from.dict2_);
  // @@protoc_insertion_point(copy_constructor:shared.SerializedTriggerEditorIdToLocalId)
}

void SerializedTriggerEditorIdToLocalId::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_SerializedTriggerEditorIdToLocalId_serializable_5fdata_2eproto.base);
}

SerializedTriggerEditorIdToLocalId::~SerializedTriggerEditorIdToLocalId() {
  // @@protoc_insertion_point(destructor:shared.SerializedTriggerEditorIdToLocalId)
  SharedDtor();
}

void SerializedTriggerEditorIdToLocalId::SharedDtor() {
}

void SerializedTriggerEditorIdToLocalId::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SerializedTriggerEditorIdToLocalId& SerializedTriggerEditorIdToLocalId::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_SerializedTriggerEditorIdToLocalId_serializable_5fdata_2eproto.base);
  return *internal_default_instance();
}


void SerializedTriggerEditorIdToLocalId::Clear() {
// @@protoc_insertion_point(message_clear_start:shared.SerializedTriggerEditorIdToLocalId)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dict_.Clear();
  dict2_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SerializedTriggerEditorIdToLocalId::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<SerializedTriggerEditorIdToLocalId*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // map<int32, int32> dict = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::protobuf::internal::SlowMapEntryParser;
          auto parse_map = ::shared::SerializedTriggerEditorIdToLocalId_DictEntry_DoNotUse::_ParseMap;
          ctx->extra_parse_data().payload.clear();
          ctx->extra_parse_data().parse_map = parse_map;
          object = &msg->dict_;
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(parse_map(ptr, newend, object, ctx));
          ptr = newend;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      // map<int32, .shared.TriggerConfigFromTiled> dict2 = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::protobuf::internal::SlowMapEntryParser;
          auto parse_map = ::shared::SerializedTriggerEditorIdToLocalId_Dict2Entry_DoNotUse::_ParseMap;
          ctx->extra_parse_data().payload.clear();
          ctx->extra_parse_data().parse_map = parse_map;
          object = &msg->dict2_;
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(parse_map(ptr, newend, object, ctx));
          ptr = newend;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 18 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SerializedTriggerEditorIdToLocalId::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:shared.SerializedTriggerEditorIdToLocalId)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // map<int32, int32> dict = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          SerializedTriggerEditorIdToLocalId_DictEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              SerializedTriggerEditorIdToLocalId_DictEntry_DoNotUse,
              ::google::protobuf::int32, ::google::protobuf::int32,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
              0 >,
            ::google::protobuf::Map< ::google::protobuf::int32, ::google::protobuf::int32 > > parser(&dict_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<int32, .shared.TriggerConfigFromTiled> dict2 = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          SerializedTriggerEditorIdToLocalId_Dict2Entry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              SerializedTriggerEditorIdToLocalId_Dict2Entry_DoNotUse,
              ::google::protobuf::int32, ::shared::TriggerConfigFromTiled,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::google::protobuf::int32, ::shared::TriggerConfigFromTiled > > parser(&dict2_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:shared.SerializedTriggerEditorIdToLocalId)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:shared.SerializedTriggerEditorIdToLocalId)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SerializedTriggerEditorIdToLocalId::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:shared.SerializedTriggerEditorIdToLocalId)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<int32, int32> dict = 1;
  if (!this->dict().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::int32, ::google::protobuf::int32 >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::int32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (output->IsSerializationDeterministic() &&
        this->dict().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->dict().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::int32, ::google::protobuf::int32 >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::google::protobuf::int32 >::const_iterator
          it = this->dict().begin();
          it != this->dict().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<SerializedTriggerEditorIdToLocalId_DictEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(dict_.NewEntryWrapper(items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(1, *entry, output);
      }
    } else {
      ::std::unique_ptr<SerializedTriggerEditorIdToLocalId_DictEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::google::protobuf::int32 >::const_iterator
          it = this->dict().begin();
          it != this->dict().end(); ++it) {
        entry.reset(dict_.NewEntryWrapper(it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(1, *entry, output);
      }
    }
  }

  // map<int32, .shared.TriggerConfigFromTiled> dict2 = 2;
  if (!this->dict2().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::int32, ::shared::TriggerConfigFromTiled >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::int32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (output->IsSerializationDeterministic() &&
        this->dict2().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->dict2().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::int32, ::shared::TriggerConfigFromTiled >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::shared::TriggerConfigFromTiled >::const_iterator
          it = this->dict2().begin();
          it != this->dict2().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<SerializedTriggerEditorIdToLocalId_Dict2Entry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(dict2_.NewEntryWrapper(items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(2, *entry, output);
      }
    } else {
      ::std::unique_ptr<SerializedTriggerEditorIdToLocalId_Dict2Entry_DoNotUse> entry;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::shared::TriggerConfigFromTiled >::const_iterator
          it = this->dict2().begin();
          it != this->dict2().end(); ++it) {
        entry.reset(dict2_.NewEntryWrapper(it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(2, *entry, output);
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:shared.SerializedTriggerEditorIdToLocalId)
}

::google::protobuf::uint8* SerializedTriggerEditorIdToLocalId::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:shared.SerializedTriggerEditorIdToLocalId)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<int32, int32> dict = 1;
  if (!this->dict().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::int32, ::google::protobuf::int32 >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::int32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (false &&
        this->dict().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->dict().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::int32, ::google::protobuf::int32 >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::google::protobuf::int32 >::const_iterator
          it = this->dict().begin();
          it != this->dict().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<SerializedTriggerEditorIdToLocalId_DictEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(dict_.NewEntryWrapper(items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(1, *entry, target);
      }
    } else {
      ::std::unique_ptr<SerializedTriggerEditorIdToLocalId_DictEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::google::protobuf::int32 >::const_iterator
          it = this->dict().begin();
          it != this->dict().end(); ++it) {
        entry.reset(dict_.NewEntryWrapper(it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(1, *entry, target);
      }
    }
  }

  // map<int32, .shared.TriggerConfigFromTiled> dict2 = 2;
  if (!this->dict2().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::int32, ::shared::TriggerConfigFromTiled >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::int32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (false &&
        this->dict2().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->dict2().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::int32, ::shared::TriggerConfigFromTiled >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::shared::TriggerConfigFromTiled >::const_iterator
          it = this->dict2().begin();
          it != this->dict2().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<SerializedTriggerEditorIdToLocalId_Dict2Entry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(dict2_.NewEntryWrapper(items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(2, *entry, target);
      }
    } else {
      ::std::unique_ptr<SerializedTriggerEditorIdToLocalId_Dict2Entry_DoNotUse> entry;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::shared::TriggerConfigFromTiled >::const_iterator
          it = this->dict2().begin();
          it != this->dict2().end(); ++it) {
        entry.reset(dict2_.NewEntryWrapper(it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(2, *entry, target);
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:shared.SerializedTriggerEditorIdToLocalId)
  return target;
}

size_t SerializedTriggerEditorIdToLocalId::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:shared.SerializedTriggerEditorIdToLocalId)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<int32, int32> dict = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->dict_size());
  {
    ::std::unique_ptr<SerializedTriggerEditorIdToLocalId_DictEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::google::protobuf::int32, ::google::protobuf::int32 >::const_iterator
        it = this->dict().begin();
        it != this->dict().end(); ++it) {
      entry.reset(dict_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // map<int32, .shared.TriggerConfigFromTiled> dict2 = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->dict2_size());
  {
    ::std::unique_ptr<SerializedTriggerEditorIdToLocalId_Dict2Entry_DoNotUse> entry;
    for (::google::protobuf::Map< ::google::protobuf::int32, ::shared::TriggerConfigFromTiled >::const_iterator
        it = this->dict2().begin();
        it != this->dict2().end(); ++it) {
      entry.reset(dict2_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SerializedTriggerEditorIdToLocalId::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:shared.SerializedTriggerEditorIdToLocalId)
  GOOGLE_DCHECK_NE(&from, this);
  const SerializedTriggerEditorIdToLocalId* source =
      ::google::protobuf::DynamicCastToGenerated<SerializedTriggerEditorIdToLocalId>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:shared.SerializedTriggerEditorIdToLocalId)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:shared.SerializedTriggerEditorIdToLocalId)
    MergeFrom(*source);
  }
}

void SerializedTriggerEditorIdToLocalId::MergeFrom(const SerializedTriggerEditorIdToLocalId& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:shared.SerializedTriggerEditorIdToLocalId)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  dict_.MergeFrom(from.dict_);
  dict2_.MergeFrom(from.dict2_);
}

void SerializedTriggerEditorIdToLocalId::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:shared.SerializedTriggerEditorIdToLocalId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SerializedTriggerEditorIdToLocalId::CopyFrom(const SerializedTriggerEditorIdToLocalId& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:shared.SerializedTriggerEditorIdToLocalId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SerializedTriggerEditorIdToLocalId::IsInitialized() const {
  return true;
}

void SerializedTriggerEditorIdToLocalId::Swap(SerializedTriggerEditorIdToLocalId* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SerializedTriggerEditorIdToLocalId::InternalSwap(SerializedTriggerEditorIdToLocalId* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  dict_.Swap(&other->dict_);
  dict2_.Swap(&other->dict2_);
}

::google::protobuf::Metadata SerializedTriggerEditorIdToLocalId::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_serializable_5fdata_2eproto);
  return ::file_level_metadata_serializable_5fdata_2eproto[kIndexInFileMessages];
}


// ===================================================================

void PickableConfigFromTiled::InitAsDefaultInstance() {
}
class PickableConfigFromTiled::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PickableConfigFromTiled::kInitVirtualGridXFieldNumber;
const int PickableConfigFromTiled::kInitVirtualGridYFieldNumber;
const int PickableConfigFromTiled::kTakesGravityFieldNumber;
const int PickableConfigFromTiled::kFirstShowRdfIdFieldNumber;
const int PickableConfigFromTiled::kRecurQuotaFieldNumber;
const int PickableConfigFromTiled::kRecurIntervalRdfCountFieldNumber;
const int PickableConfigFromTiled::kLifetimeRdfCountPerOccurrenceFieldNumber;
const int PickableConfigFromTiled::kPickupTypeFieldNumber;
const int PickableConfigFromTiled::kStockQuotaPerOccurrenceFieldNumber;
const int PickableConfigFromTiled::kSubscriptionIdFieldNumber;
const int PickableConfigFromTiled::kVfxSpeciesIdFieldNumber;
const int PickableConfigFromTiled::kConsumableSpeciesIdFieldNumber;
const int PickableConfigFromTiled::kBuffSpeciesIdFieldNumber;
const int PickableConfigFromTiled::kSkillIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PickableConfigFromTiled::PickableConfigFromTiled()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:shared.PickableConfigFromTiled)
}
PickableConfigFromTiled::PickableConfigFromTiled(const PickableConfigFromTiled& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&init_virtual_grid_x_, &from.init_virtual_grid_x_,
    static_cast<size_t>(reinterpret_cast<char*>(&skill_id_) -
    reinterpret_cast<char*>(&init_virtual_grid_x_)) + sizeof(skill_id_));
  // @@protoc_insertion_point(copy_constructor:shared.PickableConfigFromTiled)
}

void PickableConfigFromTiled::SharedCtor() {
  ::memset(&init_virtual_grid_x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&skill_id_) -
      reinterpret_cast<char*>(&init_virtual_grid_x_)) + sizeof(skill_id_));
}

PickableConfigFromTiled::~PickableConfigFromTiled() {
  // @@protoc_insertion_point(destructor:shared.PickableConfigFromTiled)
  SharedDtor();
}

void PickableConfigFromTiled::SharedDtor() {
}

void PickableConfigFromTiled::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PickableConfigFromTiled& PickableConfigFromTiled::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_PickableConfigFromTiled_serializable_5fdata_2eproto.base);
  return *internal_default_instance();
}


void PickableConfigFromTiled::Clear() {
// @@protoc_insertion_point(message_clear_start:shared.PickableConfigFromTiled)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&init_virtual_grid_x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&skill_id_) -
      reinterpret_cast<char*>(&init_virtual_grid_x_)) + sizeof(skill_id_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PickableConfigFromTiled::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<PickableConfigFromTiled*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int32 init_virtual_grid_x = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_init_virtual_grid_x(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 init_virtual_grid_y = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_init_virtual_grid_y(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // bool takes_gravity = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_takes_gravity(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 first_show_rdf_id = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_first_show_rdf_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 recur_quota = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_recur_quota(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // uint32 recur_interval_rdf_count = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_recur_interval_rdf_count(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // uint32 lifetime_rdf_count_per_occurrence = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        msg->set_lifetime_rdf_count_per_occurrence(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // .shared.PickupType pickup_type = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 64) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_pickup_type(static_cast<::shared::PickupType>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // uint32 stock_quota_per_occurrence = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 72) goto handle_unusual;
        msg->set_stock_quota_per_occurrence(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 subscription_id = 10;
      case 10: {
        if (static_cast<::google::protobuf::uint8>(tag) != 80) goto handle_unusual;
        msg->set_subscription_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 vfx_species_id = 11;
      case 11: {
        if (static_cast<::google::protobuf::uint8>(tag) != 88) goto handle_unusual;
        msg->set_vfx_species_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // uint32 consumable_species_id = 1024;
      case 1024: {
        if (static_cast<::google::protobuf::uint8>(tag) != 0) goto handle_unusual;
        msg->set_consumable_species_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // uint32 buff_species_id = 1025;
      case 1025: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_buff_species_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // uint32 skill_id = 1026;
      case 1026: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_skill_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PickableConfigFromTiled::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:shared.PickableConfigFromTiled)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 init_virtual_grid_x = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &init_virtual_grid_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 init_virtual_grid_y = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &init_virtual_grid_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool takes_gravity = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &takes_gravity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 first_show_rdf_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &first_show_rdf_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 recur_quota = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &recur_quota_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 recur_interval_rdf_count = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &recur_interval_rdf_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 lifetime_rdf_count_per_occurrence = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (56 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lifetime_rdf_count_per_occurrence_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .shared.PickupType pickup_type = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (64 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_pickup_type(static_cast< ::shared::PickupType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 stock_quota_per_occurrence = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (72 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stock_quota_per_occurrence_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 subscription_id = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (80 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &subscription_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 vfx_species_id = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (88 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vfx_species_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 consumable_species_id = 1024;
      case 1024: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8192 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &consumable_species_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 buff_species_id = 1025;
      case 1025: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8200 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &buff_species_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 skill_id = 1026;
      case 1026: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8208 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skill_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:shared.PickableConfigFromTiled)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:shared.PickableConfigFromTiled)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PickableConfigFromTiled::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:shared.PickableConfigFromTiled)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 init_virtual_grid_x = 1;
  if (this->init_virtual_grid_x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->init_virtual_grid_x(), output);
  }

  // int32 init_virtual_grid_y = 2;
  if (this->init_virtual_grid_y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->init_virtual_grid_y(), output);
  }

  // bool takes_gravity = 3;
  if (this->takes_gravity() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->takes_gravity(), output);
  }

  // int32 first_show_rdf_id = 4;
  if (this->first_show_rdf_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->first_show_rdf_id(), output);
  }

  // int32 recur_quota = 5;
  if (this->recur_quota() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->recur_quota(), output);
  }

  // uint32 recur_interval_rdf_count = 6;
  if (this->recur_interval_rdf_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->recur_interval_rdf_count(), output);
  }

  // uint32 lifetime_rdf_count_per_occurrence = 7;
  if (this->lifetime_rdf_count_per_occurrence() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->lifetime_rdf_count_per_occurrence(), output);
  }

  // .shared.PickupType pickup_type = 8;
  if (this->pickup_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->pickup_type(), output);
  }

  // uint32 stock_quota_per_occurrence = 9;
  if (this->stock_quota_per_occurrence() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->stock_quota_per_occurrence(), output);
  }

  // int32 subscription_id = 10;
  if (this->subscription_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->subscription_id(), output);
  }

  // int32 vfx_species_id = 11;
  if (this->vfx_species_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->vfx_species_id(), output);
  }

  // uint32 consumable_species_id = 1024;
  if (this->consumable_species_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1024, this->consumable_species_id(), output);
  }

  // uint32 buff_species_id = 1025;
  if (this->buff_species_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1025, this->buff_species_id(), output);
  }

  // uint32 skill_id = 1026;
  if (this->skill_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1026, this->skill_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:shared.PickableConfigFromTiled)
}

::google::protobuf::uint8* PickableConfigFromTiled::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:shared.PickableConfigFromTiled)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 init_virtual_grid_x = 1;
  if (this->init_virtual_grid_x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->init_virtual_grid_x(), target);
  }

  // int32 init_virtual_grid_y = 2;
  if (this->init_virtual_grid_y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->init_virtual_grid_y(), target);
  }

  // bool takes_gravity = 3;
  if (this->takes_gravity() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->takes_gravity(), target);
  }

  // int32 first_show_rdf_id = 4;
  if (this->first_show_rdf_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->first_show_rdf_id(), target);
  }

  // int32 recur_quota = 5;
  if (this->recur_quota() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->recur_quota(), target);
  }

  // uint32 recur_interval_rdf_count = 6;
  if (this->recur_interval_rdf_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->recur_interval_rdf_count(), target);
  }

  // uint32 lifetime_rdf_count_per_occurrence = 7;
  if (this->lifetime_rdf_count_per_occurrence() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->lifetime_rdf_count_per_occurrence(), target);
  }

  // .shared.PickupType pickup_type = 8;
  if (this->pickup_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->pickup_type(), target);
  }

  // uint32 stock_quota_per_occurrence = 9;
  if (this->stock_quota_per_occurrence() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->stock_quota_per_occurrence(), target);
  }

  // int32 subscription_id = 10;
  if (this->subscription_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->subscription_id(), target);
  }

  // int32 vfx_species_id = 11;
  if (this->vfx_species_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->vfx_species_id(), target);
  }

  // uint32 consumable_species_id = 1024;
  if (this->consumable_species_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1024, this->consumable_species_id(), target);
  }

  // uint32 buff_species_id = 1025;
  if (this->buff_species_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1025, this->buff_species_id(), target);
  }

  // uint32 skill_id = 1026;
  if (this->skill_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1026, this->skill_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:shared.PickableConfigFromTiled)
  return target;
}

size_t PickableConfigFromTiled::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:shared.PickableConfigFromTiled)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 init_virtual_grid_x = 1;
  if (this->init_virtual_grid_x() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->init_virtual_grid_x());
  }

  // int32 init_virtual_grid_y = 2;
  if (this->init_virtual_grid_y() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->init_virtual_grid_y());
  }

  // bool takes_gravity = 3;
  if (this->takes_gravity() != 0) {
    total_size += 1 + 1;
  }

  // int32 first_show_rdf_id = 4;
  if (this->first_show_rdf_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->first_show_rdf_id());
  }

  // int32 recur_quota = 5;
  if (this->recur_quota() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->recur_quota());
  }

  // uint32 recur_interval_rdf_count = 6;
  if (this->recur_interval_rdf_count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->recur_interval_rdf_count());
  }

  // uint32 lifetime_rdf_count_per_occurrence = 7;
  if (this->lifetime_rdf_count_per_occurrence() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->lifetime_rdf_count_per_occurrence());
  }

  // .shared.PickupType pickup_type = 8;
  if (this->pickup_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->pickup_type());
  }

  // uint32 stock_quota_per_occurrence = 9;
  if (this->stock_quota_per_occurrence() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->stock_quota_per_occurrence());
  }

  // int32 subscription_id = 10;
  if (this->subscription_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->subscription_id());
  }

  // int32 vfx_species_id = 11;
  if (this->vfx_species_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->vfx_species_id());
  }

  // uint32 consumable_species_id = 1024;
  if (this->consumable_species_id() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->consumable_species_id());
  }

  // uint32 buff_species_id = 1025;
  if (this->buff_species_id() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->buff_species_id());
  }

  // uint32 skill_id = 1026;
  if (this->skill_id() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->skill_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PickableConfigFromTiled::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:shared.PickableConfigFromTiled)
  GOOGLE_DCHECK_NE(&from, this);
  const PickableConfigFromTiled* source =
      ::google::protobuf::DynamicCastToGenerated<PickableConfigFromTiled>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:shared.PickableConfigFromTiled)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:shared.PickableConfigFromTiled)
    MergeFrom(*source);
  }
}

void PickableConfigFromTiled::MergeFrom(const PickableConfigFromTiled& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:shared.PickableConfigFromTiled)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.init_virtual_grid_x() != 0) {
    set_init_virtual_grid_x(from.init_virtual_grid_x());
  }
  if (from.init_virtual_grid_y() != 0) {
    set_init_virtual_grid_y(from.init_virtual_grid_y());
  }
  if (from.takes_gravity() != 0) {
    set_takes_gravity(from.takes_gravity());
  }
  if (from.first_show_rdf_id() != 0) {
    set_first_show_rdf_id(from.first_show_rdf_id());
  }
  if (from.recur_quota() != 0) {
    set_recur_quota(from.recur_quota());
  }
  if (from.recur_interval_rdf_count() != 0) {
    set_recur_interval_rdf_count(from.recur_interval_rdf_count());
  }
  if (from.lifetime_rdf_count_per_occurrence() != 0) {
    set_lifetime_rdf_count_per_occurrence(from.lifetime_rdf_count_per_occurrence());
  }
  if (from.pickup_type() != 0) {
    set_pickup_type(from.pickup_type());
  }
  if (from.stock_quota_per_occurrence() != 0) {
    set_stock_quota_per_occurrence(from.stock_quota_per_occurrence());
  }
  if (from.subscription_id() != 0) {
    set_subscription_id(from.subscription_id());
  }
  if (from.vfx_species_id() != 0) {
    set_vfx_species_id(from.vfx_species_id());
  }
  if (from.consumable_species_id() != 0) {
    set_consumable_species_id(from.consumable_species_id());
  }
  if (from.buff_species_id() != 0) {
    set_buff_species_id(from.buff_species_id());
  }
  if (from.skill_id() != 0) {
    set_skill_id(from.skill_id());
  }
}

void PickableConfigFromTiled::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:shared.PickableConfigFromTiled)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PickableConfigFromTiled::CopyFrom(const PickableConfigFromTiled& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:shared.PickableConfigFromTiled)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PickableConfigFromTiled::IsInitialized() const {
  return true;
}

void PickableConfigFromTiled::Swap(PickableConfigFromTiled* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PickableConfigFromTiled::InternalSwap(PickableConfigFromTiled* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(init_virtual_grid_x_, other->init_virtual_grid_x_);
  swap(init_virtual_grid_y_, other->init_virtual_grid_y_);
  swap(takes_gravity_, other->takes_gravity_);
  swap(first_show_rdf_id_, other->first_show_rdf_id_);
  swap(recur_quota_, other->recur_quota_);
  swap(recur_interval_rdf_count_, other->recur_interval_rdf_count_);
  swap(lifetime_rdf_count_per_occurrence_, other->lifetime_rdf_count_per_occurrence_);
  swap(pickup_type_, other->pickup_type_);
  swap(stock_quota_per_occurrence_, other->stock_quota_per_occurrence_);
  swap(subscription_id_, other->subscription_id_);
  swap(vfx_species_id_, other->vfx_species_id_);
  swap(consumable_species_id_, other->consumable_species_id_);
  swap(buff_species_id_, other->buff_species_id_);
  swap(skill_id_, other->skill_id_);
}

::google::protobuf::Metadata PickableConfigFromTiled::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_serializable_5fdata_2eproto);
  return ::file_level_metadata_serializable_5fdata_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Pickable::InitAsDefaultInstance() {
  ::shared::_Pickable_default_instance_._instance.get_mutable()->config_from_tiled_ = const_cast< ::shared::PickableConfigFromTiled*>(
      ::shared::PickableConfigFromTiled::internal_default_instance());
}
class Pickable::HasBitSetters {
 public:
  static const ::shared::PickableConfigFromTiled& config_from_tiled(const Pickable* msg);
};

const ::shared::PickableConfigFromTiled&
Pickable::HasBitSetters::config_from_tiled(const Pickable* msg) {
  return *msg->config_from_tiled_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Pickable::kPickableLocalIdFieldNumber;
const int Pickable::kXFieldNumber;
const int Pickable::kYFieldNumber;
const int Pickable::kConfigFromTiledFieldNumber;
const int Pickable::kRemainingLifetimeRdfCountFieldNumber;
const int Pickable::kRemainingRecurQuotaFieldNumber;
const int Pickable::kVelXFieldNumber;
const int Pickable::kVelYFieldNumber;
const int Pickable::kPkStateFieldNumber;
const int Pickable::kFramesInPkStateFieldNumber;
const int Pickable::kPickedByJoinIndexFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Pickable::Pickable()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:shared.Pickable)
}
Pickable::Pickable(const Pickable& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_config_from_tiled()) {
    config_from_tiled_ = new ::shared::PickableConfigFromTiled(*from.config_from_tiled_);
  } else {
    config_from_tiled_ = nullptr;
  }
  ::memcpy(&pickable_local_id_, &from.pickable_local_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&picked_by_join_index_) -
    reinterpret_cast<char*>(&pickable_local_id_)) + sizeof(picked_by_join_index_));
  // @@protoc_insertion_point(copy_constructor:shared.Pickable)
}

void Pickable::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Pickable_serializable_5fdata_2eproto.base);
  ::memset(&config_from_tiled_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&picked_by_join_index_) -
      reinterpret_cast<char*>(&config_from_tiled_)) + sizeof(picked_by_join_index_));
}

Pickable::~Pickable() {
  // @@protoc_insertion_point(destructor:shared.Pickable)
  SharedDtor();
}

void Pickable::SharedDtor() {
  if (this != internal_default_instance()) delete config_from_tiled_;
}

void Pickable::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Pickable& Pickable::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Pickable_serializable_5fdata_2eproto.base);
  return *internal_default_instance();
}


void Pickable::Clear() {
// @@protoc_insertion_point(message_clear_start:shared.Pickable)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && config_from_tiled_ != nullptr) {
    delete config_from_tiled_;
  }
  config_from_tiled_ = nullptr;
  ::memset(&pickable_local_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&picked_by_join_index_) -
      reinterpret_cast<char*>(&pickable_local_id_)) + sizeof(picked_by_join_index_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Pickable::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Pickable*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int32 pickable_local_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_pickable_local_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // float x = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 21) goto handle_unusual;
        msg->set_x(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // float y = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 29) goto handle_unusual;
        msg->set_y(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // .shared.PickableConfigFromTiled config_from_tiled = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::shared::PickableConfigFromTiled::_InternalParse;
        object = msg->mutable_config_from_tiled();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // int32 remaining_lifetime_rdf_count = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_remaining_lifetime_rdf_count(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 remaining_recur_quota = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_remaining_recur_quota(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // float vel_x = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 61) goto handle_unusual;
        msg->set_vel_x(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // float vel_y = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 69) goto handle_unusual;
        msg->set_vel_y(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // .shared.PickableState pk_state = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 72) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_pk_state(static_cast<::shared::PickableState>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 frames_in_pk_state = 10;
      case 10: {
        if (static_cast<::google::protobuf::uint8>(tag) != 80) goto handle_unusual;
        msg->set_frames_in_pk_state(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 picked_by_join_index = 11;
      case 11: {
        if (static_cast<::google::protobuf::uint8>(tag) != 88) goto handle_unusual;
        msg->set_picked_by_join_index(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Pickable::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:shared.Pickable)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 pickable_local_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pickable_local_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float x = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (21 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float y = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (29 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .shared.PickableConfigFromTiled config_from_tiled = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_config_from_tiled()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 remaining_lifetime_rdf_count = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &remaining_lifetime_rdf_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 remaining_recur_quota = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &remaining_recur_quota_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float vel_x = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (61 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &vel_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float vel_y = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (69 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &vel_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .shared.PickableState pk_state = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (72 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_pk_state(static_cast< ::shared::PickableState >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 frames_in_pk_state = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (80 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &frames_in_pk_state_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 picked_by_join_index = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (88 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &picked_by_join_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:shared.Pickable)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:shared.Pickable)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Pickable::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:shared.Pickable)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 pickable_local_id = 1;
  if (this->pickable_local_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->pickable_local_id(), output);
  }

  // float x = 2;
  if (this->x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->x(), output);
  }

  // float y = 3;
  if (this->y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->y(), output);
  }

  // .shared.PickableConfigFromTiled config_from_tiled = 4;
  if (this->has_config_from_tiled()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::config_from_tiled(this), output);
  }

  // int32 remaining_lifetime_rdf_count = 5;
  if (this->remaining_lifetime_rdf_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->remaining_lifetime_rdf_count(), output);
  }

  // int32 remaining_recur_quota = 6;
  if (this->remaining_recur_quota() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->remaining_recur_quota(), output);
  }

  // float vel_x = 7;
  if (this->vel_x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->vel_x(), output);
  }

  // float vel_y = 8;
  if (this->vel_y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->vel_y(), output);
  }

  // .shared.PickableState pk_state = 9;
  if (this->pk_state() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      9, this->pk_state(), output);
  }

  // int32 frames_in_pk_state = 10;
  if (this->frames_in_pk_state() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->frames_in_pk_state(), output);
  }

  // int32 picked_by_join_index = 11;
  if (this->picked_by_join_index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->picked_by_join_index(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:shared.Pickable)
}

::google::protobuf::uint8* Pickable::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:shared.Pickable)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 pickable_local_id = 1;
  if (this->pickable_local_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->pickable_local_id(), target);
  }

  // float x = 2;
  if (this->x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->x(), target);
  }

  // float y = 3;
  if (this->y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->y(), target);
  }

  // .shared.PickableConfigFromTiled config_from_tiled = 4;
  if (this->has_config_from_tiled()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::config_from_tiled(this), target);
  }

  // int32 remaining_lifetime_rdf_count = 5;
  if (this->remaining_lifetime_rdf_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->remaining_lifetime_rdf_count(), target);
  }

  // int32 remaining_recur_quota = 6;
  if (this->remaining_recur_quota() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->remaining_recur_quota(), target);
  }

  // float vel_x = 7;
  if (this->vel_x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->vel_x(), target);
  }

  // float vel_y = 8;
  if (this->vel_y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->vel_y(), target);
  }

  // .shared.PickableState pk_state = 9;
  if (this->pk_state() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      9, this->pk_state(), target);
  }

  // int32 frames_in_pk_state = 10;
  if (this->frames_in_pk_state() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->frames_in_pk_state(), target);
  }

  // int32 picked_by_join_index = 11;
  if (this->picked_by_join_index() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->picked_by_join_index(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:shared.Pickable)
  return target;
}

size_t Pickable::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:shared.Pickable)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .shared.PickableConfigFromTiled config_from_tiled = 4;
  if (this->has_config_from_tiled()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *config_from_tiled_);
  }

  // int32 pickable_local_id = 1;
  if (this->pickable_local_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->pickable_local_id());
  }

  // float x = 2;
  if (this->x() != 0) {
    total_size += 1 + 4;
  }

  // float y = 3;
  if (this->y() != 0) {
    total_size += 1 + 4;
  }

  // int32 remaining_lifetime_rdf_count = 5;
  if (this->remaining_lifetime_rdf_count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->remaining_lifetime_rdf_count());
  }

  // int32 remaining_recur_quota = 6;
  if (this->remaining_recur_quota() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->remaining_recur_quota());
  }

  // float vel_x = 7;
  if (this->vel_x() != 0) {
    total_size += 1 + 4;
  }

  // float vel_y = 8;
  if (this->vel_y() != 0) {
    total_size += 1 + 4;
  }

  // .shared.PickableState pk_state = 9;
  if (this->pk_state() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->pk_state());
  }

  // int32 frames_in_pk_state = 10;
  if (this->frames_in_pk_state() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->frames_in_pk_state());
  }

  // int32 picked_by_join_index = 11;
  if (this->picked_by_join_index() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->picked_by_join_index());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Pickable::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:shared.Pickable)
  GOOGLE_DCHECK_NE(&from, this);
  const Pickable* source =
      ::google::protobuf::DynamicCastToGenerated<Pickable>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:shared.Pickable)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:shared.Pickable)
    MergeFrom(*source);
  }
}

void Pickable::MergeFrom(const Pickable& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:shared.Pickable)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_config_from_tiled()) {
    mutable_config_from_tiled()->::shared::PickableConfigFromTiled::MergeFrom(from.config_from_tiled());
  }
  if (from.pickable_local_id() != 0) {
    set_pickable_local_id(from.pickable_local_id());
  }
  if (from.x() != 0) {
    set_x(from.x());
  }
  if (from.y() != 0) {
    set_y(from.y());
  }
  if (from.remaining_lifetime_rdf_count() != 0) {
    set_remaining_lifetime_rdf_count(from.remaining_lifetime_rdf_count());
  }
  if (from.remaining_recur_quota() != 0) {
    set_remaining_recur_quota(from.remaining_recur_quota());
  }
  if (from.vel_x() != 0) {
    set_vel_x(from.vel_x());
  }
  if (from.vel_y() != 0) {
    set_vel_y(from.vel_y());
  }
  if (from.pk_state() != 0) {
    set_pk_state(from.pk_state());
  }
  if (from.frames_in_pk_state() != 0) {
    set_frames_in_pk_state(from.frames_in_pk_state());
  }
  if (from.picked_by_join_index() != 0) {
    set_picked_by_join_index(from.picked_by_join_index());
  }
}

void Pickable::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:shared.Pickable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Pickable::CopyFrom(const Pickable& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:shared.Pickable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Pickable::IsInitialized() const {
  return true;
}

void Pickable::Swap(Pickable* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Pickable::InternalSwap(Pickable* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(config_from_tiled_, other->config_from_tiled_);
  swap(pickable_local_id_, other->pickable_local_id_);
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(remaining_lifetime_rdf_count_, other->remaining_lifetime_rdf_count_);
  swap(remaining_recur_quota_, other->remaining_recur_quota_);
  swap(vel_x_, other->vel_x_);
  swap(vel_y_, other->vel_y_);
  swap(pk_state_, other->pk_state_);
  swap(frames_in_pk_state_, other->frames_in_pk_state_);
  swap(picked_by_join_index_, other->picked_by_join_index_);
}

::google::protobuf::Metadata Pickable::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_serializable_5fdata_2eproto);
  return ::file_level_metadata_serializable_5fdata_2eproto[kIndexInFileMessages];
}


// ===================================================================

void InjectedCmdConfig::InitAsDefaultInstance() {
}
class InjectedCmdConfig::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InjectedCmdConfig::kCutoffRdfFrameIdFieldNumber;
const int InjectedCmdConfig::kOpFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InjectedCmdConfig::InjectedCmdConfig()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:shared.InjectedCmdConfig)
}
InjectedCmdConfig::InjectedCmdConfig(const InjectedCmdConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&op_, &from.op_,
    static_cast<size_t>(reinterpret_cast<char*>(&cutoff_rdf_frame_id_) -
    reinterpret_cast<char*>(&op_)) + sizeof(cutoff_rdf_frame_id_));
  // @@protoc_insertion_point(copy_constructor:shared.InjectedCmdConfig)
}

void InjectedCmdConfig::SharedCtor() {
  ::memset(&op_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cutoff_rdf_frame_id_) -
      reinterpret_cast<char*>(&op_)) + sizeof(cutoff_rdf_frame_id_));
}

InjectedCmdConfig::~InjectedCmdConfig() {
  // @@protoc_insertion_point(destructor:shared.InjectedCmdConfig)
  SharedDtor();
}

void InjectedCmdConfig::SharedDtor() {
}

void InjectedCmdConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InjectedCmdConfig& InjectedCmdConfig::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_InjectedCmdConfig_serializable_5fdata_2eproto.base);
  return *internal_default_instance();
}


void InjectedCmdConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:shared.InjectedCmdConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&op_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cutoff_rdf_frame_id_) -
      reinterpret_cast<char*>(&op_)) + sizeof(cutoff_rdf_frame_id_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* InjectedCmdConfig::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<InjectedCmdConfig*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int32 cutoff_rdf_frame_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_cutoff_rdf_frame_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // uint64 op = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_op(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool InjectedCmdConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:shared.InjectedCmdConfig)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 cutoff_rdf_frame_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cutoff_rdf_frame_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 op = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &op_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:shared.InjectedCmdConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:shared.InjectedCmdConfig)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void InjectedCmdConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:shared.InjectedCmdConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 cutoff_rdf_frame_id = 1;
  if (this->cutoff_rdf_frame_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->cutoff_rdf_frame_id(), output);
  }

  // uint64 op = 2;
  if (this->op() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->op(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:shared.InjectedCmdConfig)
}

::google::protobuf::uint8* InjectedCmdConfig::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:shared.InjectedCmdConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 cutoff_rdf_frame_id = 1;
  if (this->cutoff_rdf_frame_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->cutoff_rdf_frame_id(), target);
  }

  // uint64 op = 2;
  if (this->op() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->op(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:shared.InjectedCmdConfig)
  return target;
}

size_t InjectedCmdConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:shared.InjectedCmdConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 op = 2;
  if (this->op() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->op());
  }

  // int32 cutoff_rdf_frame_id = 1;
  if (this->cutoff_rdf_frame_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->cutoff_rdf_frame_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InjectedCmdConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:shared.InjectedCmdConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const InjectedCmdConfig* source =
      ::google::protobuf::DynamicCastToGenerated<InjectedCmdConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:shared.InjectedCmdConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:shared.InjectedCmdConfig)
    MergeFrom(*source);
  }
}

void InjectedCmdConfig::MergeFrom(const InjectedCmdConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:shared.InjectedCmdConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.op() != 0) {
    set_op(from.op());
  }
  if (from.cutoff_rdf_frame_id() != 0) {
    set_cutoff_rdf_frame_id(from.cutoff_rdf_frame_id());
  }
}

void InjectedCmdConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:shared.InjectedCmdConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InjectedCmdConfig::CopyFrom(const InjectedCmdConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:shared.InjectedCmdConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InjectedCmdConfig::IsInitialized() const {
  return true;
}

void InjectedCmdConfig::Swap(InjectedCmdConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InjectedCmdConfig::InternalSwap(InjectedCmdConfig* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(op_, other->op_);
  swap(cutoff_rdf_frame_id_, other->cutoff_rdf_frame_id_);
}

::google::protobuf::Metadata InjectedCmdConfig::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_serializable_5fdata_2eproto);
  return ::file_level_metadata_serializable_5fdata_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CharacterSpawnerConfig::InitAsDefaultInstance() {
}
class CharacterSpawnerConfig::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CharacterSpawnerConfig::kCutoffRdfFrameIdFieldNumber;
const int CharacterSpawnerConfig::kSpeciesIdListFieldNumber;
const int CharacterSpawnerConfig::kInitOpListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CharacterSpawnerConfig::CharacterSpawnerConfig()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:shared.CharacterSpawnerConfig)
}
CharacterSpawnerConfig::CharacterSpawnerConfig(const CharacterSpawnerConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      species_id_list_(from.species_id_list_),
      init_op_list_(from.init_op_list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  cutoff_rdf_frame_id_ = from.cutoff_rdf_frame_id_;
  // @@protoc_insertion_point(copy_constructor:shared.CharacterSpawnerConfig)
}

void CharacterSpawnerConfig::SharedCtor() {
  cutoff_rdf_frame_id_ = 0;
}

CharacterSpawnerConfig::~CharacterSpawnerConfig() {
  // @@protoc_insertion_point(destructor:shared.CharacterSpawnerConfig)
  SharedDtor();
}

void CharacterSpawnerConfig::SharedDtor() {
}

void CharacterSpawnerConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CharacterSpawnerConfig& CharacterSpawnerConfig::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CharacterSpawnerConfig_serializable_5fdata_2eproto.base);
  return *internal_default_instance();
}


void CharacterSpawnerConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:shared.CharacterSpawnerConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  species_id_list_.Clear();
  init_op_list_.Clear();
  cutoff_rdf_frame_id_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CharacterSpawnerConfig::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CharacterSpawnerConfig*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int32 cutoff_rdf_frame_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_cutoff_rdf_frame_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated uint32 species_id_list = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) == 18) {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::protobuf::internal::PackedUInt32Parser;
          object = msg->mutable_species_id_list();
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          if (size) ptr = parser_till_end(ptr, newend, object, ctx);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        do {
          msg->add_species_id_list(::google::protobuf::internal::ReadVarint(&ptr));
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 16 && (ptr += 1));
        break;
      }
      // repeated uint64 init_op_list = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) == 26) {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::protobuf::internal::PackedUInt64Parser;
          object = msg->mutable_init_op_list();
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          if (size) ptr = parser_till_end(ptr, newend, object, ctx);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        do {
          msg->add_init_op_list(::google::protobuf::internal::ReadVarint(&ptr));
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 24 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CharacterSpawnerConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:shared.CharacterSpawnerConfig)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 cutoff_rdf_frame_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cutoff_rdf_frame_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 species_id_list = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_species_id_list())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 18u, input, this->mutable_species_id_list())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint64 init_op_list = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_init_op_list())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 26u, input, this->mutable_init_op_list())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:shared.CharacterSpawnerConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:shared.CharacterSpawnerConfig)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CharacterSpawnerConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:shared.CharacterSpawnerConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 cutoff_rdf_frame_id = 1;
  if (this->cutoff_rdf_frame_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->cutoff_rdf_frame_id(), output);
  }

  // repeated uint32 species_id_list = 2;
  if (this->species_id_list_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_species_id_list_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->species_id_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->species_id_list(i), output);
  }

  // repeated uint64 init_op_list = 3;
  if (this->init_op_list_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_init_op_list_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->init_op_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64NoTag(
      this->init_op_list(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:shared.CharacterSpawnerConfig)
}

::google::protobuf::uint8* CharacterSpawnerConfig::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:shared.CharacterSpawnerConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 cutoff_rdf_frame_id = 1;
  if (this->cutoff_rdf_frame_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->cutoff_rdf_frame_id(), target);
  }

  // repeated uint32 species_id_list = 2;
  if (this->species_id_list_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        _species_id_list_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->species_id_list_, target);
  }

  // repeated uint64 init_op_list = 3;
  if (this->init_op_list_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        _init_op_list_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64NoTagToArray(this->init_op_list_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:shared.CharacterSpawnerConfig)
  return target;
}

size_t CharacterSpawnerConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:shared.CharacterSpawnerConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 species_id_list = 2;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->species_id_list_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast<::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    _species_id_list_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint64 init_op_list = 3;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt64Size(this->init_op_list_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast<::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    _init_op_list_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // int32 cutoff_rdf_frame_id = 1;
  if (this->cutoff_rdf_frame_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->cutoff_rdf_frame_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CharacterSpawnerConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:shared.CharacterSpawnerConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const CharacterSpawnerConfig* source =
      ::google::protobuf::DynamicCastToGenerated<CharacterSpawnerConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:shared.CharacterSpawnerConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:shared.CharacterSpawnerConfig)
    MergeFrom(*source);
  }
}

void CharacterSpawnerConfig::MergeFrom(const CharacterSpawnerConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:shared.CharacterSpawnerConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  species_id_list_.MergeFrom(from.species_id_list_);
  init_op_list_.MergeFrom(from.init_op_list_);
  if (from.cutoff_rdf_frame_id() != 0) {
    set_cutoff_rdf_frame_id(from.cutoff_rdf_frame_id());
  }
}

void CharacterSpawnerConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:shared.CharacterSpawnerConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CharacterSpawnerConfig::CopyFrom(const CharacterSpawnerConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:shared.CharacterSpawnerConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CharacterSpawnerConfig::IsInitialized() const {
  return true;
}

void CharacterSpawnerConfig::Swap(CharacterSpawnerConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CharacterSpawnerConfig::InternalSwap(CharacterSpawnerConfig* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  species_id_list_.InternalSwap(&other->species_id_list_);
  init_op_list_.InternalSwap(&other->init_op_list_);
  swap(cutoff_rdf_frame_id_, other->cutoff_rdf_frame_id_);
}

::google::protobuf::Metadata CharacterSpawnerConfig::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_serializable_5fdata_2eproto);
  return ::file_level_metadata_serializable_5fdata_2eproto[kIndexInFileMessages];
}


// ===================================================================

void PickableSpawnerConfig::InitAsDefaultInstance() {
}
class PickableSpawnerConfig::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PickableSpawnerConfig::kCutoffRdfFrameIdFieldNumber;
const int PickableSpawnerConfig::kSpeciesIdListFieldNumber;
const int PickableSpawnerConfig::kInitOpListFieldNumber;
const int PickableSpawnerConfig::kPickupTypeListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PickableSpawnerConfig::PickableSpawnerConfig()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:shared.PickableSpawnerConfig)
}
PickableSpawnerConfig::PickableSpawnerConfig(const PickableSpawnerConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      species_id_list_(from.species_id_list_),
      init_op_list_(from.init_op_list_),
      pickup_type_list_(from.pickup_type_list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  cutoff_rdf_frame_id_ = from.cutoff_rdf_frame_id_;
  // @@protoc_insertion_point(copy_constructor:shared.PickableSpawnerConfig)
}

void PickableSpawnerConfig::SharedCtor() {
  cutoff_rdf_frame_id_ = 0;
}

PickableSpawnerConfig::~PickableSpawnerConfig() {
  // @@protoc_insertion_point(destructor:shared.PickableSpawnerConfig)
  SharedDtor();
}

void PickableSpawnerConfig::SharedDtor() {
}

void PickableSpawnerConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PickableSpawnerConfig& PickableSpawnerConfig::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_PickableSpawnerConfig_serializable_5fdata_2eproto.base);
  return *internal_default_instance();
}


void PickableSpawnerConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:shared.PickableSpawnerConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  species_id_list_.Clear();
  init_op_list_.Clear();
  pickup_type_list_.Clear();
  cutoff_rdf_frame_id_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PickableSpawnerConfig::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<PickableSpawnerConfig*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int32 cutoff_rdf_frame_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_cutoff_rdf_frame_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated uint32 species_id_list = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) == 18) {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::protobuf::internal::PackedUInt32Parser;
          object = msg->mutable_species_id_list();
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          if (size) ptr = parser_till_end(ptr, newend, object, ctx);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        do {
          msg->add_species_id_list(::google::protobuf::internal::ReadVarint(&ptr));
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 16 && (ptr += 1));
        break;
      }
      // repeated uint64 init_op_list = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) == 26) {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::protobuf::internal::PackedUInt64Parser;
          object = msg->mutable_init_op_list();
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          if (size) ptr = parser_till_end(ptr, newend, object, ctx);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        do {
          msg->add_init_op_list(::google::protobuf::internal::ReadVarint(&ptr));
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 24 && (ptr += 1));
        break;
      }
      // repeated .shared.PickupType pickup_type_list = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) == 34) {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::protobuf::internal::PackedEnumParser;
          object = msg->mutable_pickup_type_list();
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          if (size) ptr = parser_till_end(ptr, newend, object, ctx);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        do {
          ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
          msg->add_pickup_type_list(static_cast<::shared::PickupType>(val));
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 32 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PickableSpawnerConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:shared.PickableSpawnerConfig)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 cutoff_rdf_frame_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cutoff_rdf_frame_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 species_id_list = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_species_id_list())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 18u, input, this->mutable_species_id_list())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint64 init_op_list = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_init_op_list())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 26u, input, this->mutable_init_op_list())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .shared.PickupType pickup_type_list = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          ::google::protobuf::uint32 length;
          DO_(input->ReadVarint32(&length));
          ::google::protobuf::io::CodedInputStream::Limit limit = input->PushLimit(static_cast<int>(length));
          while (input->BytesUntilLimit() > 0) {
            int value = 0;
            DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
            add_pickup_type_list(static_cast< ::shared::PickupType >(value));
          }
          input->PopLimit(limit);
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          add_pickup_type_list(static_cast< ::shared::PickupType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:shared.PickableSpawnerConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:shared.PickableSpawnerConfig)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PickableSpawnerConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:shared.PickableSpawnerConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 cutoff_rdf_frame_id = 1;
  if (this->cutoff_rdf_frame_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->cutoff_rdf_frame_id(), output);
  }

  // repeated uint32 species_id_list = 2;
  if (this->species_id_list_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_species_id_list_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->species_id_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->species_id_list(i), output);
  }

  // repeated uint64 init_op_list = 3;
  if (this->init_op_list_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_init_op_list_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->init_op_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64NoTag(
      this->init_op_list(i), output);
  }

  // repeated .shared.PickupType pickup_type_list = 4;
  if (this->pickup_type_list_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(
      4,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      output);
    output->WriteVarint32(_pickup_type_list_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->pickup_type_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnumNoTag(
      this->pickup_type_list(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:shared.PickableSpawnerConfig)
}

::google::protobuf::uint8* PickableSpawnerConfig::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:shared.PickableSpawnerConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 cutoff_rdf_frame_id = 1;
  if (this->cutoff_rdf_frame_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->cutoff_rdf_frame_id(), target);
  }

  // repeated uint32 species_id_list = 2;
  if (this->species_id_list_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        _species_id_list_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->species_id_list_, target);
  }

  // repeated uint64 init_op_list = 3;
  if (this->init_op_list_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        _init_op_list_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64NoTagToArray(this->init_op_list_, target);
  }

  // repeated .shared.PickupType pickup_type_list = 4;
  if (this->pickup_type_list_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      4,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(      _pickup_type_list_cached_byte_size_.load(std::memory_order_relaxed),
        target);
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumNoTagToArray(
      this->pickup_type_list_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:shared.PickableSpawnerConfig)
  return target;
}

size_t PickableSpawnerConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:shared.PickableSpawnerConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 species_id_list = 2;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->species_id_list_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast<::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    _species_id_list_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint64 init_op_list = 3;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt64Size(this->init_op_list_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast<::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    _init_op_list_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .shared.PickupType pickup_type_list = 4;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->pickup_type_list_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->pickup_type_list(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast<::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    _pickup_type_list_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // int32 cutoff_rdf_frame_id = 1;
  if (this->cutoff_rdf_frame_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->cutoff_rdf_frame_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PickableSpawnerConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:shared.PickableSpawnerConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const PickableSpawnerConfig* source =
      ::google::protobuf::DynamicCastToGenerated<PickableSpawnerConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:shared.PickableSpawnerConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:shared.PickableSpawnerConfig)
    MergeFrom(*source);
  }
}

void PickableSpawnerConfig::MergeFrom(const PickableSpawnerConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:shared.PickableSpawnerConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  species_id_list_.MergeFrom(from.species_id_list_);
  init_op_list_.MergeFrom(from.init_op_list_);
  pickup_type_list_.MergeFrom(from.pickup_type_list_);
  if (from.cutoff_rdf_frame_id() != 0) {
    set_cutoff_rdf_frame_id(from.cutoff_rdf_frame_id());
  }
}

void PickableSpawnerConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:shared.PickableSpawnerConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PickableSpawnerConfig::CopyFrom(const PickableSpawnerConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:shared.PickableSpawnerConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PickableSpawnerConfig::IsInitialized() const {
  return true;
}

void PickableSpawnerConfig::Swap(PickableSpawnerConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PickableSpawnerConfig::InternalSwap(PickableSpawnerConfig* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  species_id_list_.InternalSwap(&other->species_id_list_);
  init_op_list_.InternalSwap(&other->init_op_list_);
  pickup_type_list_.InternalSwap(&other->pickup_type_list_);
  swap(cutoff_rdf_frame_id_, other->cutoff_rdf_frame_id_);
}

::google::protobuf::Metadata PickableSpawnerConfig::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_serializable_5fdata_2eproto);
  return ::file_level_metadata_serializable_5fdata_2eproto[kIndexInFileMessages];
}


// ===================================================================

void TriggerColliderAttr::InitAsDefaultInstance() {
}
class TriggerColliderAttr::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TriggerColliderAttr::kTriggerLocalIdFieldNumber;
const int TriggerColliderAttr::kSpeciesIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TriggerColliderAttr::TriggerColliderAttr()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:shared.TriggerColliderAttr)
}
TriggerColliderAttr::TriggerColliderAttr(const TriggerColliderAttr& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&trigger_local_id_, &from.trigger_local_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&species_id_) -
    reinterpret_cast<char*>(&trigger_local_id_)) + sizeof(species_id_));
  // @@protoc_insertion_point(copy_constructor:shared.TriggerColliderAttr)
}

void TriggerColliderAttr::SharedCtor() {
  ::memset(&trigger_local_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&species_id_) -
      reinterpret_cast<char*>(&trigger_local_id_)) + sizeof(species_id_));
}

TriggerColliderAttr::~TriggerColliderAttr() {
  // @@protoc_insertion_point(destructor:shared.TriggerColliderAttr)
  SharedDtor();
}

void TriggerColliderAttr::SharedDtor() {
}

void TriggerColliderAttr::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TriggerColliderAttr& TriggerColliderAttr::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_TriggerColliderAttr_serializable_5fdata_2eproto.base);
  return *internal_default_instance();
}


void TriggerColliderAttr::Clear() {
// @@protoc_insertion_point(message_clear_start:shared.TriggerColliderAttr)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&trigger_local_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&species_id_) -
      reinterpret_cast<char*>(&trigger_local_id_)) + sizeof(species_id_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TriggerColliderAttr::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<TriggerColliderAttr*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int32 trigger_local_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_trigger_local_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 species_id = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_species_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TriggerColliderAttr::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:shared.TriggerColliderAttr)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 trigger_local_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &trigger_local_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 species_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &species_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:shared.TriggerColliderAttr)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:shared.TriggerColliderAttr)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TriggerColliderAttr::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:shared.TriggerColliderAttr)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 trigger_local_id = 1;
  if (this->trigger_local_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->trigger_local_id(), output);
  }

  // int32 species_id = 2;
  if (this->species_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->species_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:shared.TriggerColliderAttr)
}

::google::protobuf::uint8* TriggerColliderAttr::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:shared.TriggerColliderAttr)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 trigger_local_id = 1;
  if (this->trigger_local_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->trigger_local_id(), target);
  }

  // int32 species_id = 2;
  if (this->species_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->species_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:shared.TriggerColliderAttr)
  return target;
}

size_t TriggerColliderAttr::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:shared.TriggerColliderAttr)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 trigger_local_id = 1;
  if (this->trigger_local_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->trigger_local_id());
  }

  // int32 species_id = 2;
  if (this->species_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->species_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TriggerColliderAttr::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:shared.TriggerColliderAttr)
  GOOGLE_DCHECK_NE(&from, this);
  const TriggerColliderAttr* source =
      ::google::protobuf::DynamicCastToGenerated<TriggerColliderAttr>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:shared.TriggerColliderAttr)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:shared.TriggerColliderAttr)
    MergeFrom(*source);
  }
}

void TriggerColliderAttr::MergeFrom(const TriggerColliderAttr& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:shared.TriggerColliderAttr)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.trigger_local_id() != 0) {
    set_trigger_local_id(from.trigger_local_id());
  }
  if (from.species_id() != 0) {
    set_species_id(from.species_id());
  }
}

void TriggerColliderAttr::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:shared.TriggerColliderAttr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TriggerColliderAttr::CopyFrom(const TriggerColliderAttr& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:shared.TriggerColliderAttr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TriggerColliderAttr::IsInitialized() const {
  return true;
}

void TriggerColliderAttr::Swap(TriggerColliderAttr* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TriggerColliderAttr::InternalSwap(TriggerColliderAttr* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(trigger_local_id_, other->trigger_local_id_);
  swap(species_id_, other->species_id_);
}

::google::protobuf::Metadata TriggerColliderAttr::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_serializable_5fdata_2eproto);
  return ::file_level_metadata_serializable_5fdata_2eproto[kIndexInFileMessages];
}


// ===================================================================

TriggerConfigFromTiled_BossSpeciesSetEntry_DoNotUse::TriggerConfigFromTiled_BossSpeciesSetEntry_DoNotUse() {}
TriggerConfigFromTiled_BossSpeciesSetEntry_DoNotUse::TriggerConfigFromTiled_BossSpeciesSetEntry_DoNotUse(::google::protobuf::Arena* arena)
    : SuperType(arena) {}
void TriggerConfigFromTiled_BossSpeciesSetEntry_DoNotUse::MergeFrom(const TriggerConfigFromTiled_BossSpeciesSetEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata TriggerConfigFromTiled_BossSpeciesSetEntry_DoNotUse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_serializable_5fdata_2eproto);
  return ::file_level_metadata_serializable_5fdata_2eproto[78];
}
void TriggerConfigFromTiled_BossSpeciesSetEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TriggerConfigFromTiled_BossSpeciesSetEntry_DoNotUse::_ParseMap(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx) {
  using MF = ::google::protobuf::internal::MapField<
      TriggerConfigFromTiled_BossSpeciesSetEntry_DoNotUse, EntryKeyType, EntryValueType,
      kEntryKeyFieldType, kEntryValueFieldType,
      kEntryDefaultEnumValue>;
  auto mf = static_cast<MF*>(object);
  Parser<MF, ::google::protobuf::Map<EntryKeyType, EntryValueType>> parser(mf);
#define DO_(x) if (!(x)) return false
  DO_(parser.ParseMap(begin, end));
#undef DO_
  return true;
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER


// ===================================================================

void TriggerConfigFromTiled::InitAsDefaultInstance() {
}
class TriggerConfigFromTiled::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TriggerConfigFromTiled::kEditorIdFieldNumber;
const int TriggerConfigFromTiled::kSpeciesIdFieldNumber;
const int TriggerConfigFromTiled::kDelayedFramesFieldNumber;
const int TriggerConfigFromTiled::kRecoveryFramesFieldNumber;
const int TriggerConfigFromTiled::kBulletTeamIdFieldNumber;
const int TriggerConfigFromTiled::kSubCycleTriggerFramesFieldNumber;
const int TriggerConfigFromTiled::kSubCycleQuotaFieldNumber;
const int TriggerConfigFromTiled::kQuotaCapFieldNumber;
const int TriggerConfigFromTiled::kSubscribesToIdListFieldNumber;
const int TriggerConfigFromTiled::kSubscribesToExhaustedIdListFieldNumber;
const int TriggerConfigFromTiled::kNewRevivalXFieldNumber;
const int TriggerConfigFromTiled::kNewRevivalYFieldNumber;
const int TriggerConfigFromTiled::kInitDirXFieldNumber;
const int TriggerConfigFromTiled::kInitDirYFieldNumber;
const int TriggerConfigFromTiled::kPublishingEvtMaskUponExhaustedFieldNumber;
const int TriggerConfigFromTiled::kCharacterSpawnerTimeSeqFieldNumber;
const int TriggerConfigFromTiled::kPickableSpawnerTimeSeqFieldNumber;
const int TriggerConfigFromTiled::kForceCtrlRdfCountFieldNumber;
const int TriggerConfigFromTiled::kForceCtrlCmdFieldNumber;
const int TriggerConfigFromTiled::kReloadCollidersInNewPhaseFieldNumber;
const int TriggerConfigFromTiled::kStoryPointIdFieldNumber;
const int TriggerConfigFromTiled::kBgmIdFieldNumber;
const int TriggerConfigFromTiled::kBossSpeciesSetFieldNumber;
const int TriggerConfigFromTiled::kIsBossSavepointFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TriggerConfigFromTiled::TriggerConfigFromTiled()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:shared.TriggerConfigFromTiled)
}
TriggerConfigFromTiled::TriggerConfigFromTiled(const TriggerConfigFromTiled& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      subscribes_to_id_list_(from.subscribes_to_id_list_),
      subscribes_to_exhausted_id_list_(from.subscribes_to_exhausted_id_list_),
      character_spawner_time_seq_(from.character_spawner_time_seq_),
      pickable_spawner_time_seq_(from.pickable_spawner_time_seq_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  boss_species_set_.MergeFrom(from.boss_species_set_);
  ::memcpy(&editor_id_, &from.editor_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&bgm_id_) -
    reinterpret_cast<char*>(&editor_id_)) + sizeof(bgm_id_));
  // @@protoc_insertion_point(copy_constructor:shared.TriggerConfigFromTiled)
}

void TriggerConfigFromTiled::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_TriggerConfigFromTiled_serializable_5fdata_2eproto.base);
  ::memset(&editor_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bgm_id_) -
      reinterpret_cast<char*>(&editor_id_)) + sizeof(bgm_id_));
}

TriggerConfigFromTiled::~TriggerConfigFromTiled() {
  // @@protoc_insertion_point(destructor:shared.TriggerConfigFromTiled)
  SharedDtor();
}

void TriggerConfigFromTiled::SharedDtor() {
}

void TriggerConfigFromTiled::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TriggerConfigFromTiled& TriggerConfigFromTiled::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_TriggerConfigFromTiled_serializable_5fdata_2eproto.base);
  return *internal_default_instance();
}


void TriggerConfigFromTiled::Clear() {
// @@protoc_insertion_point(message_clear_start:shared.TriggerConfigFromTiled)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  subscribes_to_id_list_.Clear();
  subscribes_to_exhausted_id_list_.Clear();
  character_spawner_time_seq_.Clear();
  pickable_spawner_time_seq_.Clear();
  boss_species_set_.Clear();
  ::memset(&editor_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bgm_id_) -
      reinterpret_cast<char*>(&editor_id_)) + sizeof(bgm_id_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TriggerConfigFromTiled::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<TriggerConfigFromTiled*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int32 editor_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_editor_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 species_id = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_species_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 delayed_frames = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_delayed_frames(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 recovery_frames = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_recovery_frames(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 bullet_team_id = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_bullet_team_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 sub_cycle_trigger_frames = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_sub_cycle_trigger_frames(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 sub_cycle_quota = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        msg->set_sub_cycle_quota(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 quota_cap = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 64) goto handle_unusual;
        msg->set_quota_cap(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated int32 subscribes_to_id_list = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) == 74) {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::protobuf::internal::PackedInt32Parser;
          object = msg->mutable_subscribes_to_id_list();
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          if (size) ptr = parser_till_end(ptr, newend, object, ctx);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 72) goto handle_unusual;
        do {
          msg->add_subscribes_to_id_list(::google::protobuf::internal::ReadVarint(&ptr));
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 72 && (ptr += 1));
        break;
      }
      // repeated int32 subscribes_to_exhausted_id_list = 10;
      case 10: {
        if (static_cast<::google::protobuf::uint8>(tag) == 82) {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::protobuf::internal::PackedInt32Parser;
          object = msg->mutable_subscribes_to_exhausted_id_list();
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          if (size) ptr = parser_till_end(ptr, newend, object, ctx);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 80) goto handle_unusual;
        do {
          msg->add_subscribes_to_exhausted_id_list(::google::protobuf::internal::ReadVarint(&ptr));
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 80 && (ptr += 1));
        break;
      }
      // float new_revival_x = 11;
      case 11: {
        if (static_cast<::google::protobuf::uint8>(tag) != 93) goto handle_unusual;
        msg->set_new_revival_x(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // float new_revival_y = 12;
      case 12: {
        if (static_cast<::google::protobuf::uint8>(tag) != 101) goto handle_unusual;
        msg->set_new_revival_y(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // int32 init_dir_x = 13;
      case 13: {
        if (static_cast<::google::protobuf::uint8>(tag) != 104) goto handle_unusual;
        msg->set_init_dir_x(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 init_dir_y = 14;
      case 14: {
        if (static_cast<::google::protobuf::uint8>(tag) != 112) goto handle_unusual;
        msg->set_init_dir_y(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // uint64 publishing_evt_mask_upon_exhausted = 15;
      case 15: {
        if (static_cast<::google::protobuf::uint8>(tag) != 120) goto handle_unusual;
        msg->set_publishing_evt_mask_upon_exhausted(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated .shared.CharacterSpawnerConfig character_spawner_time_seq = 16;
      case 16: {
        if (static_cast<::google::protobuf::uint8>(tag) != 130) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::shared::CharacterSpawnerConfig::_InternalParse;
          object = msg->add_character_spawner_time_seq();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 65535) == 386 && (ptr += 2));
        break;
      }
      // repeated .shared.PickableSpawnerConfig pickable_spawner_time_seq = 17;
      case 17: {
        if (static_cast<::google::protobuf::uint8>(tag) != 138) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::shared::PickableSpawnerConfig::_InternalParse;
          object = msg->add_pickable_spawner_time_seq();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 65535) == 394 && (ptr += 2));
        break;
      }
      // int32 force_ctrl_rdf_count = 18;
      case 18: {
        if (static_cast<::google::protobuf::uint8>(tag) != 144) goto handle_unusual;
        msg->set_force_ctrl_rdf_count(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // uint64 force_ctrl_cmd = 19;
      case 19: {
        if (static_cast<::google::protobuf::uint8>(tag) != 152) goto handle_unusual;
        msg->set_force_ctrl_cmd(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // bool reload_colliders_in_new_phase = 20;
      case 20: {
        if (static_cast<::google::protobuf::uint8>(tag) != 160) goto handle_unusual;
        msg->set_reload_colliders_in_new_phase(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 story_point_id = 1024;
      case 1024: {
        if (static_cast<::google::protobuf::uint8>(tag) != 0) goto handle_unusual;
        msg->set_story_point_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 bgm_id = 1025;
      case 1025: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_bgm_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // map<uint32, bool> boss_species_set = 1026;
      case 1026: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::protobuf::internal::SlowMapEntryParser;
          auto parse_map = ::shared::TriggerConfigFromTiled_BossSpeciesSetEntry_DoNotUse::_ParseMap;
          ctx->extra_parse_data().payload.clear();
          ctx->extra_parse_data().parse_map = parse_map;
          object = &msg->boss_species_set_;
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(parse_map(ptr, newend, object, ctx));
          ptr = newend;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 65535) == 16530 && (ptr += 2));
        break;
      }
      // bool is_boss_savepoint = 1027;
      case 1027: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_is_boss_savepoint(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TriggerConfigFromTiled::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:shared.TriggerConfigFromTiled)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 editor_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &editor_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 species_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &species_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 delayed_frames = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &delayed_frames_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 recovery_frames = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &recovery_frames_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 bullet_team_id = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bullet_team_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 sub_cycle_trigger_frames = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sub_cycle_trigger_frames_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 sub_cycle_quota = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (56 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sub_cycle_quota_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 quota_cap = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (64 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &quota_cap_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 subscribes_to_id_list = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (74 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_subscribes_to_id_list())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (72 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 74u, input, this->mutable_subscribes_to_id_list())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 subscribes_to_exhausted_id_list = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (82 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_subscribes_to_exhausted_id_list())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (80 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 82u, input, this->mutable_subscribes_to_exhausted_id_list())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float new_revival_x = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (93 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &new_revival_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float new_revival_y = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (101 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &new_revival_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 init_dir_x = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (104 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &init_dir_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 init_dir_y = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (112 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &init_dir_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 publishing_evt_mask_upon_exhausted = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (120 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &publishing_evt_mask_upon_exhausted_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .shared.CharacterSpawnerConfig character_spawner_time_seq = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (130 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_character_spawner_time_seq()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .shared.PickableSpawnerConfig pickable_spawner_time_seq = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (138 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_pickable_spawner_time_seq()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 force_ctrl_rdf_count = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (144 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &force_ctrl_rdf_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 force_ctrl_cmd = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (152 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &force_ctrl_cmd_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool reload_colliders_in_new_phase = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (160 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &reload_colliders_in_new_phase_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 story_point_id = 1024;
      case 1024: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8192 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &story_point_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 bgm_id = 1025;
      case 1025: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8200 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bgm_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<uint32, bool> boss_species_set = 1026;
      case 1026: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8210 & 0xFF)) {
          TriggerConfigFromTiled_BossSpeciesSetEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              TriggerConfigFromTiled_BossSpeciesSetEntry_DoNotUse,
              ::google::protobuf::uint32, bool,
              ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
              ::google::protobuf::internal::WireFormatLite::TYPE_BOOL,
              0 >,
            ::google::protobuf::Map< ::google::protobuf::uint32, bool > > parser(&boss_species_set_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_boss_savepoint = 1027;
      case 1027: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8216 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_boss_savepoint_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:shared.TriggerConfigFromTiled)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:shared.TriggerConfigFromTiled)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TriggerConfigFromTiled::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:shared.TriggerConfigFromTiled)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 editor_id = 1;
  if (this->editor_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->editor_id(), output);
  }

  // int32 species_id = 2;
  if (this->species_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->species_id(), output);
  }

  // int32 delayed_frames = 3;
  if (this->delayed_frames() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->delayed_frames(), output);
  }

  // int32 recovery_frames = 4;
  if (this->recovery_frames() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->recovery_frames(), output);
  }

  // int32 bullet_team_id = 5;
  if (this->bullet_team_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->bullet_team_id(), output);
  }

  // int32 sub_cycle_trigger_frames = 6;
  if (this->sub_cycle_trigger_frames() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->sub_cycle_trigger_frames(), output);
  }

  // int32 sub_cycle_quota = 7;
  if (this->sub_cycle_quota() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->sub_cycle_quota(), output);
  }

  // int32 quota_cap = 8;
  if (this->quota_cap() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->quota_cap(), output);
  }

  // repeated int32 subscribes_to_id_list = 9;
  if (this->subscribes_to_id_list_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(9, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_subscribes_to_id_list_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->subscribes_to_id_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->subscribes_to_id_list(i), output);
  }

  // repeated int32 subscribes_to_exhausted_id_list = 10;
  if (this->subscribes_to_exhausted_id_list_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(10, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_subscribes_to_exhausted_id_list_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->subscribes_to_exhausted_id_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->subscribes_to_exhausted_id_list(i), output);
  }

  // float new_revival_x = 11;
  if (this->new_revival_x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->new_revival_x(), output);
  }

  // float new_revival_y = 12;
  if (this->new_revival_y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->new_revival_y(), output);
  }

  // int32 init_dir_x = 13;
  if (this->init_dir_x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->init_dir_x(), output);
  }

  // int32 init_dir_y = 14;
  if (this->init_dir_y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->init_dir_y(), output);
  }

  // uint64 publishing_evt_mask_upon_exhausted = 15;
  if (this->publishing_evt_mask_upon_exhausted() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(15, this->publishing_evt_mask_upon_exhausted(), output);
  }

  // repeated .shared.CharacterSpawnerConfig character_spawner_time_seq = 16;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->character_spawner_time_seq_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16,
      this->character_spawner_time_seq(static_cast<int>(i)),
      output);
  }

  // repeated .shared.PickableSpawnerConfig pickable_spawner_time_seq = 17;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->pickable_spawner_time_seq_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17,
      this->pickable_spawner_time_seq(static_cast<int>(i)),
      output);
  }

  // int32 force_ctrl_rdf_count = 18;
  if (this->force_ctrl_rdf_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->force_ctrl_rdf_count(), output);
  }

  // uint64 force_ctrl_cmd = 19;
  if (this->force_ctrl_cmd() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(19, this->force_ctrl_cmd(), output);
  }

  // bool reload_colliders_in_new_phase = 20;
  if (this->reload_colliders_in_new_phase() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(20, this->reload_colliders_in_new_phase(), output);
  }

  // int32 story_point_id = 1024;
  if (this->story_point_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1024, this->story_point_id(), output);
  }

  // int32 bgm_id = 1025;
  if (this->bgm_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1025, this->bgm_id(), output);
  }

  // map<uint32, bool> boss_species_set = 1026;
  if (!this->boss_species_set().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::uint32, bool >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::uint32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (output->IsSerializationDeterministic() &&
        this->boss_species_set().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->boss_species_set().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::uint32, bool >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::uint32, bool >::const_iterator
          it = this->boss_species_set().begin();
          it != this->boss_species_set().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<TriggerConfigFromTiled_BossSpeciesSetEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(boss_species_set_.NewEntryWrapper(items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(1026, *entry, output);
      }
    } else {
      ::std::unique_ptr<TriggerConfigFromTiled_BossSpeciesSetEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::google::protobuf::uint32, bool >::const_iterator
          it = this->boss_species_set().begin();
          it != this->boss_species_set().end(); ++it) {
        entry.reset(boss_species_set_.NewEntryWrapper(it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(1026, *entry, output);
      }
    }
  }

  // bool is_boss_savepoint = 1027;
  if (this->is_boss_savepoint() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1027, this->is_boss_savepoint(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:shared.TriggerConfigFromTiled)
}

::google::protobuf::uint8* TriggerConfigFromTiled::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:shared.TriggerConfigFromTiled)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 editor_id = 1;
  if (this->editor_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->editor_id(), target);
  }

  // int32 species_id = 2;
  if (this->species_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->species_id(), target);
  }

  // int32 delayed_frames = 3;
  if (this->delayed_frames() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->delayed_frames(), target);
  }

  // int32 recovery_frames = 4;
  if (this->recovery_frames() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->recovery_frames(), target);
  }

  // int32 bullet_team_id = 5;
  if (this->bullet_team_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->bullet_team_id(), target);
  }

  // int32 sub_cycle_trigger_frames = 6;
  if (this->sub_cycle_trigger_frames() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->sub_cycle_trigger_frames(), target);
  }

  // int32 sub_cycle_quota = 7;
  if (this->sub_cycle_quota() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->sub_cycle_quota(), target);
  }

  // int32 quota_cap = 8;
  if (this->quota_cap() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->quota_cap(), target);
  }

  // repeated int32 subscribes_to_id_list = 9;
  if (this->subscribes_to_id_list_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      9,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        _subscribes_to_id_list_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->subscribes_to_id_list_, target);
  }

  // repeated int32 subscribes_to_exhausted_id_list = 10;
  if (this->subscribes_to_exhausted_id_list_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      10,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        _subscribes_to_exhausted_id_list_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->subscribes_to_exhausted_id_list_, target);
  }

  // float new_revival_x = 11;
  if (this->new_revival_x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(11, this->new_revival_x(), target);
  }

  // float new_revival_y = 12;
  if (this->new_revival_y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(12, this->new_revival_y(), target);
  }

  // int32 init_dir_x = 13;
  if (this->init_dir_x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->init_dir_x(), target);
  }

  // int32 init_dir_y = 14;
  if (this->init_dir_y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->init_dir_y(), target);
  }

  // uint64 publishing_evt_mask_upon_exhausted = 15;
  if (this->publishing_evt_mask_upon_exhausted() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(15, this->publishing_evt_mask_upon_exhausted(), target);
  }

  // repeated .shared.CharacterSpawnerConfig character_spawner_time_seq = 16;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->character_spawner_time_seq_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        16, this->character_spawner_time_seq(static_cast<int>(i)), target);
  }

  // repeated .shared.PickableSpawnerConfig pickable_spawner_time_seq = 17;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->pickable_spawner_time_seq_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        17, this->pickable_spawner_time_seq(static_cast<int>(i)), target);
  }

  // int32 force_ctrl_rdf_count = 18;
  if (this->force_ctrl_rdf_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->force_ctrl_rdf_count(), target);
  }

  // uint64 force_ctrl_cmd = 19;
  if (this->force_ctrl_cmd() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(19, this->force_ctrl_cmd(), target);
  }

  // bool reload_colliders_in_new_phase = 20;
  if (this->reload_colliders_in_new_phase() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(20, this->reload_colliders_in_new_phase(), target);
  }

  // int32 story_point_id = 1024;
  if (this->story_point_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1024, this->story_point_id(), target);
  }

  // int32 bgm_id = 1025;
  if (this->bgm_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1025, this->bgm_id(), target);
  }

  // map<uint32, bool> boss_species_set = 1026;
  if (!this->boss_species_set().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::uint32, bool >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::uint32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (false &&
        this->boss_species_set().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->boss_species_set().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::uint32, bool >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::uint32, bool >::const_iterator
          it = this->boss_species_set().begin();
          it != this->boss_species_set().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<TriggerConfigFromTiled_BossSpeciesSetEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(boss_species_set_.NewEntryWrapper(items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(1026, *entry, target);
      }
    } else {
      ::std::unique_ptr<TriggerConfigFromTiled_BossSpeciesSetEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::google::protobuf::uint32, bool >::const_iterator
          it = this->boss_species_set().begin();
          it != this->boss_species_set().end(); ++it) {
        entry.reset(boss_species_set_.NewEntryWrapper(it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(1026, *entry, target);
      }
    }
  }

  // bool is_boss_savepoint = 1027;
  if (this->is_boss_savepoint() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1027, this->is_boss_savepoint(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:shared.TriggerConfigFromTiled)
  return target;
}

size_t TriggerConfigFromTiled::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:shared.TriggerConfigFromTiled)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 subscribes_to_id_list = 9;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->subscribes_to_id_list_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast<::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    _subscribes_to_id_list_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 subscribes_to_exhausted_id_list = 10;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->subscribes_to_exhausted_id_list_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast<::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    _subscribes_to_exhausted_id_list_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .shared.CharacterSpawnerConfig character_spawner_time_seq = 16;
  {
    unsigned int count = static_cast<unsigned int>(this->character_spawner_time_seq_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->character_spawner_time_seq(static_cast<int>(i)));
    }
  }

  // repeated .shared.PickableSpawnerConfig pickable_spawner_time_seq = 17;
  {
    unsigned int count = static_cast<unsigned int>(this->pickable_spawner_time_seq_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->pickable_spawner_time_seq(static_cast<int>(i)));
    }
  }

  // map<uint32, bool> boss_species_set = 1026;
  total_size += 2 *
      ::google::protobuf::internal::FromIntSize(this->boss_species_set_size());
  {
    ::std::unique_ptr<TriggerConfigFromTiled_BossSpeciesSetEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::google::protobuf::uint32, bool >::const_iterator
        it = this->boss_species_set().begin();
        it != this->boss_species_set().end(); ++it) {
      entry.reset(boss_species_set_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // int32 editor_id = 1;
  if (this->editor_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->editor_id());
  }

  // int32 species_id = 2;
  if (this->species_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->species_id());
  }

  // int32 delayed_frames = 3;
  if (this->delayed_frames() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->delayed_frames());
  }

  // int32 recovery_frames = 4;
  if (this->recovery_frames() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->recovery_frames());
  }

  // int32 bullet_team_id = 5;
  if (this->bullet_team_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->bullet_team_id());
  }

  // int32 sub_cycle_trigger_frames = 6;
  if (this->sub_cycle_trigger_frames() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->sub_cycle_trigger_frames());
  }

  // int32 sub_cycle_quota = 7;
  if (this->sub_cycle_quota() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->sub_cycle_quota());
  }

  // int32 quota_cap = 8;
  if (this->quota_cap() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->quota_cap());
  }

  // float new_revival_x = 11;
  if (this->new_revival_x() != 0) {
    total_size += 1 + 4;
  }

  // float new_revival_y = 12;
  if (this->new_revival_y() != 0) {
    total_size += 1 + 4;
  }

  // int32 init_dir_x = 13;
  if (this->init_dir_x() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->init_dir_x());
  }

  // int32 init_dir_y = 14;
  if (this->init_dir_y() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->init_dir_y());
  }

  // uint64 publishing_evt_mask_upon_exhausted = 15;
  if (this->publishing_evt_mask_upon_exhausted() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->publishing_evt_mask_upon_exhausted());
  }

  // uint64 force_ctrl_cmd = 19;
  if (this->force_ctrl_cmd() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->force_ctrl_cmd());
  }

  // int32 force_ctrl_rdf_count = 18;
  if (this->force_ctrl_rdf_count() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->force_ctrl_rdf_count());
  }

  // bool reload_colliders_in_new_phase = 20;
  if (this->reload_colliders_in_new_phase() != 0) {
    total_size += 2 + 1;
  }

  // bool is_boss_savepoint = 1027;
  if (this->is_boss_savepoint() != 0) {
    total_size += 2 + 1;
  }

  // int32 story_point_id = 1024;
  if (this->story_point_id() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->story_point_id());
  }

  // int32 bgm_id = 1025;
  if (this->bgm_id() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->bgm_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TriggerConfigFromTiled::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:shared.TriggerConfigFromTiled)
  GOOGLE_DCHECK_NE(&from, this);
  const TriggerConfigFromTiled* source =
      ::google::protobuf::DynamicCastToGenerated<TriggerConfigFromTiled>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:shared.TriggerConfigFromTiled)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:shared.TriggerConfigFromTiled)
    MergeFrom(*source);
  }
}

void TriggerConfigFromTiled::MergeFrom(const TriggerConfigFromTiled& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:shared.TriggerConfigFromTiled)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  subscribes_to_id_list_.MergeFrom(from.subscribes_to_id_list_);
  subscribes_to_exhausted_id_list_.MergeFrom(from.subscribes_to_exhausted_id_list_);
  character_spawner_time_seq_.MergeFrom(from.character_spawner_time_seq_);
  pickable_spawner_time_seq_.MergeFrom(from.pickable_spawner_time_seq_);
  boss_species_set_.MergeFrom(from.boss_species_set_);
  if (from.editor_id() != 0) {
    set_editor_id(from.editor_id());
  }
  if (from.species_id() != 0) {
    set_species_id(from.species_id());
  }
  if (from.delayed_frames() != 0) {
    set_delayed_frames(from.delayed_frames());
  }
  if (from.recovery_frames() != 0) {
    set_recovery_frames(from.recovery_frames());
  }
  if (from.bullet_team_id() != 0) {
    set_bullet_team_id(from.bullet_team_id());
  }
  if (from.sub_cycle_trigger_frames() != 0) {
    set_sub_cycle_trigger_frames(from.sub_cycle_trigger_frames());
  }
  if (from.sub_cycle_quota() != 0) {
    set_sub_cycle_quota(from.sub_cycle_quota());
  }
  if (from.quota_cap() != 0) {
    set_quota_cap(from.quota_cap());
  }
  if (from.new_revival_x() != 0) {
    set_new_revival_x(from.new_revival_x());
  }
  if (from.new_revival_y() != 0) {
    set_new_revival_y(from.new_revival_y());
  }
  if (from.init_dir_x() != 0) {
    set_init_dir_x(from.init_dir_x());
  }
  if (from.init_dir_y() != 0) {
    set_init_dir_y(from.init_dir_y());
  }
  if (from.publishing_evt_mask_upon_exhausted() != 0) {
    set_publishing_evt_mask_upon_exhausted(from.publishing_evt_mask_upon_exhausted());
  }
  if (from.force_ctrl_cmd() != 0) {
    set_force_ctrl_cmd(from.force_ctrl_cmd());
  }
  if (from.force_ctrl_rdf_count() != 0) {
    set_force_ctrl_rdf_count(from.force_ctrl_rdf_count());
  }
  if (from.reload_colliders_in_new_phase() != 0) {
    set_reload_colliders_in_new_phase(from.reload_colliders_in_new_phase());
  }
  if (from.is_boss_savepoint() != 0) {
    set_is_boss_savepoint(from.is_boss_savepoint());
  }
  if (from.story_point_id() != 0) {
    set_story_point_id(from.story_point_id());
  }
  if (from.bgm_id() != 0) {
    set_bgm_id(from.bgm_id());
  }
}

void TriggerConfigFromTiled::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:shared.TriggerConfigFromTiled)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TriggerConfigFromTiled::CopyFrom(const TriggerConfigFromTiled& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:shared.TriggerConfigFromTiled)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TriggerConfigFromTiled::IsInitialized() const {
  return true;
}

void TriggerConfigFromTiled::Swap(TriggerConfigFromTiled* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TriggerConfigFromTiled::InternalSwap(TriggerConfigFromTiled* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  subscribes_to_id_list_.InternalSwap(&other->subscribes_to_id_list_);
  subscribes_to_exhausted_id_list_.InternalSwap(&other->subscribes_to_exhausted_id_list_);
  CastToBase(&character_spawner_time_seq_)->InternalSwap(CastToBase(&other->character_spawner_time_seq_));
  CastToBase(&pickable_spawner_time_seq_)->InternalSwap(CastToBase(&other->pickable_spawner_time_seq_));
  boss_species_set_.Swap(&other->boss_species_set_);
  swap(editor_id_, other->editor_id_);
  swap(species_id_, other->species_id_);
  swap(delayed_frames_, other->delayed_frames_);
  swap(recovery_frames_, other->recovery_frames_);
  swap(bullet_team_id_, other->bullet_team_id_);
  swap(sub_cycle_trigger_frames_, other->sub_cycle_trigger_frames_);
  swap(sub_cycle_quota_, other->sub_cycle_quota_);
  swap(quota_cap_, other->quota_cap_);
  swap(new_revival_x_, other->new_revival_x_);
  swap(new_revival_y_, other->new_revival_y_);
  swap(init_dir_x_, other->init_dir_x_);
  swap(init_dir_y_, other->init_dir_y_);
  swap(publishing_evt_mask_upon_exhausted_, other->publishing_evt_mask_upon_exhausted_);
  swap(force_ctrl_cmd_, other->force_ctrl_cmd_);
  swap(force_ctrl_rdf_count_, other->force_ctrl_rdf_count_);
  swap(reload_colliders_in_new_phase_, other->reload_colliders_in_new_phase_);
  swap(is_boss_savepoint_, other->is_boss_savepoint_);
  swap(story_point_id_, other->story_point_id_);
  swap(bgm_id_, other->bgm_id_);
}

::google::protobuf::Metadata TriggerConfigFromTiled::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_serializable_5fdata_2eproto);
  return ::file_level_metadata_serializable_5fdata_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Trigger::InitAsDefaultInstance() {
}
class Trigger::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Trigger::kEditorIdFieldNumber;
const int Trigger::kTriggerLocalIdFieldNumber;
const int Trigger::kFramesToFireFieldNumber;
const int Trigger::kFramesToRecoverFieldNumber;
const int Trigger::kQuotaFieldNumber;
const int Trigger::kBulletTeamIdFieldNumber;
const int Trigger::kDirXFieldNumber;
const int Trigger::kSubCycleQuotaLeftFieldNumber;
const int Trigger::kStateFieldNumber;
const int Trigger::kFramesInStateFieldNumber;
const int Trigger::kXFieldNumber;
const int Trigger::kYFieldNumber;
const int Trigger::kDemandedEvtMaskFieldNumber;
const int Trigger::kFulfilledEvtMaskFieldNumber;
const int Trigger::kWaveNpcKilledEvtMaskCounterFieldNumber;
const int Trigger::kSubscriberLocalIdsMaskFieldNumber;
const int Trigger::kExhaustSubscriberLocalIdsMaskFieldNumber;
const int Trigger::kOffenderJoinIndexFieldNumber;
const int Trigger::kOffenderBulletTeamIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Trigger::Trigger()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:shared.Trigger)
}
Trigger::Trigger(const Trigger& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&editor_id_, &from.editor_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&offender_bullet_team_id_) -
    reinterpret_cast<char*>(&editor_id_)) + sizeof(offender_bullet_team_id_));
  // @@protoc_insertion_point(copy_constructor:shared.Trigger)
}

void Trigger::SharedCtor() {
  ::memset(&editor_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&offender_bullet_team_id_) -
      reinterpret_cast<char*>(&editor_id_)) + sizeof(offender_bullet_team_id_));
}

Trigger::~Trigger() {
  // @@protoc_insertion_point(destructor:shared.Trigger)
  SharedDtor();
}

void Trigger::SharedDtor() {
}

void Trigger::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Trigger& Trigger::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Trigger_serializable_5fdata_2eproto.base);
  return *internal_default_instance();
}


void Trigger::Clear() {
// @@protoc_insertion_point(message_clear_start:shared.Trigger)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&editor_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&offender_bullet_team_id_) -
      reinterpret_cast<char*>(&editor_id_)) + sizeof(offender_bullet_team_id_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Trigger::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Trigger*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int32 editor_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_editor_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 trigger_local_id = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_trigger_local_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 frames_to_fire = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_frames_to_fire(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 frames_to_recover = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_frames_to_recover(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 quota = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_quota(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 bullet_team_id = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_bullet_team_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 dir_x = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        msg->set_dir_x(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 sub_cycle_quota_left = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 72) goto handle_unusual;
        msg->set_sub_cycle_quota_left(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // .shared.TriggerState state = 10;
      case 10: {
        if (static_cast<::google::protobuf::uint8>(tag) != 80) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_state(static_cast<::shared::TriggerState>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 frames_in_state = 11;
      case 11: {
        if (static_cast<::google::protobuf::uint8>(tag) != 88) goto handle_unusual;
        msg->set_frames_in_state(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // float x = 12;
      case 12: {
        if (static_cast<::google::protobuf::uint8>(tag) != 101) goto handle_unusual;
        msg->set_x(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // float y = 13;
      case 13: {
        if (static_cast<::google::protobuf::uint8>(tag) != 109) goto handle_unusual;
        msg->set_y(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // uint64 demanded_evt_mask = 14;
      case 14: {
        if (static_cast<::google::protobuf::uint8>(tag) != 112) goto handle_unusual;
        msg->set_demanded_evt_mask(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // uint64 fulfilled_evt_mask = 15;
      case 15: {
        if (static_cast<::google::protobuf::uint8>(tag) != 120) goto handle_unusual;
        msg->set_fulfilled_evt_mask(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // uint64 wave_npc_killed_evt_mask_counter = 16;
      case 16: {
        if (static_cast<::google::protobuf::uint8>(tag) != 128) goto handle_unusual;
        msg->set_wave_npc_killed_evt_mask_counter(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // uint64 subscriber_local_ids_mask = 17;
      case 17: {
        if (static_cast<::google::protobuf::uint8>(tag) != 136) goto handle_unusual;
        msg->set_subscriber_local_ids_mask(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // uint64 exhaust_subscriber_local_ids_mask = 18;
      case 18: {
        if (static_cast<::google::protobuf::uint8>(tag) != 144) goto handle_unusual;
        msg->set_exhaust_subscriber_local_ids_mask(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 offender_join_index = 19;
      case 19: {
        if (static_cast<::google::protobuf::uint8>(tag) != 152) goto handle_unusual;
        msg->set_offender_join_index(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 offender_bullet_team_id = 20;
      case 20: {
        if (static_cast<::google::protobuf::uint8>(tag) != 160) goto handle_unusual;
        msg->set_offender_bullet_team_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Trigger::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:shared.Trigger)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 editor_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &editor_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 trigger_local_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &trigger_local_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 frames_to_fire = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &frames_to_fire_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 frames_to_recover = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &frames_to_recover_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 quota = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &quota_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 bullet_team_id = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bullet_team_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 dir_x = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (56 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dir_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 sub_cycle_quota_left = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (72 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sub_cycle_quota_left_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .shared.TriggerState state = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (80 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_state(static_cast< ::shared::TriggerState >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 frames_in_state = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (88 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &frames_in_state_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float x = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (101 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float y = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (109 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 demanded_evt_mask = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (112 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &demanded_evt_mask_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 fulfilled_evt_mask = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (120 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &fulfilled_evt_mask_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 wave_npc_killed_evt_mask_counter = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (128 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &wave_npc_killed_evt_mask_counter_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 subscriber_local_ids_mask = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (136 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &subscriber_local_ids_mask_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 exhaust_subscriber_local_ids_mask = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (144 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &exhaust_subscriber_local_ids_mask_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 offender_join_index = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (152 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &offender_join_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 offender_bullet_team_id = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (160 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &offender_bullet_team_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:shared.Trigger)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:shared.Trigger)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Trigger::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:shared.Trigger)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 editor_id = 1;
  if (this->editor_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->editor_id(), output);
  }

  // int32 trigger_local_id = 2;
  if (this->trigger_local_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->trigger_local_id(), output);
  }

  // int32 frames_to_fire = 3;
  if (this->frames_to_fire() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->frames_to_fire(), output);
  }

  // int32 frames_to_recover = 4;
  if (this->frames_to_recover() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->frames_to_recover(), output);
  }

  // int32 quota = 5;
  if (this->quota() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->quota(), output);
  }

  // int32 bullet_team_id = 6;
  if (this->bullet_team_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->bullet_team_id(), output);
  }

  // int32 dir_x = 7;
  if (this->dir_x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->dir_x(), output);
  }

  // int32 sub_cycle_quota_left = 9;
  if (this->sub_cycle_quota_left() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->sub_cycle_quota_left(), output);
  }

  // .shared.TriggerState state = 10;
  if (this->state() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      10, this->state(), output);
  }

  // int32 frames_in_state = 11;
  if (this->frames_in_state() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->frames_in_state(), output);
  }

  // float x = 12;
  if (this->x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->x(), output);
  }

  // float y = 13;
  if (this->y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(13, this->y(), output);
  }

  // uint64 demanded_evt_mask = 14;
  if (this->demanded_evt_mask() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(14, this->demanded_evt_mask(), output);
  }

  // uint64 fulfilled_evt_mask = 15;
  if (this->fulfilled_evt_mask() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(15, this->fulfilled_evt_mask(), output);
  }

  // uint64 wave_npc_killed_evt_mask_counter = 16;
  if (this->wave_npc_killed_evt_mask_counter() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(16, this->wave_npc_killed_evt_mask_counter(), output);
  }

  // uint64 subscriber_local_ids_mask = 17;
  if (this->subscriber_local_ids_mask() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(17, this->subscriber_local_ids_mask(), output);
  }

  // uint64 exhaust_subscriber_local_ids_mask = 18;
  if (this->exhaust_subscriber_local_ids_mask() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(18, this->exhaust_subscriber_local_ids_mask(), output);
  }

  // int32 offender_join_index = 19;
  if (this->offender_join_index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->offender_join_index(), output);
  }

  // int32 offender_bullet_team_id = 20;
  if (this->offender_bullet_team_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->offender_bullet_team_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:shared.Trigger)
}

::google::protobuf::uint8* Trigger::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:shared.Trigger)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 editor_id = 1;
  if (this->editor_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->editor_id(), target);
  }

  // int32 trigger_local_id = 2;
  if (this->trigger_local_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->trigger_local_id(), target);
  }

  // int32 frames_to_fire = 3;
  if (this->frames_to_fire() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->frames_to_fire(), target);
  }

  // int32 frames_to_recover = 4;
  if (this->frames_to_recover() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->frames_to_recover(), target);
  }

  // int32 quota = 5;
  if (this->quota() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->quota(), target);
  }

  // int32 bullet_team_id = 6;
  if (this->bullet_team_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->bullet_team_id(), target);
  }

  // int32 dir_x = 7;
  if (this->dir_x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->dir_x(), target);
  }

  // int32 sub_cycle_quota_left = 9;
  if (this->sub_cycle_quota_left() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->sub_cycle_quota_left(), target);
  }

  // .shared.TriggerState state = 10;
  if (this->state() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      10, this->state(), target);
  }

  // int32 frames_in_state = 11;
  if (this->frames_in_state() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->frames_in_state(), target);
  }

  // float x = 12;
  if (this->x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(12, this->x(), target);
  }

  // float y = 13;
  if (this->y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(13, this->y(), target);
  }

  // uint64 demanded_evt_mask = 14;
  if (this->demanded_evt_mask() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(14, this->demanded_evt_mask(), target);
  }

  // uint64 fulfilled_evt_mask = 15;
  if (this->fulfilled_evt_mask() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(15, this->fulfilled_evt_mask(), target);
  }

  // uint64 wave_npc_killed_evt_mask_counter = 16;
  if (this->wave_npc_killed_evt_mask_counter() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(16, this->wave_npc_killed_evt_mask_counter(), target);
  }

  // uint64 subscriber_local_ids_mask = 17;
  if (this->subscriber_local_ids_mask() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(17, this->subscriber_local_ids_mask(), target);
  }

  // uint64 exhaust_subscriber_local_ids_mask = 18;
  if (this->exhaust_subscriber_local_ids_mask() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(18, this->exhaust_subscriber_local_ids_mask(), target);
  }

  // int32 offender_join_index = 19;
  if (this->offender_join_index() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->offender_join_index(), target);
  }

  // int32 offender_bullet_team_id = 20;
  if (this->offender_bullet_team_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->offender_bullet_team_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:shared.Trigger)
  return target;
}

size_t Trigger::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:shared.Trigger)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 editor_id = 1;
  if (this->editor_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->editor_id());
  }

  // int32 trigger_local_id = 2;
  if (this->trigger_local_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->trigger_local_id());
  }

  // int32 frames_to_fire = 3;
  if (this->frames_to_fire() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->frames_to_fire());
  }

  // int32 frames_to_recover = 4;
  if (this->frames_to_recover() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->frames_to_recover());
  }

  // int32 quota = 5;
  if (this->quota() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->quota());
  }

  // int32 bullet_team_id = 6;
  if (this->bullet_team_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->bullet_team_id());
  }

  // int32 dir_x = 7;
  if (this->dir_x() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->dir_x());
  }

  // int32 sub_cycle_quota_left = 9;
  if (this->sub_cycle_quota_left() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->sub_cycle_quota_left());
  }

  // .shared.TriggerState state = 10;
  if (this->state() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
  }

  // int32 frames_in_state = 11;
  if (this->frames_in_state() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->frames_in_state());
  }

  // float x = 12;
  if (this->x() != 0) {
    total_size += 1 + 4;
  }

  // float y = 13;
  if (this->y() != 0) {
    total_size += 1 + 4;
  }

  // uint64 demanded_evt_mask = 14;
  if (this->demanded_evt_mask() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->demanded_evt_mask());
  }

  // uint64 fulfilled_evt_mask = 15;
  if (this->fulfilled_evt_mask() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->fulfilled_evt_mask());
  }

  // uint64 wave_npc_killed_evt_mask_counter = 16;
  if (this->wave_npc_killed_evt_mask_counter() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->wave_npc_killed_evt_mask_counter());
  }

  // uint64 subscriber_local_ids_mask = 17;
  if (this->subscriber_local_ids_mask() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->subscriber_local_ids_mask());
  }

  // uint64 exhaust_subscriber_local_ids_mask = 18;
  if (this->exhaust_subscriber_local_ids_mask() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->exhaust_subscriber_local_ids_mask());
  }

  // int32 offender_join_index = 19;
  if (this->offender_join_index() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->offender_join_index());
  }

  // int32 offender_bullet_team_id = 20;
  if (this->offender_bullet_team_id() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->offender_bullet_team_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Trigger::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:shared.Trigger)
  GOOGLE_DCHECK_NE(&from, this);
  const Trigger* source =
      ::google::protobuf::DynamicCastToGenerated<Trigger>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:shared.Trigger)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:shared.Trigger)
    MergeFrom(*source);
  }
}

void Trigger::MergeFrom(const Trigger& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:shared.Trigger)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.editor_id() != 0) {
    set_editor_id(from.editor_id());
  }
  if (from.trigger_local_id() != 0) {
    set_trigger_local_id(from.trigger_local_id());
  }
  if (from.frames_to_fire() != 0) {
    set_frames_to_fire(from.frames_to_fire());
  }
  if (from.frames_to_recover() != 0) {
    set_frames_to_recover(from.frames_to_recover());
  }
  if (from.quota() != 0) {
    set_quota(from.quota());
  }
  if (from.bullet_team_id() != 0) {
    set_bullet_team_id(from.bullet_team_id());
  }
  if (from.dir_x() != 0) {
    set_dir_x(from.dir_x());
  }
  if (from.sub_cycle_quota_left() != 0) {
    set_sub_cycle_quota_left(from.sub_cycle_quota_left());
  }
  if (from.state() != 0) {
    set_state(from.state());
  }
  if (from.frames_in_state() != 0) {
    set_frames_in_state(from.frames_in_state());
  }
  if (from.x() != 0) {
    set_x(from.x());
  }
  if (from.y() != 0) {
    set_y(from.y());
  }
  if (from.demanded_evt_mask() != 0) {
    set_demanded_evt_mask(from.demanded_evt_mask());
  }
  if (from.fulfilled_evt_mask() != 0) {
    set_fulfilled_evt_mask(from.fulfilled_evt_mask());
  }
  if (from.wave_npc_killed_evt_mask_counter() != 0) {
    set_wave_npc_killed_evt_mask_counter(from.wave_npc_killed_evt_mask_counter());
  }
  if (from.subscriber_local_ids_mask() != 0) {
    set_subscriber_local_ids_mask(from.subscriber_local_ids_mask());
  }
  if (from.exhaust_subscriber_local_ids_mask() != 0) {
    set_exhaust_subscriber_local_ids_mask(from.exhaust_subscriber_local_ids_mask());
  }
  if (from.offender_join_index() != 0) {
    set_offender_join_index(from.offender_join_index());
  }
  if (from.offender_bullet_team_id() != 0) {
    set_offender_bullet_team_id(from.offender_bullet_team_id());
  }
}

void Trigger::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:shared.Trigger)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Trigger::CopyFrom(const Trigger& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:shared.Trigger)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Trigger::IsInitialized() const {
  return true;
}

void Trigger::Swap(Trigger* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Trigger::InternalSwap(Trigger* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(editor_id_, other->editor_id_);
  swap(trigger_local_id_, other->trigger_local_id_);
  swap(frames_to_fire_, other->frames_to_fire_);
  swap(frames_to_recover_, other->frames_to_recover_);
  swap(quota_, other->quota_);
  swap(bullet_team_id_, other->bullet_team_id_);
  swap(dir_x_, other->dir_x_);
  swap(sub_cycle_quota_left_, other->sub_cycle_quota_left_);
  swap(state_, other->state_);
  swap(frames_in_state_, other->frames_in_state_);
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(demanded_evt_mask_, other->demanded_evt_mask_);
  swap(fulfilled_evt_mask_, other->fulfilled_evt_mask_);
  swap(wave_npc_killed_evt_mask_counter_, other->wave_npc_killed_evt_mask_counter_);
  swap(subscriber_local_ids_mask_, other->subscriber_local_ids_mask_);
  swap(exhaust_subscriber_local_ids_mask_, other->exhaust_subscriber_local_ids_mask_);
  swap(offender_join_index_, other->offender_join_index_);
  swap(offender_bullet_team_id_, other->offender_bullet_team_id_);
}

::google::protobuf::Metadata Trigger::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_serializable_5fdata_2eproto);
  return ::file_level_metadata_serializable_5fdata_2eproto[kIndexInFileMessages];
}


// ===================================================================

void PlayerMetaInfo::InitAsDefaultInstance() {
}
class PlayerMetaInfo::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PlayerMetaInfo::kPlayerIdFieldNumber;
const int PlayerMetaInfo::kJoinIndexFieldNumber;
const int PlayerMetaInfo::kBulletTeamIdFieldNumber;
const int PlayerMetaInfo::kSpeciesIdFieldNumber;
const int PlayerMetaInfo::kRoomIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlayerMetaInfo::PlayerMetaInfo()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:shared.PlayerMetaInfo)
}
PlayerMetaInfo::PlayerMetaInfo(const PlayerMetaInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  player_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.player_id().size() > 0) {
    player_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.player_id_);
  }
  ::memcpy(&join_index_, &from.join_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&room_id_) -
    reinterpret_cast<char*>(&join_index_)) + sizeof(room_id_));
  // @@protoc_insertion_point(copy_constructor:shared.PlayerMetaInfo)
}

void PlayerMetaInfo::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_PlayerMetaInfo_serializable_5fdata_2eproto.base);
  player_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&join_index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&room_id_) -
      reinterpret_cast<char*>(&join_index_)) + sizeof(room_id_));
}

PlayerMetaInfo::~PlayerMetaInfo() {
  // @@protoc_insertion_point(destructor:shared.PlayerMetaInfo)
  SharedDtor();
}

void PlayerMetaInfo::SharedDtor() {
  player_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void PlayerMetaInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PlayerMetaInfo& PlayerMetaInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_PlayerMetaInfo_serializable_5fdata_2eproto.base);
  return *internal_default_instance();
}


void PlayerMetaInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:shared.PlayerMetaInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  player_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&join_index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&room_id_) -
      reinterpret_cast<char*>(&join_index_)) + sizeof(room_id_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PlayerMetaInfo::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<PlayerMetaInfo*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string player_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("shared.PlayerMetaInfo.player_id");
        object = msg->mutable_player_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // int32 join_index = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_join_index(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 bullet_team_id = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_bullet_team_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // uint32 species_id = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_species_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 room_id = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_room_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PlayerMetaInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:shared.PlayerMetaInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string player_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_player_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->player_id().data(), static_cast<int>(this->player_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "shared.PlayerMetaInfo.player_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 join_index = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &join_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 bullet_team_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bullet_team_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 species_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &species_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 room_id = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &room_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:shared.PlayerMetaInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:shared.PlayerMetaInfo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PlayerMetaInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:shared.PlayerMetaInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string player_id = 1;
  if (this->player_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->player_id().data(), static_cast<int>(this->player_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "shared.PlayerMetaInfo.player_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->player_id(), output);
  }

  // int32 join_index = 2;
  if (this->join_index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->join_index(), output);
  }

  // int32 bullet_team_id = 3;
  if (this->bullet_team_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->bullet_team_id(), output);
  }

  // uint32 species_id = 4;
  if (this->species_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->species_id(), output);
  }

  // int32 room_id = 5;
  if (this->room_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->room_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:shared.PlayerMetaInfo)
}

::google::protobuf::uint8* PlayerMetaInfo::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:shared.PlayerMetaInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string player_id = 1;
  if (this->player_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->player_id().data(), static_cast<int>(this->player_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "shared.PlayerMetaInfo.player_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->player_id(), target);
  }

  // int32 join_index = 2;
  if (this->join_index() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->join_index(), target);
  }

  // int32 bullet_team_id = 3;
  if (this->bullet_team_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->bullet_team_id(), target);
  }

  // uint32 species_id = 4;
  if (this->species_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->species_id(), target);
  }

  // int32 room_id = 5;
  if (this->room_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->room_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:shared.PlayerMetaInfo)
  return target;
}

size_t PlayerMetaInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:shared.PlayerMetaInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string player_id = 1;
  if (this->player_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->player_id());
  }

  // int32 join_index = 2;
  if (this->join_index() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->join_index());
  }

  // int32 bullet_team_id = 3;
  if (this->bullet_team_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->bullet_team_id());
  }

  // uint32 species_id = 4;
  if (this->species_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->species_id());
  }

  // int32 room_id = 5;
  if (this->room_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->room_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlayerMetaInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:shared.PlayerMetaInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const PlayerMetaInfo* source =
      ::google::protobuf::DynamicCastToGenerated<PlayerMetaInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:shared.PlayerMetaInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:shared.PlayerMetaInfo)
    MergeFrom(*source);
  }
}

void PlayerMetaInfo::MergeFrom(const PlayerMetaInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:shared.PlayerMetaInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.player_id().size() > 0) {

    player_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.player_id_);
  }
  if (from.join_index() != 0) {
    set_join_index(from.join_index());
  }
  if (from.bullet_team_id() != 0) {
    set_bullet_team_id(from.bullet_team_id());
  }
  if (from.species_id() != 0) {
    set_species_id(from.species_id());
  }
  if (from.room_id() != 0) {
    set_room_id(from.room_id());
  }
}

void PlayerMetaInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:shared.PlayerMetaInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerMetaInfo::CopyFrom(const PlayerMetaInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:shared.PlayerMetaInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerMetaInfo::IsInitialized() const {
  return true;
}

void PlayerMetaInfo::Swap(PlayerMetaInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlayerMetaInfo::InternalSwap(PlayerMetaInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  player_id_.Swap(&other->player_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(join_index_, other->join_index_);
  swap(bullet_team_id_, other->bullet_team_id_);
  swap(species_id_, other->species_id_);
  swap(room_id_, other->room_id_);
}

::google::protobuf::Metadata PlayerMetaInfo::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_serializable_5fdata_2eproto);
  return ::file_level_metadata_serializable_5fdata_2eproto[kIndexInFileMessages];
}


// ===================================================================

void RpcEndpointHolder::InitAsDefaultInstance() {
}
class RpcEndpointHolder::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RpcEndpointHolder::kIdFieldNumber;
const int RpcEndpointHolder::kExternalAddrHostFieldNumber;
const int RpcEndpointHolder::kExternalAddrPortFieldNumber;
const int RpcEndpointHolder::kInternalAddrHostFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RpcEndpointHolder::RpcEndpointHolder()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:shared.RpcEndpointHolder)
}
RpcEndpointHolder::RpcEndpointHolder(const RpcEndpointHolder& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  external_addr_host_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.external_addr_host().size() > 0) {
    external_addr_host_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.external_addr_host_);
  }
  internal_addr_host_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.internal_addr_host().size() > 0) {
    internal_addr_host_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.internal_addr_host_);
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&external_addr_port_) -
    reinterpret_cast<char*>(&id_)) + sizeof(external_addr_port_));
  // @@protoc_insertion_point(copy_constructor:shared.RpcEndpointHolder)
}

void RpcEndpointHolder::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_RpcEndpointHolder_serializable_5fdata_2eproto.base);
  external_addr_host_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  internal_addr_host_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&external_addr_port_) -
      reinterpret_cast<char*>(&id_)) + sizeof(external_addr_port_));
}

RpcEndpointHolder::~RpcEndpointHolder() {
  // @@protoc_insertion_point(destructor:shared.RpcEndpointHolder)
  SharedDtor();
}

void RpcEndpointHolder::SharedDtor() {
  external_addr_host_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  internal_addr_host_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void RpcEndpointHolder::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RpcEndpointHolder& RpcEndpointHolder::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_RpcEndpointHolder_serializable_5fdata_2eproto.base);
  return *internal_default_instance();
}


void RpcEndpointHolder::Clear() {
// @@protoc_insertion_point(message_clear_start:shared.RpcEndpointHolder)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  external_addr_host_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  internal_addr_host_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&external_addr_port_) -
      reinterpret_cast<char*>(&id_)) + sizeof(external_addr_port_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RpcEndpointHolder::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<RpcEndpointHolder*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // uint32 id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string external_addr_host = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("shared.RpcEndpointHolder.external_addr_host");
        object = msg->mutable_external_addr_host();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // uint32 external_addr_port = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_external_addr_port(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string internal_addr_host = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("shared.RpcEndpointHolder.internal_addr_host");
        object = msg->mutable_internal_addr_host();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RpcEndpointHolder::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:shared.RpcEndpointHolder)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string external_addr_host = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_external_addr_host()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->external_addr_host().data(), static_cast<int>(this->external_addr_host().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "shared.RpcEndpointHolder.external_addr_host"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 external_addr_port = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &external_addr_port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string internal_addr_host = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_internal_addr_host()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->internal_addr_host().data(), static_cast<int>(this->internal_addr_host().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "shared.RpcEndpointHolder.internal_addr_host"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:shared.RpcEndpointHolder)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:shared.RpcEndpointHolder)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RpcEndpointHolder::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:shared.RpcEndpointHolder)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // string external_addr_host = 2;
  if (this->external_addr_host().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->external_addr_host().data(), static_cast<int>(this->external_addr_host().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "shared.RpcEndpointHolder.external_addr_host");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->external_addr_host(), output);
  }

  // uint32 external_addr_port = 3;
  if (this->external_addr_port() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->external_addr_port(), output);
  }

  // string internal_addr_host = 4;
  if (this->internal_addr_host().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->internal_addr_host().data(), static_cast<int>(this->internal_addr_host().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "shared.RpcEndpointHolder.internal_addr_host");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->internal_addr_host(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:shared.RpcEndpointHolder)
}

::google::protobuf::uint8* RpcEndpointHolder::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:shared.RpcEndpointHolder)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // string external_addr_host = 2;
  if (this->external_addr_host().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->external_addr_host().data(), static_cast<int>(this->external_addr_host().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "shared.RpcEndpointHolder.external_addr_host");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->external_addr_host(), target);
  }

  // uint32 external_addr_port = 3;
  if (this->external_addr_port() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->external_addr_port(), target);
  }

  // string internal_addr_host = 4;
  if (this->internal_addr_host().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->internal_addr_host().data(), static_cast<int>(this->internal_addr_host().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "shared.RpcEndpointHolder.internal_addr_host");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->internal_addr_host(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:shared.RpcEndpointHolder)
  return target;
}

size_t RpcEndpointHolder::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:shared.RpcEndpointHolder)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string external_addr_host = 2;
  if (this->external_addr_host().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->external_addr_host());
  }

  // string internal_addr_host = 4;
  if (this->internal_addr_host().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->internal_addr_host());
  }

  // uint32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->id());
  }

  // uint32 external_addr_port = 3;
  if (this->external_addr_port() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->external_addr_port());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RpcEndpointHolder::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:shared.RpcEndpointHolder)
  GOOGLE_DCHECK_NE(&from, this);
  const RpcEndpointHolder* source =
      ::google::protobuf::DynamicCastToGenerated<RpcEndpointHolder>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:shared.RpcEndpointHolder)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:shared.RpcEndpointHolder)
    MergeFrom(*source);
  }
}

void RpcEndpointHolder::MergeFrom(const RpcEndpointHolder& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:shared.RpcEndpointHolder)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.external_addr_host().size() > 0) {

    external_addr_host_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.external_addr_host_);
  }
  if (from.internal_addr_host().size() > 0) {

    internal_addr_host_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.internal_addr_host_);
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.external_addr_port() != 0) {
    set_external_addr_port(from.external_addr_port());
  }
}

void RpcEndpointHolder::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:shared.RpcEndpointHolder)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RpcEndpointHolder::CopyFrom(const RpcEndpointHolder& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:shared.RpcEndpointHolder)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RpcEndpointHolder::IsInitialized() const {
  return true;
}

void RpcEndpointHolder::Swap(RpcEndpointHolder* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RpcEndpointHolder::InternalSwap(RpcEndpointHolder* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  external_addr_host_.Swap(&other->external_addr_host_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  internal_addr_host_.Swap(&other->internal_addr_host_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
  swap(external_addr_port_, other->external_addr_port_);
}

::google::protobuf::Metadata RpcEndpointHolder::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_serializable_5fdata_2eproto);
  return ::file_level_metadata_serializable_5fdata_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace shared
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::shared::AuthTokenUnderlying* Arena::CreateMaybeMessage< ::shared::AuthTokenUnderlying >(Arena* arena) {
  return Arena::CreateInternal< ::shared::AuthTokenUnderlying >(arena);
}
template<> PROTOBUF_NOINLINE ::shared::AuthResult* Arena::CreateMaybeMessage< ::shared::AuthResult >(Arena* arena) {
  return Arena::CreateInternal< ::shared::AuthResult >(arena);
}
template<> PROTOBUF_NOINLINE ::shared::SteamAuthenticateUserTicketPayloadParams* Arena::CreateMaybeMessage< ::shared::SteamAuthenticateUserTicketPayloadParams >(Arena* arena) {
  return Arena::CreateInternal< ::shared::SteamAuthenticateUserTicketPayloadParams >(arena);
}
template<> PROTOBUF_NOINLINE ::shared::SteamAuthenticateUserTicketPayloadResp* Arena::CreateMaybeMessage< ::shared::SteamAuthenticateUserTicketPayloadResp >(Arena* arena) {
  return Arena::CreateInternal< ::shared::SteamAuthenticateUserTicketPayloadResp >(arena);
}
template<> PROTOBUF_NOINLINE ::shared::SteamAuthenticateUserTicketResult* Arena::CreateMaybeMessage< ::shared::SteamAuthenticateUserTicketResult >(Arena* arena) {
  return Arena::CreateInternal< ::shared::SteamAuthenticateUserTicketResult >(arena);
}
template<> PROTOBUF_NOINLINE ::shared::BattleInvitation* Arena::CreateMaybeMessage< ::shared::BattleInvitation >(Arena* arena) {
  return Arena::CreateInternal< ::shared::BattleInvitation >(arena);
}
template<> PROTOBUF_NOINLINE ::shared::CharacterConfig_LoopingChStatesEntry_DoNotUse* Arena::CreateMaybeMessage< ::shared::CharacterConfig_LoopingChStatesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::shared::CharacterConfig_LoopingChStatesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::shared::CharacterConfig* Arena::CreateMaybeMessage< ::shared::CharacterConfig >(Arena* arena) {
  return Arena::CreateInternal< ::shared::CharacterConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::shared::CharacterDownsync* Arena::CreateMaybeMessage< ::shared::CharacterDownsync >(Arena* arena) {
  return Arena::CreateInternal< ::shared::CharacterDownsync >(arena);
}
template<> PROTOBUF_NOINLINE ::shared::InputFrameDecoded* Arena::CreateMaybeMessage< ::shared::InputFrameDecoded >(Arena* arena) {
  return Arena::CreateInternal< ::shared::InputFrameDecoded >(arena);
}
template<> PROTOBUF_NOINLINE ::shared::InputFrameUpsync* Arena::CreateMaybeMessage< ::shared::InputFrameUpsync >(Arena* arena) {
  return Arena::CreateInternal< ::shared::InputFrameUpsync >(arena);
}
template<> PROTOBUF_NOINLINE ::shared::InputFrameDownsync* Arena::CreateMaybeMessage< ::shared::InputFrameDownsync >(Arena* arena) {
  return Arena::CreateInternal< ::shared::InputFrameDownsync >(arena);
}
template<> PROTOBUF_NOINLINE ::shared::WsReq* Arena::CreateMaybeMessage< ::shared::WsReq >(Arena* arena) {
  return Arena::CreateInternal< ::shared::WsReq >(arena);
}
template<> PROTOBUF_NOINLINE ::shared::InputBufferSnapshot* Arena::CreateMaybeMessage< ::shared::InputBufferSnapshot >(Arena* arena) {
  return Arena::CreateInternal< ::shared::InputBufferSnapshot >(arena);
}
template<> PROTOBUF_NOINLINE ::shared::PatrolCue* Arena::CreateMaybeMessage< ::shared::PatrolCue >(Arena* arena) {
  return Arena::CreateInternal< ::shared::PatrolCue >(arena);
}
template<> PROTOBUF_NOINLINE ::shared::VfxConfig* Arena::CreateMaybeMessage< ::shared::VfxConfig >(Arena* arena) {
  return Arena::CreateInternal< ::shared::VfxConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::shared::BulletConfig_CancelTransitEntry_DoNotUse* Arena::CreateMaybeMessage< ::shared::BulletConfig_CancelTransitEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::shared::BulletConfig_CancelTransitEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::shared::BulletConfig* Arena::CreateMaybeMessage< ::shared::BulletConfig >(Arena* arena) {
  return Arena::CreateInternal< ::shared::BulletConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::shared::Bullet* Arena::CreateMaybeMessage< ::shared::Bullet >(Arena* arena) {
  return Arena::CreateInternal< ::shared::Bullet >(arena);
}
template<> PROTOBUF_NOINLINE ::shared::TrapConfig* Arena::CreateMaybeMessage< ::shared::TrapConfig >(Arena* arena) {
  return Arena::CreateInternal< ::shared::TrapConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::shared::TrapConfigFromTiled* Arena::CreateMaybeMessage< ::shared::TrapConfigFromTiled >(Arena* arena) {
  return Arena::CreateInternal< ::shared::TrapConfigFromTiled >(arena);
}
template<> PROTOBUF_NOINLINE ::shared::TrapColliderAttr* Arena::CreateMaybeMessage< ::shared::TrapColliderAttr >(Arena* arena) {
  return Arena::CreateInternal< ::shared::TrapColliderAttr >(arena);
}
template<> PROTOBUF_NOINLINE ::shared::Trap* Arena::CreateMaybeMessage< ::shared::Trap >(Arena* arena) {
  return Arena::CreateInternal< ::shared::Trap >(arena);
}
template<> PROTOBUF_NOINLINE ::shared::TriggerConfig* Arena::CreateMaybeMessage< ::shared::TriggerConfig >(Arena* arena) {
  return Arena::CreateInternal< ::shared::TriggerConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::shared::PeerUdpAddr* Arena::CreateMaybeMessage< ::shared::PeerUdpAddr >(Arena* arena) {
  return Arena::CreateInternal< ::shared::PeerUdpAddr >(arena);
}
template<> PROTOBUF_NOINLINE ::shared::BattleColliderInfo* Arena::CreateMaybeMessage< ::shared::BattleColliderInfo >(Arena* arena) {
  return Arena::CreateInternal< ::shared::BattleColliderInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::shared::RenderFrame* Arena::CreateMaybeMessage< ::shared::RenderFrame >(Arena* arena) {
  return Arena::CreateInternal< ::shared::RenderFrame >(arena);
}
template<> PROTOBUF_NOINLINE ::shared::WsResp* Arena::CreateMaybeMessage< ::shared::WsResp >(Arena* arena) {
  return Arena::CreateInternal< ::shared::WsResp >(arena);
}
template<> PROTOBUF_NOINLINE ::shared::Skill* Arena::CreateMaybeMessage< ::shared::Skill >(Arena* arena) {
  return Arena::CreateInternal< ::shared::Skill >(arena);
}
template<> PROTOBUF_NOINLINE ::shared::FrameLog* Arena::CreateMaybeMessage< ::shared::FrameLog >(Arena* arena) {
  return Arena::CreateInternal< ::shared::FrameLog >(arena);
}
template<> PROTOBUF_NOINLINE ::shared::BattleResult* Arena::CreateMaybeMessage< ::shared::BattleResult >(Arena* arena) {
  return Arena::CreateInternal< ::shared::BattleResult >(arena);
}
template<> PROTOBUF_NOINLINE ::shared::DebuffConfig* Arena::CreateMaybeMessage< ::shared::DebuffConfig >(Arena* arena) {
  return Arena::CreateInternal< ::shared::DebuffConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::shared::BuffConfig* Arena::CreateMaybeMessage< ::shared::BuffConfig >(Arena* arena) {
  return Arena::CreateInternal< ::shared::BuffConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::shared::Buff* Arena::CreateMaybeMessage< ::shared::Buff >(Arena* arena) {
  return Arena::CreateInternal< ::shared::Buff >(arena);
}
template<> PROTOBUF_NOINLINE ::shared::Debuff* Arena::CreateMaybeMessage< ::shared::Debuff >(Arena* arena) {
  return Arena::CreateInternal< ::shared::Debuff >(arena);
}
template<> PROTOBUF_NOINLINE ::shared::BulletImmuneRecord* Arena::CreateMaybeMessage< ::shared::BulletImmuneRecord >(Arena* arena) {
  return Arena::CreateInternal< ::shared::BulletImmuneRecord >(arena);
}
template<> PROTOBUF_NOINLINE ::shared::ConsumableConfig* Arena::CreateMaybeMessage< ::shared::ConsumableConfig >(Arena* arena) {
  return Arena::CreateInternal< ::shared::ConsumableConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::shared::PickableSkillConfig* Arena::CreateMaybeMessage< ::shared::PickableSkillConfig >(Arena* arena) {
  return Arena::CreateInternal< ::shared::PickableSkillConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::shared::InventorySlot* Arena::CreateMaybeMessage< ::shared::InventorySlot >(Arena* arena) {
  return Arena::CreateInternal< ::shared::InventorySlot >(arena);
}
template<> PROTOBUF_NOINLINE ::shared::Inventory* Arena::CreateMaybeMessage< ::shared::Inventory >(Arena* arena) {
  return Arena::CreateInternal< ::shared::Inventory >(arena);
}
template<> PROTOBUF_NOINLINE ::shared::BattleEquipment* Arena::CreateMaybeMessage< ::shared::BattleEquipment >(Arena* arena) {
  return Arena::CreateInternal< ::shared::BattleEquipment >(arena);
}
template<> PROTOBUF_NOINLINE ::shared::PlayerSettings* Arena::CreateMaybeMessage< ::shared::PlayerSettings >(Arena* arena) {
  return Arena::CreateInternal< ::shared::PlayerSettings >(arena);
}
template<> PROTOBUF_NOINLINE ::shared::PlayerRegionProgress_RemainingDependenciesEntry_DoNotUse* Arena::CreateMaybeMessage< ::shared::PlayerRegionProgress_RemainingDependenciesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::shared::PlayerRegionProgress_RemainingDependenciesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::shared::PlayerRegionProgress_RemovedDependenciesEntry_DoNotUse* Arena::CreateMaybeMessage< ::shared::PlayerRegionProgress_RemovedDependenciesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::shared::PlayerRegionProgress_RemovedDependenciesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::shared::PlayerRegionProgress* Arena::CreateMaybeMessage< ::shared::PlayerRegionProgress >(Arena* arena) {
  return Arena::CreateInternal< ::shared::PlayerRegionProgress >(arena);
}
template<> PROTOBUF_NOINLINE ::shared::PlayerLevelProgress_RemainingDependenciesEntry_DoNotUse* Arena::CreateMaybeMessage< ::shared::PlayerLevelProgress_RemainingDependenciesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::shared::PlayerLevelProgress_RemainingDependenciesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::shared::PlayerLevelProgress_RemovedDependenciesEntry_DoNotUse* Arena::CreateMaybeMessage< ::shared::PlayerLevelProgress_RemovedDependenciesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::shared::PlayerLevelProgress_RemovedDependenciesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::shared::PlayerLevelProgress* Arena::CreateMaybeMessage< ::shared::PlayerLevelProgress >(Arena* arena) {
  return Arena::CreateInternal< ::shared::PlayerLevelProgress >(arena);
}
template<> PROTOBUF_NOINLINE ::shared::PlayerChUnlockProgress_RemainingDependenciesEntry_DoNotUse* Arena::CreateMaybeMessage< ::shared::PlayerChUnlockProgress_RemainingDependenciesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::shared::PlayerChUnlockProgress_RemainingDependenciesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::shared::PlayerChUnlockProgress_RemovedDependenciesEntry_DoNotUse* Arena::CreateMaybeMessage< ::shared::PlayerChUnlockProgress_RemovedDependenciesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::shared::PlayerChUnlockProgress_RemovedDependenciesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::shared::PlayerChUnlockProgress* Arena::CreateMaybeMessage< ::shared::PlayerChUnlockProgress >(Arena* arena) {
  return Arena::CreateInternal< ::shared::PlayerChUnlockProgress >(arena);
}
template<> PROTOBUF_NOINLINE ::shared::PlayerStoryProgress_RegionProgressDictEntry_DoNotUse* Arena::CreateMaybeMessage< ::shared::PlayerStoryProgress_RegionProgressDictEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::shared::PlayerStoryProgress_RegionProgressDictEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::shared::PlayerStoryProgress_LevelProgressDictEntry_DoNotUse* Arena::CreateMaybeMessage< ::shared::PlayerStoryProgress_LevelProgressDictEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::shared::PlayerStoryProgress_LevelProgressDictEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::shared::PlayerStoryProgress_ChUnlockProgressDictEntry_DoNotUse* Arena::CreateMaybeMessage< ::shared::PlayerStoryProgress_ChUnlockProgressDictEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::shared::PlayerStoryProgress_ChUnlockProgressDictEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::shared::PlayerStoryProgress* Arena::CreateMaybeMessage< ::shared::PlayerStoryProgress >(Arena* arena) {
  return Arena::CreateInternal< ::shared::PlayerStoryProgress >(arena);
}
template<> PROTOBUF_NOINLINE ::shared::PlayerOnlineArenaProgress_ChUnlockProgressDictEntry_DoNotUse* Arena::CreateMaybeMessage< ::shared::PlayerOnlineArenaProgress_ChUnlockProgressDictEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::shared::PlayerOnlineArenaProgress_ChUnlockProgressDictEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::shared::PlayerOnlineArenaProgress* Arena::CreateMaybeMessage< ::shared::PlayerOnlineArenaProgress >(Arena* arena) {
  return Arena::CreateInternal< ::shared::PlayerOnlineArenaProgress >(arena);
}
template<> PROTOBUF_NOINLINE ::shared::StoryPointDialogLine* Arena::CreateMaybeMessage< ::shared::StoryPointDialogLine >(Arena* arena) {
  return Arena::CreateInternal< ::shared::StoryPointDialogLine >(arena);
}
template<> PROTOBUF_NOINLINE ::shared::StoryPointStep* Arena::CreateMaybeMessage< ::shared::StoryPointStep >(Arena* arena) {
  return Arena::CreateInternal< ::shared::StoryPointStep >(arena);
}
template<> PROTOBUF_NOINLINE ::shared::StoryPoint* Arena::CreateMaybeMessage< ::shared::StoryPoint >(Arena* arena) {
  return Arena::CreateInternal< ::shared::StoryPoint >(arena);
}
template<> PROTOBUF_NOINLINE ::shared::LevelStory_PointsEntry_DoNotUse* Arena::CreateMaybeMessage< ::shared::LevelStory_PointsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::shared::LevelStory_PointsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::shared::LevelStory* Arena::CreateMaybeMessage< ::shared::LevelStory >(Arena* arena) {
  return Arena::CreateInternal< ::shared::LevelStory >(arena);
}
template<> PROTOBUF_NOINLINE ::shared::SerializableConvexPolygon* Arena::CreateMaybeMessage< ::shared::SerializableConvexPolygon >(Arena* arena) {
  return Arena::CreateInternal< ::shared::SerializableConvexPolygon >(arena);
}
template<> PROTOBUF_NOINLINE ::shared::SerializedCompletelyStaticPatrolCueCollider* Arena::CreateMaybeMessage< ::shared::SerializedCompletelyStaticPatrolCueCollider >(Arena* arena) {
  return Arena::CreateInternal< ::shared::SerializedCompletelyStaticPatrolCueCollider >(arena);
}
template<> PROTOBUF_NOINLINE ::shared::SerializedCompletelyStaticTrapCollider* Arena::CreateMaybeMessage< ::shared::SerializedCompletelyStaticTrapCollider >(Arena* arena) {
  return Arena::CreateInternal< ::shared::SerializedCompletelyStaticTrapCollider >(arena);
}
template<> PROTOBUF_NOINLINE ::shared::SerializedCompletelyStaticTriggerCollider* Arena::CreateMaybeMessage< ::shared::SerializedCompletelyStaticTriggerCollider >(Arena* arena) {
  return Arena::CreateInternal< ::shared::SerializedCompletelyStaticTriggerCollider >(arena);
}
template<> PROTOBUF_NOINLINE ::shared::TrapColliderAttrArray* Arena::CreateMaybeMessage< ::shared::TrapColliderAttrArray >(Arena* arena) {
  return Arena::CreateInternal< ::shared::TrapColliderAttrArray >(arena);
}
template<> PROTOBUF_NOINLINE ::shared::SerializedTrapLocalIdToColliderAttrs_DictEntry_DoNotUse* Arena::CreateMaybeMessage< ::shared::SerializedTrapLocalIdToColliderAttrs_DictEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::shared::SerializedTrapLocalIdToColliderAttrs_DictEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::shared::SerializedTrapLocalIdToColliderAttrs* Arena::CreateMaybeMessage< ::shared::SerializedTrapLocalIdToColliderAttrs >(Arena* arena) {
  return Arena::CreateInternal< ::shared::SerializedTrapLocalIdToColliderAttrs >(arena);
}
template<> PROTOBUF_NOINLINE ::shared::SerializedTriggerEditorIdToLocalId_DictEntry_DoNotUse* Arena::CreateMaybeMessage< ::shared::SerializedTriggerEditorIdToLocalId_DictEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::shared::SerializedTriggerEditorIdToLocalId_DictEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::shared::SerializedTriggerEditorIdToLocalId_Dict2Entry_DoNotUse* Arena::CreateMaybeMessage< ::shared::SerializedTriggerEditorIdToLocalId_Dict2Entry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::shared::SerializedTriggerEditorIdToLocalId_Dict2Entry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::shared::SerializedTriggerEditorIdToLocalId* Arena::CreateMaybeMessage< ::shared::SerializedTriggerEditorIdToLocalId >(Arena* arena) {
  return Arena::CreateInternal< ::shared::SerializedTriggerEditorIdToLocalId >(arena);
}
template<> PROTOBUF_NOINLINE ::shared::PickableConfigFromTiled* Arena::CreateMaybeMessage< ::shared::PickableConfigFromTiled >(Arena* arena) {
  return Arena::CreateInternal< ::shared::PickableConfigFromTiled >(arena);
}
template<> PROTOBUF_NOINLINE ::shared::Pickable* Arena::CreateMaybeMessage< ::shared::Pickable >(Arena* arena) {
  return Arena::CreateInternal< ::shared::Pickable >(arena);
}
template<> PROTOBUF_NOINLINE ::shared::InjectedCmdConfig* Arena::CreateMaybeMessage< ::shared::InjectedCmdConfig >(Arena* arena) {
  return Arena::CreateInternal< ::shared::InjectedCmdConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::shared::CharacterSpawnerConfig* Arena::CreateMaybeMessage< ::shared::CharacterSpawnerConfig >(Arena* arena) {
  return Arena::CreateInternal< ::shared::CharacterSpawnerConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::shared::PickableSpawnerConfig* Arena::CreateMaybeMessage< ::shared::PickableSpawnerConfig >(Arena* arena) {
  return Arena::CreateInternal< ::shared::PickableSpawnerConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::shared::TriggerColliderAttr* Arena::CreateMaybeMessage< ::shared::TriggerColliderAttr >(Arena* arena) {
  return Arena::CreateInternal< ::shared::TriggerColliderAttr >(arena);
}
template<> PROTOBUF_NOINLINE ::shared::TriggerConfigFromTiled_BossSpeciesSetEntry_DoNotUse* Arena::CreateMaybeMessage< ::shared::TriggerConfigFromTiled_BossSpeciesSetEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::shared::TriggerConfigFromTiled_BossSpeciesSetEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::shared::TriggerConfigFromTiled* Arena::CreateMaybeMessage< ::shared::TriggerConfigFromTiled >(Arena* arena) {
  return Arena::CreateInternal< ::shared::TriggerConfigFromTiled >(arena);
}
template<> PROTOBUF_NOINLINE ::shared::Trigger* Arena::CreateMaybeMessage< ::shared::Trigger >(Arena* arena) {
  return Arena::CreateInternal< ::shared::Trigger >(arena);
}
template<> PROTOBUF_NOINLINE ::shared::PlayerMetaInfo* Arena::CreateMaybeMessage< ::shared::PlayerMetaInfo >(Arena* arena) {
  return Arena::CreateInternal< ::shared::PlayerMetaInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::shared::RpcEndpointHolder* Arena::CreateMaybeMessage< ::shared::RpcEndpointHolder >(Arena* arena) {
  return Arena::CreateInternal< ::shared::RpcEndpointHolder >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
